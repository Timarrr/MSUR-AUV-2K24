
Downside.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c18  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08011eb8  08011eb8  00021eb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012354  08012354  00022354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801235c  0801235c  0002235c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012364  08012364  00022364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000007bc  24000000  08012368  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002970  240007bc  08012b24  000307bc  2**2
                  ALLOC
  8 ._user_heap_stack 00000804  2400312c  08012b24  0003312c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000307bc  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000307ea  2**0
                  CONTENTS, READONLY
 11 .debug_info   000200dd  00000000  00000000  0003082d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004146  00000000  00000000  0005090a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000019b0  00000000  00000000  00054a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000013c3  00000000  00000000  00056400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003b0ee  00000000  00000000  000577c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000200f2  00000000  00000000  000928b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017572a  00000000  00000000  000b29a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007f70  00000000  00000000  002280d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  00230040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240007bc 	.word	0x240007bc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011ea0 	.word	0x08011ea0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240007c0 	.word	0x240007c0
 80002dc:	08011ea0 	.word	0x08011ea0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <LOG_CDC_FS>:
#include "config.h"
#include <string.h>
#include <stdio.h>
#include <stdarg.h>

void LOG_CDC_FS(Severity severity, const char *fmt, ...){
 80006ac:	b40e      	push	{r1, r2, r3}
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b085      	sub	sp, #20
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	4603      	mov	r3, r0
 80006b6:	71fb      	strb	r3, [r7, #7]
	va_list args;
    va_start(args, fmt);
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	60fb      	str	r3, [r7, #12]
//	if(severity < CONF_GLOBAL_SEVERITY)
//	    	return;
	printf("[%f]:", ((float)HAL_GetTick())/1000);
 80006be:	f000 ff5b 	bl	8001578 <HAL_GetTick>
 80006c2:	ee07 0a90 	vmov	s15, r0
 80006c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006ca:	eddf 6a21 	vldr	s13, [pc, #132]	; 8000750 <LOG_CDC_FS+0xa4>
 80006ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006d6:	ec53 2b17 	vmov	r2, r3, d7
 80006da:	481e      	ldr	r0, [pc, #120]	; (8000754 <LOG_CDC_FS+0xa8>)
 80006dc:	f00c ff7e 	bl	800d5dc <printf>
    switch(severity){
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	2b05      	cmp	r3, #5
 80006e4:	d826      	bhi.n	8000734 <LOG_CDC_FS+0x88>
 80006e6:	a201      	add	r2, pc, #4	; (adr r2, 80006ec <LOG_CDC_FS+0x40>)
 80006e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ec:	08000705 	.word	0x08000705
 80006f0:	0800070d 	.word	0x0800070d
 80006f4:	08000715 	.word	0x08000715
 80006f8:	0800071d 	.word	0x0800071d
 80006fc:	08000725 	.word	0x08000725
 8000700:	0800072d 	.word	0x0800072d
	case TRACE:
		printf(" trace: ");
 8000704:	4814      	ldr	r0, [pc, #80]	; (8000758 <LOG_CDC_FS+0xac>)
 8000706:	f00c ff69 	bl	800d5dc <printf>
		break;
 800070a:	e013      	b.n	8000734 <LOG_CDC_FS+0x88>
	case DEBUG:
		printf("\033[37m debug: ");
 800070c:	4813      	ldr	r0, [pc, #76]	; (800075c <LOG_CDC_FS+0xb0>)
 800070e:	f00c ff65 	bl	800d5dc <printf>
		break;
 8000712:	e00f      	b.n	8000734 <LOG_CDC_FS+0x88>
	case INFO:
		printf("\033[36m info: ");
 8000714:	4812      	ldr	r0, [pc, #72]	; (8000760 <LOG_CDC_FS+0xb4>)
 8000716:	f00c ff61 	bl	800d5dc <printf>
		break;
 800071a:	e00b      	b.n	8000734 <LOG_CDC_FS+0x88>
	case NOTICE:
		printf("\033[36m notice: ");
 800071c:	4811      	ldr	r0, [pc, #68]	; (8000764 <LOG_CDC_FS+0xb8>)
 800071e:	f00c ff5d 	bl	800d5dc <printf>
		break;
 8000722:	e007      	b.n	8000734 <LOG_CDC_FS+0x88>
	case WARN:
		printf("\033[33m warn: ");
 8000724:	4810      	ldr	r0, [pc, #64]	; (8000768 <LOG_CDC_FS+0xbc>)
 8000726:	f00c ff59 	bl	800d5dc <printf>
		break;
 800072a:	e003      	b.n	8000734 <LOG_CDC_FS+0x88>
	case ERR:
		printf("\033[31;1m err: ");
 800072c:	480f      	ldr	r0, [pc, #60]	; (800076c <LOG_CDC_FS+0xc0>)
 800072e:	f00c ff55 	bl	800d5dc <printf>
		break;
 8000732:	bf00      	nop
	}

    vprintf(fmt, args);
 8000734:	68f9      	ldr	r1, [r7, #12]
 8000736:	69f8      	ldr	r0, [r7, #28]
 8000738:	f00c fffc 	bl	800d734 <vprintf>
    printf("\033[0m\r\n");
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <LOG_CDC_FS+0xc4>)
 800073e:	f00c ffad 	bl	800d69c <puts>
    va_end(args);
}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800074c:	b003      	add	sp, #12
 800074e:	4770      	bx	lr
 8000750:	447a0000 	.word	0x447a0000
 8000754:	08011eb8 	.word	0x08011eb8
 8000758:	08011ec0 	.word	0x08011ec0
 800075c:	08011ecc 	.word	0x08011ecc
 8000760:	08011edc 	.word	0x08011edc
 8000764:	08011eec 	.word	0x08011eec
 8000768:	08011efc 	.word	0x08011efc
 800076c:	08011f0c 	.word	0x08011f0c
 8000770:	08011f1c 	.word	0x08011f1c

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800077a:	4b62      	ldr	r3, [pc, #392]	; (8000904 <main+0x190>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000782:	2b00      	cmp	r3, #0
 8000784:	d11b      	bne.n	80007be <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000786:	f3bf 8f4f 	dsb	sy
}
 800078a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800078c:	f3bf 8f6f 	isb	sy
}
 8000790:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000792:	4b5c      	ldr	r3, [pc, #368]	; (8000904 <main+0x190>)
 8000794:	2200      	movs	r2, #0
 8000796:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800079a:	f3bf 8f4f 	dsb	sy
}
 800079e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007a0:	f3bf 8f6f 	isb	sy
}
 80007a4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007a6:	4b57      	ldr	r3, [pc, #348]	; (8000904 <main+0x190>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	4a56      	ldr	r2, [pc, #344]	; (8000904 <main+0x190>)
 80007ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007b2:	f3bf 8f4f 	dsb	sy
}
 80007b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007b8:	f3bf 8f6f 	isb	sy
}
 80007bc:	e000      	b.n	80007c0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007be:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007c0:	4b50      	ldr	r3, [pc, #320]	; (8000904 <main+0x190>)
 80007c2:	695b      	ldr	r3, [r3, #20]
 80007c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d138      	bne.n	800083e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80007cc:	4b4d      	ldr	r3, [pc, #308]	; (8000904 <main+0x190>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007d4:	f3bf 8f4f 	dsb	sy
}
 80007d8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80007da:	4b4a      	ldr	r3, [pc, #296]	; (8000904 <main+0x190>)
 80007dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007e0:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	0b5b      	lsrs	r3, r3, #13
 80007e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80007ea:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	08db      	lsrs	r3, r3, #3
 80007f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007f4:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	015a      	lsls	r2, r3, #5
 80007fa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80007fe:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000800:	683a      	ldr	r2, [r7, #0]
 8000802:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000804:	493f      	ldr	r1, [pc, #252]	; (8000904 <main+0x190>)
 8000806:	4313      	orrs	r3, r2
 8000808:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	1e5a      	subs	r2, r3, #1
 8000810:	603a      	str	r2, [r7, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1ef      	bne.n	80007f6 <main+0x82>
    } while(sets-- != 0U);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	1e5a      	subs	r2, r3, #1
 800081a:	607a      	str	r2, [r7, #4]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1e5      	bne.n	80007ec <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000820:	f3bf 8f4f 	dsb	sy
}
 8000824:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000826:	4b37      	ldr	r3, [pc, #220]	; (8000904 <main+0x190>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	4a36      	ldr	r2, [pc, #216]	; (8000904 <main+0x190>)
 800082c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000830:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000832:	f3bf 8f4f 	dsb	sy
}
 8000836:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000838:	f3bf 8f6f 	isb	sy
}
 800083c:	e000      	b.n	8000840 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800083e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000840:	f000 fe14 	bl	800146c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000844:	f000 f86a 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000848:	f000 fa64 	bl	8000d14 <MX_GPIO_Init>
  MX_DMA_Init();
 800084c:	f000 fa3a 	bl	8000cc4 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000850:	f00c f894 	bl	800c97c <MX_USB_DEVICE_Init>
  MX_HRTIM_Init();
 8000854:	f000 f8e0 	bl	8000a18 <MX_HRTIM_Init>
  MX_TIM16_Init();
 8000858:	f000 f9be 	bl	8000bd8 <MX_TIM16_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t oldtick = HAL_GetTick();
 800085c:	f000 fe8c 	bl	8001578 <HAL_GetTick>
 8000860:	6178      	str	r0, [r7, #20]
  uint32_t newtick = HAL_GetTick();
 8000862:	f000 fe89 	bl	8001578 <HAL_GetTick>
 8000866:	60f8      	str	r0, [r7, #12]
  int thing1 = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
  while (1)
  {
	  memset(CDCRxBufferFS, '\0', 2048);
 800086c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000870:	2100      	movs	r1, #0
 8000872:	4825      	ldr	r0, [pc, #148]	; (8000908 <main+0x194>)
 8000874:	f00c ff68 	bl	800d748 <memset>

	  CDC_OTG_Recv(CDCRxBufferFS);
 8000878:	4823      	ldr	r0, [pc, #140]	; (8000908 <main+0x194>)
 800087a:	f00c f86d 	bl	800c958 <CDC_OTG_Recv>
	  if(strlen(CDCRxBufferFS) > 0){
 800087e:	4b22      	ldr	r3, [pc, #136]	; (8000908 <main+0x194>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d025      	beq.n	80008d2 <main+0x15e>
		  LOG_CDC_FS(TRACE, CDCRxBufferFS);
 8000886:	4920      	ldr	r1, [pc, #128]	; (8000908 <main+0x194>)
 8000888:	2000      	movs	r0, #0
 800088a:	f7ff ff0f 	bl	80006ac <LOG_CDC_FS>
		  if(strcmp(CDCRxBufferFS, "a")==0)
 800088e:	491f      	ldr	r1, [pc, #124]	; (800090c <main+0x198>)
 8000890:	481d      	ldr	r0, [pc, #116]	; (8000908 <main+0x194>)
 8000892:	f7ff fd25 	bl	80002e0 <strcmp>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d103      	bne.n	80008a4 <main+0x130>
		  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800089c:	2101      	movs	r1, #1
 800089e:	481c      	ldr	r0, [pc, #112]	; (8000910 <main+0x19c>)
 80008a0:	f002 fe41 	bl	8003526 <HAL_GPIO_TogglePin>
		  if(strcmp(CDCRxBufferFS, "s")==0)
 80008a4:	491b      	ldr	r1, [pc, #108]	; (8000914 <main+0x1a0>)
 80008a6:	4818      	ldr	r0, [pc, #96]	; (8000908 <main+0x194>)
 80008a8:	f7ff fd1a 	bl	80002e0 <strcmp>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d103      	bne.n	80008ba <main+0x146>
		    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80008b2:	2180      	movs	r1, #128	; 0x80
 80008b4:	4816      	ldr	r0, [pc, #88]	; (8000910 <main+0x19c>)
 80008b6:	f002 fe36 	bl	8003526 <HAL_GPIO_TogglePin>
		  if(strcmp(CDCRxBufferFS, "d")==0)
 80008ba:	4917      	ldr	r1, [pc, #92]	; (8000918 <main+0x1a4>)
 80008bc:	4812      	ldr	r0, [pc, #72]	; (8000908 <main+0x194>)
 80008be:	f7ff fd0f 	bl	80002e0 <strcmp>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d104      	bne.n	80008d2 <main+0x15e>
		  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80008c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008cc:	4810      	ldr	r0, [pc, #64]	; (8000910 <main+0x19c>)
 80008ce:	f002 fe2a 	bl	8003526 <HAL_GPIO_TogglePin>

	  }

	  newtick = HAL_GetTick();
 80008d2:	f000 fe51 	bl	8001578 <HAL_GetTick>
 80008d6:	60f8      	str	r0, [r7, #12]
	  if(oldtick + 50 < newtick){
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	3332      	adds	r3, #50	; 0x32
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d9c4      	bls.n	800086c <main+0xf8>
//		  LOG_CDC_FS(INFO, "Interrupts from last %d ms: %d from TimM, %d from TimA, %d from TimB, %d from TIM16", newtick - oldtick, TimMInterrupts, TimAInterrupts, TimBInterrupts, Tim16Interrupts);
//		  LOG_CDC_FS(INFO, "status: %3d   Timers' CNTs: %d from TimM, %d from TimA, %d from TimB, %d from TIM16", (int)hhrtim.State, HRTIM1->sMasterRegs.MCNTR, HRTIM1->sTimerxRegs[0].CNTxR, HRTIM1->sTimerxRegs[1].CNTxR, TIM16->CNT);
//		  LOG_CDC_FS(INFO, "whatever: ", HRTIM1->sMasterRegs.MCMP1R);
		  oldtick = newtick;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	617b      	str	r3, [r7, #20]
		  GPIOB->BSRR = ((1 << 7) << (16 * thing1));
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	011b      	lsls	r3, r3, #4
 80008ea:	2280      	movs	r2, #128	; 0x80
 80008ec:	409a      	lsls	r2, r3
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <main+0x19c>)
 80008f0:	619a      	str	r2, [r3, #24]
		  thing1 = !thing1;
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	bf0c      	ite	eq
 80008f8:	2301      	moveq	r3, #1
 80008fa:	2300      	movne	r3, #0
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	613b      	str	r3, [r7, #16]
  {
 8000900:	e7b4      	b.n	800086c <main+0xf8>
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00
 8000908:	240009f0 	.word	0x240009f0
 800090c:	08011f24 	.word	0x08011f24
 8000910:	58020400 	.word	0x58020400
 8000914:	08011f28 	.word	0x08011f28
 8000918:	08011f2c 	.word	0x08011f2c

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b09c      	sub	sp, #112	; 0x70
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000926:	224c      	movs	r2, #76	; 0x4c
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f00c ff0c 	bl	800d748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2220      	movs	r2, #32
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f00c ff06 	bl	800d748 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800093c:	2002      	movs	r0, #2
 800093e:	f005 f997 	bl	8005c70 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b32      	ldr	r3, [pc, #200]	; (8000a10 <SystemClock_Config+0xf4>)
 8000948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800094a:	4a31      	ldr	r2, [pc, #196]	; (8000a10 <SystemClock_Config+0xf4>)
 800094c:	f023 0301 	bic.w	r3, r3, #1
 8000950:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000952:	4b2f      	ldr	r3, [pc, #188]	; (8000a10 <SystemClock_Config+0xf4>)
 8000954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	4b2d      	ldr	r3, [pc, #180]	; (8000a14 <SystemClock_Config+0xf8>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a2c      	ldr	r2, [pc, #176]	; (8000a14 <SystemClock_Config+0xf8>)
 8000962:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b2a      	ldr	r3, [pc, #168]	; (8000a14 <SystemClock_Config+0xf8>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000974:	bf00      	nop
 8000976:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <SystemClock_Config+0xf8>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800097e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000982:	d1f8      	bne.n	8000976 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000984:	2322      	movs	r3, #34	; 0x22
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000988:	2301      	movs	r3, #1
 800098a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800098c:	2340      	movs	r3, #64	; 0x40
 800098e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000990:	2301      	movs	r3, #1
 8000992:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000994:	2302      	movs	r3, #2
 8000996:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000998:	2300      	movs	r3, #0
 800099a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800099c:	2304      	movs	r3, #4
 800099e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 80009a0:	2332      	movs	r3, #50	; 0x32
 80009a2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009ac:	2302      	movs	r3, #2
 80009ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009b0:	230c      	movs	r3, #12
 80009b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c0:	4618      	mov	r0, r3
 80009c2:	f005 f99f 	bl	8005d04 <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009cc:	f000 fa0c 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d0:	233f      	movs	r3, #63	; 0x3f
 80009d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d4:	2303      	movs	r3, #3
 80009d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009dc:	2308      	movs	r3, #8
 80009de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009e0:	2340      	movs	r3, #64	; 0x40
 80009e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009e4:	2340      	movs	r3, #64	; 0x40
 80009e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2102      	movs	r1, #2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f005 fdde 	bl	80065b8 <HAL_RCC_ClockConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000a02:	f000 f9f1 	bl	8000de8 <Error_Handler>
  }
}
 8000a06:	bf00      	nop
 8000a08:	3770      	adds	r7, #112	; 0x70
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	58000400 	.word	0x58000400
 8000a14:	58024800 	.word	0x58024800

08000a18 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b09c      	sub	sp, #112	; 0x70
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000a1e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	2254      	movs	r2, #84	; 0x54
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f00c fe87 	bl	800d748 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8000a44:	4b5f      	ldr	r3, [pc, #380]	; (8000bc4 <MX_HRTIM_Init+0x1ac>)
 8000a46:	4a60      	ldr	r2, [pc, #384]	; (8000bc8 <MX_HRTIM_Init+0x1b0>)
 8000a48:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000a4a:	4b5e      	ldr	r3, [pc, #376]	; (8000bc4 <MX_HRTIM_Init+0x1ac>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000a50:	4b5c      	ldr	r3, [pc, #368]	; (8000bc4 <MX_HRTIM_Init+0x1ac>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8000a56:	485b      	ldr	r0, [pc, #364]	; (8000bc4 <MX_HRTIM_Init+0x1ac>)
 8000a58:	f002 fd80 	bl	800355c <HAL_HRTIM_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_HRTIM_Init+0x4e>
  {
    Error_Handler();
 8000a62:	f000 f9c1 	bl	8000de8 <Error_Handler>
  }
  pTimeBaseCfg.Period = 668*20;
 8000a66:	f243 4330 	movw	r3, #13360	; 0x3430
 8000a6a:	663b      	str	r3, [r7, #96]	; 0x60
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	667b      	str	r3, [r7, #100]	; 0x64
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000a70:	2305      	movs	r3, #5
 8000a72:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000a74:	2308      	movs	r3, #8
 8000a76:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 8000a78:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	2105      	movs	r1, #5
 8000a80:	4850      	ldr	r0, [pc, #320]	; (8000bc4 <MX_HRTIM_Init+0x1ac>)
 8000a82:	f002 fe3b 	bl	80036fc <HAL_HRTIM_TimeBaseConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_HRTIM_Init+0x78>
  {
    Error_Handler();
 8000a8c:	f000 f9ac 	bl	8000de8 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
  pTimerCfg.DMASrcAddress = 0x0000;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  pTimerCfg.DMADstAddress = 0x0000;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMASize = 0x1;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61fb      	str	r3, [r7, #28]
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8000ab4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ab8:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000aba:	2300      	movs	r3, #0
 8000abc:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	461a      	mov	r2, r3
 8000acc:	2105      	movs	r1, #5
 8000ace:	483d      	ldr	r0, [pc, #244]	; (8000bc4 <MX_HRTIM_Init+0x1ac>)
 8000ad0:	f002 fe3c 	bl	800374c <HAL_HRTIM_WaveformTimerConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_HRTIM_Init+0xc6>
  {
    Error_Handler();
 8000ada:	f000 f985 	bl	8000de8 <Error_Handler>
  }
  pCompareCfg.CompareValue = 668;
 8000ade:	f44f 7327 	mov.w	r3, #668	; 0x29c
 8000ae2:	603b      	str	r3, [r7, #0]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	2105      	movs	r1, #5
 8000aea:	4836      	ldr	r0, [pc, #216]	; (8000bc4 <MX_HRTIM_Init+0x1ac>)
 8000aec:	f002 fea0 	bl	8003830 <HAL_HRTIM_WaveformCompareConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_HRTIM_Init+0xe2>
  {
    Error_Handler();
 8000af6:	f000 f977 	bl	8000de8 <Error_Handler>
  }
  pTimeBaseCfg.Period = 500*20;
 8000afa:	f242 7310 	movw	r3, #10000	; 0x2710
 8000afe:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000b00:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b04:	461a      	mov	r2, r3
 8000b06:	2100      	movs	r1, #0
 8000b08:	482e      	ldr	r0, [pc, #184]	; (8000bc4 <MX_HRTIM_Init+0x1ac>)
 8000b0a:	f002 fdf7 	bl	80036fc <HAL_HRTIM_TimeBaseConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_HRTIM_Init+0x100>
  {
    Error_Handler();
 8000b14:	f000 f968 	bl	8000de8 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_RST;
 8000b1c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b20:	613b      	str	r3, [r7, #16]
  pTimerCfg.DMASrcAddress = &DMA_GPIOB_On;
 8000b22:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <MX_HRTIM_Init+0x1b4>)
 8000b24:	617b      	str	r3, [r7, #20]
  pTimerCfg.DMADstAddress = &GPIOB->BSRR;
 8000b26:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <MX_HRTIM_Init+0x1b8>)
 8000b28:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMASize = 0x4;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	61fb      	str	r3, [r7, #28]
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	461a      	mov	r2, r3
 8000b54:	2100      	movs	r1, #0
 8000b56:	481b      	ldr	r0, [pc, #108]	; (8000bc4 <MX_HRTIM_Init+0x1ac>)
 8000b58:	f002 fdf8 	bl	800374c <HAL_HRTIM_WaveformTimerConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_HRTIM_Init+0x14e>
  {
    Error_Handler();
 8000b62:	f000 f941 	bl	8000de8 <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = &DMA_GPIOB_Off;
 8000b66:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <MX_HRTIM_Init+0x1bc>)
 8000b68:	617b      	str	r3, [r7, #20]
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	461a      	mov	r2, r3
 8000b70:	2101      	movs	r1, #1
 8000b72:	4814      	ldr	r0, [pc, #80]	; (8000bc4 <MX_HRTIM_Init+0x1ac>)
 8000b74:	f002 fdea 	bl	800374c <HAL_HRTIM_WaveformTimerConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_HRTIM_Init+0x16a>
  {
    Error_Handler();
 8000b7e:	f000 f933 	bl	8000de8 <Error_Handler>
  }
  pCompareCfg.CompareValue = 500;
 8000b82:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b86:	603b      	str	r3, [r7, #0]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000b88:	463b      	mov	r3, r7
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <MX_HRTIM_Init+0x1ac>)
 8000b90:	f002 fe4e 	bl	8003830 <HAL_HRTIM_WaveformCompareConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_HRTIM_Init+0x186>
  {
    Error_Handler();
 8000b9a:	f000 f925 	bl	8000de8 <Error_Handler>
  }
  pTimeBaseCfg.Period = 250*20;
 8000b9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ba2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000ba4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000ba8:	461a      	mov	r2, r3
 8000baa:	2101      	movs	r1, #1
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_HRTIM_Init+0x1ac>)
 8000bae:	f002 fda5 	bl	80036fc <HAL_HRTIM_TimeBaseConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_HRTIM_Init+0x1a4>
  {
    Error_Handler();
 8000bb8:	f000 f916 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	3770      	adds	r7, #112	; 0x70
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	240007d8 	.word	0x240007d8
 8000bc8:	40017400 	.word	0x40017400
 8000bcc:	24000000 	.word	0x24000000
 8000bd0:	58020418 	.word	0x58020418
 8000bd4:	24000004 	.word	0x24000004

08000bd8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b092      	sub	sp, #72	; 0x48
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
 8000bee:	615a      	str	r2, [r3, #20]
 8000bf0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	222c      	movs	r2, #44	; 0x2c
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f00c fda5 	bl	800d748 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000bfe:	4b2f      	ldr	r3, [pc, #188]	; (8000cbc <MX_TIM16_Init+0xe4>)
 8000c00:	4a2f      	ldr	r2, [pc, #188]	; (8000cc0 <MX_TIM16_Init+0xe8>)
 8000c02:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 120;
 8000c04:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <MX_TIM16_Init+0xe4>)
 8000c06:	2278      	movs	r2, #120	; 0x78
 8000c08:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0a:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <MX_TIM16_Init+0xe4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 15;
 8000c10:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <MX_TIM16_Init+0xe4>)
 8000c12:	220f      	movs	r2, #15
 8000c14:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c16:	4b29      	ldr	r3, [pc, #164]	; (8000cbc <MX_TIM16_Init+0xe4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 255;
 8000c1c:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <MX_TIM16_Init+0xe4>)
 8000c1e:	22ff      	movs	r2, #255	; 0xff
 8000c20:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <MX_TIM16_Init+0xe4>)
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c28:	4824      	ldr	r0, [pc, #144]	; (8000cbc <MX_TIM16_Init+0xe4>)
 8000c2a:	f007 fb93 	bl	8008354 <HAL_TIM_Base_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000c34:	f000 f8d8 	bl	8000de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000c38:	4820      	ldr	r0, [pc, #128]	; (8000cbc <MX_TIM16_Init+0xe4>)
 8000c3a:	f007 fbe2 	bl	8008402 <HAL_TIM_PWM_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000c44:	f000 f8d0 	bl	8000de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c48:	2360      	movs	r3, #96	; 0x60
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c50:	2300      	movs	r3, #0
 8000c52:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c54:	2300      	movs	r3, #0
 8000c56:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c60:	2300      	movs	r3, #0
 8000c62:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4813      	ldr	r0, [pc, #76]	; (8000cbc <MX_TIM16_Init+0xe4>)
 8000c6e:	f007 fd49 	bl	8008704 <HAL_TIM_PWM_ConfigChannel>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8000c78:	f000 f8b6 	bl	8000de8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c94:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4806      	ldr	r0, [pc, #24]	; (8000cbc <MX_TIM16_Init+0xe4>)
 8000ca4:	f008 f9e4 	bl	8009070 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8000cae:	f000 f89b 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	3748      	adds	r7, #72	; 0x48
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	240009a4 	.word	0x240009a4
 8000cc0:	40014400 	.word	0x40014400

08000cc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_DMA_Init+0x4c>)
 8000ccc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cd0:	4a0f      	ldr	r2, [pc, #60]	; (8000d10 <MX_DMA_Init+0x4c>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cda:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <MX_DMA_Init+0x4c>)
 8000cdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	200b      	movs	r0, #11
 8000cee:	f000 fd5a 	bl	80017a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cf2:	200b      	movs	r0, #11
 8000cf4:	f000 fd71 	bl	80017da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	200c      	movs	r0, #12
 8000cfe:	f000 fd52 	bl	80017a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d02:	200c      	movs	r0, #12
 8000d04:	f000 fd69 	bl	80017da <HAL_NVIC_EnableIRQ>

}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	58024400 	.word	0x58024400

08000d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	f107 030c 	add.w	r3, r7, #12
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d2a:	4b2c      	ldr	r3, [pc, #176]	; (8000ddc <MX_GPIO_Init+0xc8>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	4a2a      	ldr	r2, [pc, #168]	; (8000ddc <MX_GPIO_Init+0xc8>)
 8000d32:	f043 0320 	orr.w	r3, r3, #32
 8000d36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3a:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <MX_GPIO_Init+0xc8>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	f003 0320 	and.w	r3, r3, #32
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d48:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <MX_GPIO_Init+0xc8>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4e:	4a23      	ldr	r2, [pc, #140]	; (8000ddc <MX_GPIO_Init+0xc8>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d58:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <MX_GPIO_Init+0xc8>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <MX_GPIO_Init+0xc8>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6c:	4a1b      	ldr	r2, [pc, #108]	; (8000ddc <MX_GPIO_Init+0xc8>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <MX_GPIO_Init+0xc8>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d84:	2200      	movs	r2, #0
 8000d86:	21ff      	movs	r1, #255	; 0xff
 8000d88:	4815      	ldr	r0, [pc, #84]	; (8000de0 <MX_GPIO_Init+0xcc>)
 8000d8a:	f002 fbb3 	bl	80034f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d94:	4813      	ldr	r0, [pc, #76]	; (8000de4 <MX_GPIO_Init+0xd0>)
 8000d96:	f002 fbad 	bl	80034f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d9a:	23ff      	movs	r3, #255	; 0xff
 8000d9c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4619      	mov	r1, r3
 8000db0:	480b      	ldr	r0, [pc, #44]	; (8000de0 <MX_GPIO_Init+0xcc>)
 8000db2:	f002 f9ef 	bl	8003194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000db6:	f244 0381 	movw	r3, #16513	; 0x4081
 8000dba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_GPIO_Init+0xd0>)
 8000dd0:	f002 f9e0 	bl	8003194 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	58024400 	.word	0x58024400
 8000de0:	58021400 	.word	0x58021400
 8000de4:	58020400 	.word	0x58020400

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000df0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000df4:	4803      	ldr	r0, [pc, #12]	; (8000e04 <Error_Handler+0x1c>)
 8000df6:	f002 fb96 	bl	8003526 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000dfa:	2064      	movs	r0, #100	; 0x64
 8000dfc:	f000 fbc8 	bl	8001590 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000e00:	e7f6      	b.n	8000df0 <Error_Handler+0x8>
 8000e02:	bf00      	nop
 8000e04:	58020400 	.word	0x58020400

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_MspInit+0x30>)
 8000e10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e14:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <HAL_MspInit+0x30>)
 8000e16:	f043 0302 	orr.w	r3, r3, #2
 8000e1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_MspInit+0x30>)
 8000e20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	58024400 	.word	0x58024400

08000e3c <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b0b4      	sub	sp, #208	; 0xd0
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	22c0      	movs	r2, #192	; 0xc0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f00c fc7b 	bl	800d748 <memset>
  if(hhrtim->Instance==HRTIM1)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a51      	ldr	r2, [pc, #324]	; (8000f9c <HAL_HRTIM_MspInit+0x160>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	f040 809b 	bne.w	8000f94 <HAL_HRTIM_MspInit+0x158>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8000e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e62:	f04f 0300 	mov.w	r3, #0
 8000e66:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_CPUCLK;
 8000e6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	4618      	mov	r0, r3
 8000e78:	f005 fefe 	bl	8006c78 <HAL_RCCEx_PeriphCLKConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_HRTIM_MspInit+0x4a>
    {
      Error_Handler();
 8000e82:	f7ff ffb1 	bl	8000de8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8000e86:	4b46      	ldr	r3, [pc, #280]	; (8000fa0 <HAL_HRTIM_MspInit+0x164>)
 8000e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e8c:	4a44      	ldr	r2, [pc, #272]	; (8000fa0 <HAL_HRTIM_MspInit+0x164>)
 8000e8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e96:	4b42      	ldr	r3, [pc, #264]	; (8000fa0 <HAL_HRTIM_MspInit+0x164>)
 8000e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]

    /* HRTIM1 DMA Init */
    /* HRTIM1_A Init */
    hdma_hrtim1_a.Instance = DMA1_Stream0;
 8000ea4:	4b3f      	ldr	r3, [pc, #252]	; (8000fa4 <HAL_HRTIM_MspInit+0x168>)
 8000ea6:	4a40      	ldr	r2, [pc, #256]	; (8000fa8 <HAL_HRTIM_MspInit+0x16c>)
 8000ea8:	601a      	str	r2, [r3, #0]
    hdma_hrtim1_a.Init.Request = DMA_REQUEST_HRTIM_TIMER_A;
 8000eaa:	4b3e      	ldr	r3, [pc, #248]	; (8000fa4 <HAL_HRTIM_MspInit+0x168>)
 8000eac:	2260      	movs	r2, #96	; 0x60
 8000eae:	605a      	str	r2, [r3, #4]
    hdma_hrtim1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eb0:	4b3c      	ldr	r3, [pc, #240]	; (8000fa4 <HAL_HRTIM_MspInit+0x168>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
    hdma_hrtim1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb6:	4b3b      	ldr	r3, [pc, #236]	; (8000fa4 <HAL_HRTIM_MspInit+0x168>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
    hdma_hrtim1_a.Init.MemInc = DMA_MINC_ENABLE;
 8000ebc:	4b39      	ldr	r3, [pc, #228]	; (8000fa4 <HAL_HRTIM_MspInit+0x168>)
 8000ebe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ec2:	611a      	str	r2, [r3, #16]
    hdma_hrtim1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ec4:	4b37      	ldr	r3, [pc, #220]	; (8000fa4 <HAL_HRTIM_MspInit+0x168>)
 8000ec6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eca:	615a      	str	r2, [r3, #20]
    hdma_hrtim1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ecc:	4b35      	ldr	r3, [pc, #212]	; (8000fa4 <HAL_HRTIM_MspInit+0x168>)
 8000ece:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ed2:	619a      	str	r2, [r3, #24]
    hdma_hrtim1_a.Init.Mode = DMA_NORMAL;
 8000ed4:	4b33      	ldr	r3, [pc, #204]	; (8000fa4 <HAL_HRTIM_MspInit+0x168>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
    hdma_hrtim1_a.Init.Priority = DMA_PRIORITY_LOW;
 8000eda:	4b32      	ldr	r3, [pc, #200]	; (8000fa4 <HAL_HRTIM_MspInit+0x168>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	621a      	str	r2, [r3, #32]
    hdma_hrtim1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ee0:	4b30      	ldr	r3, [pc, #192]	; (8000fa4 <HAL_HRTIM_MspInit+0x168>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_hrtim1_a) != HAL_OK)
 8000ee6:	482f      	ldr	r0, [pc, #188]	; (8000fa4 <HAL_HRTIM_MspInit+0x168>)
 8000ee8:	f000 fc92 	bl	8001810 <HAL_DMA_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_HRTIM_MspInit+0xba>
    {
      Error_Handler();
 8000ef2:	f7ff ff79 	bl	8000de8 <Error_Handler>
    }

    __HAL_LINKDMA(hhrtim,hdmaTimerA,hdma_hrtim1_a);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a2a      	ldr	r2, [pc, #168]	; (8000fa4 <HAL_HRTIM_MspInit+0x168>)
 8000efa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8000efe:	4a29      	ldr	r2, [pc, #164]	; (8000fa4 <HAL_HRTIM_MspInit+0x168>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6393      	str	r3, [r2, #56]	; 0x38

    /* HRTIM1_B Init */
    hdma_hrtim1_b.Instance = DMA1_Stream1;
 8000f04:	4b29      	ldr	r3, [pc, #164]	; (8000fac <HAL_HRTIM_MspInit+0x170>)
 8000f06:	4a2a      	ldr	r2, [pc, #168]	; (8000fb0 <HAL_HRTIM_MspInit+0x174>)
 8000f08:	601a      	str	r2, [r3, #0]
    hdma_hrtim1_b.Init.Request = DMA_REQUEST_HRTIM_TIMER_B;
 8000f0a:	4b28      	ldr	r3, [pc, #160]	; (8000fac <HAL_HRTIM_MspInit+0x170>)
 8000f0c:	2261      	movs	r2, #97	; 0x61
 8000f0e:	605a      	str	r2, [r3, #4]
    hdma_hrtim1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f10:	4b26      	ldr	r3, [pc, #152]	; (8000fac <HAL_HRTIM_MspInit+0x170>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
    hdma_hrtim1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f16:	4b25      	ldr	r3, [pc, #148]	; (8000fac <HAL_HRTIM_MspInit+0x170>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
    hdma_hrtim1_b.Init.MemInc = DMA_MINC_ENABLE;
 8000f1c:	4b23      	ldr	r3, [pc, #140]	; (8000fac <HAL_HRTIM_MspInit+0x170>)
 8000f1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f22:	611a      	str	r2, [r3, #16]
    hdma_hrtim1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f24:	4b21      	ldr	r3, [pc, #132]	; (8000fac <HAL_HRTIM_MspInit+0x170>)
 8000f26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f2a:	615a      	str	r2, [r3, #20]
    hdma_hrtim1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <HAL_HRTIM_MspInit+0x170>)
 8000f2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f32:	619a      	str	r2, [r3, #24]
    hdma_hrtim1_b.Init.Mode = DMA_NORMAL;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <HAL_HRTIM_MspInit+0x170>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
    hdma_hrtim1_b.Init.Priority = DMA_PRIORITY_LOW;
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <HAL_HRTIM_MspInit+0x170>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
    hdma_hrtim1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f40:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <HAL_HRTIM_MspInit+0x170>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_hrtim1_b) != HAL_OK)
 8000f46:	4819      	ldr	r0, [pc, #100]	; (8000fac <HAL_HRTIM_MspInit+0x170>)
 8000f48:	f000 fc62 	bl	8001810 <HAL_DMA_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_HRTIM_MspInit+0x11a>
    {
      Error_Handler();
 8000f52:	f7ff ff49 	bl	8000de8 <Error_Handler>
    }

    __HAL_LINKDMA(hhrtim,hdmaTimerB,hdma_hrtim1_b);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a14      	ldr	r2, [pc, #80]	; (8000fac <HAL_HRTIM_MspInit+0x170>)
 8000f5a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8000f5e:	4a13      	ldr	r2, [pc, #76]	; (8000fac <HAL_HRTIM_MspInit+0x170>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6393      	str	r3, [r2, #56]	; 0x38

    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_Master_IRQn, 0, 0);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2100      	movs	r1, #0
 8000f68:	2067      	movs	r0, #103	; 0x67
 8000f6a:	f000 fc1c 	bl	80017a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_Master_IRQn);
 8000f6e:	2067      	movs	r0, #103	; 0x67
 8000f70:	f000 fc33 	bl	80017da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2100      	movs	r1, #0
 8000f78:	2068      	movs	r0, #104	; 0x68
 8000f7a:	f000 fc14 	bl	80017a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8000f7e:	2068      	movs	r0, #104	; 0x68
 8000f80:	f000 fc2b 	bl	80017da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIMB_IRQn, 0, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	2069      	movs	r0, #105	; 0x69
 8000f8a:	f000 fc0c 	bl	80017a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMB_IRQn);
 8000f8e:	2069      	movs	r0, #105	; 0x69
 8000f90:	f000 fc23 	bl	80017da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8000f94:	bf00      	nop
 8000f96:	37d0      	adds	r7, #208	; 0xd0
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40017400 	.word	0x40017400
 8000fa0:	58024400 	.word	0x58024400
 8000fa4:	240008b4 	.word	0x240008b4
 8000fa8:	40020010 	.word	0x40020010
 8000fac:	2400092c 	.word	0x2400092c
 8000fb0:	40020028 	.word	0x40020028

08000fb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <HAL_TIM_Base_MspInit+0x48>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d116      	bne.n	8000ff4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_TIM_Base_MspInit+0x4c>)
 8000fc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fcc:	4a0c      	ldr	r2, [pc, #48]	; (8001000 <HAL_TIM_Base_MspInit+0x4c>)
 8000fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_TIM_Base_MspInit+0x4c>)
 8000fd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2075      	movs	r0, #117	; 0x75
 8000fea:	f000 fbdc 	bl	80017a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000fee:	2075      	movs	r0, #117	; 0x75
 8000ff0:	f000 fbf3 	bl	80017da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40014400 	.word	0x40014400
 8001000:	58024400 	.word	0x58024400

08001004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
	  GPIOB->BSRR = 1;
 8001008:	4b01      	ldr	r3, [pc, #4]	; (8001010 <NMI_Handler+0xc>)
 800100a:	2201      	movs	r2, #1
 800100c:	619a      	str	r2, [r3, #24]
 800100e:	e7fb      	b.n	8001008 <NMI_Handler+0x4>
 8001010:	58020400 	.word	0x58020400

08001014 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <HardFault_Handler+0x4>
	...

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  GPIOB->BSRR = 1;
 8001020:	4b01      	ldr	r3, [pc, #4]	; (8001028 <MemManage_Handler+0xc>)
 8001022:	2201      	movs	r2, #1
 8001024:	619a      	str	r2, [r3, #24]
 8001026:	e7fb      	b.n	8001020 <MemManage_Handler+0x4>
 8001028:	58020400 	.word	0x58020400

0800102c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  GPIOB->BSRR = 1;
 8001030:	4b01      	ldr	r3, [pc, #4]	; (8001038 <BusFault_Handler+0xc>)
 8001032:	2201      	movs	r2, #1
 8001034:	619a      	str	r2, [r3, #24]
 8001036:	e7fb      	b.n	8001030 <BusFault_Handler+0x4>
 8001038:	58020400 	.word	0x58020400

0800103c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  GPIOB->BSRR = 1;
 8001040:	4b01      	ldr	r3, [pc, #4]	; (8001048 <UsageFault_Handler+0xc>)
 8001042:	2201      	movs	r2, #1
 8001044:	619a      	str	r2, [r3, #24]
 8001046:	e7fb      	b.n	8001040 <UsageFault_Handler+0x4>
 8001048:	58020400 	.word	0x58020400

0800104c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800107a:	f000 fa69 	bl	8001550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_hrtim1_a);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <DMA1_Stream0_IRQHandler+0x10>)
 800108a:	f000 ff1d 	bl	8001ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	240008b4 	.word	0x240008b4

08001098 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_hrtim1_b);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <DMA1_Stream1_IRQHandler+0x10>)
 800109e:	f000 ff13 	bl	8001ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2400092c 	.word	0x2400092c

080010ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <OTG_FS_IRQHandler+0x10>)
 80010b2:	f003 fc7d 	bl	80049b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	240026f4 	.word	0x240026f4

080010c0 <HRTIM1_Master_IRQHandler>:

/**
  * @brief This function handles HRTIM master timer global interrupt.
  */
void HRTIM1_Master_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_Master_IRQn 0 */

  GPIOB->BSRR = 1;
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HRTIM1_Master_IRQHandler+0x28>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	619a      	str	r2, [r3, #24]
  /* USER CODE END HRTIM1_Master_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_MASTER);
 80010ca:	2105      	movs	r1, #5
 80010cc:	4807      	ldr	r0, [pc, #28]	; (80010ec <HRTIM1_Master_IRQHandler+0x2c>)
 80010ce:	f002 fd1d 	bl	8003b0c <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_Master_IRQn 1 */
  TimMInterrupts++;
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <HRTIM1_Master_IRQHandler+0x30>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	3301      	adds	r3, #1
 80010d8:	b29a      	uxth	r2, r3
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HRTIM1_Master_IRQHandler+0x30>)
 80010dc:	801a      	strh	r2, [r3, #0]

  GPIOB->BSRR = 0;
 80010de:	4b02      	ldr	r3, [pc, #8]	; (80010e8 <HRTIM1_Master_IRQHandler+0x28>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]

  /* USER CODE END HRTIM1_Master_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	58020400 	.word	0x58020400
 80010ec:	240007d8 	.word	0x240007d8
 80010f0:	240011f4 	.word	0x240011f4

080010f4 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */
  GPIOB->BSRR = 1;
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <HRTIM1_TIMA_IRQHandler+0x28>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	619a      	str	r2, [r3, #24]

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 80010fe:	2100      	movs	r1, #0
 8001100:	4807      	ldr	r0, [pc, #28]	; (8001120 <HRTIM1_TIMA_IRQHandler+0x2c>)
 8001102:	f002 fd03 	bl	8003b0c <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */
  TimAInterrupts++;
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <HRTIM1_TIMA_IRQHandler+0x30>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	3301      	adds	r3, #1
 800110c:	b29a      	uxth	r2, r3
 800110e:	4b05      	ldr	r3, [pc, #20]	; (8001124 <HRTIM1_TIMA_IRQHandler+0x30>)
 8001110:	801a      	strh	r2, [r3, #0]
  GPIOB->BSRR = 0;
 8001112:	4b02      	ldr	r3, [pc, #8]	; (800111c <HRTIM1_TIMA_IRQHandler+0x28>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	58020400 	.word	0x58020400
 8001120:	240007d8 	.word	0x240007d8
 8001124:	240011f0 	.word	0x240011f0

08001128 <HRTIM1_TIMB_IRQHandler>:

/**
  * @brief This function handles HRTIM timer B global interrupt.
  */
void HRTIM1_TIMB_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMB_IRQn 0 */

  /* USER CODE END HRTIM1_TIMB_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_B);
 800112c:	2101      	movs	r1, #1
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <HRTIM1_TIMB_IRQHandler+0x1c>)
 8001130:	f002 fcec 	bl	8003b0c <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMB_IRQn 1 */
  TimBInterrupts++;
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <HRTIM1_TIMB_IRQHandler+0x20>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	b29a      	uxth	r2, r3
 800113c:	4b02      	ldr	r3, [pc, #8]	; (8001148 <HRTIM1_TIMB_IRQHandler+0x20>)
 800113e:	801a      	strh	r2, [r3, #0]

  /* USER CODE END HRTIM1_TIMB_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	240007d8 	.word	0x240007d8
 8001148:	240011f2 	.word	0x240011f2

0800114c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <TIM16_IRQHandler+0x1c>)
 8001152:	f007 f9b7 	bl	80084c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  Tim16Interrupts++;
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <TIM16_IRQHandler+0x20>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	b29a      	uxth	r2, r3
 800115e:	4b03      	ldr	r3, [pc, #12]	; (800116c <TIM16_IRQHandler+0x20>)
 8001160:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM16_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	240009a4 	.word	0x240009a4
 800116c:	240011f6 	.word	0x240011f6

08001170 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return 1;
 8001174:	2301      	movs	r3, #1
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <_kill>:

int _kill(int pid, int sig)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800118a:	f00c fb2b 	bl	800d7e4 <__errno>
 800118e:	4603      	mov	r3, r0
 8001190:	2216      	movs	r2, #22
 8001192:	601a      	str	r2, [r3, #0]
  return -1;
 8001194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <_exit>:

void _exit (int status)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ffe7 	bl	8001180 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011b2:	e7fe      	b.n	80011b2 <_exit+0x12>

080011b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	e00a      	b.n	80011dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011c6:	f3af 8000 	nop.w
 80011ca:	4601      	mov	r1, r0
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	60ba      	str	r2, [r7, #8]
 80011d2:	b2ca      	uxtb	r2, r1
 80011d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	3301      	adds	r3, #1
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	dbf0      	blt.n	80011c6 <_read+0x12>
  }

  return len;
 80011e4:	687b      	ldr	r3, [r7, #4]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <_write>:

int _write(int file, char *ptr, int len)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b084      	sub	sp, #16
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d00a      	beq.n	8001216 <_write+0x28>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2b02      	cmp	r3, #2
 8001204:	d007      	beq.n	8001216 <_write+0x28>
    {
	   errno = EBADF;
 8001206:	f00c faed 	bl	800d7e4 <__errno>
 800120a:	4603      	mov	r3, r0
 800120c:	2209      	movs	r2, #9
 800120e:	601a      	str	r2, [r3, #0]
	   return -1;
 8001210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001214:	e009      	b.n	800122a <_write+0x3c>
	}

	return CDC_OTG_Send(ptr, len) == 0 ? len : 0;
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	68b8      	ldr	r0, [r7, #8]
 800121a:	f00b fb29 	bl	800c870 <CDC_OTG_Send>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d101      	bne.n	8001228 <_write+0x3a>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	e000      	b.n	800122a <_write+0x3c>
 8001228:	2300      	movs	r3, #0

}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <_close>:

int _close(int file)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800123a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800125a:	605a      	str	r2, [r3, #4]
  return 0;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <_isatty>:

int _isatty(int file)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a4:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <_sbrk+0x5c>)
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <_sbrk+0x60>)
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <_sbrk+0x64>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <_sbrk+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d207      	bcs.n	80012dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012cc:	f00c fa8a 	bl	800d7e4 <__errno>
 80012d0:	4603      	mov	r3, r0
 80012d2:	220c      	movs	r2, #12
 80012d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012da:	e009      	b.n	80012f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <_sbrk+0x64>)
 80012ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	24080000 	.word	0x24080000
 80012fc:	00000400 	.word	0x00000400
 8001300:	240011f8 	.word	0x240011f8
 8001304:	24003130 	.word	0x24003130

08001308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800130c:	4b37      	ldr	r3, [pc, #220]	; (80013ec <SystemInit+0xe4>)
 800130e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001312:	4a36      	ldr	r2, [pc, #216]	; (80013ec <SystemInit+0xe4>)
 8001314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800131c:	4b34      	ldr	r3, [pc, #208]	; (80013f0 <SystemInit+0xe8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 030f 	and.w	r3, r3, #15
 8001324:	2b06      	cmp	r3, #6
 8001326:	d807      	bhi.n	8001338 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001328:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <SystemInit+0xe8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f023 030f 	bic.w	r3, r3, #15
 8001330:	4a2f      	ldr	r2, [pc, #188]	; (80013f0 <SystemInit+0xe8>)
 8001332:	f043 0307 	orr.w	r3, r3, #7
 8001336:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001338:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <SystemInit+0xec>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a2d      	ldr	r2, [pc, #180]	; (80013f4 <SystemInit+0xec>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001344:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <SystemInit+0xec>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <SystemInit+0xec>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4929      	ldr	r1, [pc, #164]	; (80013f4 <SystemInit+0xec>)
 8001350:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <SystemInit+0xf0>)
 8001352:	4013      	ands	r3, r2
 8001354:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001356:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <SystemInit+0xe8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d007      	beq.n	8001372 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001362:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <SystemInit+0xe8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f023 030f 	bic.w	r3, r3, #15
 800136a:	4a21      	ldr	r2, [pc, #132]	; (80013f0 <SystemInit+0xe8>)
 800136c:	f043 0307 	orr.w	r3, r3, #7
 8001370:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <SystemInit+0xec>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001378:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <SystemInit+0xec>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <SystemInit+0xec>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <SystemInit+0xec>)
 8001386:	4a1d      	ldr	r2, [pc, #116]	; (80013fc <SystemInit+0xf4>)
 8001388:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800138a:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <SystemInit+0xec>)
 800138c:	4a1c      	ldr	r2, [pc, #112]	; (8001400 <SystemInit+0xf8>)
 800138e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <SystemInit+0xec>)
 8001392:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <SystemInit+0xfc>)
 8001394:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <SystemInit+0xec>)
 8001398:	2200      	movs	r2, #0
 800139a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <SystemInit+0xec>)
 800139e:	4a19      	ldr	r2, [pc, #100]	; (8001404 <SystemInit+0xfc>)
 80013a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <SystemInit+0xec>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <SystemInit+0xec>)
 80013aa:	4a16      	ldr	r2, [pc, #88]	; (8001404 <SystemInit+0xfc>)
 80013ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <SystemInit+0xec>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <SystemInit+0xec>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <SystemInit+0xec>)
 80013ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <SystemInit+0xec>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <SystemInit+0x100>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <SystemInit+0x104>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013d2:	d202      	bcs.n	80013da <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013d4:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <SystemInit+0x108>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <SystemInit+0x10c>)
 80013dc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013e0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00
 80013f0:	52002000 	.word	0x52002000
 80013f4:	58024400 	.word	0x58024400
 80013f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80013fc:	02020200 	.word	0x02020200
 8001400:	01ff0000 	.word	0x01ff0000
 8001404:	01010280 	.word	0x01010280
 8001408:	5c001000 	.word	0x5c001000
 800140c:	ffff0000 	.word	0xffff0000
 8001410:	51008108 	.word	0x51008108
 8001414:	52004000 	.word	0x52004000

08001418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001450 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800141c:	f7ff ff74 	bl	8001308 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001420:	480c      	ldr	r0, [pc, #48]	; (8001454 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001422:	490d      	ldr	r1, [pc, #52]	; (8001458 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001424:	4a0d      	ldr	r2, [pc, #52]	; (800145c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001428:	e002      	b.n	8001430 <LoopCopyDataInit>

0800142a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800142c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142e:	3304      	adds	r3, #4

08001430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001434:	d3f9      	bcc.n	800142a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001438:	4c0a      	ldr	r4, [pc, #40]	; (8001464 <LoopFillZerobss+0x22>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800143c:	e001      	b.n	8001442 <LoopFillZerobss>

0800143e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001440:	3204      	adds	r2, #4

08001442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001444:	d3fb      	bcc.n	800143e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001446:	f00c f9d3 	bl	800d7f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800144a:	f7ff f993 	bl	8000774 <main>
  bx  lr
 800144e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001450:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001454:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001458:	240007bc 	.word	0x240007bc
  ldr r2, =_sidata
 800145c:	08012368 	.word	0x08012368
  ldr r2, =_sbss
 8001460:	240007bc 	.word	0x240007bc
  ldr r4, =_ebss
 8001464:	2400312c 	.word	0x2400312c

08001468 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001468:	e7fe      	b.n	8001468 <ADC3_IRQHandler>
	...

0800146c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001472:	2003      	movs	r0, #3
 8001474:	f000 f98c 	bl	8001790 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001478:	f005 fa54 	bl	8006924 <HAL_RCC_GetSysClockFreq>
 800147c:	4602      	mov	r2, r0
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_Init+0x68>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	0a1b      	lsrs	r3, r3, #8
 8001484:	f003 030f 	and.w	r3, r3, #15
 8001488:	4913      	ldr	r1, [pc, #76]	; (80014d8 <HAL_Init+0x6c>)
 800148a:	5ccb      	ldrb	r3, [r1, r3]
 800148c:	f003 031f 	and.w	r3, r3, #31
 8001490:	fa22 f303 	lsr.w	r3, r2, r3
 8001494:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <HAL_Init+0x68>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <HAL_Init+0x6c>)
 80014a0:	5cd3      	ldrb	r3, [r2, r3]
 80014a2:	f003 031f 	and.w	r3, r3, #31
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ac:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <HAL_Init+0x70>)
 80014ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014b0:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <HAL_Init+0x74>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014b6:	200f      	movs	r0, #15
 80014b8:	f000 f814 	bl	80014e4 <HAL_InitTick>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e002      	b.n	80014cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014c6:	f7ff fc9f 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	58024400 	.word	0x58024400
 80014d8:	08011fb0 	.word	0x08011fb0
 80014dc:	2400000c 	.word	0x2400000c
 80014e0:	24000008 	.word	0x24000008

080014e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_InitTick+0x60>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e021      	b.n	800153c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <HAL_InitTick+0x64>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_InitTick+0x60>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001506:	fbb3 f3f1 	udiv	r3, r3, r1
 800150a:	fbb2 f3f3 	udiv	r3, r2, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f971 	bl	80017f6 <HAL_SYSTICK_Config>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e00e      	b.n	800153c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b0f      	cmp	r3, #15
 8001522:	d80a      	bhi.n	800153a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001524:	2200      	movs	r2, #0
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800152c:	f000 f93b 	bl	80017a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001530:	4a06      	ldr	r2, [pc, #24]	; (800154c <HAL_InitTick+0x68>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e000      	b.n	800153c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	24000014 	.word	0x24000014
 8001548:	24000008 	.word	0x24000008
 800154c:	24000010 	.word	0x24000010

08001550 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_IncTick+0x20>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_IncTick+0x24>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4413      	add	r3, r2
 8001560:	4a04      	ldr	r2, [pc, #16]	; (8001574 <HAL_IncTick+0x24>)
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	24000014 	.word	0x24000014
 8001574:	240011fc 	.word	0x240011fc

08001578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return uwTick;
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <HAL_GetTick+0x14>)
 800157e:	681b      	ldr	r3, [r3, #0]
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	240011fc 	.word	0x240011fc

08001590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001598:	f7ff ffee 	bl	8001578 <HAL_GetTick>
 800159c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015a8:	d005      	beq.n	80015b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015aa:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <HAL_Delay+0x44>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4413      	add	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015b6:	bf00      	nop
 80015b8:	f7ff ffde 	bl	8001578 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d8f7      	bhi.n	80015b8 <HAL_Delay+0x28>
  {
  }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	24000014 	.word	0x24000014

080015d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <HAL_GetREVID+0x14>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	0c1b      	lsrs	r3, r3, #16
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	5c001000 	.word	0x5c001000

080015f0 <__NVIC_SetPriorityGrouping>:
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <__NVIC_SetPriorityGrouping+0x40>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800160c:	4013      	ands	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 800161a:	4313      	orrs	r3, r2
 800161c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161e:	4a04      	ldr	r2, [pc, #16]	; (8001630 <__NVIC_SetPriorityGrouping+0x40>)
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	60d3      	str	r3, [r2, #12]
}
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	05fa0000 	.word	0x05fa0000

08001638 <__NVIC_GetPriorityGrouping>:
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <__NVIC_GetPriorityGrouping+0x18>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	f003 0307 	and.w	r3, r3, #7
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_EnableIRQ>:
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800165e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001662:	2b00      	cmp	r3, #0
 8001664:	db0b      	blt.n	800167e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	4907      	ldr	r1, [pc, #28]	; (800168c <__NVIC_EnableIRQ+0x38>)
 800166e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	2001      	movs	r0, #1
 8001676:	fa00 f202 	lsl.w	r2, r0, r2
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100

08001690 <__NVIC_SetPriority>:
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800169c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0a      	blt.n	80016ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	490c      	ldr	r1, [pc, #48]	; (80016dc <__NVIC_SetPriority+0x4c>)
 80016aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016b8:	e00a      	b.n	80016d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4908      	ldr	r1, [pc, #32]	; (80016e0 <__NVIC_SetPriority+0x50>)
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	3b04      	subs	r3, #4
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	761a      	strb	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <NVIC_EncodePriority>:
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f1c3 0307 	rsb	r3, r3, #7
 80016fe:	2b04      	cmp	r3, #4
 8001700:	bf28      	it	cs
 8001702:	2304      	movcs	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3304      	adds	r3, #4
 800170a:	2b06      	cmp	r3, #6
 800170c:	d902      	bls.n	8001714 <NVIC_EncodePriority+0x30>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3b03      	subs	r3, #3
 8001712:	e000      	b.n	8001716 <NVIC_EncodePriority+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43d9      	mvns	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	4313      	orrs	r3, r2
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	; 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800175c:	d301      	bcc.n	8001762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175e:	2301      	movs	r3, #1
 8001760:	e00f      	b.n	8001782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <SysTick_Config+0x40>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176a:	210f      	movs	r1, #15
 800176c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001770:	f7ff ff8e 	bl	8001690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <SysTick_Config+0x40>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <SysTick_Config+0x40>)
 800177c:	2207      	movs	r2, #7
 800177e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	e000e010 	.word	0xe000e010

08001790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff29 	bl	80015f0 <__NVIC_SetPriorityGrouping>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017b4:	f7ff ff40 	bl	8001638 <__NVIC_GetPriorityGrouping>
 80017b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	68b9      	ldr	r1, [r7, #8]
 80017be:	6978      	ldr	r0, [r7, #20]
 80017c0:	f7ff ff90 	bl	80016e4 <NVIC_EncodePriority>
 80017c4:	4602      	mov	r2, r0
 80017c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017ca:	4611      	mov	r1, r2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff5f 	bl	8001690 <__NVIC_SetPriority>
}
 80017d2:	bf00      	nop
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff33 	bl	8001654 <__NVIC_EnableIRQ>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff ffa4 	bl	800174c <SysTick_Config>
 8001804:	4603      	mov	r3, r0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001818:	f7ff feae 	bl	8001578 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e316      	b.n	8001e56 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a66      	ldr	r2, [pc, #408]	; (80019c8 <HAL_DMA_Init+0x1b8>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d04a      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a65      	ldr	r2, [pc, #404]	; (80019cc <HAL_DMA_Init+0x1bc>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d045      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a63      	ldr	r2, [pc, #396]	; (80019d0 <HAL_DMA_Init+0x1c0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d040      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a62      	ldr	r2, [pc, #392]	; (80019d4 <HAL_DMA_Init+0x1c4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d03b      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a60      	ldr	r2, [pc, #384]	; (80019d8 <HAL_DMA_Init+0x1c8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d036      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a5f      	ldr	r2, [pc, #380]	; (80019dc <HAL_DMA_Init+0x1cc>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d031      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a5d      	ldr	r2, [pc, #372]	; (80019e0 <HAL_DMA_Init+0x1d0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d02c      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a5c      	ldr	r2, [pc, #368]	; (80019e4 <HAL_DMA_Init+0x1d4>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d027      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a5a      	ldr	r2, [pc, #360]	; (80019e8 <HAL_DMA_Init+0x1d8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d022      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a59      	ldr	r2, [pc, #356]	; (80019ec <HAL_DMA_Init+0x1dc>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d01d      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a57      	ldr	r2, [pc, #348]	; (80019f0 <HAL_DMA_Init+0x1e0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d018      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a56      	ldr	r2, [pc, #344]	; (80019f4 <HAL_DMA_Init+0x1e4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d013      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a54      	ldr	r2, [pc, #336]	; (80019f8 <HAL_DMA_Init+0x1e8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d00e      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a53      	ldr	r2, [pc, #332]	; (80019fc <HAL_DMA_Init+0x1ec>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d009      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a51      	ldr	r2, [pc, #324]	; (8001a00 <HAL_DMA_Init+0x1f0>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d004      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a50      	ldr	r2, [pc, #320]	; (8001a04 <HAL_DMA_Init+0x1f4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d101      	bne.n	80018cc <HAL_DMA_Init+0xbc>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <HAL_DMA_Init+0xbe>
 80018cc:	2300      	movs	r3, #0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 813b 	beq.w	8001b4a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2202      	movs	r2, #2
 80018d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a37      	ldr	r2, [pc, #220]	; (80019c8 <HAL_DMA_Init+0x1b8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d04a      	beq.n	8001984 <HAL_DMA_Init+0x174>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a36      	ldr	r2, [pc, #216]	; (80019cc <HAL_DMA_Init+0x1bc>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d045      	beq.n	8001984 <HAL_DMA_Init+0x174>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a34      	ldr	r2, [pc, #208]	; (80019d0 <HAL_DMA_Init+0x1c0>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d040      	beq.n	8001984 <HAL_DMA_Init+0x174>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a33      	ldr	r2, [pc, #204]	; (80019d4 <HAL_DMA_Init+0x1c4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d03b      	beq.n	8001984 <HAL_DMA_Init+0x174>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a31      	ldr	r2, [pc, #196]	; (80019d8 <HAL_DMA_Init+0x1c8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d036      	beq.n	8001984 <HAL_DMA_Init+0x174>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a30      	ldr	r2, [pc, #192]	; (80019dc <HAL_DMA_Init+0x1cc>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d031      	beq.n	8001984 <HAL_DMA_Init+0x174>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a2e      	ldr	r2, [pc, #184]	; (80019e0 <HAL_DMA_Init+0x1d0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d02c      	beq.n	8001984 <HAL_DMA_Init+0x174>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2d      	ldr	r2, [pc, #180]	; (80019e4 <HAL_DMA_Init+0x1d4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d027      	beq.n	8001984 <HAL_DMA_Init+0x174>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a2b      	ldr	r2, [pc, #172]	; (80019e8 <HAL_DMA_Init+0x1d8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d022      	beq.n	8001984 <HAL_DMA_Init+0x174>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a2a      	ldr	r2, [pc, #168]	; (80019ec <HAL_DMA_Init+0x1dc>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d01d      	beq.n	8001984 <HAL_DMA_Init+0x174>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a28      	ldr	r2, [pc, #160]	; (80019f0 <HAL_DMA_Init+0x1e0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d018      	beq.n	8001984 <HAL_DMA_Init+0x174>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a27      	ldr	r2, [pc, #156]	; (80019f4 <HAL_DMA_Init+0x1e4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d013      	beq.n	8001984 <HAL_DMA_Init+0x174>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a25      	ldr	r2, [pc, #148]	; (80019f8 <HAL_DMA_Init+0x1e8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d00e      	beq.n	8001984 <HAL_DMA_Init+0x174>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a24      	ldr	r2, [pc, #144]	; (80019fc <HAL_DMA_Init+0x1ec>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d009      	beq.n	8001984 <HAL_DMA_Init+0x174>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a22      	ldr	r2, [pc, #136]	; (8001a00 <HAL_DMA_Init+0x1f0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d004      	beq.n	8001984 <HAL_DMA_Init+0x174>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a21      	ldr	r2, [pc, #132]	; (8001a04 <HAL_DMA_Init+0x1f4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d108      	bne.n	8001996 <HAL_DMA_Init+0x186>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0201 	bic.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	e007      	b.n	80019a6 <HAL_DMA_Init+0x196>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 0201 	bic.w	r2, r2, #1
 80019a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80019a6:	e02f      	b.n	8001a08 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019a8:	f7ff fde6 	bl	8001578 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	d928      	bls.n	8001a08 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2220      	movs	r2, #32
 80019ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2203      	movs	r2, #3
 80019c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e246      	b.n	8001e56 <HAL_DMA_Init+0x646>
 80019c8:	40020010 	.word	0x40020010
 80019cc:	40020028 	.word	0x40020028
 80019d0:	40020040 	.word	0x40020040
 80019d4:	40020058 	.word	0x40020058
 80019d8:	40020070 	.word	0x40020070
 80019dc:	40020088 	.word	0x40020088
 80019e0:	400200a0 	.word	0x400200a0
 80019e4:	400200b8 	.word	0x400200b8
 80019e8:	40020410 	.word	0x40020410
 80019ec:	40020428 	.word	0x40020428
 80019f0:	40020440 	.word	0x40020440
 80019f4:	40020458 	.word	0x40020458
 80019f8:	40020470 	.word	0x40020470
 80019fc:	40020488 	.word	0x40020488
 8001a00:	400204a0 	.word	0x400204a0
 8001a04:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1c8      	bne.n	80019a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4b83      	ldr	r3, [pc, #524]	; (8001c30 <HAL_DMA_Init+0x420>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001a2e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a46:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d107      	bne.n	8001a6c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	4313      	orrs	r3, r2
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001a6c:	4b71      	ldr	r3, [pc, #452]	; (8001c34 <HAL_DMA_Init+0x424>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b71      	ldr	r3, [pc, #452]	; (8001c38 <HAL_DMA_Init+0x428>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a78:	d328      	bcc.n	8001acc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b28      	cmp	r3, #40	; 0x28
 8001a80:	d903      	bls.n	8001a8a <HAL_DMA_Init+0x27a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b2e      	cmp	r3, #46	; 0x2e
 8001a88:	d917      	bls.n	8001aba <HAL_DMA_Init+0x2aa>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b3e      	cmp	r3, #62	; 0x3e
 8001a90:	d903      	bls.n	8001a9a <HAL_DMA_Init+0x28a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b42      	cmp	r3, #66	; 0x42
 8001a98:	d90f      	bls.n	8001aba <HAL_DMA_Init+0x2aa>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b46      	cmp	r3, #70	; 0x46
 8001aa0:	d903      	bls.n	8001aaa <HAL_DMA_Init+0x29a>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b48      	cmp	r3, #72	; 0x48
 8001aa8:	d907      	bls.n	8001aba <HAL_DMA_Init+0x2aa>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b4e      	cmp	r3, #78	; 0x4e
 8001ab0:	d905      	bls.n	8001abe <HAL_DMA_Init+0x2ae>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b52      	cmp	r3, #82	; 0x52
 8001ab8:	d801      	bhi.n	8001abe <HAL_DMA_Init+0x2ae>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <HAL_DMA_Init+0x2b0>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001aca:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f023 0307 	bic.w	r3, r3, #7
 8001ae2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d117      	bne.n	8001b26 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00e      	beq.n	8001b26 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f001 f9b9 	bl	8002e80 <DMA_CheckFifoParam>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2240      	movs	r2, #64	; 0x40
 8001b18:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e197      	b.n	8001e56 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f001 f8f4 	bl	8002d1c <DMA_CalcBaseAndBitshift>
 8001b34:	4603      	mov	r3, r0
 8001b36:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3c:	f003 031f 	and.w	r3, r3, #31
 8001b40:	223f      	movs	r2, #63	; 0x3f
 8001b42:	409a      	lsls	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	e0cd      	b.n	8001ce6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a3b      	ldr	r2, [pc, #236]	; (8001c3c <HAL_DMA_Init+0x42c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d022      	beq.n	8001b9a <HAL_DMA_Init+0x38a>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a39      	ldr	r2, [pc, #228]	; (8001c40 <HAL_DMA_Init+0x430>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d01d      	beq.n	8001b9a <HAL_DMA_Init+0x38a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a38      	ldr	r2, [pc, #224]	; (8001c44 <HAL_DMA_Init+0x434>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d018      	beq.n	8001b9a <HAL_DMA_Init+0x38a>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a36      	ldr	r2, [pc, #216]	; (8001c48 <HAL_DMA_Init+0x438>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d013      	beq.n	8001b9a <HAL_DMA_Init+0x38a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a35      	ldr	r2, [pc, #212]	; (8001c4c <HAL_DMA_Init+0x43c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d00e      	beq.n	8001b9a <HAL_DMA_Init+0x38a>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a33      	ldr	r2, [pc, #204]	; (8001c50 <HAL_DMA_Init+0x440>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d009      	beq.n	8001b9a <HAL_DMA_Init+0x38a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a32      	ldr	r2, [pc, #200]	; (8001c54 <HAL_DMA_Init+0x444>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d004      	beq.n	8001b9a <HAL_DMA_Init+0x38a>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a30      	ldr	r2, [pc, #192]	; (8001c58 <HAL_DMA_Init+0x448>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_DMA_Init+0x38e>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <HAL_DMA_Init+0x390>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 8097 	beq.w	8001cd4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a24      	ldr	r2, [pc, #144]	; (8001c3c <HAL_DMA_Init+0x42c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d021      	beq.n	8001bf4 <HAL_DMA_Init+0x3e4>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a22      	ldr	r2, [pc, #136]	; (8001c40 <HAL_DMA_Init+0x430>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d01c      	beq.n	8001bf4 <HAL_DMA_Init+0x3e4>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a21      	ldr	r2, [pc, #132]	; (8001c44 <HAL_DMA_Init+0x434>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d017      	beq.n	8001bf4 <HAL_DMA_Init+0x3e4>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1f      	ldr	r2, [pc, #124]	; (8001c48 <HAL_DMA_Init+0x438>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d012      	beq.n	8001bf4 <HAL_DMA_Init+0x3e4>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a1e      	ldr	r2, [pc, #120]	; (8001c4c <HAL_DMA_Init+0x43c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d00d      	beq.n	8001bf4 <HAL_DMA_Init+0x3e4>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <HAL_DMA_Init+0x440>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d008      	beq.n	8001bf4 <HAL_DMA_Init+0x3e4>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a1b      	ldr	r2, [pc, #108]	; (8001c54 <HAL_DMA_Init+0x444>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d003      	beq.n	8001bf4 <HAL_DMA_Init+0x3e4>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a19      	ldr	r2, [pc, #100]	; (8001c58 <HAL_DMA_Init+0x448>)
 8001bf2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <HAL_DMA_Init+0x44c>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2b40      	cmp	r3, #64	; 0x40
 8001c1a:	d021      	beq.n	8001c60 <HAL_DMA_Init+0x450>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b80      	cmp	r3, #128	; 0x80
 8001c22:	d102      	bne.n	8001c2a <HAL_DMA_Init+0x41a>
 8001c24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c28:	e01b      	b.n	8001c62 <HAL_DMA_Init+0x452>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e019      	b.n	8001c62 <HAL_DMA_Init+0x452>
 8001c2e:	bf00      	nop
 8001c30:	fe10803f 	.word	0xfe10803f
 8001c34:	5c001000 	.word	0x5c001000
 8001c38:	ffff0000 	.word	0xffff0000
 8001c3c:	58025408 	.word	0x58025408
 8001c40:	5802541c 	.word	0x5802541c
 8001c44:	58025430 	.word	0x58025430
 8001c48:	58025444 	.word	0x58025444
 8001c4c:	58025458 	.word	0x58025458
 8001c50:	5802546c 	.word	0x5802546c
 8001c54:	58025480 	.word	0x58025480
 8001c58:	58025494 	.word	0x58025494
 8001c5c:	fffe000f 	.word	0xfffe000f
 8001c60:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	68d2      	ldr	r2, [r2, #12]
 8001c66:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c90:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b6e      	ldr	r3, [pc, #440]	; (8001e60 <HAL_DMA_Init+0x650>)
 8001ca8:	4413      	add	r3, r2
 8001caa:	4a6e      	ldr	r2, [pc, #440]	; (8001e64 <HAL_DMA_Init+0x654>)
 8001cac:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	009a      	lsls	r2, r3, #2
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f001 f82f 	bl	8002d1c <DMA_CalcBaseAndBitshift>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc6:	f003 031f 	and.w	r3, r3, #31
 8001cca:	2201      	movs	r2, #1
 8001ccc:	409a      	lsls	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	e008      	b.n	8001ce6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2240      	movs	r2, #64	; 0x40
 8001cd8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2203      	movs	r2, #3
 8001cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e0b7      	b.n	8001e56 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a5f      	ldr	r2, [pc, #380]	; (8001e68 <HAL_DMA_Init+0x658>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d072      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a5d      	ldr	r2, [pc, #372]	; (8001e6c <HAL_DMA_Init+0x65c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d06d      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a5c      	ldr	r2, [pc, #368]	; (8001e70 <HAL_DMA_Init+0x660>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d068      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a5a      	ldr	r2, [pc, #360]	; (8001e74 <HAL_DMA_Init+0x664>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d063      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a59      	ldr	r2, [pc, #356]	; (8001e78 <HAL_DMA_Init+0x668>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d05e      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a57      	ldr	r2, [pc, #348]	; (8001e7c <HAL_DMA_Init+0x66c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d059      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a56      	ldr	r2, [pc, #344]	; (8001e80 <HAL_DMA_Init+0x670>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d054      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a54      	ldr	r2, [pc, #336]	; (8001e84 <HAL_DMA_Init+0x674>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d04f      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a53      	ldr	r2, [pc, #332]	; (8001e88 <HAL_DMA_Init+0x678>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d04a      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a51      	ldr	r2, [pc, #324]	; (8001e8c <HAL_DMA_Init+0x67c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d045      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a50      	ldr	r2, [pc, #320]	; (8001e90 <HAL_DMA_Init+0x680>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d040      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a4e      	ldr	r2, [pc, #312]	; (8001e94 <HAL_DMA_Init+0x684>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d03b      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a4d      	ldr	r2, [pc, #308]	; (8001e98 <HAL_DMA_Init+0x688>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d036      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a4b      	ldr	r2, [pc, #300]	; (8001e9c <HAL_DMA_Init+0x68c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d031      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a4a      	ldr	r2, [pc, #296]	; (8001ea0 <HAL_DMA_Init+0x690>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d02c      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a48      	ldr	r2, [pc, #288]	; (8001ea4 <HAL_DMA_Init+0x694>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d027      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a47      	ldr	r2, [pc, #284]	; (8001ea8 <HAL_DMA_Init+0x698>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d022      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a45      	ldr	r2, [pc, #276]	; (8001eac <HAL_DMA_Init+0x69c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d01d      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a44      	ldr	r2, [pc, #272]	; (8001eb0 <HAL_DMA_Init+0x6a0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d018      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a42      	ldr	r2, [pc, #264]	; (8001eb4 <HAL_DMA_Init+0x6a4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d013      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a41      	ldr	r2, [pc, #260]	; (8001eb8 <HAL_DMA_Init+0x6a8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d00e      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a3f      	ldr	r2, [pc, #252]	; (8001ebc <HAL_DMA_Init+0x6ac>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d009      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a3e      	ldr	r2, [pc, #248]	; (8001ec0 <HAL_DMA_Init+0x6b0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d004      	beq.n	8001dd6 <HAL_DMA_Init+0x5c6>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a3c      	ldr	r2, [pc, #240]	; (8001ec4 <HAL_DMA_Init+0x6b4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d101      	bne.n	8001dda <HAL_DMA_Init+0x5ca>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_DMA_Init+0x5cc>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d032      	beq.n	8001e46 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f001 f8c9 	bl	8002f78 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b80      	cmp	r3, #128	; 0x80
 8001dec:	d102      	bne.n	8001df4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e08:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d010      	beq.n	8001e34 <HAL_DMA_Init+0x624>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d80c      	bhi.n	8001e34 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f001 f946 	bl	80030ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	e008      	b.n	8001e46 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	a7fdabf8 	.word	0xa7fdabf8
 8001e64:	cccccccd 	.word	0xcccccccd
 8001e68:	40020010 	.word	0x40020010
 8001e6c:	40020028 	.word	0x40020028
 8001e70:	40020040 	.word	0x40020040
 8001e74:	40020058 	.word	0x40020058
 8001e78:	40020070 	.word	0x40020070
 8001e7c:	40020088 	.word	0x40020088
 8001e80:	400200a0 	.word	0x400200a0
 8001e84:	400200b8 	.word	0x400200b8
 8001e88:	40020410 	.word	0x40020410
 8001e8c:	40020428 	.word	0x40020428
 8001e90:	40020440 	.word	0x40020440
 8001e94:	40020458 	.word	0x40020458
 8001e98:	40020470 	.word	0x40020470
 8001e9c:	40020488 	.word	0x40020488
 8001ea0:	400204a0 	.word	0x400204a0
 8001ea4:	400204b8 	.word	0x400204b8
 8001ea8:	58025408 	.word	0x58025408
 8001eac:	5802541c 	.word	0x5802541c
 8001eb0:	58025430 	.word	0x58025430
 8001eb4:	58025444 	.word	0x58025444
 8001eb8:	58025458 	.word	0x58025458
 8001ebc:	5802546c 	.word	0x5802546c
 8001ec0:	58025480 	.word	0x58025480
 8001ec4:	58025494 	.word	0x58025494

08001ec8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ed4:	4b67      	ldr	r3, [pc, #412]	; (8002074 <HAL_DMA_IRQHandler+0x1ac>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a67      	ldr	r2, [pc, #412]	; (8002078 <HAL_DMA_IRQHandler+0x1b0>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	0a9b      	lsrs	r3, r3, #10
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a5f      	ldr	r2, [pc, #380]	; (800207c <HAL_DMA_IRQHandler+0x1b4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d04a      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xd2>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a5d      	ldr	r2, [pc, #372]	; (8002080 <HAL_DMA_IRQHandler+0x1b8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d045      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xd2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a5c      	ldr	r2, [pc, #368]	; (8002084 <HAL_DMA_IRQHandler+0x1bc>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d040      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xd2>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a5a      	ldr	r2, [pc, #360]	; (8002088 <HAL_DMA_IRQHandler+0x1c0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d03b      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xd2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a59      	ldr	r2, [pc, #356]	; (800208c <HAL_DMA_IRQHandler+0x1c4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d036      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xd2>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a57      	ldr	r2, [pc, #348]	; (8002090 <HAL_DMA_IRQHandler+0x1c8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d031      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xd2>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a56      	ldr	r2, [pc, #344]	; (8002094 <HAL_DMA_IRQHandler+0x1cc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d02c      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xd2>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a54      	ldr	r2, [pc, #336]	; (8002098 <HAL_DMA_IRQHandler+0x1d0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d027      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xd2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a53      	ldr	r2, [pc, #332]	; (800209c <HAL_DMA_IRQHandler+0x1d4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d022      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xd2>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a51      	ldr	r2, [pc, #324]	; (80020a0 <HAL_DMA_IRQHandler+0x1d8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d01d      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xd2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a50      	ldr	r2, [pc, #320]	; (80020a4 <HAL_DMA_IRQHandler+0x1dc>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d018      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xd2>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a4e      	ldr	r2, [pc, #312]	; (80020a8 <HAL_DMA_IRQHandler+0x1e0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d013      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xd2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a4d      	ldr	r2, [pc, #308]	; (80020ac <HAL_DMA_IRQHandler+0x1e4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00e      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xd2>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a4b      	ldr	r2, [pc, #300]	; (80020b0 <HAL_DMA_IRQHandler+0x1e8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d009      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xd2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a4a      	ldr	r2, [pc, #296]	; (80020b4 <HAL_DMA_IRQHandler+0x1ec>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d004      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xd2>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a48      	ldr	r2, [pc, #288]	; (80020b8 <HAL_DMA_IRQHandler+0x1f0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d101      	bne.n	8001f9e <HAL_DMA_IRQHandler+0xd6>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <HAL_DMA_IRQHandler+0xd8>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 842b 	beq.w	80027fc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001faa:	f003 031f 	and.w	r3, r3, #31
 8001fae:	2208      	movs	r2, #8
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 80a2 	beq.w	8002100 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a2e      	ldr	r2, [pc, #184]	; (800207c <HAL_DMA_IRQHandler+0x1b4>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d04a      	beq.n	800205c <HAL_DMA_IRQHandler+0x194>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a2d      	ldr	r2, [pc, #180]	; (8002080 <HAL_DMA_IRQHandler+0x1b8>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d045      	beq.n	800205c <HAL_DMA_IRQHandler+0x194>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a2b      	ldr	r2, [pc, #172]	; (8002084 <HAL_DMA_IRQHandler+0x1bc>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d040      	beq.n	800205c <HAL_DMA_IRQHandler+0x194>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a2a      	ldr	r2, [pc, #168]	; (8002088 <HAL_DMA_IRQHandler+0x1c0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d03b      	beq.n	800205c <HAL_DMA_IRQHandler+0x194>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a28      	ldr	r2, [pc, #160]	; (800208c <HAL_DMA_IRQHandler+0x1c4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d036      	beq.n	800205c <HAL_DMA_IRQHandler+0x194>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a27      	ldr	r2, [pc, #156]	; (8002090 <HAL_DMA_IRQHandler+0x1c8>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d031      	beq.n	800205c <HAL_DMA_IRQHandler+0x194>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a25      	ldr	r2, [pc, #148]	; (8002094 <HAL_DMA_IRQHandler+0x1cc>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d02c      	beq.n	800205c <HAL_DMA_IRQHandler+0x194>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a24      	ldr	r2, [pc, #144]	; (8002098 <HAL_DMA_IRQHandler+0x1d0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d027      	beq.n	800205c <HAL_DMA_IRQHandler+0x194>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a22      	ldr	r2, [pc, #136]	; (800209c <HAL_DMA_IRQHandler+0x1d4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d022      	beq.n	800205c <HAL_DMA_IRQHandler+0x194>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a21      	ldr	r2, [pc, #132]	; (80020a0 <HAL_DMA_IRQHandler+0x1d8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d01d      	beq.n	800205c <HAL_DMA_IRQHandler+0x194>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a1f      	ldr	r2, [pc, #124]	; (80020a4 <HAL_DMA_IRQHandler+0x1dc>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d018      	beq.n	800205c <HAL_DMA_IRQHandler+0x194>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a1e      	ldr	r2, [pc, #120]	; (80020a8 <HAL_DMA_IRQHandler+0x1e0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d013      	beq.n	800205c <HAL_DMA_IRQHandler+0x194>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a1c      	ldr	r2, [pc, #112]	; (80020ac <HAL_DMA_IRQHandler+0x1e4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00e      	beq.n	800205c <HAL_DMA_IRQHandler+0x194>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1b      	ldr	r2, [pc, #108]	; (80020b0 <HAL_DMA_IRQHandler+0x1e8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d009      	beq.n	800205c <HAL_DMA_IRQHandler+0x194>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a19      	ldr	r2, [pc, #100]	; (80020b4 <HAL_DMA_IRQHandler+0x1ec>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d004      	beq.n	800205c <HAL_DMA_IRQHandler+0x194>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a18      	ldr	r2, [pc, #96]	; (80020b8 <HAL_DMA_IRQHandler+0x1f0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d12f      	bne.n	80020bc <HAL_DMA_IRQHandler+0x1f4>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	2b00      	cmp	r3, #0
 8002068:	bf14      	ite	ne
 800206a:	2301      	movne	r3, #1
 800206c:	2300      	moveq	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	e02e      	b.n	80020d0 <HAL_DMA_IRQHandler+0x208>
 8002072:	bf00      	nop
 8002074:	24000008 	.word	0x24000008
 8002078:	1b4e81b5 	.word	0x1b4e81b5
 800207c:	40020010 	.word	0x40020010
 8002080:	40020028 	.word	0x40020028
 8002084:	40020040 	.word	0x40020040
 8002088:	40020058 	.word	0x40020058
 800208c:	40020070 	.word	0x40020070
 8002090:	40020088 	.word	0x40020088
 8002094:	400200a0 	.word	0x400200a0
 8002098:	400200b8 	.word	0x400200b8
 800209c:	40020410 	.word	0x40020410
 80020a0:	40020428 	.word	0x40020428
 80020a4:	40020440 	.word	0x40020440
 80020a8:	40020458 	.word	0x40020458
 80020ac:	40020470 	.word	0x40020470
 80020b0:	40020488 	.word	0x40020488
 80020b4:	400204a0 	.word	0x400204a0
 80020b8:	400204b8 	.word	0x400204b8
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	bf14      	ite	ne
 80020ca:	2301      	movne	r3, #1
 80020cc:	2300      	moveq	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d015      	beq.n	8002100 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0204 	bic.w	r2, r2, #4
 80020e2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e8:	f003 031f 	and.w	r3, r3, #31
 80020ec:	2208      	movs	r2, #8
 80020ee:	409a      	lsls	r2, r3
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f8:	f043 0201 	orr.w	r2, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	f003 031f 	and.w	r3, r3, #31
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d06e      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a69      	ldr	r2, [pc, #420]	; (80022c0 <HAL_DMA_IRQHandler+0x3f8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d04a      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x2ee>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a67      	ldr	r2, [pc, #412]	; (80022c4 <HAL_DMA_IRQHandler+0x3fc>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d045      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x2ee>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a66      	ldr	r2, [pc, #408]	; (80022c8 <HAL_DMA_IRQHandler+0x400>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d040      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x2ee>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a64      	ldr	r2, [pc, #400]	; (80022cc <HAL_DMA_IRQHandler+0x404>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d03b      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x2ee>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a63      	ldr	r2, [pc, #396]	; (80022d0 <HAL_DMA_IRQHandler+0x408>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d036      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x2ee>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a61      	ldr	r2, [pc, #388]	; (80022d4 <HAL_DMA_IRQHandler+0x40c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d031      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x2ee>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a60      	ldr	r2, [pc, #384]	; (80022d8 <HAL_DMA_IRQHandler+0x410>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d02c      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x2ee>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a5e      	ldr	r2, [pc, #376]	; (80022dc <HAL_DMA_IRQHandler+0x414>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d027      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x2ee>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a5d      	ldr	r2, [pc, #372]	; (80022e0 <HAL_DMA_IRQHandler+0x418>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d022      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x2ee>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a5b      	ldr	r2, [pc, #364]	; (80022e4 <HAL_DMA_IRQHandler+0x41c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01d      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x2ee>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a5a      	ldr	r2, [pc, #360]	; (80022e8 <HAL_DMA_IRQHandler+0x420>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d018      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x2ee>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a58      	ldr	r2, [pc, #352]	; (80022ec <HAL_DMA_IRQHandler+0x424>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x2ee>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a57      	ldr	r2, [pc, #348]	; (80022f0 <HAL_DMA_IRQHandler+0x428>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d00e      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x2ee>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a55      	ldr	r2, [pc, #340]	; (80022f4 <HAL_DMA_IRQHandler+0x42c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d009      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x2ee>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a54      	ldr	r2, [pc, #336]	; (80022f8 <HAL_DMA_IRQHandler+0x430>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d004      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x2ee>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a52      	ldr	r2, [pc, #328]	; (80022fc <HAL_DMA_IRQHandler+0x434>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d10a      	bne.n	80021cc <HAL_DMA_IRQHandler+0x304>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	bf14      	ite	ne
 80021c4:	2301      	movne	r3, #1
 80021c6:	2300      	moveq	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	e003      	b.n	80021d4 <HAL_DMA_IRQHandler+0x30c>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2300      	movs	r3, #0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00d      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	2201      	movs	r2, #1
 80021e2:	409a      	lsls	r2, r3
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	f043 0202 	orr.w	r2, r3, #2
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	2204      	movs	r2, #4
 80021fe:	409a      	lsls	r2, r3
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 808f 	beq.w	8002328 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a2c      	ldr	r2, [pc, #176]	; (80022c0 <HAL_DMA_IRQHandler+0x3f8>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d04a      	beq.n	80022aa <HAL_DMA_IRQHandler+0x3e2>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a2a      	ldr	r2, [pc, #168]	; (80022c4 <HAL_DMA_IRQHandler+0x3fc>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d045      	beq.n	80022aa <HAL_DMA_IRQHandler+0x3e2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a29      	ldr	r2, [pc, #164]	; (80022c8 <HAL_DMA_IRQHandler+0x400>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d040      	beq.n	80022aa <HAL_DMA_IRQHandler+0x3e2>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a27      	ldr	r2, [pc, #156]	; (80022cc <HAL_DMA_IRQHandler+0x404>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d03b      	beq.n	80022aa <HAL_DMA_IRQHandler+0x3e2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <HAL_DMA_IRQHandler+0x408>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d036      	beq.n	80022aa <HAL_DMA_IRQHandler+0x3e2>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a24      	ldr	r2, [pc, #144]	; (80022d4 <HAL_DMA_IRQHandler+0x40c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d031      	beq.n	80022aa <HAL_DMA_IRQHandler+0x3e2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a23      	ldr	r2, [pc, #140]	; (80022d8 <HAL_DMA_IRQHandler+0x410>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d02c      	beq.n	80022aa <HAL_DMA_IRQHandler+0x3e2>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a21      	ldr	r2, [pc, #132]	; (80022dc <HAL_DMA_IRQHandler+0x414>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d027      	beq.n	80022aa <HAL_DMA_IRQHandler+0x3e2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a20      	ldr	r2, [pc, #128]	; (80022e0 <HAL_DMA_IRQHandler+0x418>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d022      	beq.n	80022aa <HAL_DMA_IRQHandler+0x3e2>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a1e      	ldr	r2, [pc, #120]	; (80022e4 <HAL_DMA_IRQHandler+0x41c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d01d      	beq.n	80022aa <HAL_DMA_IRQHandler+0x3e2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a1d      	ldr	r2, [pc, #116]	; (80022e8 <HAL_DMA_IRQHandler+0x420>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d018      	beq.n	80022aa <HAL_DMA_IRQHandler+0x3e2>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a1b      	ldr	r2, [pc, #108]	; (80022ec <HAL_DMA_IRQHandler+0x424>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d013      	beq.n	80022aa <HAL_DMA_IRQHandler+0x3e2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a1a      	ldr	r2, [pc, #104]	; (80022f0 <HAL_DMA_IRQHandler+0x428>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d00e      	beq.n	80022aa <HAL_DMA_IRQHandler+0x3e2>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a18      	ldr	r2, [pc, #96]	; (80022f4 <HAL_DMA_IRQHandler+0x42c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d009      	beq.n	80022aa <HAL_DMA_IRQHandler+0x3e2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a17      	ldr	r2, [pc, #92]	; (80022f8 <HAL_DMA_IRQHandler+0x430>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d004      	beq.n	80022aa <HAL_DMA_IRQHandler+0x3e2>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a15      	ldr	r2, [pc, #84]	; (80022fc <HAL_DMA_IRQHandler+0x434>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d12a      	bne.n	8002300 <HAL_DMA_IRQHandler+0x438>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf14      	ite	ne
 80022b8:	2301      	movne	r3, #1
 80022ba:	2300      	moveq	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	e023      	b.n	8002308 <HAL_DMA_IRQHandler+0x440>
 80022c0:	40020010 	.word	0x40020010
 80022c4:	40020028 	.word	0x40020028
 80022c8:	40020040 	.word	0x40020040
 80022cc:	40020058 	.word	0x40020058
 80022d0:	40020070 	.word	0x40020070
 80022d4:	40020088 	.word	0x40020088
 80022d8:	400200a0 	.word	0x400200a0
 80022dc:	400200b8 	.word	0x400200b8
 80022e0:	40020410 	.word	0x40020410
 80022e4:	40020428 	.word	0x40020428
 80022e8:	40020440 	.word	0x40020440
 80022ec:	40020458 	.word	0x40020458
 80022f0:	40020470 	.word	0x40020470
 80022f4:	40020488 	.word	0x40020488
 80022f8:	400204a0 	.word	0x400204a0
 80022fc:	400204b8 	.word	0x400204b8
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2300      	movs	r3, #0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00d      	beq.n	8002328 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	2204      	movs	r2, #4
 8002316:	409a      	lsls	r2, r3
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002320:	f043 0204 	orr.w	r2, r3, #4
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	2210      	movs	r2, #16
 8002332:	409a      	lsls	r2, r3
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80a6 	beq.w	800248a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a85      	ldr	r2, [pc, #532]	; (8002558 <HAL_DMA_IRQHandler+0x690>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d04a      	beq.n	80023de <HAL_DMA_IRQHandler+0x516>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a83      	ldr	r2, [pc, #524]	; (800255c <HAL_DMA_IRQHandler+0x694>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d045      	beq.n	80023de <HAL_DMA_IRQHandler+0x516>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a82      	ldr	r2, [pc, #520]	; (8002560 <HAL_DMA_IRQHandler+0x698>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d040      	beq.n	80023de <HAL_DMA_IRQHandler+0x516>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a80      	ldr	r2, [pc, #512]	; (8002564 <HAL_DMA_IRQHandler+0x69c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d03b      	beq.n	80023de <HAL_DMA_IRQHandler+0x516>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a7f      	ldr	r2, [pc, #508]	; (8002568 <HAL_DMA_IRQHandler+0x6a0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d036      	beq.n	80023de <HAL_DMA_IRQHandler+0x516>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a7d      	ldr	r2, [pc, #500]	; (800256c <HAL_DMA_IRQHandler+0x6a4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d031      	beq.n	80023de <HAL_DMA_IRQHandler+0x516>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a7c      	ldr	r2, [pc, #496]	; (8002570 <HAL_DMA_IRQHandler+0x6a8>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d02c      	beq.n	80023de <HAL_DMA_IRQHandler+0x516>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a7a      	ldr	r2, [pc, #488]	; (8002574 <HAL_DMA_IRQHandler+0x6ac>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d027      	beq.n	80023de <HAL_DMA_IRQHandler+0x516>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a79      	ldr	r2, [pc, #484]	; (8002578 <HAL_DMA_IRQHandler+0x6b0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d022      	beq.n	80023de <HAL_DMA_IRQHandler+0x516>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a77      	ldr	r2, [pc, #476]	; (800257c <HAL_DMA_IRQHandler+0x6b4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01d      	beq.n	80023de <HAL_DMA_IRQHandler+0x516>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a76      	ldr	r2, [pc, #472]	; (8002580 <HAL_DMA_IRQHandler+0x6b8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d018      	beq.n	80023de <HAL_DMA_IRQHandler+0x516>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a74      	ldr	r2, [pc, #464]	; (8002584 <HAL_DMA_IRQHandler+0x6bc>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <HAL_DMA_IRQHandler+0x516>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a73      	ldr	r2, [pc, #460]	; (8002588 <HAL_DMA_IRQHandler+0x6c0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d00e      	beq.n	80023de <HAL_DMA_IRQHandler+0x516>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a71      	ldr	r2, [pc, #452]	; (800258c <HAL_DMA_IRQHandler+0x6c4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d009      	beq.n	80023de <HAL_DMA_IRQHandler+0x516>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a70      	ldr	r2, [pc, #448]	; (8002590 <HAL_DMA_IRQHandler+0x6c8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d004      	beq.n	80023de <HAL_DMA_IRQHandler+0x516>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a6e      	ldr	r2, [pc, #440]	; (8002594 <HAL_DMA_IRQHandler+0x6cc>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d10a      	bne.n	80023f4 <HAL_DMA_IRQHandler+0x52c>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bf14      	ite	ne
 80023ec:	2301      	movne	r3, #1
 80023ee:	2300      	moveq	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	e009      	b.n	8002408 <HAL_DMA_IRQHandler+0x540>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	2b00      	cmp	r3, #0
 8002400:	bf14      	ite	ne
 8002402:	2301      	movne	r3, #1
 8002404:	2300      	moveq	r3, #0
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d03e      	beq.n	800248a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	2210      	movs	r2, #16
 8002416:	409a      	lsls	r2, r3
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d018      	beq.n	800245c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d108      	bne.n	800244a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	2b00      	cmp	r3, #0
 800243e:	d024      	beq.n	800248a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	4798      	blx	r3
 8002448:	e01f      	b.n	800248a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800244e:	2b00      	cmp	r3, #0
 8002450:	d01b      	beq.n	800248a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	4798      	blx	r3
 800245a:	e016      	b.n	800248a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002466:	2b00      	cmp	r3, #0
 8002468:	d107      	bne.n	800247a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0208 	bic.w	r2, r2, #8
 8002478:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	2220      	movs	r2, #32
 8002494:	409a      	lsls	r2, r3
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 8110 	beq.w	80026c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a2c      	ldr	r2, [pc, #176]	; (8002558 <HAL_DMA_IRQHandler+0x690>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d04a      	beq.n	8002540 <HAL_DMA_IRQHandler+0x678>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a2b      	ldr	r2, [pc, #172]	; (800255c <HAL_DMA_IRQHandler+0x694>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d045      	beq.n	8002540 <HAL_DMA_IRQHandler+0x678>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a29      	ldr	r2, [pc, #164]	; (8002560 <HAL_DMA_IRQHandler+0x698>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d040      	beq.n	8002540 <HAL_DMA_IRQHandler+0x678>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a28      	ldr	r2, [pc, #160]	; (8002564 <HAL_DMA_IRQHandler+0x69c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d03b      	beq.n	8002540 <HAL_DMA_IRQHandler+0x678>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a26      	ldr	r2, [pc, #152]	; (8002568 <HAL_DMA_IRQHandler+0x6a0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d036      	beq.n	8002540 <HAL_DMA_IRQHandler+0x678>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a25      	ldr	r2, [pc, #148]	; (800256c <HAL_DMA_IRQHandler+0x6a4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d031      	beq.n	8002540 <HAL_DMA_IRQHandler+0x678>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a23      	ldr	r2, [pc, #140]	; (8002570 <HAL_DMA_IRQHandler+0x6a8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d02c      	beq.n	8002540 <HAL_DMA_IRQHandler+0x678>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a22      	ldr	r2, [pc, #136]	; (8002574 <HAL_DMA_IRQHandler+0x6ac>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d027      	beq.n	8002540 <HAL_DMA_IRQHandler+0x678>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a20      	ldr	r2, [pc, #128]	; (8002578 <HAL_DMA_IRQHandler+0x6b0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d022      	beq.n	8002540 <HAL_DMA_IRQHandler+0x678>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a1f      	ldr	r2, [pc, #124]	; (800257c <HAL_DMA_IRQHandler+0x6b4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d01d      	beq.n	8002540 <HAL_DMA_IRQHandler+0x678>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a1d      	ldr	r2, [pc, #116]	; (8002580 <HAL_DMA_IRQHandler+0x6b8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d018      	beq.n	8002540 <HAL_DMA_IRQHandler+0x678>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a1c      	ldr	r2, [pc, #112]	; (8002584 <HAL_DMA_IRQHandler+0x6bc>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d013      	beq.n	8002540 <HAL_DMA_IRQHandler+0x678>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a1a      	ldr	r2, [pc, #104]	; (8002588 <HAL_DMA_IRQHandler+0x6c0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d00e      	beq.n	8002540 <HAL_DMA_IRQHandler+0x678>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a19      	ldr	r2, [pc, #100]	; (800258c <HAL_DMA_IRQHandler+0x6c4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d009      	beq.n	8002540 <HAL_DMA_IRQHandler+0x678>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a17      	ldr	r2, [pc, #92]	; (8002590 <HAL_DMA_IRQHandler+0x6c8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d004      	beq.n	8002540 <HAL_DMA_IRQHandler+0x678>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a16      	ldr	r2, [pc, #88]	; (8002594 <HAL_DMA_IRQHandler+0x6cc>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d12b      	bne.n	8002598 <HAL_DMA_IRQHandler+0x6d0>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	2b00      	cmp	r3, #0
 800254c:	bf14      	ite	ne
 800254e:	2301      	movne	r3, #1
 8002550:	2300      	moveq	r3, #0
 8002552:	b2db      	uxtb	r3, r3
 8002554:	e02a      	b.n	80025ac <HAL_DMA_IRQHandler+0x6e4>
 8002556:	bf00      	nop
 8002558:	40020010 	.word	0x40020010
 800255c:	40020028 	.word	0x40020028
 8002560:	40020040 	.word	0x40020040
 8002564:	40020058 	.word	0x40020058
 8002568:	40020070 	.word	0x40020070
 800256c:	40020088 	.word	0x40020088
 8002570:	400200a0 	.word	0x400200a0
 8002574:	400200b8 	.word	0x400200b8
 8002578:	40020410 	.word	0x40020410
 800257c:	40020428 	.word	0x40020428
 8002580:	40020440 	.word	0x40020440
 8002584:	40020458 	.word	0x40020458
 8002588:	40020470 	.word	0x40020470
 800258c:	40020488 	.word	0x40020488
 8002590:	400204a0 	.word	0x400204a0
 8002594:	400204b8 	.word	0x400204b8
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bf14      	ite	ne
 80025a6:	2301      	movne	r3, #1
 80025a8:	2300      	moveq	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 8087 	beq.w	80026c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	2220      	movs	r2, #32
 80025bc:	409a      	lsls	r2, r3
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d139      	bne.n	8002642 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0216 	bic.w	r2, r2, #22
 80025dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d103      	bne.n	80025fe <HAL_DMA_IRQHandler+0x736>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0208 	bic.w	r2, r2, #8
 800260c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	223f      	movs	r2, #63	; 0x3f
 8002618:	409a      	lsls	r2, r3
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 834a 	beq.w	8002ccc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	4798      	blx	r3
          }
          return;
 8002640:	e344      	b.n	8002ccc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d018      	beq.n	8002682 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d108      	bne.n	8002670 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	2b00      	cmp	r3, #0
 8002664:	d02c      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	4798      	blx	r3
 800266e:	e027      	b.n	80026c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002674:	2b00      	cmp	r3, #0
 8002676:	d023      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	4798      	blx	r3
 8002680:	e01e      	b.n	80026c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10f      	bne.n	80026b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0210 	bic.w	r2, r2, #16
 800269e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 8306 	beq.w	8002cd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 8088 	beq.w	80027e8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2204      	movs	r2, #4
 80026dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a7a      	ldr	r2, [pc, #488]	; (80028d0 <HAL_DMA_IRQHandler+0xa08>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d04a      	beq.n	8002780 <HAL_DMA_IRQHandler+0x8b8>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a79      	ldr	r2, [pc, #484]	; (80028d4 <HAL_DMA_IRQHandler+0xa0c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d045      	beq.n	8002780 <HAL_DMA_IRQHandler+0x8b8>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a77      	ldr	r2, [pc, #476]	; (80028d8 <HAL_DMA_IRQHandler+0xa10>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d040      	beq.n	8002780 <HAL_DMA_IRQHandler+0x8b8>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a76      	ldr	r2, [pc, #472]	; (80028dc <HAL_DMA_IRQHandler+0xa14>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d03b      	beq.n	8002780 <HAL_DMA_IRQHandler+0x8b8>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a74      	ldr	r2, [pc, #464]	; (80028e0 <HAL_DMA_IRQHandler+0xa18>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d036      	beq.n	8002780 <HAL_DMA_IRQHandler+0x8b8>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a73      	ldr	r2, [pc, #460]	; (80028e4 <HAL_DMA_IRQHandler+0xa1c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d031      	beq.n	8002780 <HAL_DMA_IRQHandler+0x8b8>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a71      	ldr	r2, [pc, #452]	; (80028e8 <HAL_DMA_IRQHandler+0xa20>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d02c      	beq.n	8002780 <HAL_DMA_IRQHandler+0x8b8>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a70      	ldr	r2, [pc, #448]	; (80028ec <HAL_DMA_IRQHandler+0xa24>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d027      	beq.n	8002780 <HAL_DMA_IRQHandler+0x8b8>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a6e      	ldr	r2, [pc, #440]	; (80028f0 <HAL_DMA_IRQHandler+0xa28>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d022      	beq.n	8002780 <HAL_DMA_IRQHandler+0x8b8>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a6d      	ldr	r2, [pc, #436]	; (80028f4 <HAL_DMA_IRQHandler+0xa2c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d01d      	beq.n	8002780 <HAL_DMA_IRQHandler+0x8b8>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a6b      	ldr	r2, [pc, #428]	; (80028f8 <HAL_DMA_IRQHandler+0xa30>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d018      	beq.n	8002780 <HAL_DMA_IRQHandler+0x8b8>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a6a      	ldr	r2, [pc, #424]	; (80028fc <HAL_DMA_IRQHandler+0xa34>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d013      	beq.n	8002780 <HAL_DMA_IRQHandler+0x8b8>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a68      	ldr	r2, [pc, #416]	; (8002900 <HAL_DMA_IRQHandler+0xa38>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00e      	beq.n	8002780 <HAL_DMA_IRQHandler+0x8b8>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a67      	ldr	r2, [pc, #412]	; (8002904 <HAL_DMA_IRQHandler+0xa3c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d009      	beq.n	8002780 <HAL_DMA_IRQHandler+0x8b8>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a65      	ldr	r2, [pc, #404]	; (8002908 <HAL_DMA_IRQHandler+0xa40>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d004      	beq.n	8002780 <HAL_DMA_IRQHandler+0x8b8>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a64      	ldr	r2, [pc, #400]	; (800290c <HAL_DMA_IRQHandler+0xa44>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d108      	bne.n	8002792 <HAL_DMA_IRQHandler+0x8ca>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0201 	bic.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e007      	b.n	80027a2 <HAL_DMA_IRQHandler+0x8da>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0201 	bic.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3301      	adds	r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d307      	bcc.n	80027be <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f2      	bne.n	80027a2 <HAL_DMA_IRQHandler+0x8da>
 80027bc:	e000      	b.n	80027c0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80027be:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d004      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2203      	movs	r2, #3
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80027d6:	e003      	b.n	80027e0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 8272 	beq.w	8002cd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	4798      	blx	r3
 80027fa:	e26c      	b.n	8002cd6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a43      	ldr	r2, [pc, #268]	; (8002910 <HAL_DMA_IRQHandler+0xa48>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d022      	beq.n	800284c <HAL_DMA_IRQHandler+0x984>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a42      	ldr	r2, [pc, #264]	; (8002914 <HAL_DMA_IRQHandler+0xa4c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d01d      	beq.n	800284c <HAL_DMA_IRQHandler+0x984>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a40      	ldr	r2, [pc, #256]	; (8002918 <HAL_DMA_IRQHandler+0xa50>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d018      	beq.n	800284c <HAL_DMA_IRQHandler+0x984>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a3f      	ldr	r2, [pc, #252]	; (800291c <HAL_DMA_IRQHandler+0xa54>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d013      	beq.n	800284c <HAL_DMA_IRQHandler+0x984>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a3d      	ldr	r2, [pc, #244]	; (8002920 <HAL_DMA_IRQHandler+0xa58>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00e      	beq.n	800284c <HAL_DMA_IRQHandler+0x984>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a3c      	ldr	r2, [pc, #240]	; (8002924 <HAL_DMA_IRQHandler+0xa5c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d009      	beq.n	800284c <HAL_DMA_IRQHandler+0x984>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a3a      	ldr	r2, [pc, #232]	; (8002928 <HAL_DMA_IRQHandler+0xa60>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d004      	beq.n	800284c <HAL_DMA_IRQHandler+0x984>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a39      	ldr	r2, [pc, #228]	; (800292c <HAL_DMA_IRQHandler+0xa64>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d101      	bne.n	8002850 <HAL_DMA_IRQHandler+0x988>
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <HAL_DMA_IRQHandler+0x98a>
 8002850:	2300      	movs	r3, #0
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 823f 	beq.w	8002cd6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	2204      	movs	r2, #4
 800286a:	409a      	lsls	r2, r3
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	4013      	ands	r3, r2
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80cd 	beq.w	8002a10 <HAL_DMA_IRQHandler+0xb48>
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 80c7 	beq.w	8002a10 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002886:	f003 031f 	and.w	r3, r3, #31
 800288a:	2204      	movs	r2, #4
 800288c:	409a      	lsls	r2, r3
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d049      	beq.n	8002930 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8210 	beq.w	8002cd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028b8:	e20a      	b.n	8002cd0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 8206 	beq.w	8002cd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028cc:	e200      	b.n	8002cd0 <HAL_DMA_IRQHandler+0xe08>
 80028ce:	bf00      	nop
 80028d0:	40020010 	.word	0x40020010
 80028d4:	40020028 	.word	0x40020028
 80028d8:	40020040 	.word	0x40020040
 80028dc:	40020058 	.word	0x40020058
 80028e0:	40020070 	.word	0x40020070
 80028e4:	40020088 	.word	0x40020088
 80028e8:	400200a0 	.word	0x400200a0
 80028ec:	400200b8 	.word	0x400200b8
 80028f0:	40020410 	.word	0x40020410
 80028f4:	40020428 	.word	0x40020428
 80028f8:	40020440 	.word	0x40020440
 80028fc:	40020458 	.word	0x40020458
 8002900:	40020470 	.word	0x40020470
 8002904:	40020488 	.word	0x40020488
 8002908:	400204a0 	.word	0x400204a0
 800290c:	400204b8 	.word	0x400204b8
 8002910:	58025408 	.word	0x58025408
 8002914:	5802541c 	.word	0x5802541c
 8002918:	58025430 	.word	0x58025430
 800291c:	58025444 	.word	0x58025444
 8002920:	58025458 	.word	0x58025458
 8002924:	5802546c 	.word	0x5802546c
 8002928:	58025480 	.word	0x58025480
 800292c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	2b00      	cmp	r3, #0
 8002938:	d160      	bne.n	80029fc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a7f      	ldr	r2, [pc, #508]	; (8002b3c <HAL_DMA_IRQHandler+0xc74>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d04a      	beq.n	80029da <HAL_DMA_IRQHandler+0xb12>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a7d      	ldr	r2, [pc, #500]	; (8002b40 <HAL_DMA_IRQHandler+0xc78>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d045      	beq.n	80029da <HAL_DMA_IRQHandler+0xb12>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a7c      	ldr	r2, [pc, #496]	; (8002b44 <HAL_DMA_IRQHandler+0xc7c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d040      	beq.n	80029da <HAL_DMA_IRQHandler+0xb12>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a7a      	ldr	r2, [pc, #488]	; (8002b48 <HAL_DMA_IRQHandler+0xc80>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d03b      	beq.n	80029da <HAL_DMA_IRQHandler+0xb12>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a79      	ldr	r2, [pc, #484]	; (8002b4c <HAL_DMA_IRQHandler+0xc84>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d036      	beq.n	80029da <HAL_DMA_IRQHandler+0xb12>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a77      	ldr	r2, [pc, #476]	; (8002b50 <HAL_DMA_IRQHandler+0xc88>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d031      	beq.n	80029da <HAL_DMA_IRQHandler+0xb12>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a76      	ldr	r2, [pc, #472]	; (8002b54 <HAL_DMA_IRQHandler+0xc8c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d02c      	beq.n	80029da <HAL_DMA_IRQHandler+0xb12>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a74      	ldr	r2, [pc, #464]	; (8002b58 <HAL_DMA_IRQHandler+0xc90>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d027      	beq.n	80029da <HAL_DMA_IRQHandler+0xb12>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a73      	ldr	r2, [pc, #460]	; (8002b5c <HAL_DMA_IRQHandler+0xc94>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d022      	beq.n	80029da <HAL_DMA_IRQHandler+0xb12>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a71      	ldr	r2, [pc, #452]	; (8002b60 <HAL_DMA_IRQHandler+0xc98>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01d      	beq.n	80029da <HAL_DMA_IRQHandler+0xb12>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a70      	ldr	r2, [pc, #448]	; (8002b64 <HAL_DMA_IRQHandler+0xc9c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d018      	beq.n	80029da <HAL_DMA_IRQHandler+0xb12>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a6e      	ldr	r2, [pc, #440]	; (8002b68 <HAL_DMA_IRQHandler+0xca0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d013      	beq.n	80029da <HAL_DMA_IRQHandler+0xb12>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a6d      	ldr	r2, [pc, #436]	; (8002b6c <HAL_DMA_IRQHandler+0xca4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d00e      	beq.n	80029da <HAL_DMA_IRQHandler+0xb12>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a6b      	ldr	r2, [pc, #428]	; (8002b70 <HAL_DMA_IRQHandler+0xca8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d009      	beq.n	80029da <HAL_DMA_IRQHandler+0xb12>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a6a      	ldr	r2, [pc, #424]	; (8002b74 <HAL_DMA_IRQHandler+0xcac>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d004      	beq.n	80029da <HAL_DMA_IRQHandler+0xb12>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a68      	ldr	r2, [pc, #416]	; (8002b78 <HAL_DMA_IRQHandler+0xcb0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d108      	bne.n	80029ec <HAL_DMA_IRQHandler+0xb24>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0208 	bic.w	r2, r2, #8
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	e007      	b.n	80029fc <HAL_DMA_IRQHandler+0xb34>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0204 	bic.w	r2, r2, #4
 80029fa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 8165 	beq.w	8002cd0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a0e:	e15f      	b.n	8002cd0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	2202      	movs	r2, #2
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80c5 	beq.w	8002bb0 <HAL_DMA_IRQHandler+0xce8>
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80bf 	beq.w	8002bb0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	409a      	lsls	r2, r3
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d018      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 813a 	beq.w	8002cd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a68:	e134      	b.n	8002cd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 8130 	beq.w	8002cd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a7c:	e12a      	b.n	8002cd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f040 8089 	bne.w	8002b9c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a2b      	ldr	r2, [pc, #172]	; (8002b3c <HAL_DMA_IRQHandler+0xc74>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d04a      	beq.n	8002b2a <HAL_DMA_IRQHandler+0xc62>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a29      	ldr	r2, [pc, #164]	; (8002b40 <HAL_DMA_IRQHandler+0xc78>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d045      	beq.n	8002b2a <HAL_DMA_IRQHandler+0xc62>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a28      	ldr	r2, [pc, #160]	; (8002b44 <HAL_DMA_IRQHandler+0xc7c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d040      	beq.n	8002b2a <HAL_DMA_IRQHandler+0xc62>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a26      	ldr	r2, [pc, #152]	; (8002b48 <HAL_DMA_IRQHandler+0xc80>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d03b      	beq.n	8002b2a <HAL_DMA_IRQHandler+0xc62>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a25      	ldr	r2, [pc, #148]	; (8002b4c <HAL_DMA_IRQHandler+0xc84>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d036      	beq.n	8002b2a <HAL_DMA_IRQHandler+0xc62>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a23      	ldr	r2, [pc, #140]	; (8002b50 <HAL_DMA_IRQHandler+0xc88>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d031      	beq.n	8002b2a <HAL_DMA_IRQHandler+0xc62>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a22      	ldr	r2, [pc, #136]	; (8002b54 <HAL_DMA_IRQHandler+0xc8c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d02c      	beq.n	8002b2a <HAL_DMA_IRQHandler+0xc62>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a20      	ldr	r2, [pc, #128]	; (8002b58 <HAL_DMA_IRQHandler+0xc90>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d027      	beq.n	8002b2a <HAL_DMA_IRQHandler+0xc62>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1f      	ldr	r2, [pc, #124]	; (8002b5c <HAL_DMA_IRQHandler+0xc94>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d022      	beq.n	8002b2a <HAL_DMA_IRQHandler+0xc62>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1d      	ldr	r2, [pc, #116]	; (8002b60 <HAL_DMA_IRQHandler+0xc98>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d01d      	beq.n	8002b2a <HAL_DMA_IRQHandler+0xc62>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a1c      	ldr	r2, [pc, #112]	; (8002b64 <HAL_DMA_IRQHandler+0xc9c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d018      	beq.n	8002b2a <HAL_DMA_IRQHandler+0xc62>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a1a      	ldr	r2, [pc, #104]	; (8002b68 <HAL_DMA_IRQHandler+0xca0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d013      	beq.n	8002b2a <HAL_DMA_IRQHandler+0xc62>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a19      	ldr	r2, [pc, #100]	; (8002b6c <HAL_DMA_IRQHandler+0xca4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00e      	beq.n	8002b2a <HAL_DMA_IRQHandler+0xc62>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a17      	ldr	r2, [pc, #92]	; (8002b70 <HAL_DMA_IRQHandler+0xca8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d009      	beq.n	8002b2a <HAL_DMA_IRQHandler+0xc62>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a16      	ldr	r2, [pc, #88]	; (8002b74 <HAL_DMA_IRQHandler+0xcac>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d004      	beq.n	8002b2a <HAL_DMA_IRQHandler+0xc62>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a14      	ldr	r2, [pc, #80]	; (8002b78 <HAL_DMA_IRQHandler+0xcb0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d128      	bne.n	8002b7c <HAL_DMA_IRQHandler+0xcb4>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0214 	bic.w	r2, r2, #20
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	e027      	b.n	8002b8c <HAL_DMA_IRQHandler+0xcc4>
 8002b3c:	40020010 	.word	0x40020010
 8002b40:	40020028 	.word	0x40020028
 8002b44:	40020040 	.word	0x40020040
 8002b48:	40020058 	.word	0x40020058
 8002b4c:	40020070 	.word	0x40020070
 8002b50:	40020088 	.word	0x40020088
 8002b54:	400200a0 	.word	0x400200a0
 8002b58:	400200b8 	.word	0x400200b8
 8002b5c:	40020410 	.word	0x40020410
 8002b60:	40020428 	.word	0x40020428
 8002b64:	40020440 	.word	0x40020440
 8002b68:	40020458 	.word	0x40020458
 8002b6c:	40020470 	.word	0x40020470
 8002b70:	40020488 	.word	0x40020488
 8002b74:	400204a0 	.word	0x400204a0
 8002b78:	400204b8 	.word	0x400204b8
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 020a 	bic.w	r2, r2, #10
 8002b8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 8097 	beq.w	8002cd4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002bae:	e091      	b.n	8002cd4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	f003 031f 	and.w	r3, r3, #31
 8002bb8:	2208      	movs	r2, #8
 8002bba:	409a      	lsls	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 8088 	beq.w	8002cd6 <HAL_DMA_IRQHandler+0xe0e>
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 8082 	beq.w	8002cd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a41      	ldr	r2, [pc, #260]	; (8002cdc <HAL_DMA_IRQHandler+0xe14>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d04a      	beq.n	8002c72 <HAL_DMA_IRQHandler+0xdaa>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a3f      	ldr	r2, [pc, #252]	; (8002ce0 <HAL_DMA_IRQHandler+0xe18>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d045      	beq.n	8002c72 <HAL_DMA_IRQHandler+0xdaa>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a3e      	ldr	r2, [pc, #248]	; (8002ce4 <HAL_DMA_IRQHandler+0xe1c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d040      	beq.n	8002c72 <HAL_DMA_IRQHandler+0xdaa>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a3c      	ldr	r2, [pc, #240]	; (8002ce8 <HAL_DMA_IRQHandler+0xe20>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d03b      	beq.n	8002c72 <HAL_DMA_IRQHandler+0xdaa>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a3b      	ldr	r2, [pc, #236]	; (8002cec <HAL_DMA_IRQHandler+0xe24>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d036      	beq.n	8002c72 <HAL_DMA_IRQHandler+0xdaa>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a39      	ldr	r2, [pc, #228]	; (8002cf0 <HAL_DMA_IRQHandler+0xe28>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d031      	beq.n	8002c72 <HAL_DMA_IRQHandler+0xdaa>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a38      	ldr	r2, [pc, #224]	; (8002cf4 <HAL_DMA_IRQHandler+0xe2c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d02c      	beq.n	8002c72 <HAL_DMA_IRQHandler+0xdaa>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a36      	ldr	r2, [pc, #216]	; (8002cf8 <HAL_DMA_IRQHandler+0xe30>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d027      	beq.n	8002c72 <HAL_DMA_IRQHandler+0xdaa>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a35      	ldr	r2, [pc, #212]	; (8002cfc <HAL_DMA_IRQHandler+0xe34>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d022      	beq.n	8002c72 <HAL_DMA_IRQHandler+0xdaa>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a33      	ldr	r2, [pc, #204]	; (8002d00 <HAL_DMA_IRQHandler+0xe38>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d01d      	beq.n	8002c72 <HAL_DMA_IRQHandler+0xdaa>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a32      	ldr	r2, [pc, #200]	; (8002d04 <HAL_DMA_IRQHandler+0xe3c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d018      	beq.n	8002c72 <HAL_DMA_IRQHandler+0xdaa>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a30      	ldr	r2, [pc, #192]	; (8002d08 <HAL_DMA_IRQHandler+0xe40>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <HAL_DMA_IRQHandler+0xdaa>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a2f      	ldr	r2, [pc, #188]	; (8002d0c <HAL_DMA_IRQHandler+0xe44>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d00e      	beq.n	8002c72 <HAL_DMA_IRQHandler+0xdaa>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a2d      	ldr	r2, [pc, #180]	; (8002d10 <HAL_DMA_IRQHandler+0xe48>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d009      	beq.n	8002c72 <HAL_DMA_IRQHandler+0xdaa>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a2c      	ldr	r2, [pc, #176]	; (8002d14 <HAL_DMA_IRQHandler+0xe4c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d004      	beq.n	8002c72 <HAL_DMA_IRQHandler+0xdaa>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a2a      	ldr	r2, [pc, #168]	; (8002d18 <HAL_DMA_IRQHandler+0xe50>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d108      	bne.n	8002c84 <HAL_DMA_IRQHandler+0xdbc>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 021c 	bic.w	r2, r2, #28
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	e007      	b.n	8002c94 <HAL_DMA_IRQHandler+0xdcc>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 020e 	bic.w	r2, r2, #14
 8002c92:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	4798      	blx	r3
 8002cca:	e004      	b.n	8002cd6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002ccc:	bf00      	nop
 8002cce:	e002      	b.n	8002cd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cd0:	bf00      	nop
 8002cd2:	e000      	b.n	8002cd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cd4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002cd6:	3728      	adds	r7, #40	; 0x28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40020010 	.word	0x40020010
 8002ce0:	40020028 	.word	0x40020028
 8002ce4:	40020040 	.word	0x40020040
 8002ce8:	40020058 	.word	0x40020058
 8002cec:	40020070 	.word	0x40020070
 8002cf0:	40020088 	.word	0x40020088
 8002cf4:	400200a0 	.word	0x400200a0
 8002cf8:	400200b8 	.word	0x400200b8
 8002cfc:	40020410 	.word	0x40020410
 8002d00:	40020428 	.word	0x40020428
 8002d04:	40020440 	.word	0x40020440
 8002d08:	40020458 	.word	0x40020458
 8002d0c:	40020470 	.word	0x40020470
 8002d10:	40020488 	.word	0x40020488
 8002d14:	400204a0 	.word	0x400204a0
 8002d18:	400204b8 	.word	0x400204b8

08002d1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a42      	ldr	r2, [pc, #264]	; (8002e34 <DMA_CalcBaseAndBitshift+0x118>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d04a      	beq.n	8002dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a41      	ldr	r2, [pc, #260]	; (8002e38 <DMA_CalcBaseAndBitshift+0x11c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d045      	beq.n	8002dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a3f      	ldr	r2, [pc, #252]	; (8002e3c <DMA_CalcBaseAndBitshift+0x120>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d040      	beq.n	8002dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a3e      	ldr	r2, [pc, #248]	; (8002e40 <DMA_CalcBaseAndBitshift+0x124>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d03b      	beq.n	8002dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a3c      	ldr	r2, [pc, #240]	; (8002e44 <DMA_CalcBaseAndBitshift+0x128>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d036      	beq.n	8002dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a3b      	ldr	r2, [pc, #236]	; (8002e48 <DMA_CalcBaseAndBitshift+0x12c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d031      	beq.n	8002dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a39      	ldr	r2, [pc, #228]	; (8002e4c <DMA_CalcBaseAndBitshift+0x130>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d02c      	beq.n	8002dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a38      	ldr	r2, [pc, #224]	; (8002e50 <DMA_CalcBaseAndBitshift+0x134>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d027      	beq.n	8002dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a36      	ldr	r2, [pc, #216]	; (8002e54 <DMA_CalcBaseAndBitshift+0x138>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d022      	beq.n	8002dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a35      	ldr	r2, [pc, #212]	; (8002e58 <DMA_CalcBaseAndBitshift+0x13c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d01d      	beq.n	8002dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a33      	ldr	r2, [pc, #204]	; (8002e5c <DMA_CalcBaseAndBitshift+0x140>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d018      	beq.n	8002dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a32      	ldr	r2, [pc, #200]	; (8002e60 <DMA_CalcBaseAndBitshift+0x144>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d013      	beq.n	8002dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a30      	ldr	r2, [pc, #192]	; (8002e64 <DMA_CalcBaseAndBitshift+0x148>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00e      	beq.n	8002dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a2f      	ldr	r2, [pc, #188]	; (8002e68 <DMA_CalcBaseAndBitshift+0x14c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d009      	beq.n	8002dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a2d      	ldr	r2, [pc, #180]	; (8002e6c <DMA_CalcBaseAndBitshift+0x150>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d004      	beq.n	8002dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a2c      	ldr	r2, [pc, #176]	; (8002e70 <DMA_CalcBaseAndBitshift+0x154>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d101      	bne.n	8002dc8 <DMA_CalcBaseAndBitshift+0xac>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e000      	b.n	8002dca <DMA_CalcBaseAndBitshift+0xae>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d024      	beq.n	8002e18 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	3b10      	subs	r3, #16
 8002dd6:	4a27      	ldr	r2, [pc, #156]	; (8002e74 <DMA_CalcBaseAndBitshift+0x158>)
 8002dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	4a24      	ldr	r2, [pc, #144]	; (8002e78 <DMA_CalcBaseAndBitshift+0x15c>)
 8002de8:	5cd3      	ldrb	r3, [r2, r3]
 8002dea:	461a      	mov	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d908      	bls.n	8002e08 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4b1f      	ldr	r3, [pc, #124]	; (8002e7c <DMA_CalcBaseAndBitshift+0x160>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	1d1a      	adds	r2, r3, #4
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	659a      	str	r2, [r3, #88]	; 0x58
 8002e06:	e00d      	b.n	8002e24 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <DMA_CalcBaseAndBitshift+0x160>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6593      	str	r3, [r2, #88]	; 0x58
 8002e16:	e005      	b.n	8002e24 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	40020010 	.word	0x40020010
 8002e38:	40020028 	.word	0x40020028
 8002e3c:	40020040 	.word	0x40020040
 8002e40:	40020058 	.word	0x40020058
 8002e44:	40020070 	.word	0x40020070
 8002e48:	40020088 	.word	0x40020088
 8002e4c:	400200a0 	.word	0x400200a0
 8002e50:	400200b8 	.word	0x400200b8
 8002e54:	40020410 	.word	0x40020410
 8002e58:	40020428 	.word	0x40020428
 8002e5c:	40020440 	.word	0x40020440
 8002e60:	40020458 	.word	0x40020458
 8002e64:	40020470 	.word	0x40020470
 8002e68:	40020488 	.word	0x40020488
 8002e6c:	400204a0 	.word	0x400204a0
 8002e70:	400204b8 	.word	0x400204b8
 8002e74:	aaaaaaab 	.word	0xaaaaaaab
 8002e78:	08011fc0 	.word	0x08011fc0
 8002e7c:	fffffc00 	.word	0xfffffc00

08002e80 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d120      	bne.n	8002ed6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d858      	bhi.n	8002f4e <DMA_CheckFifoParam+0xce>
 8002e9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ea4 <DMA_CheckFifoParam+0x24>)
 8002e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea2:	bf00      	nop
 8002ea4:	08002eb5 	.word	0x08002eb5
 8002ea8:	08002ec7 	.word	0x08002ec7
 8002eac:	08002eb5 	.word	0x08002eb5
 8002eb0:	08002f4f 	.word	0x08002f4f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d048      	beq.n	8002f52 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ec4:	e045      	b.n	8002f52 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ece:	d142      	bne.n	8002f56 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ed4:	e03f      	b.n	8002f56 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ede:	d123      	bne.n	8002f28 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d838      	bhi.n	8002f5a <DMA_CheckFifoParam+0xda>
 8002ee8:	a201      	add	r2, pc, #4	; (adr r2, 8002ef0 <DMA_CheckFifoParam+0x70>)
 8002eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eee:	bf00      	nop
 8002ef0:	08002f01 	.word	0x08002f01
 8002ef4:	08002f07 	.word	0x08002f07
 8002ef8:	08002f01 	.word	0x08002f01
 8002efc:	08002f19 	.word	0x08002f19
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
        break;
 8002f04:	e030      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d025      	beq.n	8002f5e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f16:	e022      	b.n	8002f5e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f20:	d11f      	bne.n	8002f62 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f26:	e01c      	b.n	8002f62 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d902      	bls.n	8002f36 <DMA_CheckFifoParam+0xb6>
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d003      	beq.n	8002f3c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002f34:	e018      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	73fb      	strb	r3, [r7, #15]
        break;
 8002f3a:	e015      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00e      	beq.n	8002f66 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
    break;
 8002f4c:	e00b      	b.n	8002f66 <DMA_CheckFifoParam+0xe6>
        break;
 8002f4e:	bf00      	nop
 8002f50:	e00a      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
        break;
 8002f52:	bf00      	nop
 8002f54:	e008      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
        break;
 8002f56:	bf00      	nop
 8002f58:	e006      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
        break;
 8002f5a:	bf00      	nop
 8002f5c:	e004      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
        break;
 8002f5e:	bf00      	nop
 8002f60:	e002      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
        break;
 8002f62:	bf00      	nop
 8002f64:	e000      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
    break;
 8002f66:	bf00      	nop
    }
  }

  return status;
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop

08002f78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a38      	ldr	r2, [pc, #224]	; (800306c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d022      	beq.n	8002fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a36      	ldr	r2, [pc, #216]	; (8003070 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d01d      	beq.n	8002fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a35      	ldr	r2, [pc, #212]	; (8003074 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d018      	beq.n	8002fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a33      	ldr	r2, [pc, #204]	; (8003078 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d013      	beq.n	8002fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a32      	ldr	r2, [pc, #200]	; (800307c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d00e      	beq.n	8002fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a30      	ldr	r2, [pc, #192]	; (8003080 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d009      	beq.n	8002fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a2f      	ldr	r2, [pc, #188]	; (8003084 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d004      	beq.n	8002fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a2d      	ldr	r2, [pc, #180]	; (8003088 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d101      	bne.n	8002fda <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01a      	beq.n	8003016 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	3b08      	subs	r3, #8
 8002fe8:	4a28      	ldr	r2, [pc, #160]	; (800308c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	091b      	lsrs	r3, r3, #4
 8002ff0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4b26      	ldr	r3, [pc, #152]	; (8003090 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a24      	ldr	r2, [pc, #144]	; (8003094 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003004:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	2201      	movs	r2, #1
 800300e:	409a      	lsls	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003014:	e024      	b.n	8003060 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	3b10      	subs	r3, #16
 800301e:	4a1e      	ldr	r2, [pc, #120]	; (8003098 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003020:	fba2 2303 	umull	r2, r3, r2, r3
 8003024:	091b      	lsrs	r3, r3, #4
 8003026:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4a1c      	ldr	r2, [pc, #112]	; (800309c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d806      	bhi.n	800303e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4a1b      	ldr	r2, [pc, #108]	; (80030a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d902      	bls.n	800303e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	3308      	adds	r3, #8
 800303c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	461a      	mov	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a16      	ldr	r2, [pc, #88]	; (80030a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003050:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	2201      	movs	r2, #1
 800305a:	409a      	lsls	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003060:	bf00      	nop
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	58025408 	.word	0x58025408
 8003070:	5802541c 	.word	0x5802541c
 8003074:	58025430 	.word	0x58025430
 8003078:	58025444 	.word	0x58025444
 800307c:	58025458 	.word	0x58025458
 8003080:	5802546c 	.word	0x5802546c
 8003084:	58025480 	.word	0x58025480
 8003088:	58025494 	.word	0x58025494
 800308c:	cccccccd 	.word	0xcccccccd
 8003090:	16009600 	.word	0x16009600
 8003094:	58025880 	.word	0x58025880
 8003098:	aaaaaaab 	.word	0xaaaaaaab
 800309c:	400204b8 	.word	0x400204b8
 80030a0:	4002040f 	.word	0x4002040f
 80030a4:	10008200 	.word	0x10008200
 80030a8:	40020880 	.word	0x40020880

080030ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d04a      	beq.n	8003158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d847      	bhi.n	8003158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a25      	ldr	r2, [pc, #148]	; (8003164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d022      	beq.n	8003118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a24      	ldr	r2, [pc, #144]	; (8003168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d01d      	beq.n	8003118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a22      	ldr	r2, [pc, #136]	; (800316c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d018      	beq.n	8003118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a21      	ldr	r2, [pc, #132]	; (8003170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d013      	beq.n	8003118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a1f      	ldr	r2, [pc, #124]	; (8003174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00e      	beq.n	8003118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1e      	ldr	r2, [pc, #120]	; (8003178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d009      	beq.n	8003118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a1c      	ldr	r2, [pc, #112]	; (800317c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d004      	beq.n	8003118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a1b      	ldr	r2, [pc, #108]	; (8003180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d101      	bne.n	800311c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800311c:	2300      	movs	r3, #0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4b17      	ldr	r3, [pc, #92]	; (8003184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	461a      	mov	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a15      	ldr	r2, [pc, #84]	; (8003188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003134:	671a      	str	r2, [r3, #112]	; 0x70
 8003136:	e009      	b.n	800314c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4b14      	ldr	r3, [pc, #80]	; (800318c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	461a      	mov	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a11      	ldr	r2, [pc, #68]	; (8003190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800314a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3b01      	subs	r3, #1
 8003150:	2201      	movs	r2, #1
 8003152:	409a      	lsls	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003158:	bf00      	nop
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	58025408 	.word	0x58025408
 8003168:	5802541c 	.word	0x5802541c
 800316c:	58025430 	.word	0x58025430
 8003170:	58025444 	.word	0x58025444
 8003174:	58025458 	.word	0x58025458
 8003178:	5802546c 	.word	0x5802546c
 800317c:	58025480 	.word	0x58025480
 8003180:	58025494 	.word	0x58025494
 8003184:	1600963f 	.word	0x1600963f
 8003188:	58025940 	.word	0x58025940
 800318c:	1000823f 	.word	0x1000823f
 8003190:	40020940 	.word	0x40020940

08003194 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003194:	b480      	push	{r7}
 8003196:	b089      	sub	sp, #36	; 0x24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800319e:	2300      	movs	r3, #0
 80031a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80031a2:	4b89      	ldr	r3, [pc, #548]	; (80033c8 <HAL_GPIO_Init+0x234>)
 80031a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031a6:	e194      	b.n	80034d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	2101      	movs	r1, #1
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	fa01 f303 	lsl.w	r3, r1, r3
 80031b4:	4013      	ands	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 8186 	beq.w	80034cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d005      	beq.n	80031d8 <HAL_GPIO_Init+0x44>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d130      	bne.n	800323a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	2203      	movs	r2, #3
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800320e:	2201      	movs	r2, #1
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43db      	mvns	r3, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4013      	ands	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	091b      	lsrs	r3, r3, #4
 8003224:	f003 0201 	and.w	r2, r3, #1
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	2b03      	cmp	r3, #3
 8003244:	d017      	beq.n	8003276 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	2203      	movs	r2, #3
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4313      	orrs	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d123      	bne.n	80032ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	08da      	lsrs	r2, r3, #3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3208      	adds	r2, #8
 800328a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800328e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	220f      	movs	r2, #15
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	691a      	ldr	r2, [r3, #16]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	08da      	lsrs	r2, r3, #3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3208      	adds	r2, #8
 80032c4:	69b9      	ldr	r1, [r7, #24]
 80032c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	2203      	movs	r2, #3
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 0203 	and.w	r2, r3, #3
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 80e0 	beq.w	80034cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800330c:	4b2f      	ldr	r3, [pc, #188]	; (80033cc <HAL_GPIO_Init+0x238>)
 800330e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003312:	4a2e      	ldr	r2, [pc, #184]	; (80033cc <HAL_GPIO_Init+0x238>)
 8003314:	f043 0302 	orr.w	r3, r3, #2
 8003318:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800331c:	4b2b      	ldr	r3, [pc, #172]	; (80033cc <HAL_GPIO_Init+0x238>)
 800331e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800332a:	4a29      	ldr	r2, [pc, #164]	; (80033d0 <HAL_GPIO_Init+0x23c>)
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	089b      	lsrs	r3, r3, #2
 8003330:	3302      	adds	r3, #2
 8003332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	220f      	movs	r2, #15
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a20      	ldr	r2, [pc, #128]	; (80033d4 <HAL_GPIO_Init+0x240>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d052      	beq.n	80033fc <HAL_GPIO_Init+0x268>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a1f      	ldr	r2, [pc, #124]	; (80033d8 <HAL_GPIO_Init+0x244>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d031      	beq.n	80033c2 <HAL_GPIO_Init+0x22e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a1e      	ldr	r2, [pc, #120]	; (80033dc <HAL_GPIO_Init+0x248>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d02b      	beq.n	80033be <HAL_GPIO_Init+0x22a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a1d      	ldr	r2, [pc, #116]	; (80033e0 <HAL_GPIO_Init+0x24c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d025      	beq.n	80033ba <HAL_GPIO_Init+0x226>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a1c      	ldr	r2, [pc, #112]	; (80033e4 <HAL_GPIO_Init+0x250>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d01f      	beq.n	80033b6 <HAL_GPIO_Init+0x222>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a1b      	ldr	r2, [pc, #108]	; (80033e8 <HAL_GPIO_Init+0x254>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d019      	beq.n	80033b2 <HAL_GPIO_Init+0x21e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a1a      	ldr	r2, [pc, #104]	; (80033ec <HAL_GPIO_Init+0x258>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <HAL_GPIO_Init+0x21a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a19      	ldr	r2, [pc, #100]	; (80033f0 <HAL_GPIO_Init+0x25c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00d      	beq.n	80033aa <HAL_GPIO_Init+0x216>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a18      	ldr	r2, [pc, #96]	; (80033f4 <HAL_GPIO_Init+0x260>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d007      	beq.n	80033a6 <HAL_GPIO_Init+0x212>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a17      	ldr	r2, [pc, #92]	; (80033f8 <HAL_GPIO_Init+0x264>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d101      	bne.n	80033a2 <HAL_GPIO_Init+0x20e>
 800339e:	2309      	movs	r3, #9
 80033a0:	e02d      	b.n	80033fe <HAL_GPIO_Init+0x26a>
 80033a2:	230a      	movs	r3, #10
 80033a4:	e02b      	b.n	80033fe <HAL_GPIO_Init+0x26a>
 80033a6:	2308      	movs	r3, #8
 80033a8:	e029      	b.n	80033fe <HAL_GPIO_Init+0x26a>
 80033aa:	2307      	movs	r3, #7
 80033ac:	e027      	b.n	80033fe <HAL_GPIO_Init+0x26a>
 80033ae:	2306      	movs	r3, #6
 80033b0:	e025      	b.n	80033fe <HAL_GPIO_Init+0x26a>
 80033b2:	2305      	movs	r3, #5
 80033b4:	e023      	b.n	80033fe <HAL_GPIO_Init+0x26a>
 80033b6:	2304      	movs	r3, #4
 80033b8:	e021      	b.n	80033fe <HAL_GPIO_Init+0x26a>
 80033ba:	2303      	movs	r3, #3
 80033bc:	e01f      	b.n	80033fe <HAL_GPIO_Init+0x26a>
 80033be:	2302      	movs	r3, #2
 80033c0:	e01d      	b.n	80033fe <HAL_GPIO_Init+0x26a>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e01b      	b.n	80033fe <HAL_GPIO_Init+0x26a>
 80033c6:	bf00      	nop
 80033c8:	58000080 	.word	0x58000080
 80033cc:	58024400 	.word	0x58024400
 80033d0:	58000400 	.word	0x58000400
 80033d4:	58020000 	.word	0x58020000
 80033d8:	58020400 	.word	0x58020400
 80033dc:	58020800 	.word	0x58020800
 80033e0:	58020c00 	.word	0x58020c00
 80033e4:	58021000 	.word	0x58021000
 80033e8:	58021400 	.word	0x58021400
 80033ec:	58021800 	.word	0x58021800
 80033f0:	58021c00 	.word	0x58021c00
 80033f4:	58022000 	.word	0x58022000
 80033f8:	58022400 	.word	0x58022400
 80033fc:	2300      	movs	r3, #0
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	f002 0203 	and.w	r2, r2, #3
 8003404:	0092      	lsls	r2, r2, #2
 8003406:	4093      	lsls	r3, r2
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800340e:	4938      	ldr	r1, [pc, #224]	; (80034f0 <HAL_GPIO_Init+0x35c>)
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	089b      	lsrs	r3, r3, #2
 8003414:	3302      	adds	r3, #2
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800341c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	43db      	mvns	r3, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4013      	ands	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003442:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800344a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	43db      	mvns	r3, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4013      	ands	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003470:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4013      	ands	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	3301      	adds	r3, #1
 80034d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	fa22 f303 	lsr.w	r3, r2, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f47f ae63 	bne.w	80031a8 <HAL_GPIO_Init+0x14>
  }
}
 80034e2:	bf00      	nop
 80034e4:	bf00      	nop
 80034e6:	3724      	adds	r7, #36	; 0x24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	58000400 	.word	0x58000400

080034f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	807b      	strh	r3, [r7, #2]
 8003500:	4613      	mov	r3, r2
 8003502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003504:	787b      	ldrb	r3, [r7, #1]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800350a:	887a      	ldrh	r2, [r7, #2]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003510:	e003      	b.n	800351a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003512:	887b      	ldrh	r3, [r7, #2]
 8003514:	041a      	lsls	r2, r3, #16
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	619a      	str	r2, [r3, #24]
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003526:	b480      	push	{r7}
 8003528:	b085      	sub	sp, #20
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	460b      	mov	r3, r1
 8003530:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003538:	887a      	ldrh	r2, [r7, #2]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4013      	ands	r3, r2
 800353e:	041a      	lsls	r2, r3, #16
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	43d9      	mvns	r1, r3
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	400b      	ands	r3, r1
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	619a      	str	r2, [r3, #24]
}
 800354e:	bf00      	nop
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e0bd      	b.n	80036ea <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2202      	movs	r2, #2
 8003572:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d031      	beq.n	8003616 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a4f      	ldr	r2, [pc, #316]	; (80036f4 <HAL_HRTIM_Init+0x198>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d10e      	bne.n	80035da <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80035bc:	4b4e      	ldr	r3, [pc, #312]	; (80036f8 <HAL_HRTIM_Init+0x19c>)
 80035be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035c2:	4a4d      	ldr	r2, [pc, #308]	; (80036f8 <HAL_HRTIM_Init+0x19c>)
 80035c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035cc:	4b4a      	ldr	r3, [pc, #296]	; (80036f8 <HAL_HRTIM_Init+0x19c>)
 80035ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80035e8:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035fe:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fd fc10 	bl	8000e3c <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d012      	beq.n	800364e <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003636:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800365e:	2300      	movs	r3, #0
 8003660:	75fb      	strb	r3, [r7, #23]
 8003662:	e03e      	b.n	80036e2 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8003664:	7dfa      	ldrb	r2, [r7, #23]
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	3318      	adds	r3, #24
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8003678:	7dfa      	ldrb	r2, [r7, #23]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	331c      	adds	r3, #28
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800368c:	7dfa      	ldrb	r2, [r7, #23]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	3320      	adds	r3, #32
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80036a0:	7dfa      	ldrb	r2, [r7, #23]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	3324      	adds	r3, #36	; 0x24
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80036b4:	7dfa      	ldrb	r2, [r7, #23]
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	1a9b      	subs	r3, r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	3328      	adds	r3, #40	; 0x28
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80036c8:	7dfa      	ldrb	r2, [r7, #23]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	3330      	adds	r3, #48	; 0x30
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	3301      	adds	r3, #1
 80036e0:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80036e2:	7dfb      	ldrb	r3, [r7, #23]
 80036e4:	2b05      	cmp	r3, #5
 80036e6:	d9bd      	bls.n	8003664 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40017400 	.word	0x40017400
 80036f8:	58024400 	.word	0x58024400

080036fc <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d101      	bne.n	8003718 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8003714:	2302      	movs	r3, #2
 8003716:	e015      	b.n	8003744 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b05      	cmp	r3, #5
 8003724:	d104      	bne.n	8003730 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 faf4 	bl	8003d16 <HRTIM_MasterBase_Config>
 800372e:	e004      	b.n	800373a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 fb1d 	bl	8003d74 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d101      	bne.n	8003768 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8003764:	2302      	movs	r3, #2
 8003766:	e05f      	b.n	8003828 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8003772:	2302      	movs	r3, #2
 8003774:	e058      	b.n	8003828 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2202      	movs	r2, #2
 8003782:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b05      	cmp	r3, #5
 800378a:	d104      	bne.n	8003796 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fb30 	bl	8003df4 <HRTIM_MasterWaveform_Config>
 8003794:	e004      	b.n	80037a0 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fb90 	bl	8003ec0 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6819      	ldr	r1, [r3, #0]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	4613      	mov	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4403      	add	r3, r0
 80037b2:	3320      	adds	r3, #32
 80037b4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6859      	ldr	r1, [r3, #4]
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4403      	add	r3, r0
 80037c8:	3324      	adds	r3, #36	; 0x24
 80037ca:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6899      	ldr	r1, [r3, #8]
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	4613      	mov	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	1a9b      	subs	r3, r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4403      	add	r3, r0
 80037de:	3328      	adds	r3, #40	; 0x28
 80037e0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68d9      	ldr	r1, [r3, #12]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	4613      	mov	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	1a9b      	subs	r3, r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4403      	add	r3, r0
 80037f4:	332c      	adds	r3, #44	; 0x2c
 80037f6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6919      	ldr	r1, [r3, #16]
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	4613      	mov	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4403      	add	r3, r0
 800380a:	3330      	adds	r3, #48	; 0x30
 800380c:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800380e:	68b9      	ldr	r1, [r7, #8]
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 fc95 	bl	8004140 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d101      	bne.n	800384e <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 800384a:	2302      	movs	r3, #2
 800384c:	e157      	b.n	8003afe <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8003858:	2302      	movs	r3, #2
 800385a:	e150      	b.n	8003afe <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b05      	cmp	r3, #5
 8003870:	d140      	bne.n	80038f4 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3b01      	subs	r3, #1
 8003876:	2b07      	cmp	r3, #7
 8003878:	d82a      	bhi.n	80038d0 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 800387a:	a201      	add	r2, pc, #4	; (adr r2, 8003880 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 800387c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003880:	080038a1 	.word	0x080038a1
 8003884:	080038ad 	.word	0x080038ad
 8003888:	080038d1 	.word	0x080038d1
 800388c:	080038b9 	.word	0x080038b9
 8003890:	080038d1 	.word	0x080038d1
 8003894:	080038d1 	.word	0x080038d1
 8003898:	080038d1 	.word	0x080038d1
 800389c:	080038c5 	.word	0x080038c5
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	61da      	str	r2, [r3, #28]
        break;
 80038aa:	e01a      	b.n	80038e2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 80038b6:	e014      	b.n	80038e2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 80038c2:	e00e      	b.n	80038e2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80038ce:	e008      	b.n	80038e2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2207      	movs	r2, #7
 80038d4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 80038e0:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b07      	cmp	r3, #7
 80038ec:	f040 80fe 	bne.w	8003aec <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e104      	b.n	8003afe <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	2b07      	cmp	r3, #7
 80038fa:	f200 80e3 	bhi.w	8003ac4 <HAL_HRTIM_WaveformCompareConfig+0x294>
 80038fe:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8003900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003904:	08003925 	.word	0x08003925
 8003908:	08003939 	.word	0x08003939
 800390c:	08003ac5 	.word	0x08003ac5
 8003910:	080039f5 	.word	0x080039f5
 8003914:	08003ac5 	.word	0x08003ac5
 8003918:	08003ac5 	.word	0x08003ac5
 800391c:	08003ac5 	.word	0x08003ac5
 8003920:	08003a09 	.word	0x08003a09
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6819      	ldr	r1, [r3, #0]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	01db      	lsls	r3, r3, #7
 8003930:	440b      	add	r3, r1
 8003932:	339c      	adds	r3, #156	; 0x9c
 8003934:	601a      	str	r2, [r3, #0]
        break;
 8003936:	e0d1      	b.n	8003adc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6819      	ldr	r1, [r3, #0]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	01db      	lsls	r3, r3, #7
 8003944:	440b      	add	r3, r1
 8003946:	33a4      	adds	r3, #164	; 0xa4
 8003948:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d03f      	beq.n	80039d2 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	3301      	adds	r3, #1
 800395a:	01db      	lsls	r3, r3, #7
 800395c:	4413      	add	r3, r2
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	6811      	ldr	r1, [r2, #0]
 8003964:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	3301      	adds	r3, #1
 800396c:	01db      	lsls	r3, r3, #7
 800396e:	440b      	add	r3, r1
 8003970:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	3301      	adds	r3, #1
 800397a:	01db      	lsls	r3, r3, #7
 800397c:	4413      	add	r3, r2
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	68f9      	ldr	r1, [r7, #12]
 8003986:	6809      	ldr	r1, [r1, #0]
 8003988:	431a      	orrs	r2, r3
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	3301      	adds	r3, #1
 800398e:	01db      	lsls	r3, r3, #7
 8003990:	440b      	add	r3, r1
 8003992:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399c:	d109      	bne.n	80039b2 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6819      	ldr	r1, [r3, #0]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	01db      	lsls	r3, r3, #7
 80039aa:	440b      	add	r3, r1
 80039ac:	339c      	adds	r3, #156	; 0x9c
 80039ae:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 80039b0:	e091      	b.n	8003ad6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039ba:	f040 808c 	bne.w	8003ad6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6819      	ldr	r1, [r3, #0]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	01db      	lsls	r3, r3, #7
 80039ca:	440b      	add	r3, r1
 80039cc:	33a8      	adds	r3, #168	; 0xa8
 80039ce:	601a      	str	r2, [r3, #0]
         break;
 80039d0:	e081      	b.n	8003ad6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	3301      	adds	r3, #1
 80039da:	01db      	lsls	r3, r3, #7
 80039dc:	4413      	add	r3, r2
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	6811      	ldr	r1, [r2, #0]
 80039e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	3301      	adds	r3, #1
 80039ec:	01db      	lsls	r3, r3, #7
 80039ee:	440b      	add	r3, r1
 80039f0:	601a      	str	r2, [r3, #0]
         break;
 80039f2:	e070      	b.n	8003ad6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6819      	ldr	r1, [r3, #0]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	01db      	lsls	r3, r3, #7
 8003a00:	440b      	add	r3, r1
 8003a02:	33a8      	adds	r3, #168	; 0xa8
 8003a04:	601a      	str	r2, [r3, #0]
        break;
 8003a06:	e069      	b.n	8003adc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6819      	ldr	r1, [r3, #0]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	01db      	lsls	r3, r3, #7
 8003a14:	440b      	add	r3, r1
 8003a16:	33ac      	adds	r3, #172	; 0xac
 8003a18:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d03f      	beq.n	8003aa2 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	01db      	lsls	r3, r3, #7
 8003a2c:	4413      	add	r3, r2
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	6811      	ldr	r1, [r2, #0]
 8003a34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	01db      	lsls	r3, r3, #7
 8003a3e:	440b      	add	r3, r1
 8003a40:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	01db      	lsls	r3, r3, #7
 8003a4c:	4413      	add	r3, r2
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	68f9      	ldr	r1, [r7, #12]
 8003a58:	6809      	ldr	r1, [r1, #0]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	01db      	lsls	r3, r3, #7
 8003a62:	440b      	add	r3, r1
 8003a64:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6e:	d109      	bne.n	8003a84 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6819      	ldr	r1, [r3, #0]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	01db      	lsls	r3, r3, #7
 8003a7c:	440b      	add	r3, r1
 8003a7e:	339c      	adds	r3, #156	; 0x9c
 8003a80:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8003a82:	e02a      	b.n	8003ada <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a8c:	d125      	bne.n	8003ada <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6819      	ldr	r1, [r3, #0]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	01db      	lsls	r3, r3, #7
 8003a9a:	440b      	add	r3, r1
 8003a9c:	33a8      	adds	r3, #168	; 0xa8
 8003a9e:	601a      	str	r2, [r3, #0]
         break;
 8003aa0:	e01b      	b.n	8003ada <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	01db      	lsls	r3, r3, #7
 8003aac:	4413      	add	r3, r2
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	6811      	ldr	r1, [r2, #0]
 8003ab4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	3301      	adds	r3, #1
 8003abc:	01db      	lsls	r3, r3, #7
 8003abe:	440b      	add	r3, r1
 8003ac0:	601a      	str	r2, [r3, #0]
         break;
 8003ac2:	e00a      	b.n	8003ada <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2207      	movs	r2, #7
 8003ac8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8003ad4:	e002      	b.n	8003adc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8003ad6:	bf00      	nop
 8003ad8:	e000      	b.n	8003adc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8003ada:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b07      	cmp	r3, #7
 8003ae6:	d101      	bne.n	8003aec <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e008      	b.n	8003afe <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop

08003b0c <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2bff      	cmp	r3, #255	; 0xff
 8003b1a:	d103      	bne.n	8003b24 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fb71 	bl	8004204 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8003b22:	e00a      	b.n	8003b3a <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2b05      	cmp	r3, #5
 8003b28:	d103      	bne.n	8003b32 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fbe8 	bl	8004300 <HRTIM_Master_ISR>
}
 8003b30:	e003      	b.n	8003b3a <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8003b32:	6839      	ldr	r1, [r7, #0]
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fc8d 	bl	8004454 <HRTIM_Timer_ISR>
}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_D for timer D
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b085      	sub	sp, #20
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0307 	bic.w	r3, r3, #7
 8003d2e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f023 0318 	bic.w	r3, r3, #24
 8003d40:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	6852      	ldr	r2, [r2, #4]
 8003d66:	619a      	str	r2, [r3, #24]
}
 8003d68:	bf00      	nop
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	3301      	adds	r3, #1
 8003d88:	01db      	lsls	r3, r3, #7
 8003d8a:	4413      	add	r3, r2
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f023 0307 	bic.w	r3, r3, #7
 8003d96:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f023 0318 	bic.w	r3, r3, #24
 8003da8:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	01db      	lsls	r3, r3, #7
 8003dbe:	4413      	add	r3, r2
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6819      	ldr	r1, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	01db      	lsls	r3, r3, #7
 8003dd0:	440b      	add	r3, r1
 8003dd2:	3394      	adds	r3, #148	; 0x94
 8003dd4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6819      	ldr	r1, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	01db      	lsls	r3, r3, #7
 8003de2:	440b      	add	r3, r1
 8003de4:	3398      	adds	r3, #152	; 0x98
 8003de6:	601a      	str	r2, [r3, #0]
}
 8003de8:	bf00      	nop
 8003dea:	371c      	adds	r7, #28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8003e0e:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0320 	bic.w	r3, r3, #32
 8003e16:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e28:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e3a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e4c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003e5e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003e70:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003e84:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e96:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b08b      	sub	sp, #44	; 0x2c
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	01db      	lsls	r3, r3, #7
 8003ed6:	4413      	add	r3, r2
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	6811      	ldr	r1, [r2, #0]
 8003ede:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	01db      	lsls	r3, r3, #7
 8003ee8:	440b      	add	r3, r1
 8003eea:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	01db      	lsls	r3, r3, #7
 8003ef6:	4413      	add	r3, r2
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	01db      	lsls	r3, r3, #7
 8003f04:	4413      	add	r3, r2
 8003f06:	33e8      	adds	r3, #232	; 0xe8
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	01db      	lsls	r3, r3, #7
 8003f14:	4413      	add	r3, r2
 8003f16:	33e4      	adds	r3, #228	; 0xe4
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8003f24:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	f023 0320 	bic.w	r3, r3, #32
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f34:	4313      	orrs	r3, r2
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f46:	4313      	orrs	r3, r2
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fa2:	d103      	bne.n	8003fac <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f023 031f 	bic.w	r3, r3, #31
 8003fe8:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ffe:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	4313      	orrs	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400e:	2b00      	cmp	r3, #0
 8004010:	d108      	bne.n	8004024 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004018:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	6a3a      	ldr	r2, [r7, #32]
 8004020:	4313      	orrs	r3, r2
 8004022:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004028:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800402c:	d004      	beq.n	8004038 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8004036:	d103      	bne.n	8004040 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d108      	bne.n	8004052 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8004046:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404c:	6a3a      	ldr	r2, [r7, #32]
 800404e:	4313      	orrs	r3, r2
 8004050:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004056:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b04      	cmp	r3, #4
 800405c:	d843      	bhi.n	80040e6 <HRTIM_TimingUnitWaveform_Config+0x226>
 800405e:	a201      	add	r2, pc, #4	; (adr r2, 8004064 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8004060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004064:	08004079 	.word	0x08004079
 8004068:	0800408f 	.word	0x0800408f
 800406c:	080040a5 	.word	0x080040a5
 8004070:	080040bb 	.word	0x080040bb
 8004074:	080040d1 	.word	0x080040d1
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800407e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	69fa      	ldr	r2, [r7, #28]
 8004088:	4313      	orrs	r3, r2
 800408a:	61fb      	str	r3, [r7, #28]
      break;
 800408c:	e02c      	b.n	80040e8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004094:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	4313      	orrs	r3, r2
 80040a0:	61fb      	str	r3, [r7, #28]
      break;
 80040a2:	e021      	b.n	80040e8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80040aa:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	61fb      	str	r3, [r7, #28]
      break;
 80040b8:	e016      	b.n	80040e8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80040c0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	61fb      	str	r3, [r7, #28]
      break;
 80040ce:	e00b      	b.n	80040e8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040d6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	015b      	lsls	r3, r3, #5
 80040de:	69fa      	ldr	r2, [r7, #28]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61fb      	str	r3, [r7, #28]
      break;
 80040e4:	e000      	b.n	80040e8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 80040e6:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	3301      	adds	r3, #1
 80040f0:	01db      	lsls	r3, r3, #7
 80040f2:	4413      	add	r3, r2
 80040f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	01db      	lsls	r3, r3, #7
 8004100:	4413      	add	r3, r2
 8004102:	33e8      	adds	r3, #232	; 0xe8
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	01db      	lsls	r3, r3, #7
 8004110:	4413      	add	r3, r2
 8004112:	33e4      	adds	r3, #228	; 0xe4
 8004114:	6a3a      	ldr	r2, [r7, #32]
 8004116:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	01db      	lsls	r3, r3, #7
 8004120:	4413      	add	r3, r2
 8004122:	33d4      	adds	r3, #212	; 0xd4
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69fa      	ldr	r2, [r7, #28]
 800412e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8004132:	bf00      	nop
 8004134:	372c      	adds	r7, #44	; 0x2c
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop

08004140 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b05      	cmp	r3, #5
 800414e:	d851      	bhi.n	80041f4 <HRTIM_ForceRegistersUpdate+0xb4>
 8004150:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <HRTIM_ForceRegistersUpdate+0x18>)
 8004152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004156:	bf00      	nop
 8004158:	08004187 	.word	0x08004187
 800415c:	0800419d 	.word	0x0800419d
 8004160:	080041b3 	.word	0x080041b3
 8004164:	080041c9 	.word	0x080041c9
 8004168:	080041df 	.word	0x080041df
 800416c:	08004171 	.word	0x08004171
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0201 	orr.w	r2, r2, #1
 8004180:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004184:	e037      	b.n	80041f6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0202 	orr.w	r2, r2, #2
 8004196:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800419a:	e02c      	b.n	80041f6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0204 	orr.w	r2, r2, #4
 80041ac:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80041b0:	e021      	b.n	80041f6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0208 	orr.w	r2, r2, #8
 80041c2:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80041c6:	e016      	b.n	80041f6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0210 	orr.w	r2, r2, #16
 80041d8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80041dc:	e00b      	b.n	80041f6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0220 	orr.w	r2, r2, #32
 80041ee:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80041f2:	e000      	b.n	80041f6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 80041f4:	bf00      	nop
  }
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop

08004204 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8004214:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800421e:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00c      	beq.n	8004244 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d007      	beq.n	8004244 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2201      	movs	r2, #1
 800423a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7ff fc7f 	bl	8003b42 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00c      	beq.n	8004268 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d007      	beq.n	8004268 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2202      	movs	r2, #2
 800425e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7ff fc77 	bl	8003b56 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00c      	beq.n	800428c <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2204      	movs	r2, #4
 8004282:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff fc6f 	bl	8003b6a <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00c      	beq.n	80042b0 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	d007      	beq.n	80042b0 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2208      	movs	r2, #8
 80042a6:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff fc67 	bl	8003b7e <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00c      	beq.n	80042d4 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d007      	beq.n	80042d4 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2210      	movs	r2, #16
 80042ca:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff fc5f 	bl	8003b92 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00c      	beq.n	80042f8 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d007      	beq.n	80042f8 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff fc57 	bl	8003ba6 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80042f8:	bf00      	nop
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8004310:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800431a:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00d      	beq.n	8004352 <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004348:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff fc34 	bl	8003bba <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00c      	beq.n	8004376 <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d007      	beq.n	8004376 <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2201      	movs	r2, #1
 800436c:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800436e:	2105      	movs	r1, #5
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff fc4c 	bl	8003c0e <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00c      	beq.n	800439a <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d007      	beq.n	800439a <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2202      	movs	r2, #2
 8004390:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8004392:	2105      	movs	r1, #5
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff fc45 	bl	8003c24 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00c      	beq.n	80043be <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f003 0304 	and.w	r3, r3, #4
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2204      	movs	r2, #4
 80043b4:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80043b6:	2105      	movs	r1, #5
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff fc3e 	bl	8003c3a <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00c      	beq.n	80043e2 <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d007      	beq.n	80043e2 <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2208      	movs	r2, #8
 80043d8:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80043da:	2105      	movs	r1, #5
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff fc37 	bl	8003c50 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00c      	beq.n	8004406 <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d007      	beq.n	8004406 <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2210      	movs	r2, #16
 80043fc:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80043fe:	2105      	movs	r1, #5
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff fbf9 	bl	8003bf8 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00b      	beq.n	8004428 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d006      	beq.n	8004428 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2220      	movs	r2, #32
 8004420:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7ff fbd3 	bl	8003bce <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00c      	beq.n	800444c <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	d007      	beq.n	800444c <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2240      	movs	r2, #64	; 0x40
 8004442:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8004444:	2105      	movs	r1, #5
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff fbcb 	bl	8003be2 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800444c:	bf00      	nop
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	3301      	adds	r3, #1
 8004466:	01db      	lsls	r3, r3, #7
 8004468:	4413      	add	r3, r2
 800446a:	3304      	adds	r3, #4
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	01db      	lsls	r3, r3, #7
 8004478:	4413      	add	r3, r2
 800447a:	338c      	adds	r3, #140	; 0x8c
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d010      	beq.n	80044ac <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00b      	beq.n	80044ac <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	01db      	lsls	r3, r3, #7
 800449c:	4413      	add	r3, r2
 800449e:	3388      	adds	r3, #136	; 0x88
 80044a0:	2201      	movs	r2, #1
 80044a2:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 80044a4:	6839      	ldr	r1, [r7, #0]
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7ff fbb1 	bl	8003c0e <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d010      	beq.n	80044d8 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00b      	beq.n	80044d8 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	01db      	lsls	r3, r3, #7
 80044c8:	4413      	add	r3, r2
 80044ca:	3388      	adds	r3, #136	; 0x88
 80044cc:	2202      	movs	r2, #2
 80044ce:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 80044d0:	6839      	ldr	r1, [r7, #0]
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff fba6 	bl	8003c24 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d010      	beq.n	8004504 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00b      	beq.n	8004504 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	01db      	lsls	r3, r3, #7
 80044f4:	4413      	add	r3, r2
 80044f6:	3388      	adds	r3, #136	; 0x88
 80044f8:	2204      	movs	r2, #4
 80044fa:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 80044fc:	6839      	ldr	r1, [r7, #0]
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7ff fb9b 	bl	8003c3a <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b00      	cmp	r3, #0
 800450c:	d010      	beq.n	8004530 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00b      	beq.n	8004530 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	01db      	lsls	r3, r3, #7
 8004520:	4413      	add	r3, r2
 8004522:	3388      	adds	r3, #136	; 0x88
 8004524:	2208      	movs	r2, #8
 8004526:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8004528:	6839      	ldr	r1, [r7, #0]
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff fb90 	bl	8003c50 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f003 0310 	and.w	r3, r3, #16
 8004536:	2b00      	cmp	r3, #0
 8004538:	d010      	beq.n	800455c <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00b      	beq.n	800455c <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	01db      	lsls	r3, r3, #7
 800454c:	4413      	add	r3, r2
 800454e:	3388      	adds	r3, #136	; 0x88
 8004550:	2210      	movs	r2, #16
 8004552:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8004554:	6839      	ldr	r1, [r7, #0]
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7ff fb4e 	bl	8003bf8 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004562:	2b00      	cmp	r3, #0
 8004564:	d010      	beq.n	8004588 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00b      	beq.n	8004588 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	01db      	lsls	r3, r3, #7
 8004578:	4413      	add	r3, r2
 800457a:	3388      	adds	r3, #136	; 0x88
 800457c:	2240      	movs	r2, #64	; 0x40
 800457e:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8004580:	6839      	ldr	r1, [r7, #0]
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7ff fb2d 	bl	8003be2 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458e:	2b00      	cmp	r3, #0
 8004590:	d010      	beq.n	80045b4 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00b      	beq.n	80045b4 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	01db      	lsls	r3, r3, #7
 80045a4:	4413      	add	r3, r2
 80045a6:	3388      	adds	r3, #136	; 0x88
 80045a8:	2280      	movs	r2, #128	; 0x80
 80045aa:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 80045ac:	6839      	ldr	r1, [r7, #0]
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7ff fb59 	bl	8003c66 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d011      	beq.n	80045e2 <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00c      	beq.n	80045e2 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	01db      	lsls	r3, r3, #7
 80045d0:	4413      	add	r3, r2
 80045d2:	3388      	adds	r3, #136	; 0x88
 80045d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045d8:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 80045da:	6839      	ldr	r1, [r7, #0]
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7ff fb4d 	bl	8003c7c <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d011      	beq.n	8004610 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00c      	beq.n	8004610 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	01db      	lsls	r3, r3, #7
 80045fe:	4413      	add	r3, r2
 8004600:	3388      	adds	r3, #136	; 0x88
 8004602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004606:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8004608:	6839      	ldr	r1, [r7, #0]
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff fb57 	bl	8003cbe <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004616:	2b00      	cmp	r3, #0
 8004618:	d011      	beq.n	800463e <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00c      	beq.n	800463e <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	01db      	lsls	r3, r3, #7
 800462c:	4413      	add	r3, r2
 800462e:	3388      	adds	r3, #136	; 0x88
 8004630:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004634:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8004636:	6839      	ldr	r1, [r7, #0]
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7ff fb4b 	bl	8003cd4 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004644:	2b00      	cmp	r3, #0
 8004646:	d011      	beq.n	800466c <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00c      	beq.n	800466c <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	01db      	lsls	r3, r3, #7
 800465a:	4413      	add	r3, r2
 800465c:	3388      	adds	r3, #136	; 0x88
 800465e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004662:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8004664:	6839      	ldr	r1, [r7, #0]
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff fb3f 	bl	8003cea <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d011      	beq.n	800469a <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00c      	beq.n	800469a <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	01db      	lsls	r3, r3, #7
 8004688:	4413      	add	r3, r2
 800468a:	3388      	adds	r3, #136	; 0x88
 800468c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004690:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8004692:	6839      	ldr	r1, [r7, #0]
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff fb33 	bl	8003d00 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d011      	beq.n	80046c8 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00c      	beq.n	80046c8 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	01db      	lsls	r3, r3, #7
 80046b6:	4413      	add	r3, r2
 80046b8:	3388      	adds	r3, #136	; 0x88
 80046ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046be:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 80046c0:	6839      	ldr	r1, [r7, #0]
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7ff faf0 	bl	8003ca8 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d011      	beq.n	80046f6 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00c      	beq.n	80046f6 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	01db      	lsls	r3, r3, #7
 80046e4:	4413      	add	r3, r2
 80046e6:	3388      	adds	r3, #136	; 0x88
 80046e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046ec:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 80046ee:	6839      	ldr	r1, [r7, #0]
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7ff face 	bl	8003c92 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80046f6:	bf00      	nop
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80046fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004700:	b08f      	sub	sp, #60	; 0x3c
 8004702:	af0a      	add	r7, sp, #40	; 0x28
 8004704:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e116      	b.n	800493e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f008 fb4a 	bl	800cdc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2203      	movs	r2, #3
 8004734:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004740:	2b00      	cmp	r3, #0
 8004742:	d102      	bne.n	800474a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f004 fe4b 	bl	80093ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	603b      	str	r3, [r7, #0]
 800475a:	687e      	ldr	r6, [r7, #4]
 800475c:	466d      	mov	r5, sp
 800475e:	f106 0410 	add.w	r4, r6, #16
 8004762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800476a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800476e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004772:	1d33      	adds	r3, r6, #4
 8004774:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004776:	6838      	ldr	r0, [r7, #0]
 8004778:	f004 fd16 	bl	80091a8 <USB_CoreInit>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2202      	movs	r2, #2
 8004786:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e0d7      	b.n	800493e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2100      	movs	r1, #0
 8004794:	4618      	mov	r0, r3
 8004796:	f004 fe39 	bl	800940c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800479a:	2300      	movs	r3, #0
 800479c:	73fb      	strb	r3, [r7, #15]
 800479e:	e04a      	b.n	8004836 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047a0:	7bfa      	ldrb	r2, [r7, #15]
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	4613      	mov	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	333d      	adds	r3, #61	; 0x3d
 80047b0:	2201      	movs	r2, #1
 80047b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80047b4:	7bfa      	ldrb	r2, [r7, #15]
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	4413      	add	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	333c      	adds	r3, #60	; 0x3c
 80047c4:	7bfa      	ldrb	r2, [r7, #15]
 80047c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80047c8:	7bfa      	ldrb	r2, [r7, #15]
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	b298      	uxth	r0, r3
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	4613      	mov	r3, r2
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	4413      	add	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	440b      	add	r3, r1
 80047da:	3356      	adds	r3, #86	; 0x56
 80047dc:	4602      	mov	r2, r0
 80047de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80047e0:	7bfa      	ldrb	r2, [r7, #15]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	3340      	adds	r3, #64	; 0x40
 80047f0:	2200      	movs	r2, #0
 80047f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80047f4:	7bfa      	ldrb	r2, [r7, #15]
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	4613      	mov	r3, r2
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	4413      	add	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	3344      	adds	r3, #68	; 0x44
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004808:	7bfa      	ldrb	r2, [r7, #15]
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	4613      	mov	r3, r2
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	3348      	adds	r3, #72	; 0x48
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800481c:	7bfa      	ldrb	r2, [r7, #15]
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	4613      	mov	r3, r2
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	4413      	add	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	334c      	adds	r3, #76	; 0x4c
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	3301      	adds	r3, #1
 8004834:	73fb      	strb	r3, [r7, #15]
 8004836:	7bfa      	ldrb	r2, [r7, #15]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	429a      	cmp	r2, r3
 800483e:	d3af      	bcc.n	80047a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004840:	2300      	movs	r3, #0
 8004842:	73fb      	strb	r3, [r7, #15]
 8004844:	e044      	b.n	80048d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004846:	7bfa      	ldrb	r2, [r7, #15]
 8004848:	6879      	ldr	r1, [r7, #4]
 800484a:	4613      	mov	r3, r2
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	4413      	add	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	440b      	add	r3, r1
 8004854:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004858:	2200      	movs	r2, #0
 800485a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800485c:	7bfa      	ldrb	r2, [r7, #15]
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	4613      	mov	r3, r2
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	4413      	add	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800486e:	7bfa      	ldrb	r2, [r7, #15]
 8004870:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004872:	7bfa      	ldrb	r2, [r7, #15]
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	4413      	add	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004884:	2200      	movs	r2, #0
 8004886:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004888:	7bfa      	ldrb	r2, [r7, #15]
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800489e:	7bfa      	ldrb	r2, [r7, #15]
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048b4:	7bfa      	ldrb	r2, [r7, #15]
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	4613      	mov	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	3301      	adds	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]
 80048d0:	7bfa      	ldrb	r2, [r7, #15]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d3b5      	bcc.n	8004846 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	687e      	ldr	r6, [r7, #4]
 80048e2:	466d      	mov	r5, sp
 80048e4:	f106 0410 	add.w	r4, r6, #16
 80048e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80048f8:	1d33      	adds	r3, r6, #4
 80048fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048fc:	6838      	ldr	r0, [r7, #0]
 80048fe:	f004 fdd1 	bl	80094a4 <USB_DevInit>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e014      	b.n	800493e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	2b01      	cmp	r3, #1
 800492a:	d102      	bne.n	8004932 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f001 f96f 	bl	8005c10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f005 fe13 	bl	800a562 <USB_DevDisconnect>

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004946 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b084      	sub	sp, #16
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_PCD_Start+0x1c>
 800495e:	2302      	movs	r3, #2
 8004960:	e022      	b.n	80049a8 <HAL_PCD_Start+0x62>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800497a:	2b01      	cmp	r3, #1
 800497c:	d105      	bne.n	800498a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004982:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f004 fd1a 	bl	80093c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4618      	mov	r0, r3
 800499a:	f005 fdc1 	bl	800a520 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80049b0:	b590      	push	{r4, r7, lr}
 80049b2:	b08d      	sub	sp, #52	; 0x34
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f005 fe7f 	bl	800a6ca <USB_GetMode>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f040 84b7 	bne.w	8005342 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f005 fde3 	bl	800a5a4 <USB_ReadInterrupts>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 84ad 	beq.w	8005340 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	0a1b      	lsrs	r3, r3, #8
 80049f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f005 fdd0 	bl	800a5a4 <USB_ReadInterrupts>
 8004a04:	4603      	mov	r3, r0
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d107      	bne.n	8004a1e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695a      	ldr	r2, [r3, #20]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f002 0202 	and.w	r2, r2, #2
 8004a1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f005 fdbe 	bl	800a5a4 <USB_ReadInterrupts>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f003 0310 	and.w	r3, r3, #16
 8004a2e:	2b10      	cmp	r3, #16
 8004a30:	d161      	bne.n	8004af6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	699a      	ldr	r2, [r3, #24]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0210 	bic.w	r2, r2, #16
 8004a40:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	f003 020f 	and.w	r2, r3, #15
 8004a4e:	4613      	mov	r3, r2
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	4413      	add	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	3304      	adds	r3, #4
 8004a60:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	0c5b      	lsrs	r3, r3, #17
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d124      	bne.n	8004ab8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004a74:	4013      	ands	r3, r2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d035      	beq.n	8004ae6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	091b      	lsrs	r3, r3, #4
 8004a82:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	6a38      	ldr	r0, [r7, #32]
 8004a8e:	f005 fbf5 	bl	800a27c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	091b      	lsrs	r3, r3, #4
 8004a9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a9e:	441a      	add	r2, r3
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	695a      	ldr	r2, [r3, #20]
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	091b      	lsrs	r3, r3, #4
 8004aac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ab0:	441a      	add	r2, r3
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	615a      	str	r2, [r3, #20]
 8004ab6:	e016      	b.n	8004ae6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	0c5b      	lsrs	r3, r3, #17
 8004abc:	f003 030f 	and.w	r3, r3, #15
 8004ac0:	2b06      	cmp	r3, #6
 8004ac2:	d110      	bne.n	8004ae6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004aca:	2208      	movs	r2, #8
 8004acc:	4619      	mov	r1, r3
 8004ace:	6a38      	ldr	r0, [r7, #32]
 8004ad0:	f005 fbd4 	bl	800a27c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	695a      	ldr	r2, [r3, #20]
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	091b      	lsrs	r3, r3, #4
 8004adc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ae0:	441a      	add	r2, r3
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	699a      	ldr	r2, [r3, #24]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0210 	orr.w	r2, r2, #16
 8004af4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f005 fd52 	bl	800a5a4 <USB_ReadInterrupts>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b0a:	f040 80a7 	bne.w	8004c5c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f005 fd57 	bl	800a5ca <USB_ReadDevAllOutEpInterrupt>
 8004b1c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004b1e:	e099      	b.n	8004c54 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 808e 	beq.w	8004c48 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	4611      	mov	r1, r2
 8004b36:	4618      	mov	r0, r3
 8004b38:	f005 fd7b 	bl	800a632 <USB_ReadDevOutEPInterrupt>
 8004b3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00c      	beq.n	8004b62 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b54:	461a      	mov	r2, r3
 8004b56:	2301      	movs	r3, #1
 8004b58:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004b5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fed1 	bl	8005904 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00c      	beq.n	8004b86 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b78:	461a      	mov	r2, r3
 8004b7a:	2308      	movs	r3, #8
 8004b7c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004b7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 ffa7 	bl	8005ad4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d008      	beq.n	8004ba2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	2310      	movs	r3, #16
 8004ba0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d030      	beq.n	8004c0e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb4:	2b80      	cmp	r3, #128	; 0x80
 8004bb6:	d109      	bne.n	8004bcc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bce:	4613      	mov	r3, r2
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	4413      	add	r3, r2
 8004bde:	3304      	adds	r3, #4
 8004be0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	78db      	ldrb	r3, [r3, #3]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d108      	bne.n	8004bfc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2200      	movs	r2, #0
 8004bee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f008 fa1a 	bl	800d030 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c08:	461a      	mov	r2, r3
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f003 0320 	and.w	r3, r3, #32
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d008      	beq.n	8004c2a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c24:	461a      	mov	r2, r3
 8004c26:	2320      	movs	r3, #32
 8004c28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d009      	beq.n	8004c48 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c40:	461a      	mov	r2, r3
 8004c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c46:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c50:	085b      	lsrs	r3, r3, #1
 8004c52:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f47f af62 	bne.w	8004b20 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f005 fc9f 	bl	800a5a4 <USB_ReadInterrupts>
 8004c66:	4603      	mov	r3, r0
 8004c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c70:	f040 80db 	bne.w	8004e2a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f005 fcc0 	bl	800a5fe <USB_ReadDevAllInEpInterrupt>
 8004c7e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004c84:	e0cd      	b.n	8004e22 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 80c2 	beq.w	8004e16 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f005 fce6 	bl	800a66e <USB_ReadDevInEPInterrupt>
 8004ca2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d057      	beq.n	8004d5e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	69f9      	ldr	r1, [r7, #28]
 8004cca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cce:	4013      	ands	r3, r2
 8004cd0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cde:	461a      	mov	r2, r3
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d132      	bne.n	8004d52 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	3348      	adds	r3, #72	; 0x48
 8004cfc:	6819      	ldr	r1, [r3, #0]
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d02:	4613      	mov	r3, r2
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	4413      	add	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4403      	add	r3, r0
 8004d0c:	3344      	adds	r3, #68	; 0x44
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4419      	add	r1, r3
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d16:	4613      	mov	r3, r2
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4403      	add	r3, r0
 8004d20:	3348      	adds	r3, #72	; 0x48
 8004d22:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d113      	bne.n	8004d52 <HAL_PCD_IRQHandler+0x3a2>
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d2e:	4613      	mov	r3, r2
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	334c      	adds	r3, #76	; 0x4c
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d108      	bne.n	8004d52 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	f005 fcef 	bl	800a730 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	4619      	mov	r1, r3
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f008 f8e4 	bl	800cf26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d008      	beq.n	8004d7a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d74:	461a      	mov	r2, r3
 8004d76:	2308      	movs	r3, #8
 8004d78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f003 0310 	and.w	r3, r3, #16
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d008      	beq.n	8004d96 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d90:	461a      	mov	r2, r3
 8004d92:	2310      	movs	r3, #16
 8004d94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d008      	beq.n	8004db2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dac:	461a      	mov	r2, r3
 8004dae:	2340      	movs	r3, #64	; 0x40
 8004db0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d023      	beq.n	8004e04 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dbe:	6a38      	ldr	r0, [r7, #32]
 8004dc0:	f004 fcce 	bl	8009760 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	4413      	add	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	3338      	adds	r3, #56	; 0x38
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	78db      	ldrb	r3, [r3, #3]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d108      	bne.n	8004df2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2200      	movs	r2, #0
 8004de4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	4619      	mov	r1, r3
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f008 f931 	bl	800d054 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfe:	461a      	mov	r2, r3
 8004e00:	2302      	movs	r3, #2
 8004e02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004e0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fcea 	bl	80057ea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	3301      	adds	r3, #1
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1e:	085b      	lsrs	r3, r3, #1
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f47f af2e 	bne.w	8004c86 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f005 fbb8 	bl	800a5a4 <USB_ReadInterrupts>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e3e:	d122      	bne.n	8004e86 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e4e:	f023 0301 	bic.w	r3, r3, #1
 8004e52:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d108      	bne.n	8004e70 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004e66:	2100      	movs	r1, #0
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fef5 	bl	8005c58 <HAL_PCDEx_LPM_Callback>
 8004e6e:	e002      	b.n	8004e76 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f008 f8cf 	bl	800d014 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695a      	ldr	r2, [r3, #20]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004e84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f005 fb8a 	bl	800a5a4 <USB_ReadInterrupts>
 8004e90:	4603      	mov	r3, r0
 8004e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e9a:	d112      	bne.n	8004ec2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d102      	bne.n	8004eb2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f008 f88b 	bl	800cfc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695a      	ldr	r2, [r3, #20]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004ec0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f005 fb6c 	bl	800a5a4 <USB_ReadInterrupts>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ed6:	d121      	bne.n	8004f1c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	695a      	ldr	r2, [r3, #20]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004ee6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d111      	bne.n	8004f16 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f00:	089b      	lsrs	r3, r3, #2
 8004f02:	f003 020f 	and.w	r2, r3, #15
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fea2 	bl	8005c58 <HAL_PCDEx_LPM_Callback>
 8004f14:	e002      	b.n	8004f1c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f008 f856 	bl	800cfc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f005 fb3f 	bl	800a5a4 <USB_ReadInterrupts>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f30:	f040 80b7 	bne.w	80050a2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	69fa      	ldr	r2, [r7, #28]
 8004f3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f42:	f023 0301 	bic.w	r3, r3, #1
 8004f46:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2110      	movs	r1, #16
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f004 fc06 	bl	8009760 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f54:	2300      	movs	r3, #0
 8004f56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f58:	e046      	b.n	8004fe8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f66:	461a      	mov	r2, r3
 8004f68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f6c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f7e:	0151      	lsls	r1, r2, #5
 8004f80:	69fa      	ldr	r2, [r7, #28]
 8004f82:	440a      	add	r2, r1
 8004f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f8c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fa0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fb2:	0151      	lsls	r1, r2, #5
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	440a      	add	r2, r1
 8004fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fc0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fd2:	0151      	lsls	r1, r2, #5
 8004fd4:	69fa      	ldr	r2, [r7, #28]
 8004fd6:	440a      	add	r2, r1
 8004fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fdc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fe0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d3b3      	bcc.n	8004f5a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	69fa      	ldr	r2, [r7, #28]
 8004ffc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005000:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005004:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	2b00      	cmp	r3, #0
 800500c:	d016      	beq.n	800503c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005018:	69fa      	ldr	r2, [r7, #28]
 800501a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800501e:	f043 030b 	orr.w	r3, r3, #11
 8005022:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502e:	69fa      	ldr	r2, [r7, #28]
 8005030:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005034:	f043 030b 	orr.w	r3, r3, #11
 8005038:	6453      	str	r3, [r2, #68]	; 0x44
 800503a:	e015      	b.n	8005068 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005042:	695a      	ldr	r2, [r3, #20]
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800504a:	4619      	mov	r1, r3
 800504c:	f242 032b 	movw	r3, #8235	; 0x202b
 8005050:	4313      	orrs	r3, r2
 8005052:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	69fa      	ldr	r2, [r7, #28]
 800505e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005062:	f043 030b 	orr.w	r3, r3, #11
 8005066:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005076:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800507a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6818      	ldr	r0, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800508c:	461a      	mov	r2, r3
 800508e:	f005 fb4f 	bl	800a730 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	695a      	ldr	r2, [r3, #20]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80050a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f005 fa7c 	bl	800a5a4 <USB_ReadInterrupts>
 80050ac:	4603      	mov	r3, r0
 80050ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050b6:	d124      	bne.n	8005102 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4618      	mov	r0, r3
 80050be:	f005 fb13 	bl	800a6e8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f004 fbc7 	bl	800985a <USB_GetDevSpeed>
 80050cc:	4603      	mov	r3, r0
 80050ce:	461a      	mov	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681c      	ldr	r4, [r3, #0]
 80050d8:	f001 fd9e 	bl	8006c18 <HAL_RCC_GetHCLKFreq>
 80050dc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	461a      	mov	r2, r3
 80050e6:	4620      	mov	r0, r4
 80050e8:	f004 f8cc 	bl	8009284 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f007 ff42 	bl	800cf76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	695a      	ldr	r2, [r3, #20]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005100:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f005 fa4c 	bl	800a5a4 <USB_ReadInterrupts>
 800510c:	4603      	mov	r3, r0
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b08      	cmp	r3, #8
 8005114:	d10a      	bne.n	800512c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f007 ff1f 	bl	800cf5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695a      	ldr	r2, [r3, #20]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f002 0208 	and.w	r2, r2, #8
 800512a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4618      	mov	r0, r3
 8005132:	f005 fa37 	bl	800a5a4 <USB_ReadInterrupts>
 8005136:	4603      	mov	r3, r0
 8005138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513c:	2b80      	cmp	r3, #128	; 0x80
 800513e:	d122      	bne.n	8005186 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800514c:	2301      	movs	r3, #1
 800514e:	627b      	str	r3, [r7, #36]	; 0x24
 8005150:	e014      	b.n	800517c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005156:	4613      	mov	r3, r2
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d105      	bne.n	8005176 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	b2db      	uxtb	r3, r3
 800516e:	4619      	mov	r1, r3
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fb09 	bl	8005788 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	3301      	adds	r3, #1
 800517a:	627b      	str	r3, [r7, #36]	; 0x24
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005182:	429a      	cmp	r2, r3
 8005184:	d3e5      	bcc.n	8005152 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4618      	mov	r0, r3
 800518c:	f005 fa0a 	bl	800a5a4 <USB_ReadInterrupts>
 8005190:	4603      	mov	r3, r0
 8005192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800519a:	d13b      	bne.n	8005214 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800519c:	2301      	movs	r3, #1
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
 80051a0:	e02b      	b.n	80051fa <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b6:	4613      	mov	r3, r2
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	4413      	add	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	440b      	add	r3, r1
 80051c0:	3340      	adds	r3, #64	; 0x40
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d115      	bne.n	80051f4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80051c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	da12      	bge.n	80051f4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d2:	4613      	mov	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	440b      	add	r3, r1
 80051dc:	333f      	adds	r3, #63	; 0x3f
 80051de:	2201      	movs	r2, #1
 80051e0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	4619      	mov	r1, r3
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 faca 	bl	8005788 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	3301      	adds	r3, #1
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005200:	429a      	cmp	r2, r3
 8005202:	d3ce      	bcc.n	80051a2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695a      	ldr	r2, [r3, #20]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005212:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4618      	mov	r0, r3
 800521a:	f005 f9c3 	bl	800a5a4 <USB_ReadInterrupts>
 800521e:	4603      	mov	r3, r0
 8005220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005224:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005228:	d155      	bne.n	80052d6 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800522a:	2301      	movs	r3, #1
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
 800522e:	e045      	b.n	80052bc <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005240:	6879      	ldr	r1, [r7, #4]
 8005242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005244:	4613      	mov	r3, r2
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	4413      	add	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d12e      	bne.n	80052b6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005258:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800525a:	2b00      	cmp	r3, #0
 800525c:	da2b      	bge.n	80052b6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800526a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800526e:	429a      	cmp	r2, r3
 8005270:	d121      	bne.n	80052b6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005276:	4613      	mov	r3, r2
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005284:	2201      	movs	r2, #1
 8005286:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	69fa      	ldr	r2, [r7, #28]
 80052aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052b2:	6053      	str	r3, [r2, #4]
            break;
 80052b4:	e007      	b.n	80052c6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	3301      	adds	r3, #1
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d3b4      	bcc.n	8005230 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695a      	ldr	r2, [r3, #20]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80052d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f005 f962 	bl	800a5a4 <USB_ReadInterrupts>
 80052e0:	4603      	mov	r3, r0
 80052e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ea:	d10a      	bne.n	8005302 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f007 fec3 	bl	800d078 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	695a      	ldr	r2, [r3, #20]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005300:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f005 f94c 	bl	800a5a4 <USB_ReadInterrupts>
 800530c:	4603      	mov	r3, r0
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b04      	cmp	r3, #4
 8005314:	d115      	bne.n	8005342 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f007 feb3 	bl	800d094 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6859      	ldr	r1, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	430a      	orrs	r2, r1
 800533c:	605a      	str	r2, [r3, #4]
 800533e:	e000      	b.n	8005342 <HAL_PCD_IRQHandler+0x992>
      return;
 8005340:	bf00      	nop
    }
  }
}
 8005342:	3734      	adds	r7, #52	; 0x34
 8005344:	46bd      	mov	sp, r7
 8005346:	bd90      	pop	{r4, r7, pc}

08005348 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800535a:	2b01      	cmp	r3, #1
 800535c:	d101      	bne.n	8005362 <HAL_PCD_SetAddress+0x1a>
 800535e:	2302      	movs	r3, #2
 8005360:	e013      	b.n	800538a <HAL_PCD_SetAddress+0x42>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	78fa      	ldrb	r2, [r7, #3]
 800536e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	78fa      	ldrb	r2, [r7, #3]
 8005378:	4611      	mov	r1, r2
 800537a:	4618      	mov	r0, r3
 800537c:	f005 f8aa 	bl	800a4d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	4608      	mov	r0, r1
 800539c:	4611      	mov	r1, r2
 800539e:	461a      	mov	r2, r3
 80053a0:	4603      	mov	r3, r0
 80053a2:	70fb      	strb	r3, [r7, #3]
 80053a4:	460b      	mov	r3, r1
 80053a6:	803b      	strh	r3, [r7, #0]
 80053a8:	4613      	mov	r3, r2
 80053aa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	da0f      	bge.n	80053d8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053b8:	78fb      	ldrb	r3, [r7, #3]
 80053ba:	f003 020f 	and.w	r2, r3, #15
 80053be:	4613      	mov	r3, r2
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	4413      	add	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	3338      	adds	r3, #56	; 0x38
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	4413      	add	r3, r2
 80053cc:	3304      	adds	r3, #4
 80053ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2201      	movs	r2, #1
 80053d4:	705a      	strb	r2, [r3, #1]
 80053d6:	e00f      	b.n	80053f8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053d8:	78fb      	ldrb	r3, [r7, #3]
 80053da:	f003 020f 	and.w	r2, r3, #15
 80053de:	4613      	mov	r3, r2
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	4413      	add	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	4413      	add	r3, r2
 80053ee:	3304      	adds	r3, #4
 80053f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005404:	883a      	ldrh	r2, [r7, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	78ba      	ldrb	r2, [r7, #2]
 800540e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	785b      	ldrb	r3, [r3, #1]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d004      	beq.n	8005422 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005422:	78bb      	ldrb	r3, [r7, #2]
 8005424:	2b02      	cmp	r3, #2
 8005426:	d102      	bne.n	800542e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_PCD_EP_Open+0xaa>
 8005438:	2302      	movs	r3, #2
 800543a:	e00e      	b.n	800545a <HAL_PCD_EP_Open+0xc8>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68f9      	ldr	r1, [r7, #12]
 800544a:	4618      	mov	r0, r3
 800544c:	f004 fa2a 	bl	80098a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005458:	7afb      	ldrb	r3, [r7, #11]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	460b      	mov	r3, r1
 800546c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800546e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005472:	2b00      	cmp	r3, #0
 8005474:	da0f      	bge.n	8005496 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005476:	78fb      	ldrb	r3, [r7, #3]
 8005478:	f003 020f 	and.w	r2, r3, #15
 800547c:	4613      	mov	r3, r2
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	3338      	adds	r3, #56	; 0x38
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	4413      	add	r3, r2
 800548a:	3304      	adds	r3, #4
 800548c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	705a      	strb	r2, [r3, #1]
 8005494:	e00f      	b.n	80054b6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005496:	78fb      	ldrb	r3, [r7, #3]
 8005498:	f003 020f 	and.w	r2, r3, #15
 800549c:	4613      	mov	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	4413      	add	r3, r2
 80054ac:	3304      	adds	r3, #4
 80054ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80054b6:	78fb      	ldrb	r3, [r7, #3]
 80054b8:	f003 030f 	and.w	r3, r3, #15
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_PCD_EP_Close+0x6e>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e00e      	b.n	80054ee <HAL_PCD_EP_Close+0x8c>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68f9      	ldr	r1, [r7, #12]
 80054de:	4618      	mov	r0, r3
 80054e0:	f004 fa68 	bl	80099b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b086      	sub	sp, #24
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	607a      	str	r2, [r7, #4]
 8005500:	603b      	str	r3, [r7, #0]
 8005502:	460b      	mov	r3, r1
 8005504:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005506:	7afb      	ldrb	r3, [r7, #11]
 8005508:	f003 020f 	and.w	r2, r3, #15
 800550c:	4613      	mov	r3, r2
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	4413      	add	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	3304      	adds	r3, #4
 800551e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	2200      	movs	r2, #0
 8005530:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2200      	movs	r2, #0
 8005536:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005538:	7afb      	ldrb	r3, [r7, #11]
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	b2da      	uxtb	r2, r3
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d102      	bne.n	8005552 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	b2db      	uxtb	r3, r3
 800555c:	461a      	mov	r2, r3
 800555e:	6979      	ldr	r1, [r7, #20]
 8005560:	f004 fb04 	bl	8009b6c <USB_EPStartXfer>

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	460b      	mov	r3, r1
 8005578:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800557a:	78fb      	ldrb	r3, [r7, #3]
 800557c:	f003 020f 	and.w	r2, r3, #15
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8005590:	681b      	ldr	r3, [r3, #0]
}
 8005592:	4618      	mov	r0, r3
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b086      	sub	sp, #24
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	603b      	str	r3, [r7, #0]
 80055aa:	460b      	mov	r3, r1
 80055ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055ae:	7afb      	ldrb	r3, [r7, #11]
 80055b0:	f003 020f 	and.w	r2, r3, #15
 80055b4:	4613      	mov	r3, r2
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	4413      	add	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	3338      	adds	r3, #56	; 0x38
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	4413      	add	r3, r2
 80055c2:	3304      	adds	r3, #4
 80055c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2200      	movs	r2, #0
 80055d6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	2201      	movs	r2, #1
 80055dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055de:	7afb      	ldrb	r3, [r7, #11]
 80055e0:	f003 030f 	and.w	r3, r3, #15
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d102      	bne.n	80055f8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6818      	ldr	r0, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	461a      	mov	r2, r3
 8005604:	6979      	ldr	r1, [r7, #20]
 8005606:	f004 fab1 	bl	8009b6c <USB_EPStartXfer>

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	f003 020f 	and.w	r2, r3, #15
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	429a      	cmp	r2, r3
 800562c:	d901      	bls.n	8005632 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e050      	b.n	80056d4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005632:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005636:	2b00      	cmp	r3, #0
 8005638:	da0f      	bge.n	800565a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800563a:	78fb      	ldrb	r3, [r7, #3]
 800563c:	f003 020f 	and.w	r2, r3, #15
 8005640:	4613      	mov	r3, r2
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	4413      	add	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	3338      	adds	r3, #56	; 0x38
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	4413      	add	r3, r2
 800564e:	3304      	adds	r3, #4
 8005650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	705a      	strb	r2, [r3, #1]
 8005658:	e00d      	b.n	8005676 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800565a:	78fa      	ldrb	r2, [r7, #3]
 800565c:	4613      	mov	r3, r2
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	4413      	add	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	4413      	add	r3, r2
 800566c:	3304      	adds	r3, #4
 800566e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	b2da      	uxtb	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800568e:	2b01      	cmp	r3, #1
 8005690:	d101      	bne.n	8005696 <HAL_PCD_EP_SetStall+0x82>
 8005692:	2302      	movs	r3, #2
 8005694:	e01e      	b.n	80056d4 <HAL_PCD_EP_SetStall+0xc0>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68f9      	ldr	r1, [r7, #12]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f004 fe41 	bl	800a32c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80056aa:	78fb      	ldrb	r3, [r7, #3]
 80056ac:	f003 030f 	and.w	r3, r3, #15
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10a      	bne.n	80056ca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	b2d9      	uxtb	r1, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80056c4:	461a      	mov	r2, r3
 80056c6:	f005 f833 	bl	800a730 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	460b      	mov	r3, r1
 80056e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	f003 020f 	and.w	r2, r3, #15
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d901      	bls.n	80056fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e042      	b.n	8005780 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	da0f      	bge.n	8005722 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005702:	78fb      	ldrb	r3, [r7, #3]
 8005704:	f003 020f 	and.w	r2, r3, #15
 8005708:	4613      	mov	r3, r2
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	4413      	add	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	3338      	adds	r3, #56	; 0x38
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	4413      	add	r3, r2
 8005716:	3304      	adds	r3, #4
 8005718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	705a      	strb	r2, [r3, #1]
 8005720:	e00f      	b.n	8005742 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005722:	78fb      	ldrb	r3, [r7, #3]
 8005724:	f003 020f 	and.w	r2, r3, #15
 8005728:	4613      	mov	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	4413      	add	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	4413      	add	r3, r2
 8005738:	3304      	adds	r3, #4
 800573a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005748:	78fb      	ldrb	r3, [r7, #3]
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	b2da      	uxtb	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HAL_PCD_EP_ClrStall+0x86>
 800575e:	2302      	movs	r3, #2
 8005760:	e00e      	b.n	8005780 <HAL_PCD_EP_ClrStall+0xa4>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68f9      	ldr	r1, [r7, #12]
 8005770:	4618      	mov	r0, r3
 8005772:	f004 fe49 	bl	800a408 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	460b      	mov	r3, r1
 8005792:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005794:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005798:	2b00      	cmp	r3, #0
 800579a:	da0c      	bge.n	80057b6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	f003 020f 	and.w	r2, r3, #15
 80057a2:	4613      	mov	r3, r2
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	3338      	adds	r3, #56	; 0x38
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	4413      	add	r3, r2
 80057b0:	3304      	adds	r3, #4
 80057b2:	60fb      	str	r3, [r7, #12]
 80057b4:	e00c      	b.n	80057d0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057b6:	78fb      	ldrb	r3, [r7, #3]
 80057b8:	f003 020f 	and.w	r2, r3, #15
 80057bc:	4613      	mov	r3, r2
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	4413      	add	r3, r2
 80057cc:	3304      	adds	r3, #4
 80057ce:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68f9      	ldr	r1, [r7, #12]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f004 fc68 	bl	800a0ac <USB_EPStopXfer>
 80057dc:	4603      	mov	r3, r0
 80057de:	72fb      	strb	r3, [r7, #11]

  return ret;
 80057e0:	7afb      	ldrb	r3, [r7, #11]
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b08a      	sub	sp, #40	; 0x28
 80057ee:	af02      	add	r7, sp, #8
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	4613      	mov	r3, r2
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	4413      	add	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	3338      	adds	r3, #56	; 0x38
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	4413      	add	r3, r2
 800580e:	3304      	adds	r3, #4
 8005810:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	695a      	ldr	r2, [r3, #20]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	429a      	cmp	r2, r3
 800581c:	d901      	bls.n	8005822 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e06c      	b.n	80058fc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	691a      	ldr	r2, [r3, #16]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	69fa      	ldr	r2, [r7, #28]
 8005834:	429a      	cmp	r2, r3
 8005836:	d902      	bls.n	800583e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	3303      	adds	r3, #3
 8005842:	089b      	lsrs	r3, r3, #2
 8005844:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005846:	e02b      	b.n	80058a0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	691a      	ldr	r2, [r3, #16]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	69fa      	ldr	r2, [r7, #28]
 800585a:	429a      	cmp	r2, r3
 800585c:	d902      	bls.n	8005864 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	3303      	adds	r3, #3
 8005868:	089b      	lsrs	r3, r3, #2
 800586a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	68d9      	ldr	r1, [r3, #12]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	b2da      	uxtb	r2, r3
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800587c:	b2db      	uxtb	r3, r3
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	4603      	mov	r3, r0
 8005882:	6978      	ldr	r0, [r7, #20]
 8005884:	f004 fcbc 	bl	800a200 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	441a      	add	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	695a      	ldr	r2, [r3, #20]
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	441a      	add	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d809      	bhi.n	80058ca <PCD_WriteEmptyTxFifo+0xe0>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	695a      	ldr	r2, [r3, #20]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058be:	429a      	cmp	r2, r3
 80058c0:	d203      	bcs.n	80058ca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1be      	bne.n	8005848 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	691a      	ldr	r2, [r3, #16]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d811      	bhi.n	80058fa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	f003 030f 	and.w	r3, r3, #15
 80058dc:	2201      	movs	r2, #1
 80058de:	fa02 f303 	lsl.w	r3, r2, r3
 80058e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	43db      	mvns	r3, r3
 80058f0:	6939      	ldr	r1, [r7, #16]
 80058f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058f6:	4013      	ands	r3, r2
 80058f8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3720      	adds	r7, #32
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	333c      	adds	r3, #60	; 0x3c
 800591c:	3304      	adds	r3, #4
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d17b      	bne.n	8005a32 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f003 0308 	and.w	r3, r3, #8
 8005940:	2b00      	cmp	r3, #0
 8005942:	d015      	beq.n	8005970 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	4a61      	ldr	r2, [pc, #388]	; (8005acc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005948:	4293      	cmp	r3, r2
 800594a:	f240 80b9 	bls.w	8005ac0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 80b3 	beq.w	8005ac0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005966:	461a      	mov	r2, r3
 8005968:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800596c:	6093      	str	r3, [r2, #8]
 800596e:	e0a7      	b.n	8005ac0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b00      	cmp	r3, #0
 8005978:	d009      	beq.n	800598e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005986:	461a      	mov	r2, r3
 8005988:	2320      	movs	r3, #32
 800598a:	6093      	str	r3, [r2, #8]
 800598c:	e098      	b.n	8005ac0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005994:	2b00      	cmp	r3, #0
 8005996:	f040 8093 	bne.w	8005ac0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	4a4b      	ldr	r2, [pc, #300]	; (8005acc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d90f      	bls.n	80059c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b8:	461a      	mov	r2, r3
 80059ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059be:	6093      	str	r3, [r2, #8]
 80059c0:	e07e      	b.n	8005ac0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	4413      	add	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	4413      	add	r3, r2
 80059d4:	3304      	adds	r3, #4
 80059d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6a1a      	ldr	r2, [r3, #32]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	0159      	lsls	r1, r3, #5
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	440b      	add	r3, r1
 80059e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ee:	1ad2      	subs	r2, r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d114      	bne.n	8005a24 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d109      	bne.n	8005a16 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6818      	ldr	r0, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	2101      	movs	r1, #1
 8005a10:	f004 fe8e 	bl	800a730 <USB_EP0_OutStart>
 8005a14:	e006      	b.n	8005a24 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	441a      	add	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f007 fa60 	bl	800cef0 <HAL_PCD_DataOutStageCallback>
 8005a30:	e046      	b.n	8005ac0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	4a26      	ldr	r2, [pc, #152]	; (8005ad0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d124      	bne.n	8005a84 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a50:	461a      	mov	r2, r3
 8005a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a56:	6093      	str	r3, [r2, #8]
 8005a58:	e032      	b.n	8005ac0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d008      	beq.n	8005a76 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a70:	461a      	mov	r2, r3
 8005a72:	2320      	movs	r3, #32
 8005a74:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f007 fa37 	bl	800cef0 <HAL_PCD_DataOutStageCallback>
 8005a82:	e01d      	b.n	8005ac0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d114      	bne.n	8005ab4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	440b      	add	r3, r1
 8005a98:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d108      	bne.n	8005ab4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6818      	ldr	r0, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005aac:	461a      	mov	r2, r3
 8005aae:	2100      	movs	r1, #0
 8005ab0:	f004 fe3e 	bl	800a730 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	4619      	mov	r1, r3
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f007 fa18 	bl	800cef0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3720      	adds	r7, #32
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	4f54300a 	.word	0x4f54300a
 8005ad0:	4f54310a 	.word	0x4f54310a

08005ad4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	333c      	adds	r3, #60	; 0x3c
 8005aec:	3304      	adds	r3, #4
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4a15      	ldr	r2, [pc, #84]	; (8005b5c <PCD_EP_OutSetupPacket_int+0x88>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d90e      	bls.n	8005b28 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d009      	beq.n	8005b28 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b20:	461a      	mov	r2, r3
 8005b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b26:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f007 f9cf 	bl	800cecc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4a0a      	ldr	r2, [pc, #40]	; (8005b5c <PCD_EP_OutSetupPacket_int+0x88>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d90c      	bls.n	8005b50 <PCD_EP_OutSetupPacket_int+0x7c>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d108      	bne.n	8005b50 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6818      	ldr	r0, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005b48:	461a      	mov	r2, r3
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	f004 fdf0 	bl	800a730 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3718      	adds	r7, #24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	4f54300a 	.word	0x4f54300a

08005b60 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	70fb      	strb	r3, [r7, #3]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005b78:	78fb      	ldrb	r3, [r7, #3]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d107      	bne.n	8005b8e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005b7e:	883b      	ldrh	r3, [r7, #0]
 8005b80:	0419      	lsls	r1, r3, #16
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	629a      	str	r2, [r3, #40]	; 0x28
 8005b8c:	e028      	b.n	8005be0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b94:	0c1b      	lsrs	r3, r3, #16
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	4413      	add	r3, r2
 8005b9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	73fb      	strb	r3, [r7, #15]
 8005ba0:	e00d      	b.n	8005bbe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	3340      	adds	r3, #64	; 0x40
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	0c1b      	lsrs	r3, r3, #16
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	73fb      	strb	r3, [r7, #15]
 8005bbe:	7bfa      	ldrb	r2, [r7, #15]
 8005bc0:	78fb      	ldrb	r3, [r7, #3]
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d3ec      	bcc.n	8005ba2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005bc8:	883b      	ldrh	r3, [r7, #0]
 8005bca:	0418      	lsls	r0, r3, #16
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6819      	ldr	r1, [r3, #0]
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	4302      	orrs	r2, r0
 8005bd8:	3340      	adds	r3, #64	; 0x40
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	440b      	add	r3, r1
 8005bde:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	887a      	ldrh	r2, [r7, #2]
 8005c00:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c3e:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <HAL_PCDEx_ActivateLPM+0x44>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3714      	adds	r7, #20
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	10000003 	.word	0x10000003

08005c58 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005c78:	4b19      	ldr	r3, [pc, #100]	; (8005ce0 <HAL_PWREx_ConfigSupply+0x70>)
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d00a      	beq.n	8005c9a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005c84:	4b16      	ldr	r3, [pc, #88]	; (8005ce0 <HAL_PWREx_ConfigSupply+0x70>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d001      	beq.n	8005c96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e01f      	b.n	8005cd6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	e01d      	b.n	8005cd6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005c9a:	4b11      	ldr	r3, [pc, #68]	; (8005ce0 <HAL_PWREx_ConfigSupply+0x70>)
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f023 0207 	bic.w	r2, r3, #7
 8005ca2:	490f      	ldr	r1, [pc, #60]	; (8005ce0 <HAL_PWREx_ConfigSupply+0x70>)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005caa:	f7fb fc65 	bl	8001578 <HAL_GetTick>
 8005cae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cb0:	e009      	b.n	8005cc6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005cb2:	f7fb fc61 	bl	8001578 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cc0:	d901      	bls.n	8005cc6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e007      	b.n	8005cd6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cc6:	4b06      	ldr	r3, [pc, #24]	; (8005ce0 <HAL_PWREx_ConfigSupply+0x70>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd2:	d1ee      	bne.n	8005cb2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	58024800 	.word	0x58024800

08005ce4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005ce8:	4b05      	ldr	r3, [pc, #20]	; (8005d00 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	4a04      	ldr	r2, [pc, #16]	; (8005d00 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cf2:	60d3      	str	r3, [r2, #12]
}
 8005cf4:	bf00      	nop
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	58024800 	.word	0x58024800

08005d04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b08c      	sub	sp, #48	; 0x30
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d102      	bne.n	8005d18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	f000 bc48 	b.w	80065a8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 8088 	beq.w	8005e36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d26:	4b99      	ldr	r3, [pc, #612]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d30:	4b96      	ldr	r3, [pc, #600]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d34:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d38:	2b10      	cmp	r3, #16
 8005d3a:	d007      	beq.n	8005d4c <HAL_RCC_OscConfig+0x48>
 8005d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3e:	2b18      	cmp	r3, #24
 8005d40:	d111      	bne.n	8005d66 <HAL_RCC_OscConfig+0x62>
 8005d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d44:	f003 0303 	and.w	r3, r3, #3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d10c      	bne.n	8005d66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d4c:	4b8f      	ldr	r3, [pc, #572]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d06d      	beq.n	8005e34 <HAL_RCC_OscConfig+0x130>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d169      	bne.n	8005e34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	f000 bc21 	b.w	80065a8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d6e:	d106      	bne.n	8005d7e <HAL_RCC_OscConfig+0x7a>
 8005d70:	4b86      	ldr	r3, [pc, #536]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a85      	ldr	r2, [pc, #532]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	e02e      	b.n	8005ddc <HAL_RCC_OscConfig+0xd8>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10c      	bne.n	8005da0 <HAL_RCC_OscConfig+0x9c>
 8005d86:	4b81      	ldr	r3, [pc, #516]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a80      	ldr	r2, [pc, #512]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	4b7e      	ldr	r3, [pc, #504]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a7d      	ldr	r2, [pc, #500]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005d98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d9c:	6013      	str	r3, [r2, #0]
 8005d9e:	e01d      	b.n	8005ddc <HAL_RCC_OscConfig+0xd8>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005da8:	d10c      	bne.n	8005dc4 <HAL_RCC_OscConfig+0xc0>
 8005daa:	4b78      	ldr	r3, [pc, #480]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a77      	ldr	r2, [pc, #476]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	4b75      	ldr	r3, [pc, #468]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a74      	ldr	r2, [pc, #464]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dc0:	6013      	str	r3, [r2, #0]
 8005dc2:	e00b      	b.n	8005ddc <HAL_RCC_OscConfig+0xd8>
 8005dc4:	4b71      	ldr	r3, [pc, #452]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a70      	ldr	r2, [pc, #448]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	4b6e      	ldr	r3, [pc, #440]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a6d      	ldr	r2, [pc, #436]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d013      	beq.n	8005e0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de4:	f7fb fbc8 	bl	8001578 <HAL_GetTick>
 8005de8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dea:	e008      	b.n	8005dfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dec:	f7fb fbc4 	bl	8001578 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b64      	cmp	r3, #100	; 0x64
 8005df8:	d901      	bls.n	8005dfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e3d4      	b.n	80065a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dfe:	4b63      	ldr	r3, [pc, #396]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d0f0      	beq.n	8005dec <HAL_RCC_OscConfig+0xe8>
 8005e0a:	e014      	b.n	8005e36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0c:	f7fb fbb4 	bl	8001578 <HAL_GetTick>
 8005e10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e12:	e008      	b.n	8005e26 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e14:	f7fb fbb0 	bl	8001578 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b64      	cmp	r3, #100	; 0x64
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e3c0      	b.n	80065a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e26:	4b59      	ldr	r3, [pc, #356]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1f0      	bne.n	8005e14 <HAL_RCC_OscConfig+0x110>
 8005e32:	e000      	b.n	8005e36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 80ca 	beq.w	8005fd8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e44:	4b51      	ldr	r3, [pc, #324]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e4c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e4e:	4b4f      	ldr	r3, [pc, #316]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e52:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d007      	beq.n	8005e6a <HAL_RCC_OscConfig+0x166>
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	2b18      	cmp	r3, #24
 8005e5e:	d156      	bne.n	8005f0e <HAL_RCC_OscConfig+0x20a>
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d151      	bne.n	8005f0e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e6a:	4b48      	ldr	r3, [pc, #288]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0304 	and.w	r3, r3, #4
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d005      	beq.n	8005e82 <HAL_RCC_OscConfig+0x17e>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e392      	b.n	80065a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e82:	4b42      	ldr	r3, [pc, #264]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f023 0219 	bic.w	r2, r3, #25
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	493f      	ldr	r1, [pc, #252]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e94:	f7fb fb70 	bl	8001578 <HAL_GetTick>
 8005e98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e9c:	f7fb fb6c 	bl	8001578 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e37c      	b.n	80065a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005eae:	4b37      	ldr	r3, [pc, #220]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0304 	and.w	r3, r3, #4
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0f0      	beq.n	8005e9c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eba:	f7fb fb8d 	bl	80015d8 <HAL_GetREVID>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d817      	bhi.n	8005ef8 <HAL_RCC_OscConfig+0x1f4>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	d108      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x1de>
 8005ed0:	4b2e      	ldr	r3, [pc, #184]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005ed8:	4a2c      	ldr	r2, [pc, #176]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ede:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ee0:	e07a      	b.n	8005fd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee2:	4b2a      	ldr	r3, [pc, #168]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	031b      	lsls	r3, r3, #12
 8005ef0:	4926      	ldr	r1, [pc, #152]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ef6:	e06f      	b.n	8005fd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ef8:	4b24      	ldr	r3, [pc, #144]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	061b      	lsls	r3, r3, #24
 8005f06:	4921      	ldr	r1, [pc, #132]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f0c:	e064      	b.n	8005fd8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d047      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f16:	4b1d      	ldr	r3, [pc, #116]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f023 0219 	bic.w	r2, r3, #25
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	491a      	ldr	r1, [pc, #104]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f28:	f7fb fb26 	bl	8001578 <HAL_GetTick>
 8005f2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f30:	f7fb fb22 	bl	8001578 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e332      	b.n	80065a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f42:	4b12      	ldr	r3, [pc, #72]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0f0      	beq.n	8005f30 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f4e:	f7fb fb43 	bl	80015d8 <HAL_GetREVID>
 8005f52:	4603      	mov	r3, r0
 8005f54:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d819      	bhi.n	8005f90 <HAL_RCC_OscConfig+0x28c>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b40      	cmp	r3, #64	; 0x40
 8005f62:	d108      	bne.n	8005f76 <HAL_RCC_OscConfig+0x272>
 8005f64:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f6c:	4a07      	ldr	r2, [pc, #28]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f72:	6053      	str	r3, [r2, #4]
 8005f74:	e030      	b.n	8005fd8 <HAL_RCC_OscConfig+0x2d4>
 8005f76:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	031b      	lsls	r3, r3, #12
 8005f84:	4901      	ldr	r1, [pc, #4]	; (8005f8c <HAL_RCC_OscConfig+0x288>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	604b      	str	r3, [r1, #4]
 8005f8a:	e025      	b.n	8005fd8 <HAL_RCC_OscConfig+0x2d4>
 8005f8c:	58024400 	.word	0x58024400
 8005f90:	4b9a      	ldr	r3, [pc, #616]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	061b      	lsls	r3, r3, #24
 8005f9e:	4997      	ldr	r1, [pc, #604]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	604b      	str	r3, [r1, #4]
 8005fa4:	e018      	b.n	8005fd8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fa6:	4b95      	ldr	r3, [pc, #596]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a94      	ldr	r2, [pc, #592]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 8005fac:	f023 0301 	bic.w	r3, r3, #1
 8005fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb2:	f7fb fae1 	bl	8001578 <HAL_GetTick>
 8005fb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fb8:	e008      	b.n	8005fcc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fba:	f7fb fadd 	bl	8001578 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d901      	bls.n	8005fcc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e2ed      	b.n	80065a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fcc:	4b8b      	ldr	r3, [pc, #556]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1f0      	bne.n	8005fba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0310 	and.w	r3, r3, #16
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 80a9 	beq.w	8006138 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fe6:	4b85      	ldr	r3, [pc, #532]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ff0:	4b82      	ldr	r3, [pc, #520]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 8005ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	2b08      	cmp	r3, #8
 8005ffa:	d007      	beq.n	800600c <HAL_RCC_OscConfig+0x308>
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	2b18      	cmp	r3, #24
 8006000:	d13a      	bne.n	8006078 <HAL_RCC_OscConfig+0x374>
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f003 0303 	and.w	r3, r3, #3
 8006008:	2b01      	cmp	r3, #1
 800600a:	d135      	bne.n	8006078 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800600c:	4b7b      	ldr	r3, [pc, #492]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006014:	2b00      	cmp	r3, #0
 8006016:	d005      	beq.n	8006024 <HAL_RCC_OscConfig+0x320>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	2b80      	cmp	r3, #128	; 0x80
 800601e:	d001      	beq.n	8006024 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e2c1      	b.n	80065a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006024:	f7fb fad8 	bl	80015d8 <HAL_GetREVID>
 8006028:	4603      	mov	r3, r0
 800602a:	f241 0203 	movw	r2, #4099	; 0x1003
 800602e:	4293      	cmp	r3, r2
 8006030:	d817      	bhi.n	8006062 <HAL_RCC_OscConfig+0x35e>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	2b20      	cmp	r3, #32
 8006038:	d108      	bne.n	800604c <HAL_RCC_OscConfig+0x348>
 800603a:	4b70      	ldr	r3, [pc, #448]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006042:	4a6e      	ldr	r2, [pc, #440]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 8006044:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006048:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800604a:	e075      	b.n	8006138 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800604c:	4b6b      	ldr	r3, [pc, #428]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	069b      	lsls	r3, r3, #26
 800605a:	4968      	ldr	r1, [pc, #416]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 800605c:	4313      	orrs	r3, r2
 800605e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006060:	e06a      	b.n	8006138 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006062:	4b66      	ldr	r3, [pc, #408]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	061b      	lsls	r3, r3, #24
 8006070:	4962      	ldr	r1, [pc, #392]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 8006072:	4313      	orrs	r3, r2
 8006074:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006076:	e05f      	b.n	8006138 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d042      	beq.n	8006106 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006080:	4b5e      	ldr	r3, [pc, #376]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a5d      	ldr	r2, [pc, #372]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 8006086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800608c:	f7fb fa74 	bl	8001578 <HAL_GetTick>
 8006090:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006092:	e008      	b.n	80060a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006094:	f7fb fa70 	bl	8001578 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e280      	b.n	80065a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060a6:	4b55      	ldr	r3, [pc, #340]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0f0      	beq.n	8006094 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060b2:	f7fb fa91 	bl	80015d8 <HAL_GetREVID>
 80060b6:	4603      	mov	r3, r0
 80060b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80060bc:	4293      	cmp	r3, r2
 80060be:	d817      	bhi.n	80060f0 <HAL_RCC_OscConfig+0x3ec>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	d108      	bne.n	80060da <HAL_RCC_OscConfig+0x3d6>
 80060c8:	4b4c      	ldr	r3, [pc, #304]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80060d0:	4a4a      	ldr	r2, [pc, #296]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 80060d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060d6:	6053      	str	r3, [r2, #4]
 80060d8:	e02e      	b.n	8006138 <HAL_RCC_OscConfig+0x434>
 80060da:	4b48      	ldr	r3, [pc, #288]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	069b      	lsls	r3, r3, #26
 80060e8:	4944      	ldr	r1, [pc, #272]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	604b      	str	r3, [r1, #4]
 80060ee:	e023      	b.n	8006138 <HAL_RCC_OscConfig+0x434>
 80060f0:	4b42      	ldr	r3, [pc, #264]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	061b      	lsls	r3, r3, #24
 80060fe:	493f      	ldr	r1, [pc, #252]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 8006100:	4313      	orrs	r3, r2
 8006102:	60cb      	str	r3, [r1, #12]
 8006104:	e018      	b.n	8006138 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006106:	4b3d      	ldr	r3, [pc, #244]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a3c      	ldr	r2, [pc, #240]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 800610c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006112:	f7fb fa31 	bl	8001578 <HAL_GetTick>
 8006116:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006118:	e008      	b.n	800612c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800611a:	f7fb fa2d 	bl	8001578 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d901      	bls.n	800612c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e23d      	b.n	80065a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800612c:	4b33      	ldr	r3, [pc, #204]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1f0      	bne.n	800611a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0308 	and.w	r3, r3, #8
 8006140:	2b00      	cmp	r3, #0
 8006142:	d036      	beq.n	80061b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d019      	beq.n	8006180 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800614c:	4b2b      	ldr	r3, [pc, #172]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 800614e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006150:	4a2a      	ldr	r2, [pc, #168]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 8006152:	f043 0301 	orr.w	r3, r3, #1
 8006156:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006158:	f7fb fa0e 	bl	8001578 <HAL_GetTick>
 800615c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006160:	f7fb fa0a 	bl	8001578 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e21a      	b.n	80065a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006172:	4b22      	ldr	r3, [pc, #136]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 8006174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0f0      	beq.n	8006160 <HAL_RCC_OscConfig+0x45c>
 800617e:	e018      	b.n	80061b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006180:	4b1e      	ldr	r3, [pc, #120]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 8006182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006184:	4a1d      	ldr	r2, [pc, #116]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 8006186:	f023 0301 	bic.w	r3, r3, #1
 800618a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800618c:	f7fb f9f4 	bl	8001578 <HAL_GetTick>
 8006190:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006192:	e008      	b.n	80061a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006194:	f7fb f9f0 	bl	8001578 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e200      	b.n	80065a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061a6:	4b15      	ldr	r3, [pc, #84]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 80061a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1f0      	bne.n	8006194 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d039      	beq.n	8006232 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d01c      	beq.n	8006200 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061c6:	4b0d      	ldr	r3, [pc, #52]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a0c      	ldr	r2, [pc, #48]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 80061cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061d2:	f7fb f9d1 	bl	8001578 <HAL_GetTick>
 80061d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061d8:	e008      	b.n	80061ec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061da:	f7fb f9cd 	bl	8001578 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d901      	bls.n	80061ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e1dd      	b.n	80065a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061ec:	4b03      	ldr	r3, [pc, #12]	; (80061fc <HAL_RCC_OscConfig+0x4f8>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0f0      	beq.n	80061da <HAL_RCC_OscConfig+0x4d6>
 80061f8:	e01b      	b.n	8006232 <HAL_RCC_OscConfig+0x52e>
 80061fa:	bf00      	nop
 80061fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006200:	4b9b      	ldr	r3, [pc, #620]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a9a      	ldr	r2, [pc, #616]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 8006206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800620a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800620c:	f7fb f9b4 	bl	8001578 <HAL_GetTick>
 8006210:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006212:	e008      	b.n	8006226 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006214:	f7fb f9b0 	bl	8001578 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	2b02      	cmp	r3, #2
 8006220:	d901      	bls.n	8006226 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e1c0      	b.n	80065a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006226:	4b92      	ldr	r3, [pc, #584]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1f0      	bne.n	8006214 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0304 	and.w	r3, r3, #4
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 8081 	beq.w	8006342 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006240:	4b8c      	ldr	r3, [pc, #560]	; (8006474 <HAL_RCC_OscConfig+0x770>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a8b      	ldr	r2, [pc, #556]	; (8006474 <HAL_RCC_OscConfig+0x770>)
 8006246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800624a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800624c:	f7fb f994 	bl	8001578 <HAL_GetTick>
 8006250:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006252:	e008      	b.n	8006266 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006254:	f7fb f990 	bl	8001578 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	2b64      	cmp	r3, #100	; 0x64
 8006260:	d901      	bls.n	8006266 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e1a0      	b.n	80065a8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006266:	4b83      	ldr	r3, [pc, #524]	; (8006474 <HAL_RCC_OscConfig+0x770>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626e:	2b00      	cmp	r3, #0
 8006270:	d0f0      	beq.n	8006254 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d106      	bne.n	8006288 <HAL_RCC_OscConfig+0x584>
 800627a:	4b7d      	ldr	r3, [pc, #500]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 800627c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627e:	4a7c      	ldr	r2, [pc, #496]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 8006280:	f043 0301 	orr.w	r3, r3, #1
 8006284:	6713      	str	r3, [r2, #112]	; 0x70
 8006286:	e02d      	b.n	80062e4 <HAL_RCC_OscConfig+0x5e0>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10c      	bne.n	80062aa <HAL_RCC_OscConfig+0x5a6>
 8006290:	4b77      	ldr	r3, [pc, #476]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 8006292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006294:	4a76      	ldr	r2, [pc, #472]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 8006296:	f023 0301 	bic.w	r3, r3, #1
 800629a:	6713      	str	r3, [r2, #112]	; 0x70
 800629c:	4b74      	ldr	r3, [pc, #464]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 800629e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a0:	4a73      	ldr	r2, [pc, #460]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 80062a2:	f023 0304 	bic.w	r3, r3, #4
 80062a6:	6713      	str	r3, [r2, #112]	; 0x70
 80062a8:	e01c      	b.n	80062e4 <HAL_RCC_OscConfig+0x5e0>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	2b05      	cmp	r3, #5
 80062b0:	d10c      	bne.n	80062cc <HAL_RCC_OscConfig+0x5c8>
 80062b2:	4b6f      	ldr	r3, [pc, #444]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 80062b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b6:	4a6e      	ldr	r2, [pc, #440]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 80062b8:	f043 0304 	orr.w	r3, r3, #4
 80062bc:	6713      	str	r3, [r2, #112]	; 0x70
 80062be:	4b6c      	ldr	r3, [pc, #432]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 80062c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c2:	4a6b      	ldr	r2, [pc, #428]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 80062c4:	f043 0301 	orr.w	r3, r3, #1
 80062c8:	6713      	str	r3, [r2, #112]	; 0x70
 80062ca:	e00b      	b.n	80062e4 <HAL_RCC_OscConfig+0x5e0>
 80062cc:	4b68      	ldr	r3, [pc, #416]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 80062ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d0:	4a67      	ldr	r2, [pc, #412]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 80062d2:	f023 0301 	bic.w	r3, r3, #1
 80062d6:	6713      	str	r3, [r2, #112]	; 0x70
 80062d8:	4b65      	ldr	r3, [pc, #404]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 80062da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062dc:	4a64      	ldr	r2, [pc, #400]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 80062de:	f023 0304 	bic.w	r3, r3, #4
 80062e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d015      	beq.n	8006318 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ec:	f7fb f944 	bl	8001578 <HAL_GetTick>
 80062f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062f2:	e00a      	b.n	800630a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062f4:	f7fb f940 	bl	8001578 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006302:	4293      	cmp	r3, r2
 8006304:	d901      	bls.n	800630a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e14e      	b.n	80065a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800630a:	4b59      	ldr	r3, [pc, #356]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 800630c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0ee      	beq.n	80062f4 <HAL_RCC_OscConfig+0x5f0>
 8006316:	e014      	b.n	8006342 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006318:	f7fb f92e 	bl	8001578 <HAL_GetTick>
 800631c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800631e:	e00a      	b.n	8006336 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006320:	f7fb f92a 	bl	8001578 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	f241 3288 	movw	r2, #5000	; 0x1388
 800632e:	4293      	cmp	r3, r2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e138      	b.n	80065a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006336:	4b4e      	ldr	r3, [pc, #312]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 8006338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1ee      	bne.n	8006320 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 812d 	beq.w	80065a6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800634c:	4b48      	ldr	r3, [pc, #288]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006354:	2b18      	cmp	r3, #24
 8006356:	f000 80bd 	beq.w	80064d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	2b02      	cmp	r3, #2
 8006360:	f040 809e 	bne.w	80064a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006364:	4b42      	ldr	r3, [pc, #264]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a41      	ldr	r2, [pc, #260]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 800636a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800636e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006370:	f7fb f902 	bl	8001578 <HAL_GetTick>
 8006374:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006376:	e008      	b.n	800638a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006378:	f7fb f8fe 	bl	8001578 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b02      	cmp	r3, #2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e10e      	b.n	80065a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800638a:	4b39      	ldr	r3, [pc, #228]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1f0      	bne.n	8006378 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006396:	4b36      	ldr	r3, [pc, #216]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 8006398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800639a:	4b37      	ldr	r3, [pc, #220]	; (8006478 <HAL_RCC_OscConfig+0x774>)
 800639c:	4013      	ands	r3, r2
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80063a6:	0112      	lsls	r2, r2, #4
 80063a8:	430a      	orrs	r2, r1
 80063aa:	4931      	ldr	r1, [pc, #196]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	628b      	str	r3, [r1, #40]	; 0x28
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b4:	3b01      	subs	r3, #1
 80063b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063be:	3b01      	subs	r3, #1
 80063c0:	025b      	lsls	r3, r3, #9
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	431a      	orrs	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ca:	3b01      	subs	r3, #1
 80063cc:	041b      	lsls	r3, r3, #16
 80063ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063d2:	431a      	orrs	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d8:	3b01      	subs	r3, #1
 80063da:	061b      	lsls	r3, r3, #24
 80063dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063e0:	4923      	ldr	r1, [pc, #140]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80063e6:	4b22      	ldr	r3, [pc, #136]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 80063e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ea:	4a21      	ldr	r2, [pc, #132]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 80063ec:	f023 0301 	bic.w	r3, r3, #1
 80063f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80063f2:	4b1f      	ldr	r3, [pc, #124]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 80063f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f6:	4b21      	ldr	r3, [pc, #132]	; (800647c <HAL_RCC_OscConfig+0x778>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80063fe:	00d2      	lsls	r2, r2, #3
 8006400:	491b      	ldr	r1, [pc, #108]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 8006402:	4313      	orrs	r3, r2
 8006404:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006406:	4b1a      	ldr	r3, [pc, #104]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 8006408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640a:	f023 020c 	bic.w	r2, r3, #12
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006412:	4917      	ldr	r1, [pc, #92]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 8006414:	4313      	orrs	r3, r2
 8006416:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006418:	4b15      	ldr	r3, [pc, #84]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	f023 0202 	bic.w	r2, r3, #2
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006424:	4912      	ldr	r1, [pc, #72]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 8006426:	4313      	orrs	r3, r2
 8006428:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800642a:	4b11      	ldr	r3, [pc, #68]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 800642c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642e:	4a10      	ldr	r2, [pc, #64]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 8006430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006434:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006436:	4b0e      	ldr	r3, [pc, #56]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 8006438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643a:	4a0d      	ldr	r2, [pc, #52]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 800643c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006440:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006442:	4b0b      	ldr	r3, [pc, #44]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 8006444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006446:	4a0a      	ldr	r2, [pc, #40]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 8006448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800644c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800644e:	4b08      	ldr	r3, [pc, #32]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 8006450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006452:	4a07      	ldr	r2, [pc, #28]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 8006454:	f043 0301 	orr.w	r3, r3, #1
 8006458:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800645a:	4b05      	ldr	r3, [pc, #20]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a04      	ldr	r2, [pc, #16]	; (8006470 <HAL_RCC_OscConfig+0x76c>)
 8006460:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006466:	f7fb f887 	bl	8001578 <HAL_GetTick>
 800646a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800646c:	e011      	b.n	8006492 <HAL_RCC_OscConfig+0x78e>
 800646e:	bf00      	nop
 8006470:	58024400 	.word	0x58024400
 8006474:	58024800 	.word	0x58024800
 8006478:	fffffc0c 	.word	0xfffffc0c
 800647c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006480:	f7fb f87a 	bl	8001578 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b02      	cmp	r3, #2
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e08a      	b.n	80065a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006492:	4b47      	ldr	r3, [pc, #284]	; (80065b0 <HAL_RCC_OscConfig+0x8ac>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d0f0      	beq.n	8006480 <HAL_RCC_OscConfig+0x77c>
 800649e:	e082      	b.n	80065a6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064a0:	4b43      	ldr	r3, [pc, #268]	; (80065b0 <HAL_RCC_OscConfig+0x8ac>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a42      	ldr	r2, [pc, #264]	; (80065b0 <HAL_RCC_OscConfig+0x8ac>)
 80064a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ac:	f7fb f864 	bl	8001578 <HAL_GetTick>
 80064b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064b4:	f7fb f860 	bl	8001578 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e070      	b.n	80065a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064c6:	4b3a      	ldr	r3, [pc, #232]	; (80065b0 <HAL_RCC_OscConfig+0x8ac>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f0      	bne.n	80064b4 <HAL_RCC_OscConfig+0x7b0>
 80064d2:	e068      	b.n	80065a6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80064d4:	4b36      	ldr	r3, [pc, #216]	; (80065b0 <HAL_RCC_OscConfig+0x8ac>)
 80064d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80064da:	4b35      	ldr	r3, [pc, #212]	; (80065b0 <HAL_RCC_OscConfig+0x8ac>)
 80064dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d031      	beq.n	800654c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f003 0203 	and.w	r2, r3, #3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d12a      	bne.n	800654c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	091b      	lsrs	r3, r3, #4
 80064fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006502:	429a      	cmp	r2, r3
 8006504:	d122      	bne.n	800654c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006512:	429a      	cmp	r2, r3
 8006514:	d11a      	bne.n	800654c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	0a5b      	lsrs	r3, r3, #9
 800651a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006522:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006524:	429a      	cmp	r2, r3
 8006526:	d111      	bne.n	800654c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	0c1b      	lsrs	r3, r3, #16
 800652c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006536:	429a      	cmp	r2, r3
 8006538:	d108      	bne.n	800654c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	0e1b      	lsrs	r3, r3, #24
 800653e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006546:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006548:	429a      	cmp	r2, r3
 800654a:	d001      	beq.n	8006550 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e02b      	b.n	80065a8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006550:	4b17      	ldr	r3, [pc, #92]	; (80065b0 <HAL_RCC_OscConfig+0x8ac>)
 8006552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006554:	08db      	lsrs	r3, r3, #3
 8006556:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800655a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	429a      	cmp	r2, r3
 8006564:	d01f      	beq.n	80065a6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006566:	4b12      	ldr	r3, [pc, #72]	; (80065b0 <HAL_RCC_OscConfig+0x8ac>)
 8006568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656a:	4a11      	ldr	r2, [pc, #68]	; (80065b0 <HAL_RCC_OscConfig+0x8ac>)
 800656c:	f023 0301 	bic.w	r3, r3, #1
 8006570:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006572:	f7fb f801 	bl	8001578 <HAL_GetTick>
 8006576:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006578:	bf00      	nop
 800657a:	f7fa fffd 	bl	8001578 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	4293      	cmp	r3, r2
 8006584:	d0f9      	beq.n	800657a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006586:	4b0a      	ldr	r3, [pc, #40]	; (80065b0 <HAL_RCC_OscConfig+0x8ac>)
 8006588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800658a:	4b0a      	ldr	r3, [pc, #40]	; (80065b4 <HAL_RCC_OscConfig+0x8b0>)
 800658c:	4013      	ands	r3, r2
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006592:	00d2      	lsls	r2, r2, #3
 8006594:	4906      	ldr	r1, [pc, #24]	; (80065b0 <HAL_RCC_OscConfig+0x8ac>)
 8006596:	4313      	orrs	r3, r2
 8006598:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800659a:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <HAL_RCC_OscConfig+0x8ac>)
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	4a04      	ldr	r2, [pc, #16]	; (80065b0 <HAL_RCC_OscConfig+0x8ac>)
 80065a0:	f043 0301 	orr.w	r3, r3, #1
 80065a4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3730      	adds	r7, #48	; 0x30
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	58024400 	.word	0x58024400
 80065b4:	ffff0007 	.word	0xffff0007

080065b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e19c      	b.n	8006906 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065cc:	4b8a      	ldr	r3, [pc, #552]	; (80067f8 <HAL_RCC_ClockConfig+0x240>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 030f 	and.w	r3, r3, #15
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d910      	bls.n	80065fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065da:	4b87      	ldr	r3, [pc, #540]	; (80067f8 <HAL_RCC_ClockConfig+0x240>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f023 020f 	bic.w	r2, r3, #15
 80065e2:	4985      	ldr	r1, [pc, #532]	; (80067f8 <HAL_RCC_ClockConfig+0x240>)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ea:	4b83      	ldr	r3, [pc, #524]	; (80067f8 <HAL_RCC_ClockConfig+0x240>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 030f 	and.w	r3, r3, #15
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d001      	beq.n	80065fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e184      	b.n	8006906 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b00      	cmp	r3, #0
 8006606:	d010      	beq.n	800662a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	691a      	ldr	r2, [r3, #16]
 800660c:	4b7b      	ldr	r3, [pc, #492]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006614:	429a      	cmp	r2, r3
 8006616:	d908      	bls.n	800662a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006618:	4b78      	ldr	r3, [pc, #480]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	4975      	ldr	r1, [pc, #468]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 8006626:	4313      	orrs	r3, r2
 8006628:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0308 	and.w	r3, r3, #8
 8006632:	2b00      	cmp	r3, #0
 8006634:	d010      	beq.n	8006658 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	695a      	ldr	r2, [r3, #20]
 800663a:	4b70      	ldr	r3, [pc, #448]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006642:	429a      	cmp	r2, r3
 8006644:	d908      	bls.n	8006658 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006646:	4b6d      	ldr	r3, [pc, #436]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	496a      	ldr	r1, [pc, #424]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 8006654:	4313      	orrs	r3, r2
 8006656:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0310 	and.w	r3, r3, #16
 8006660:	2b00      	cmp	r3, #0
 8006662:	d010      	beq.n	8006686 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	699a      	ldr	r2, [r3, #24]
 8006668:	4b64      	ldr	r3, [pc, #400]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006670:	429a      	cmp	r2, r3
 8006672:	d908      	bls.n	8006686 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006674:	4b61      	ldr	r3, [pc, #388]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 8006676:	69db      	ldr	r3, [r3, #28]
 8006678:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	495e      	ldr	r1, [pc, #376]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 8006682:	4313      	orrs	r3, r2
 8006684:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b00      	cmp	r3, #0
 8006690:	d010      	beq.n	80066b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	69da      	ldr	r2, [r3, #28]
 8006696:	4b59      	ldr	r3, [pc, #356]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800669e:	429a      	cmp	r2, r3
 80066a0:	d908      	bls.n	80066b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80066a2:	4b56      	ldr	r3, [pc, #344]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	4953      	ldr	r1, [pc, #332]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d010      	beq.n	80066e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68da      	ldr	r2, [r3, #12]
 80066c4:	4b4d      	ldr	r3, [pc, #308]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	f003 030f 	and.w	r3, r3, #15
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d908      	bls.n	80066e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066d0:	4b4a      	ldr	r3, [pc, #296]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	f023 020f 	bic.w	r2, r3, #15
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	4947      	ldr	r1, [pc, #284]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d055      	beq.n	800679a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80066ee:	4b43      	ldr	r3, [pc, #268]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	4940      	ldr	r1, [pc, #256]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2b02      	cmp	r3, #2
 8006706:	d107      	bne.n	8006718 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006708:	4b3c      	ldr	r3, [pc, #240]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d121      	bne.n	8006758 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e0f6      	b.n	8006906 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2b03      	cmp	r3, #3
 800671e:	d107      	bne.n	8006730 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006720:	4b36      	ldr	r3, [pc, #216]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d115      	bne.n	8006758 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e0ea      	b.n	8006906 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d107      	bne.n	8006748 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006738:	4b30      	ldr	r3, [pc, #192]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006740:	2b00      	cmp	r3, #0
 8006742:	d109      	bne.n	8006758 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e0de      	b.n	8006906 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006748:	4b2c      	ldr	r3, [pc, #176]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0304 	and.w	r3, r3, #4
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e0d6      	b.n	8006906 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006758:	4b28      	ldr	r3, [pc, #160]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	f023 0207 	bic.w	r2, r3, #7
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	4925      	ldr	r1, [pc, #148]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 8006766:	4313      	orrs	r3, r2
 8006768:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800676a:	f7fa ff05 	bl	8001578 <HAL_GetTick>
 800676e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006770:	e00a      	b.n	8006788 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006772:	f7fa ff01 	bl	8001578 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006780:	4293      	cmp	r3, r2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e0be      	b.n	8006906 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006788:	4b1c      	ldr	r3, [pc, #112]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	429a      	cmp	r2, r3
 8006798:	d1eb      	bne.n	8006772 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0302 	and.w	r3, r3, #2
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d010      	beq.n	80067c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	4b14      	ldr	r3, [pc, #80]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	f003 030f 	and.w	r3, r3, #15
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d208      	bcs.n	80067c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067b6:	4b11      	ldr	r3, [pc, #68]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	f023 020f 	bic.w	r2, r3, #15
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	490e      	ldr	r1, [pc, #56]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067c8:	4b0b      	ldr	r3, [pc, #44]	; (80067f8 <HAL_RCC_ClockConfig+0x240>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 030f 	and.w	r3, r3, #15
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d214      	bcs.n	8006800 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067d6:	4b08      	ldr	r3, [pc, #32]	; (80067f8 <HAL_RCC_ClockConfig+0x240>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f023 020f 	bic.w	r2, r3, #15
 80067de:	4906      	ldr	r1, [pc, #24]	; (80067f8 <HAL_RCC_ClockConfig+0x240>)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067e6:	4b04      	ldr	r3, [pc, #16]	; (80067f8 <HAL_RCC_ClockConfig+0x240>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 030f 	and.w	r3, r3, #15
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d005      	beq.n	8006800 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e086      	b.n	8006906 <HAL_RCC_ClockConfig+0x34e>
 80067f8:	52002000 	.word	0x52002000
 80067fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b00      	cmp	r3, #0
 800680a:	d010      	beq.n	800682e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691a      	ldr	r2, [r3, #16]
 8006810:	4b3f      	ldr	r3, [pc, #252]	; (8006910 <HAL_RCC_ClockConfig+0x358>)
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006818:	429a      	cmp	r2, r3
 800681a:	d208      	bcs.n	800682e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800681c:	4b3c      	ldr	r3, [pc, #240]	; (8006910 <HAL_RCC_ClockConfig+0x358>)
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	4939      	ldr	r1, [pc, #228]	; (8006910 <HAL_RCC_ClockConfig+0x358>)
 800682a:	4313      	orrs	r3, r2
 800682c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0308 	and.w	r3, r3, #8
 8006836:	2b00      	cmp	r3, #0
 8006838:	d010      	beq.n	800685c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	695a      	ldr	r2, [r3, #20]
 800683e:	4b34      	ldr	r3, [pc, #208]	; (8006910 <HAL_RCC_ClockConfig+0x358>)
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006846:	429a      	cmp	r2, r3
 8006848:	d208      	bcs.n	800685c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800684a:	4b31      	ldr	r3, [pc, #196]	; (8006910 <HAL_RCC_ClockConfig+0x358>)
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	492e      	ldr	r1, [pc, #184]	; (8006910 <HAL_RCC_ClockConfig+0x358>)
 8006858:	4313      	orrs	r3, r2
 800685a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0310 	and.w	r3, r3, #16
 8006864:	2b00      	cmp	r3, #0
 8006866:	d010      	beq.n	800688a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	699a      	ldr	r2, [r3, #24]
 800686c:	4b28      	ldr	r3, [pc, #160]	; (8006910 <HAL_RCC_ClockConfig+0x358>)
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006874:	429a      	cmp	r2, r3
 8006876:	d208      	bcs.n	800688a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006878:	4b25      	ldr	r3, [pc, #148]	; (8006910 <HAL_RCC_ClockConfig+0x358>)
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	4922      	ldr	r1, [pc, #136]	; (8006910 <HAL_RCC_ClockConfig+0x358>)
 8006886:	4313      	orrs	r3, r2
 8006888:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b00      	cmp	r3, #0
 8006894:	d010      	beq.n	80068b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	69da      	ldr	r2, [r3, #28]
 800689a:	4b1d      	ldr	r3, [pc, #116]	; (8006910 <HAL_RCC_ClockConfig+0x358>)
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d208      	bcs.n	80068b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80068a6:	4b1a      	ldr	r3, [pc, #104]	; (8006910 <HAL_RCC_ClockConfig+0x358>)
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	4917      	ldr	r1, [pc, #92]	; (8006910 <HAL_RCC_ClockConfig+0x358>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80068b8:	f000 f834 	bl	8006924 <HAL_RCC_GetSysClockFreq>
 80068bc:	4602      	mov	r2, r0
 80068be:	4b14      	ldr	r3, [pc, #80]	; (8006910 <HAL_RCC_ClockConfig+0x358>)
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	0a1b      	lsrs	r3, r3, #8
 80068c4:	f003 030f 	and.w	r3, r3, #15
 80068c8:	4912      	ldr	r1, [pc, #72]	; (8006914 <HAL_RCC_ClockConfig+0x35c>)
 80068ca:	5ccb      	ldrb	r3, [r1, r3]
 80068cc:	f003 031f 	and.w	r3, r3, #31
 80068d0:	fa22 f303 	lsr.w	r3, r2, r3
 80068d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068d6:	4b0e      	ldr	r3, [pc, #56]	; (8006910 <HAL_RCC_ClockConfig+0x358>)
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	f003 030f 	and.w	r3, r3, #15
 80068de:	4a0d      	ldr	r2, [pc, #52]	; (8006914 <HAL_RCC_ClockConfig+0x35c>)
 80068e0:	5cd3      	ldrb	r3, [r2, r3]
 80068e2:	f003 031f 	and.w	r3, r3, #31
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	fa22 f303 	lsr.w	r3, r2, r3
 80068ec:	4a0a      	ldr	r2, [pc, #40]	; (8006918 <HAL_RCC_ClockConfig+0x360>)
 80068ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068f0:	4a0a      	ldr	r2, [pc, #40]	; (800691c <HAL_RCC_ClockConfig+0x364>)
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80068f6:	4b0a      	ldr	r3, [pc, #40]	; (8006920 <HAL_RCC_ClockConfig+0x368>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fa fdf2 	bl	80014e4 <HAL_InitTick>
 8006900:	4603      	mov	r3, r0
 8006902:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3718      	adds	r7, #24
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	58024400 	.word	0x58024400
 8006914:	08011fb0 	.word	0x08011fb0
 8006918:	2400000c 	.word	0x2400000c
 800691c:	24000008 	.word	0x24000008
 8006920:	24000010 	.word	0x24000010

08006924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006924:	b480      	push	{r7}
 8006926:	b089      	sub	sp, #36	; 0x24
 8006928:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800692a:	4bb3      	ldr	r3, [pc, #716]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006932:	2b18      	cmp	r3, #24
 8006934:	f200 8155 	bhi.w	8006be2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006938:	a201      	add	r2, pc, #4	; (adr r2, 8006940 <HAL_RCC_GetSysClockFreq+0x1c>)
 800693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693e:	bf00      	nop
 8006940:	080069a5 	.word	0x080069a5
 8006944:	08006be3 	.word	0x08006be3
 8006948:	08006be3 	.word	0x08006be3
 800694c:	08006be3 	.word	0x08006be3
 8006950:	08006be3 	.word	0x08006be3
 8006954:	08006be3 	.word	0x08006be3
 8006958:	08006be3 	.word	0x08006be3
 800695c:	08006be3 	.word	0x08006be3
 8006960:	080069cb 	.word	0x080069cb
 8006964:	08006be3 	.word	0x08006be3
 8006968:	08006be3 	.word	0x08006be3
 800696c:	08006be3 	.word	0x08006be3
 8006970:	08006be3 	.word	0x08006be3
 8006974:	08006be3 	.word	0x08006be3
 8006978:	08006be3 	.word	0x08006be3
 800697c:	08006be3 	.word	0x08006be3
 8006980:	080069d1 	.word	0x080069d1
 8006984:	08006be3 	.word	0x08006be3
 8006988:	08006be3 	.word	0x08006be3
 800698c:	08006be3 	.word	0x08006be3
 8006990:	08006be3 	.word	0x08006be3
 8006994:	08006be3 	.word	0x08006be3
 8006998:	08006be3 	.word	0x08006be3
 800699c:	08006be3 	.word	0x08006be3
 80069a0:	080069d7 	.word	0x080069d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069a4:	4b94      	ldr	r3, [pc, #592]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0320 	and.w	r3, r3, #32
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d009      	beq.n	80069c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069b0:	4b91      	ldr	r3, [pc, #580]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	08db      	lsrs	r3, r3, #3
 80069b6:	f003 0303 	and.w	r3, r3, #3
 80069ba:	4a90      	ldr	r2, [pc, #576]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069bc:	fa22 f303 	lsr.w	r3, r2, r3
 80069c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80069c2:	e111      	b.n	8006be8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80069c4:	4b8d      	ldr	r3, [pc, #564]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069c6:	61bb      	str	r3, [r7, #24]
      break;
 80069c8:	e10e      	b.n	8006be8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80069ca:	4b8d      	ldr	r3, [pc, #564]	; (8006c00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80069cc:	61bb      	str	r3, [r7, #24]
      break;
 80069ce:	e10b      	b.n	8006be8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80069d0:	4b8c      	ldr	r3, [pc, #560]	; (8006c04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80069d2:	61bb      	str	r3, [r7, #24]
      break;
 80069d4:	e108      	b.n	8006be8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069d6:	4b88      	ldr	r3, [pc, #544]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069da:	f003 0303 	and.w	r3, r3, #3
 80069de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80069e0:	4b85      	ldr	r3, [pc, #532]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e4:	091b      	lsrs	r3, r3, #4
 80069e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80069ec:	4b82      	ldr	r3, [pc, #520]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f0:	f003 0301 	and.w	r3, r3, #1
 80069f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80069f6:	4b80      	ldr	r3, [pc, #512]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fa:	08db      	lsrs	r3, r3, #3
 80069fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	fb02 f303 	mul.w	r3, r2, r3
 8006a06:	ee07 3a90 	vmov	s15, r3
 8006a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a0e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 80e1 	beq.w	8006bdc <HAL_RCC_GetSysClockFreq+0x2b8>
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	f000 8083 	beq.w	8006b28 <HAL_RCC_GetSysClockFreq+0x204>
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	f200 80a1 	bhi.w	8006b6c <HAL_RCC_GetSysClockFreq+0x248>
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <HAL_RCC_GetSysClockFreq+0x114>
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d056      	beq.n	8006ae4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006a36:	e099      	b.n	8006b6c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a38:	4b6f      	ldr	r3, [pc, #444]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0320 	and.w	r3, r3, #32
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d02d      	beq.n	8006aa0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a44:	4b6c      	ldr	r3, [pc, #432]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	08db      	lsrs	r3, r3, #3
 8006a4a:	f003 0303 	and.w	r3, r3, #3
 8006a4e:	4a6b      	ldr	r2, [pc, #428]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a50:	fa22 f303 	lsr.w	r3, r2, r3
 8006a54:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	ee07 3a90 	vmov	s15, r3
 8006a5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	ee07 3a90 	vmov	s15, r3
 8006a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a6e:	4b62      	ldr	r3, [pc, #392]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a76:	ee07 3a90 	vmov	s15, r3
 8006a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a82:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006c08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a9a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006a9e:	e087      	b.n	8006bb0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	ee07 3a90 	vmov	s15, r3
 8006aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aaa:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006c0c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ab2:	4b51      	ldr	r3, [pc, #324]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aba:	ee07 3a90 	vmov	s15, r3
 8006abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ac6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006c08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ade:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006ae2:	e065      	b.n	8006bb0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	ee07 3a90 	vmov	s15, r3
 8006aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006c10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006af6:	4b40      	ldr	r3, [pc, #256]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afe:	ee07 3a90 	vmov	s15, r3
 8006b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b06:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b0a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006c08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b26:	e043      	b.n	8006bb0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	ee07 3a90 	vmov	s15, r3
 8006b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b32:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006c14 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b3a:	4b2f      	ldr	r3, [pc, #188]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b42:	ee07 3a90 	vmov	s15, r3
 8006b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b4e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006c08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b6a:	e021      	b.n	8006bb0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	ee07 3a90 	vmov	s15, r3
 8006b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b76:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006c10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b7e:	4b1e      	ldr	r3, [pc, #120]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b92:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006c08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006baa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006bae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006bb0:	4b11      	ldr	r3, [pc, #68]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb4:	0a5b      	lsrs	r3, r3, #9
 8006bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bba:	3301      	adds	r3, #1
 8006bbc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	ee07 3a90 	vmov	s15, r3
 8006bc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006bc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bd4:	ee17 3a90 	vmov	r3, s15
 8006bd8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006bda:	e005      	b.n	8006be8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	61bb      	str	r3, [r7, #24]
      break;
 8006be0:	e002      	b.n	8006be8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006be2:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006be4:	61bb      	str	r3, [r7, #24]
      break;
 8006be6:	bf00      	nop
  }

  return sysclockfreq;
 8006be8:	69bb      	ldr	r3, [r7, #24]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3724      	adds	r7, #36	; 0x24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	58024400 	.word	0x58024400
 8006bfc:	03d09000 	.word	0x03d09000
 8006c00:	003d0900 	.word	0x003d0900
 8006c04:	017d7840 	.word	0x017d7840
 8006c08:	46000000 	.word	0x46000000
 8006c0c:	4c742400 	.word	0x4c742400
 8006c10:	4a742400 	.word	0x4a742400
 8006c14:	4bbebc20 	.word	0x4bbebc20

08006c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c1e:	f7ff fe81 	bl	8006924 <HAL_RCC_GetSysClockFreq>
 8006c22:	4602      	mov	r2, r0
 8006c24:	4b10      	ldr	r3, [pc, #64]	; (8006c68 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	0a1b      	lsrs	r3, r3, #8
 8006c2a:	f003 030f 	and.w	r3, r3, #15
 8006c2e:	490f      	ldr	r1, [pc, #60]	; (8006c6c <HAL_RCC_GetHCLKFreq+0x54>)
 8006c30:	5ccb      	ldrb	r3, [r1, r3]
 8006c32:	f003 031f 	and.w	r3, r3, #31
 8006c36:	fa22 f303 	lsr.w	r3, r2, r3
 8006c3a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c3c:	4b0a      	ldr	r3, [pc, #40]	; (8006c68 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	f003 030f 	and.w	r3, r3, #15
 8006c44:	4a09      	ldr	r2, [pc, #36]	; (8006c6c <HAL_RCC_GetHCLKFreq+0x54>)
 8006c46:	5cd3      	ldrb	r3, [r2, r3]
 8006c48:	f003 031f 	and.w	r3, r3, #31
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c52:	4a07      	ldr	r2, [pc, #28]	; (8006c70 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c54:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c56:	4a07      	ldr	r2, [pc, #28]	; (8006c74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006c5c:	4b04      	ldr	r3, [pc, #16]	; (8006c70 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	58024400 	.word	0x58024400
 8006c6c:	08011fb0 	.word	0x08011fb0
 8006c70:	2400000c 	.word	0x2400000c
 8006c74:	24000008 	.word	0x24000008

08006c78 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c7c:	b0ca      	sub	sp, #296	; 0x128
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c84:	2300      	movs	r3, #0
 8006c86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006c9c:	2500      	movs	r5, #0
 8006c9e:	ea54 0305 	orrs.w	r3, r4, r5
 8006ca2:	d049      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ca8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006caa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cae:	d02f      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006cb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cb4:	d828      	bhi.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006cb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cba:	d01a      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006cbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cc0:	d822      	bhi.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006cc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cca:	d007      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006ccc:	e01c      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cce:	4bb8      	ldr	r3, [pc, #736]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd2:	4ab7      	ldr	r2, [pc, #732]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006cda:	e01a      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ce0:	3308      	adds	r3, #8
 8006ce2:	2102      	movs	r1, #2
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f001 f9d1 	bl	800808c <RCCEx_PLL2_Config>
 8006cea:	4603      	mov	r3, r0
 8006cec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006cf0:	e00f      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cf6:	3328      	adds	r3, #40	; 0x28
 8006cf8:	2102      	movs	r1, #2
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f001 fa78 	bl	80081f0 <RCCEx_PLL3_Config>
 8006d00:	4603      	mov	r3, r0
 8006d02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d06:	e004      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d0e:	e000      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10a      	bne.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006d1a:	4ba5      	ldr	r3, [pc, #660]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d1e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d28:	4aa1      	ldr	r2, [pc, #644]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d2a:	430b      	orrs	r3, r1
 8006d2c:	6513      	str	r3, [r2, #80]	; 0x50
 8006d2e:	e003      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d40:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006d44:	f04f 0900 	mov.w	r9, #0
 8006d48:	ea58 0309 	orrs.w	r3, r8, r9
 8006d4c:	d047      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d54:	2b04      	cmp	r3, #4
 8006d56:	d82a      	bhi.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006d58:	a201      	add	r2, pc, #4	; (adr r2, 8006d60 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5e:	bf00      	nop
 8006d60:	08006d75 	.word	0x08006d75
 8006d64:	08006d83 	.word	0x08006d83
 8006d68:	08006d99 	.word	0x08006d99
 8006d6c:	08006db7 	.word	0x08006db7
 8006d70:	08006db7 	.word	0x08006db7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d74:	4b8e      	ldr	r3, [pc, #568]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	4a8d      	ldr	r2, [pc, #564]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d80:	e01a      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d86:	3308      	adds	r3, #8
 8006d88:	2100      	movs	r1, #0
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f001 f97e 	bl	800808c <RCCEx_PLL2_Config>
 8006d90:	4603      	mov	r3, r0
 8006d92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d96:	e00f      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d9c:	3328      	adds	r3, #40	; 0x28
 8006d9e:	2100      	movs	r1, #0
 8006da0:	4618      	mov	r0, r3
 8006da2:	f001 fa25 	bl	80081f0 <RCCEx_PLL3_Config>
 8006da6:	4603      	mov	r3, r0
 8006da8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dac:	e004      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006db4:	e000      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006db6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006db8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10a      	bne.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006dc0:	4b7b      	ldr	r3, [pc, #492]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dc4:	f023 0107 	bic.w	r1, r3, #7
 8006dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dce:	4a78      	ldr	r2, [pc, #480]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dd0:	430b      	orrs	r3, r1
 8006dd2:	6513      	str	r3, [r2, #80]	; 0x50
 8006dd4:	e003      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006dea:	f04f 0b00 	mov.w	fp, #0
 8006dee:	ea5a 030b 	orrs.w	r3, sl, fp
 8006df2:	d04c      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dfe:	d030      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e04:	d829      	bhi.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e06:	2bc0      	cmp	r3, #192	; 0xc0
 8006e08:	d02d      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006e0a:	2bc0      	cmp	r3, #192	; 0xc0
 8006e0c:	d825      	bhi.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e0e:	2b80      	cmp	r3, #128	; 0x80
 8006e10:	d018      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006e12:	2b80      	cmp	r3, #128	; 0x80
 8006e14:	d821      	bhi.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006e1a:	2b40      	cmp	r3, #64	; 0x40
 8006e1c:	d007      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006e1e:	e01c      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e20:	4b63      	ldr	r3, [pc, #396]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	4a62      	ldr	r2, [pc, #392]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006e2c:	e01c      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e32:	3308      	adds	r3, #8
 8006e34:	2100      	movs	r1, #0
 8006e36:	4618      	mov	r0, r3
 8006e38:	f001 f928 	bl	800808c <RCCEx_PLL2_Config>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006e42:	e011      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e48:	3328      	adds	r3, #40	; 0x28
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f001 f9cf 	bl	80081f0 <RCCEx_PLL3_Config>
 8006e52:	4603      	mov	r3, r0
 8006e54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006e58:	e006      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e60:	e002      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006e62:	bf00      	nop
 8006e64:	e000      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006e66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10a      	bne.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006e70:	4b4f      	ldr	r3, [pc, #316]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e74:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e7e:	4a4c      	ldr	r2, [pc, #304]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e80:	430b      	orrs	r3, r1
 8006e82:	6513      	str	r3, [r2, #80]	; 0x50
 8006e84:	e003      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006e9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006ea4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	d053      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006eb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006eba:	d035      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006ebc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ec0:	d82e      	bhi.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006ec2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ec6:	d031      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006ec8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ecc:	d828      	bhi.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006ece:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ed2:	d01a      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ed8:	d822      	bhi.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006ede:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ee2:	d007      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006ee4:	e01c      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ee6:	4b32      	ldr	r3, [pc, #200]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eea:	4a31      	ldr	r2, [pc, #196]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ef2:	e01c      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ef8:	3308      	adds	r3, #8
 8006efa:	2100      	movs	r1, #0
 8006efc:	4618      	mov	r0, r3
 8006efe:	f001 f8c5 	bl	800808c <RCCEx_PLL2_Config>
 8006f02:	4603      	mov	r3, r0
 8006f04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006f08:	e011      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f0e:	3328      	adds	r3, #40	; 0x28
 8006f10:	2100      	movs	r1, #0
 8006f12:	4618      	mov	r0, r3
 8006f14:	f001 f96c 	bl	80081f0 <RCCEx_PLL3_Config>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f1e:	e006      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f26:	e002      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006f28:	bf00      	nop
 8006f2a:	e000      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10b      	bne.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006f36:	4b1e      	ldr	r3, [pc, #120]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f3a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f46:	4a1a      	ldr	r2, [pc, #104]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	6593      	str	r3, [r2, #88]	; 0x58
 8006f4c:	e003      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006f62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f66:	2300      	movs	r3, #0
 8006f68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f6c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006f70:	460b      	mov	r3, r1
 8006f72:	4313      	orrs	r3, r2
 8006f74:	d056      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006f7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f82:	d038      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006f84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f88:	d831      	bhi.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006f8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f8e:	d034      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006f90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f94:	d82b      	bhi.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006f96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f9a:	d01d      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006f9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fa0:	d825      	bhi.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d006      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006fa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006faa:	d00a      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006fac:	e01f      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fae:	bf00      	nop
 8006fb0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb4:	4ba2      	ldr	r3, [pc, #648]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb8:	4aa1      	ldr	r2, [pc, #644]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fc0:	e01c      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fc6:	3308      	adds	r3, #8
 8006fc8:	2100      	movs	r1, #0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f001 f85e 	bl	800808c <RCCEx_PLL2_Config>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006fd6:	e011      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fdc:	3328      	adds	r3, #40	; 0x28
 8006fde:	2100      	movs	r1, #0
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f001 f905 	bl	80081f0 <RCCEx_PLL3_Config>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fec:	e006      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ff4:	e002      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006ff6:	bf00      	nop
 8006ff8:	e000      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006ffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10b      	bne.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007004:	4b8e      	ldr	r3, [pc, #568]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007008:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800700c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007010:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007014:	4a8a      	ldr	r2, [pc, #552]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007016:	430b      	orrs	r3, r1
 8007018:	6593      	str	r3, [r2, #88]	; 0x58
 800701a:	e003      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800701c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007020:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007030:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007034:	2300      	movs	r3, #0
 8007036:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800703a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800703e:	460b      	mov	r3, r1
 8007040:	4313      	orrs	r3, r2
 8007042:	d03a      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800704a:	2b30      	cmp	r3, #48	; 0x30
 800704c:	d01f      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800704e:	2b30      	cmp	r3, #48	; 0x30
 8007050:	d819      	bhi.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007052:	2b20      	cmp	r3, #32
 8007054:	d00c      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007056:	2b20      	cmp	r3, #32
 8007058:	d815      	bhi.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800705a:	2b00      	cmp	r3, #0
 800705c:	d019      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800705e:	2b10      	cmp	r3, #16
 8007060:	d111      	bne.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007062:	4b77      	ldr	r3, [pc, #476]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007066:	4a76      	ldr	r2, [pc, #472]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800706c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800706e:	e011      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007074:	3308      	adds	r3, #8
 8007076:	2102      	movs	r1, #2
 8007078:	4618      	mov	r0, r3
 800707a:	f001 f807 	bl	800808c <RCCEx_PLL2_Config>
 800707e:	4603      	mov	r3, r0
 8007080:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007084:	e006      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800708c:	e002      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800708e:	bf00      	nop
 8007090:	e000      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007092:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007094:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10a      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800709c:	4b68      	ldr	r3, [pc, #416]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800709e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070a0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80070a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070aa:	4a65      	ldr	r2, [pc, #404]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070ac:	430b      	orrs	r3, r1
 80070ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80070b0:	e003      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80070ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80070c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80070ca:	2300      	movs	r3, #0
 80070cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80070d0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80070d4:	460b      	mov	r3, r1
 80070d6:	4313      	orrs	r3, r2
 80070d8:	d051      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80070da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070e4:	d035      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80070e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070ea:	d82e      	bhi.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80070ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070f0:	d031      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80070f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070f6:	d828      	bhi.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80070f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070fc:	d01a      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80070fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007102:	d822      	bhi.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007104:	2b00      	cmp	r3, #0
 8007106:	d003      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800710c:	d007      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800710e:	e01c      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007110:	4b4b      	ldr	r3, [pc, #300]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007114:	4a4a      	ldr	r2, [pc, #296]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800711a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800711c:	e01c      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800711e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007122:	3308      	adds	r3, #8
 8007124:	2100      	movs	r1, #0
 8007126:	4618      	mov	r0, r3
 8007128:	f000 ffb0 	bl	800808c <RCCEx_PLL2_Config>
 800712c:	4603      	mov	r3, r0
 800712e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007132:	e011      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007138:	3328      	adds	r3, #40	; 0x28
 800713a:	2100      	movs	r1, #0
 800713c:	4618      	mov	r0, r3
 800713e:	f001 f857 	bl	80081f0 <RCCEx_PLL3_Config>
 8007142:	4603      	mov	r3, r0
 8007144:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007148:	e006      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007150:	e002      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007152:	bf00      	nop
 8007154:	e000      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007156:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007158:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10a      	bne.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007160:	4b37      	ldr	r3, [pc, #220]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007164:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800716c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800716e:	4a34      	ldr	r2, [pc, #208]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007170:	430b      	orrs	r3, r1
 8007172:	6513      	str	r3, [r2, #80]	; 0x50
 8007174:	e003      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007176:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800717a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800717e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800718a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800718e:	2300      	movs	r3, #0
 8007190:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007194:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007198:	460b      	mov	r3, r1
 800719a:	4313      	orrs	r3, r2
 800719c:	d056      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800719e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071a8:	d033      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80071aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071ae:	d82c      	bhi.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80071b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071b4:	d02f      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80071b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071ba:	d826      	bhi.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80071bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071c0:	d02b      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80071c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071c6:	d820      	bhi.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80071c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071cc:	d012      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80071ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071d2:	d81a      	bhi.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d022      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80071d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071dc:	d115      	bne.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071e2:	3308      	adds	r3, #8
 80071e4:	2101      	movs	r1, #1
 80071e6:	4618      	mov	r0, r3
 80071e8:	f000 ff50 	bl	800808c <RCCEx_PLL2_Config>
 80071ec:	4603      	mov	r3, r0
 80071ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80071f2:	e015      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071f8:	3328      	adds	r3, #40	; 0x28
 80071fa:	2101      	movs	r1, #1
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 fff7 	bl	80081f0 <RCCEx_PLL3_Config>
 8007202:	4603      	mov	r3, r0
 8007204:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007208:	e00a      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007210:	e006      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007212:	bf00      	nop
 8007214:	e004      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007216:	bf00      	nop
 8007218:	e002      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800721a:	bf00      	nop
 800721c:	e000      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800721e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007220:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10d      	bne.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007228:	4b05      	ldr	r3, [pc, #20]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800722a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800722c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007236:	4a02      	ldr	r2, [pc, #8]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007238:	430b      	orrs	r3, r1
 800723a:	6513      	str	r3, [r2, #80]	; 0x50
 800723c:	e006      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800723e:	bf00      	nop
 8007240:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007244:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007248:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800724c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007254:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007258:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800725c:	2300      	movs	r3, #0
 800725e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007262:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007266:	460b      	mov	r3, r1
 8007268:	4313      	orrs	r3, r2
 800726a:	d055      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800726c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007270:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007274:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007278:	d033      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800727a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800727e:	d82c      	bhi.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007284:	d02f      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800728a:	d826      	bhi.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x662>
 800728c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007290:	d02b      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007292:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007296:	d820      	bhi.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800729c:	d012      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800729e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072a2:	d81a      	bhi.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d022      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x676>
 80072a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072ac:	d115      	bne.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072b2:	3308      	adds	r3, #8
 80072b4:	2101      	movs	r1, #1
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 fee8 	bl	800808c <RCCEx_PLL2_Config>
 80072bc:	4603      	mov	r3, r0
 80072be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80072c2:	e015      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072c8:	3328      	adds	r3, #40	; 0x28
 80072ca:	2101      	movs	r1, #1
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 ff8f 	bl	80081f0 <RCCEx_PLL3_Config>
 80072d2:	4603      	mov	r3, r0
 80072d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80072d8:	e00a      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072e0:	e006      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80072e2:	bf00      	nop
 80072e4:	e004      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80072e6:	bf00      	nop
 80072e8:	e002      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80072ea:	bf00      	nop
 80072ec:	e000      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80072ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10b      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80072f8:	4ba3      	ldr	r3, [pc, #652]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072fc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007304:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007308:	4a9f      	ldr	r2, [pc, #636]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800730a:	430b      	orrs	r3, r1
 800730c:	6593      	str	r3, [r2, #88]	; 0x58
 800730e:	e003      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007310:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007314:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007324:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007328:	2300      	movs	r3, #0
 800732a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800732e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007332:	460b      	mov	r3, r1
 8007334:	4313      	orrs	r3, r2
 8007336:	d037      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800733c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007342:	d00e      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007348:	d816      	bhi.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800734a:	2b00      	cmp	r3, #0
 800734c:	d018      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800734e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007352:	d111      	bne.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007354:	4b8c      	ldr	r3, [pc, #560]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	4a8b      	ldr	r2, [pc, #556]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800735a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800735e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007360:	e00f      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007366:	3308      	adds	r3, #8
 8007368:	2101      	movs	r1, #1
 800736a:	4618      	mov	r0, r3
 800736c:	f000 fe8e 	bl	800808c <RCCEx_PLL2_Config>
 8007370:	4603      	mov	r3, r0
 8007372:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007376:	e004      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800737e:	e000      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007382:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10a      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800738a:	4b7f      	ldr	r3, [pc, #508]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800738c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800738e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007398:	4a7b      	ldr	r2, [pc, #492]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800739a:	430b      	orrs	r3, r1
 800739c:	6513      	str	r3, [r2, #80]	; 0x50
 800739e:	e003      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80073a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80073b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073b8:	2300      	movs	r3, #0
 80073ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80073be:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4313      	orrs	r3, r2
 80073c6:	d039      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80073c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d81c      	bhi.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x794>
 80073d2:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80073d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d8:	08007415 	.word	0x08007415
 80073dc:	080073e9 	.word	0x080073e9
 80073e0:	080073f7 	.word	0x080073f7
 80073e4:	08007415 	.word	0x08007415
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073e8:	4b67      	ldr	r3, [pc, #412]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ec:	4a66      	ldr	r2, [pc, #408]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80073f4:	e00f      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073fa:	3308      	adds	r3, #8
 80073fc:	2102      	movs	r1, #2
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 fe44 	bl	800808c <RCCEx_PLL2_Config>
 8007404:	4603      	mov	r3, r0
 8007406:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800740a:	e004      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007412:	e000      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007416:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10a      	bne.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800741e:	4b5a      	ldr	r3, [pc, #360]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007422:	f023 0103 	bic.w	r1, r3, #3
 8007426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800742a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800742c:	4a56      	ldr	r2, [pc, #344]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800742e:	430b      	orrs	r3, r1
 8007430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007432:	e003      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007434:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007438:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800743c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007444:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007448:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800744c:	2300      	movs	r3, #0
 800744e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007452:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007456:	460b      	mov	r3, r1
 8007458:	4313      	orrs	r3, r2
 800745a:	f000 809f 	beq.w	800759c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800745e:	4b4b      	ldr	r3, [pc, #300]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a4a      	ldr	r2, [pc, #296]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007468:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800746a:	f7fa f885 	bl	8001578 <HAL_GetTick>
 800746e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007472:	e00b      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007474:	f7fa f880 	bl	8001578 <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	2b64      	cmp	r3, #100	; 0x64
 8007482:	d903      	bls.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800748a:	e005      	b.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800748c:	4b3f      	ldr	r3, [pc, #252]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0ed      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007498:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800749c:	2b00      	cmp	r3, #0
 800749e:	d179      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80074a0:	4b39      	ldr	r3, [pc, #228]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80074ac:	4053      	eors	r3, r2
 80074ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d015      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074b6:	4b34      	ldr	r3, [pc, #208]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80074c2:	4b31      	ldr	r3, [pc, #196]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c6:	4a30      	ldr	r2, [pc, #192]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074cc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80074ce:	4b2e      	ldr	r3, [pc, #184]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d2:	4a2d      	ldr	r2, [pc, #180]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074d8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80074da:	4a2b      	ldr	r2, [pc, #172]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80074e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80074e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80074ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ee:	d118      	bne.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f0:	f7fa f842 	bl	8001578 <HAL_GetTick>
 80074f4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074f8:	e00d      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074fa:	f7fa f83d 	bl	8001578 <HAL_GetTick>
 80074fe:	4602      	mov	r2, r0
 8007500:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007504:	1ad2      	subs	r2, r2, r3
 8007506:	f241 3388 	movw	r3, #5000	; 0x1388
 800750a:	429a      	cmp	r2, r3
 800750c:	d903      	bls.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007514:	e005      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007516:	4b1c      	ldr	r3, [pc, #112]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0eb      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007522:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007526:	2b00      	cmp	r3, #0
 8007528:	d129      	bne.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800752a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800752e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007536:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800753a:	d10e      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800753c:	4b12      	ldr	r3, [pc, #72]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007548:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800754c:	091a      	lsrs	r2, r3, #4
 800754e:	4b10      	ldr	r3, [pc, #64]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007550:	4013      	ands	r3, r2
 8007552:	4a0d      	ldr	r2, [pc, #52]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007554:	430b      	orrs	r3, r1
 8007556:	6113      	str	r3, [r2, #16]
 8007558:	e005      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800755a:	4b0b      	ldr	r3, [pc, #44]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	4a0a      	ldr	r2, [pc, #40]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007560:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007564:	6113      	str	r3, [r2, #16]
 8007566:	4b08      	ldr	r3, [pc, #32]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007568:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800756a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800756e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007576:	4a04      	ldr	r2, [pc, #16]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007578:	430b      	orrs	r3, r1
 800757a:	6713      	str	r3, [r2, #112]	; 0x70
 800757c:	e00e      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800757e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007582:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007586:	e009      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007588:	58024400 	.word	0x58024400
 800758c:	58024800 	.word	0x58024800
 8007590:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007594:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007598:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800759c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	f002 0301 	and.w	r3, r2, #1
 80075a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075ac:	2300      	movs	r3, #0
 80075ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4313      	orrs	r3, r2
 80075ba:	f000 8089 	beq.w	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80075be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075c4:	2b28      	cmp	r3, #40	; 0x28
 80075c6:	d86b      	bhi.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80075c8:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80075ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ce:	bf00      	nop
 80075d0:	080076a9 	.word	0x080076a9
 80075d4:	080076a1 	.word	0x080076a1
 80075d8:	080076a1 	.word	0x080076a1
 80075dc:	080076a1 	.word	0x080076a1
 80075e0:	080076a1 	.word	0x080076a1
 80075e4:	080076a1 	.word	0x080076a1
 80075e8:	080076a1 	.word	0x080076a1
 80075ec:	080076a1 	.word	0x080076a1
 80075f0:	08007675 	.word	0x08007675
 80075f4:	080076a1 	.word	0x080076a1
 80075f8:	080076a1 	.word	0x080076a1
 80075fc:	080076a1 	.word	0x080076a1
 8007600:	080076a1 	.word	0x080076a1
 8007604:	080076a1 	.word	0x080076a1
 8007608:	080076a1 	.word	0x080076a1
 800760c:	080076a1 	.word	0x080076a1
 8007610:	0800768b 	.word	0x0800768b
 8007614:	080076a1 	.word	0x080076a1
 8007618:	080076a1 	.word	0x080076a1
 800761c:	080076a1 	.word	0x080076a1
 8007620:	080076a1 	.word	0x080076a1
 8007624:	080076a1 	.word	0x080076a1
 8007628:	080076a1 	.word	0x080076a1
 800762c:	080076a1 	.word	0x080076a1
 8007630:	080076a9 	.word	0x080076a9
 8007634:	080076a1 	.word	0x080076a1
 8007638:	080076a1 	.word	0x080076a1
 800763c:	080076a1 	.word	0x080076a1
 8007640:	080076a1 	.word	0x080076a1
 8007644:	080076a1 	.word	0x080076a1
 8007648:	080076a1 	.word	0x080076a1
 800764c:	080076a1 	.word	0x080076a1
 8007650:	080076a9 	.word	0x080076a9
 8007654:	080076a1 	.word	0x080076a1
 8007658:	080076a1 	.word	0x080076a1
 800765c:	080076a1 	.word	0x080076a1
 8007660:	080076a1 	.word	0x080076a1
 8007664:	080076a1 	.word	0x080076a1
 8007668:	080076a1 	.word	0x080076a1
 800766c:	080076a1 	.word	0x080076a1
 8007670:	080076a9 	.word	0x080076a9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007678:	3308      	adds	r3, #8
 800767a:	2101      	movs	r1, #1
 800767c:	4618      	mov	r0, r3
 800767e:	f000 fd05 	bl	800808c <RCCEx_PLL2_Config>
 8007682:	4603      	mov	r3, r0
 8007684:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007688:	e00f      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800768a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800768e:	3328      	adds	r3, #40	; 0x28
 8007690:	2101      	movs	r1, #1
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fdac 	bl	80081f0 <RCCEx_PLL3_Config>
 8007698:	4603      	mov	r3, r0
 800769a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800769e:	e004      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80076a6:	e000      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80076a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10a      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80076b2:	4bbf      	ldr	r3, [pc, #764]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80076ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076c0:	4abb      	ldr	r2, [pc, #748]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076c2:	430b      	orrs	r3, r1
 80076c4:	6553      	str	r3, [r2, #84]	; 0x54
 80076c6:	e003      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80076d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d8:	f002 0302 	and.w	r3, r2, #2
 80076dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076e0:	2300      	movs	r3, #0
 80076e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80076e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80076ea:	460b      	mov	r3, r1
 80076ec:	4313      	orrs	r3, r2
 80076ee:	d041      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80076f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076f6:	2b05      	cmp	r3, #5
 80076f8:	d824      	bhi.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80076fa:	a201      	add	r2, pc, #4	; (adr r2, 8007700 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	0800774d 	.word	0x0800774d
 8007704:	08007719 	.word	0x08007719
 8007708:	0800772f 	.word	0x0800772f
 800770c:	0800774d 	.word	0x0800774d
 8007710:	0800774d 	.word	0x0800774d
 8007714:	0800774d 	.word	0x0800774d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800771c:	3308      	adds	r3, #8
 800771e:	2101      	movs	r1, #1
 8007720:	4618      	mov	r0, r3
 8007722:	f000 fcb3 	bl	800808c <RCCEx_PLL2_Config>
 8007726:	4603      	mov	r3, r0
 8007728:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800772c:	e00f      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800772e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007732:	3328      	adds	r3, #40	; 0x28
 8007734:	2101      	movs	r1, #1
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fd5a 	bl	80081f0 <RCCEx_PLL3_Config>
 800773c:	4603      	mov	r3, r0
 800773e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007742:	e004      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800774a:	e000      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800774c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800774e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10a      	bne.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007756:	4b96      	ldr	r3, [pc, #600]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775a:	f023 0107 	bic.w	r1, r3, #7
 800775e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007764:	4a92      	ldr	r2, [pc, #584]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007766:	430b      	orrs	r3, r1
 8007768:	6553      	str	r3, [r2, #84]	; 0x54
 800776a:	e003      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800776c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007770:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777c:	f002 0304 	and.w	r3, r2, #4
 8007780:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007784:	2300      	movs	r3, #0
 8007786:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800778a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800778e:	460b      	mov	r3, r1
 8007790:	4313      	orrs	r3, r2
 8007792:	d044      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800779c:	2b05      	cmp	r3, #5
 800779e:	d825      	bhi.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80077a0:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80077a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a6:	bf00      	nop
 80077a8:	080077f5 	.word	0x080077f5
 80077ac:	080077c1 	.word	0x080077c1
 80077b0:	080077d7 	.word	0x080077d7
 80077b4:	080077f5 	.word	0x080077f5
 80077b8:	080077f5 	.word	0x080077f5
 80077bc:	080077f5 	.word	0x080077f5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077c4:	3308      	adds	r3, #8
 80077c6:	2101      	movs	r1, #1
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 fc5f 	bl	800808c <RCCEx_PLL2_Config>
 80077ce:	4603      	mov	r3, r0
 80077d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80077d4:	e00f      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077da:	3328      	adds	r3, #40	; 0x28
 80077dc:	2101      	movs	r1, #1
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 fd06 	bl	80081f0 <RCCEx_PLL3_Config>
 80077e4:	4603      	mov	r3, r0
 80077e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80077ea:	e004      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077f2:	e000      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80077f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10b      	bne.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077fe:	4b6c      	ldr	r3, [pc, #432]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007802:	f023 0107 	bic.w	r1, r3, #7
 8007806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800780a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800780e:	4a68      	ldr	r2, [pc, #416]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007810:	430b      	orrs	r3, r1
 8007812:	6593      	str	r3, [r2, #88]	; 0x58
 8007814:	e003      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007816:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800781a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800781e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007826:	f002 0320 	and.w	r3, r2, #32
 800782a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800782e:	2300      	movs	r3, #0
 8007830:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007834:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007838:	460b      	mov	r3, r1
 800783a:	4313      	orrs	r3, r2
 800783c:	d055      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800783e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007846:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800784a:	d033      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800784c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007850:	d82c      	bhi.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007856:	d02f      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800785c:	d826      	bhi.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800785e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007862:	d02b      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007864:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007868:	d820      	bhi.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800786a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800786e:	d012      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007874:	d81a      	bhi.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007876:	2b00      	cmp	r3, #0
 8007878:	d022      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800787a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800787e:	d115      	bne.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007884:	3308      	adds	r3, #8
 8007886:	2100      	movs	r1, #0
 8007888:	4618      	mov	r0, r3
 800788a:	f000 fbff 	bl	800808c <RCCEx_PLL2_Config>
 800788e:	4603      	mov	r3, r0
 8007890:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007894:	e015      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800789a:	3328      	adds	r3, #40	; 0x28
 800789c:	2102      	movs	r1, #2
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 fca6 	bl	80081f0 <RCCEx_PLL3_Config>
 80078a4:	4603      	mov	r3, r0
 80078a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80078aa:	e00a      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80078b2:	e006      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80078b4:	bf00      	nop
 80078b6:	e004      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80078b8:	bf00      	nop
 80078ba:	e002      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80078bc:	bf00      	nop
 80078be:	e000      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80078c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10b      	bne.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078ca:	4b39      	ldr	r3, [pc, #228]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ce:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80078d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078da:	4a35      	ldr	r2, [pc, #212]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078dc:	430b      	orrs	r3, r1
 80078de:	6553      	str	r3, [r2, #84]	; 0x54
 80078e0:	e003      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80078ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80078f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078fa:	2300      	movs	r3, #0
 80078fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007900:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007904:	460b      	mov	r3, r1
 8007906:	4313      	orrs	r3, r2
 8007908:	d058      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800790a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800790e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007912:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007916:	d033      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007918:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800791c:	d82c      	bhi.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800791e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007922:	d02f      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007928:	d826      	bhi.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800792a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800792e:	d02b      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007930:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007934:	d820      	bhi.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800793a:	d012      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800793c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007940:	d81a      	bhi.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007942:	2b00      	cmp	r3, #0
 8007944:	d022      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800794a:	d115      	bne.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800794c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007950:	3308      	adds	r3, #8
 8007952:	2100      	movs	r1, #0
 8007954:	4618      	mov	r0, r3
 8007956:	f000 fb99 	bl	800808c <RCCEx_PLL2_Config>
 800795a:	4603      	mov	r3, r0
 800795c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007960:	e015      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007966:	3328      	adds	r3, #40	; 0x28
 8007968:	2102      	movs	r1, #2
 800796a:	4618      	mov	r0, r3
 800796c:	f000 fc40 	bl	80081f0 <RCCEx_PLL3_Config>
 8007970:	4603      	mov	r3, r0
 8007972:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007976:	e00a      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800797e:	e006      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007980:	bf00      	nop
 8007982:	e004      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007984:	bf00      	nop
 8007986:	e002      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007988:	bf00      	nop
 800798a:	e000      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800798c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800798e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10e      	bne.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007996:	4b06      	ldr	r3, [pc, #24]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800799a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800799e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079a6:	4a02      	ldr	r2, [pc, #8]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079a8:	430b      	orrs	r3, r1
 80079aa:	6593      	str	r3, [r2, #88]	; 0x58
 80079ac:	e006      	b.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80079ae:	bf00      	nop
 80079b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80079bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80079c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80079cc:	2300      	movs	r3, #0
 80079ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80079d2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80079d6:	460b      	mov	r3, r1
 80079d8:	4313      	orrs	r3, r2
 80079da:	d055      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80079dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80079e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80079e8:	d033      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80079ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80079ee:	d82c      	bhi.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80079f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079f4:	d02f      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80079f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079fa:	d826      	bhi.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80079fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007a00:	d02b      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007a02:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007a06:	d820      	bhi.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a0c:	d012      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007a0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a12:	d81a      	bhi.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d022      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a1c:	d115      	bne.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a22:	3308      	adds	r3, #8
 8007a24:	2100      	movs	r1, #0
 8007a26:	4618      	mov	r0, r3
 8007a28:	f000 fb30 	bl	800808c <RCCEx_PLL2_Config>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007a32:	e015      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a38:	3328      	adds	r3, #40	; 0x28
 8007a3a:	2102      	movs	r1, #2
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 fbd7 	bl	80081f0 <RCCEx_PLL3_Config>
 8007a42:	4603      	mov	r3, r0
 8007a44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007a48:	e00a      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a50:	e006      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a52:	bf00      	nop
 8007a54:	e004      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a56:	bf00      	nop
 8007a58:	e002      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a5a:	bf00      	nop
 8007a5c:	e000      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10b      	bne.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007a68:	4ba1      	ldr	r3, [pc, #644]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a6c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a78:	4a9d      	ldr	r2, [pc, #628]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a7a:	430b      	orrs	r3, r1
 8007a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8007a7e:	e003      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a90:	f002 0308 	and.w	r3, r2, #8
 8007a94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a9e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	d01e      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ab4:	d10c      	bne.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aba:	3328      	adds	r3, #40	; 0x28
 8007abc:	2102      	movs	r1, #2
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 fb96 	bl	80081f0 <RCCEx_PLL3_Config>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007ad0:	4b87      	ldr	r3, [pc, #540]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ae0:	4a83      	ldr	r2, [pc, #524]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ae2:	430b      	orrs	r3, r1
 8007ae4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aee:	f002 0310 	and.w	r3, r2, #16
 8007af2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007af6:	2300      	movs	r3, #0
 8007af8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007afc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007b00:	460b      	mov	r3, r1
 8007b02:	4313      	orrs	r3, r2
 8007b04:	d01e      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b12:	d10c      	bne.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b18:	3328      	adds	r3, #40	; 0x28
 8007b1a:	2102      	movs	r1, #2
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f000 fb67 	bl	80081f0 <RCCEx_PLL3_Config>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d002      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b2e:	4b70      	ldr	r3, [pc, #448]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b3e:	4a6c      	ldr	r2, [pc, #432]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b40:	430b      	orrs	r3, r1
 8007b42:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007b50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b54:	2300      	movs	r3, #0
 8007b56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b5a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007b5e:	460b      	mov	r3, r1
 8007b60:	4313      	orrs	r3, r2
 8007b62:	d03e      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007b6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b70:	d022      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007b72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b76:	d81b      	bhi.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b80:	d00b      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007b82:	e015      	b.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b88:	3308      	adds	r3, #8
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f000 fa7d 	bl	800808c <RCCEx_PLL2_Config>
 8007b92:	4603      	mov	r3, r0
 8007b94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007b98:	e00f      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b9e:	3328      	adds	r3, #40	; 0x28
 8007ba0:	2102      	movs	r1, #2
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 fb24 	bl	80081f0 <RCCEx_PLL3_Config>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007bae:	e004      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007bb6:	e000      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007bb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10b      	bne.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007bc2:	4b4b      	ldr	r3, [pc, #300]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007bd2:	4a47      	ldr	r2, [pc, #284]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bd4:	430b      	orrs	r3, r1
 8007bd6:	6593      	str	r3, [r2, #88]	; 0x58
 8007bd8:	e003      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007bee:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007bf4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	d03b      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c0a:	d01f      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007c0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c10:	d818      	bhi.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c16:	d003      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007c18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c1c:	d007      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007c1e:	e011      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c20:	4b33      	ldr	r3, [pc, #204]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c24:	4a32      	ldr	r2, [pc, #200]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007c2c:	e00f      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c32:	3328      	adds	r3, #40	; 0x28
 8007c34:	2101      	movs	r1, #1
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 fada 	bl	80081f0 <RCCEx_PLL3_Config>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007c42:	e004      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c4a:	e000      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10b      	bne.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c56:	4b26      	ldr	r3, [pc, #152]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c66:	4a22      	ldr	r2, [pc, #136]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c68:	430b      	orrs	r3, r1
 8007c6a:	6553      	str	r3, [r2, #84]	; 0x54
 8007c6c:	e003      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007c82:	673b      	str	r3, [r7, #112]	; 0x70
 8007c84:	2300      	movs	r3, #0
 8007c86:	677b      	str	r3, [r7, #116]	; 0x74
 8007c88:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	d034      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ca0:	d007      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007ca2:	e011      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ca4:	4b12      	ldr	r3, [pc, #72]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	4a11      	ldr	r2, [pc, #68]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007cb0:	e00e      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	2102      	movs	r1, #2
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 f9e6 	bl	800808c <RCCEx_PLL2_Config>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007cc6:	e003      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10d      	bne.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007cd8:	4b05      	ldr	r3, [pc, #20]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ce6:	4a02      	ldr	r2, [pc, #8]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ce8:	430b      	orrs	r3, r1
 8007cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007cec:	e006      	b.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007cee:	bf00      	nop
 8007cf0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d04:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007d08:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d0e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007d12:	460b      	mov	r3, r1
 8007d14:	4313      	orrs	r3, r2
 8007d16:	d00c      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d1c:	3328      	adds	r3, #40	; 0x28
 8007d1e:	2102      	movs	r1, #2
 8007d20:	4618      	mov	r0, r3
 8007d22:	f000 fa65 	bl	80081f0 <RCCEx_PLL3_Config>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d002      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007d3e:	663b      	str	r3, [r7, #96]	; 0x60
 8007d40:	2300      	movs	r3, #0
 8007d42:	667b      	str	r3, [r7, #100]	; 0x64
 8007d44:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	d038      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d5a:	d018      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007d5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d60:	d811      	bhi.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d66:	d014      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d6c:	d80b      	bhi.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d011      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d76:	d106      	bne.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d78:	4bc3      	ldr	r3, [pc, #780]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7c:	4ac2      	ldr	r2, [pc, #776]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007d84:	e008      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d8c:	e004      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007d8e:	bf00      	nop
 8007d90:	e002      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007d92:	bf00      	nop
 8007d94:	e000      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007d96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10b      	bne.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007da0:	4bb9      	ldr	r3, [pc, #740]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007db0:	4ab5      	ldr	r2, [pc, #724]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007db2:	430b      	orrs	r3, r1
 8007db4:	6553      	str	r3, [r2, #84]	; 0x54
 8007db6:	e003      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007dcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8007dce:	2300      	movs	r3, #0
 8007dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dd2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	d009      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007ddc:	4baa      	ldr	r3, [pc, #680]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dea:	4aa7      	ldr	r2, [pc, #668]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dec:	430b      	orrs	r3, r1
 8007dee:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007dfc:	653b      	str	r3, [r7, #80]	; 0x50
 8007dfe:	2300      	movs	r3, #0
 8007e00:	657b      	str	r3, [r7, #84]	; 0x54
 8007e02:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007e06:	460b      	mov	r3, r1
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	d00a      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007e0c:	4b9e      	ldr	r3, [pc, #632]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007e1c:	4a9a      	ldr	r2, [pc, #616]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e1e:	430b      	orrs	r3, r1
 8007e20:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007e2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e30:	2300      	movs	r3, #0
 8007e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e34:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007e38:	460b      	mov	r3, r1
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	d009      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e3e:	4b92      	ldr	r3, [pc, #584]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e42:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e4c:	4a8e      	ldr	r2, [pc, #568]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e4e:	430b      	orrs	r3, r1
 8007e50:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007e5e:	643b      	str	r3, [r7, #64]	; 0x40
 8007e60:	2300      	movs	r3, #0
 8007e62:	647b      	str	r3, [r7, #68]	; 0x44
 8007e64:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007e68:	460b      	mov	r3, r1
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	d00e      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e6e:	4b86      	ldr	r3, [pc, #536]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	4a85      	ldr	r2, [pc, #532]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e78:	6113      	str	r3, [r2, #16]
 8007e7a:	4b83      	ldr	r3, [pc, #524]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e7c:	6919      	ldr	r1, [r3, #16]
 8007e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e82:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007e86:	4a80      	ldr	r2, [pc, #512]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e88:	430b      	orrs	r3, r1
 8007e8a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e94:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007e98:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e9e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	d009      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007ea8:	4b77      	ldr	r3, [pc, #476]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eac:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb6:	4a74      	ldr	r2, [pc, #464]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eb8:	430b      	orrs	r3, r1
 8007eba:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007ec8:	633b      	str	r3, [r7, #48]	; 0x30
 8007eca:	2300      	movs	r3, #0
 8007ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ece:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	d00a      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ed8:	4b6b      	ldr	r3, [pc, #428]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007edc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ee8:	4a67      	ldr	r2, [pc, #412]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eea:	430b      	orrs	r3, r1
 8007eec:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	62b9      	str	r1, [r7, #40]	; 0x28
 8007efa:	f003 0301 	and.w	r3, r3, #1
 8007efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f00:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007f04:	460b      	mov	r3, r1
 8007f06:	4313      	orrs	r3, r2
 8007f08:	d011      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f0e:	3308      	adds	r3, #8
 8007f10:	2100      	movs	r1, #0
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 f8ba 	bl	800808c <RCCEx_PLL2_Config>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f36:	2100      	movs	r1, #0
 8007f38:	6239      	str	r1, [r7, #32]
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f40:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007f44:	460b      	mov	r3, r1
 8007f46:	4313      	orrs	r3, r2
 8007f48:	d011      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f4e:	3308      	adds	r3, #8
 8007f50:	2101      	movs	r1, #1
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 f89a 	bl	800808c <RCCEx_PLL2_Config>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d003      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	2100      	movs	r1, #0
 8007f78:	61b9      	str	r1, [r7, #24]
 8007f7a:	f003 0304 	and.w	r3, r3, #4
 8007f7e:	61fb      	str	r3, [r7, #28]
 8007f80:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007f84:	460b      	mov	r3, r1
 8007f86:	4313      	orrs	r3, r2
 8007f88:	d011      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f8e:	3308      	adds	r3, #8
 8007f90:	2102      	movs	r1, #2
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 f87a 	bl	800808c <RCCEx_PLL2_Config>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d003      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007faa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	6139      	str	r1, [r7, #16]
 8007fba:	f003 0308 	and.w	r3, r3, #8
 8007fbe:	617b      	str	r3, [r7, #20]
 8007fc0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	d011      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fce:	3328      	adds	r3, #40	; 0x28
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 f90c 	bl	80081f0 <RCCEx_PLL3_Config>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007fde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	f003 0310 	and.w	r3, r3, #16
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008004:	460b      	mov	r3, r1
 8008006:	4313      	orrs	r3, r2
 8008008:	d011      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800800a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800800e:	3328      	adds	r3, #40	; 0x28
 8008010:	2101      	movs	r1, #1
 8008012:	4618      	mov	r0, r3
 8008014:	f000 f8ec 	bl	80081f0 <RCCEx_PLL3_Config>
 8008018:	4603      	mov	r3, r0
 800801a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800801e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008026:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800802a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800802e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008036:	2100      	movs	r1, #0
 8008038:	6039      	str	r1, [r7, #0]
 800803a:	f003 0320 	and.w	r3, r3, #32
 800803e:	607b      	str	r3, [r7, #4]
 8008040:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008044:	460b      	mov	r3, r1
 8008046:	4313      	orrs	r3, r2
 8008048:	d011      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800804a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800804e:	3328      	adds	r3, #40	; 0x28
 8008050:	2102      	movs	r1, #2
 8008052:	4618      	mov	r0, r3
 8008054:	f000 f8cc 	bl	80081f0 <RCCEx_PLL3_Config>
 8008058:	4603      	mov	r3, r0
 800805a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800805e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008062:	2b00      	cmp	r3, #0
 8008064:	d003      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008066:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800806a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800806e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	e000      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
}
 800807c:	4618      	mov	r0, r3
 800807e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008082:	46bd      	mov	sp, r7
 8008084:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008088:	58024400 	.word	0x58024400

0800808c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800809a:	4b53      	ldr	r3, [pc, #332]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 800809c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809e:	f003 0303 	and.w	r3, r3, #3
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d101      	bne.n	80080aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e099      	b.n	80081de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80080aa:	4b4f      	ldr	r3, [pc, #316]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a4e      	ldr	r2, [pc, #312]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 80080b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80080b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080b6:	f7f9 fa5f 	bl	8001578 <HAL_GetTick>
 80080ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080bc:	e008      	b.n	80080d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80080be:	f7f9 fa5b 	bl	8001578 <HAL_GetTick>
 80080c2:	4602      	mov	r2, r0
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d901      	bls.n	80080d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e086      	b.n	80081de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080d0:	4b45      	ldr	r3, [pc, #276]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1f0      	bne.n	80080be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80080dc:	4b42      	ldr	r3, [pc, #264]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 80080de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	031b      	lsls	r3, r3, #12
 80080ea:	493f      	ldr	r1, [pc, #252]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 80080ec:	4313      	orrs	r3, r2
 80080ee:	628b      	str	r3, [r1, #40]	; 0x28
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	3b01      	subs	r3, #1
 80080f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	3b01      	subs	r3, #1
 8008100:	025b      	lsls	r3, r3, #9
 8008102:	b29b      	uxth	r3, r3
 8008104:	431a      	orrs	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	3b01      	subs	r3, #1
 800810c:	041b      	lsls	r3, r3, #16
 800810e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008112:	431a      	orrs	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	3b01      	subs	r3, #1
 800811a:	061b      	lsls	r3, r3, #24
 800811c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008120:	4931      	ldr	r1, [pc, #196]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 8008122:	4313      	orrs	r3, r2
 8008124:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008126:	4b30      	ldr	r3, [pc, #192]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 8008128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	492d      	ldr	r1, [pc, #180]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 8008134:	4313      	orrs	r3, r2
 8008136:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008138:	4b2b      	ldr	r3, [pc, #172]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 800813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813c:	f023 0220 	bic.w	r2, r3, #32
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	4928      	ldr	r1, [pc, #160]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 8008146:	4313      	orrs	r3, r2
 8008148:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800814a:	4b27      	ldr	r3, [pc, #156]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 800814c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814e:	4a26      	ldr	r2, [pc, #152]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 8008150:	f023 0310 	bic.w	r3, r3, #16
 8008154:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008156:	4b24      	ldr	r3, [pc, #144]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 8008158:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800815a:	4b24      	ldr	r3, [pc, #144]	; (80081ec <RCCEx_PLL2_Config+0x160>)
 800815c:	4013      	ands	r3, r2
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	69d2      	ldr	r2, [r2, #28]
 8008162:	00d2      	lsls	r2, r2, #3
 8008164:	4920      	ldr	r1, [pc, #128]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 8008166:	4313      	orrs	r3, r2
 8008168:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800816a:	4b1f      	ldr	r3, [pc, #124]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 800816c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816e:	4a1e      	ldr	r2, [pc, #120]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 8008170:	f043 0310 	orr.w	r3, r3, #16
 8008174:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d106      	bne.n	800818a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800817c:	4b1a      	ldr	r3, [pc, #104]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 800817e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008180:	4a19      	ldr	r2, [pc, #100]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 8008182:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008186:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008188:	e00f      	b.n	80081aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d106      	bne.n	800819e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008190:	4b15      	ldr	r3, [pc, #84]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 8008192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008194:	4a14      	ldr	r2, [pc, #80]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 8008196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800819a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800819c:	e005      	b.n	80081aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800819e:	4b12      	ldr	r3, [pc, #72]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 80081a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a2:	4a11      	ldr	r2, [pc, #68]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 80081a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80081a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80081aa:	4b0f      	ldr	r3, [pc, #60]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a0e      	ldr	r2, [pc, #56]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 80081b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80081b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081b6:	f7f9 f9df 	bl	8001578 <HAL_GetTick>
 80081ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081bc:	e008      	b.n	80081d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80081be:	f7f9 f9db 	bl	8001578 <HAL_GetTick>
 80081c2:	4602      	mov	r2, r0
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d901      	bls.n	80081d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80081cc:	2303      	movs	r3, #3
 80081ce:	e006      	b.n	80081de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081d0:	4b05      	ldr	r3, [pc, #20]	; (80081e8 <RCCEx_PLL2_Config+0x15c>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d0f0      	beq.n	80081be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	58024400 	.word	0x58024400
 80081ec:	ffff0007 	.word	0xffff0007

080081f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081fa:	2300      	movs	r3, #0
 80081fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081fe:	4b53      	ldr	r3, [pc, #332]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 8008200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008202:	f003 0303 	and.w	r3, r3, #3
 8008206:	2b03      	cmp	r3, #3
 8008208:	d101      	bne.n	800820e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e099      	b.n	8008342 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800820e:	4b4f      	ldr	r3, [pc, #316]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a4e      	ldr	r2, [pc, #312]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 8008214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800821a:	f7f9 f9ad 	bl	8001578 <HAL_GetTick>
 800821e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008220:	e008      	b.n	8008234 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008222:	f7f9 f9a9 	bl	8001578 <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	2b02      	cmp	r3, #2
 800822e:	d901      	bls.n	8008234 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008230:	2303      	movs	r3, #3
 8008232:	e086      	b.n	8008342 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008234:	4b45      	ldr	r3, [pc, #276]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d1f0      	bne.n	8008222 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008240:	4b42      	ldr	r3, [pc, #264]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 8008242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008244:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	051b      	lsls	r3, r3, #20
 800824e:	493f      	ldr	r1, [pc, #252]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 8008250:	4313      	orrs	r3, r2
 8008252:	628b      	str	r3, [r1, #40]	; 0x28
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	3b01      	subs	r3, #1
 800825a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	3b01      	subs	r3, #1
 8008264:	025b      	lsls	r3, r3, #9
 8008266:	b29b      	uxth	r3, r3
 8008268:	431a      	orrs	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	3b01      	subs	r3, #1
 8008270:	041b      	lsls	r3, r3, #16
 8008272:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008276:	431a      	orrs	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	3b01      	subs	r3, #1
 800827e:	061b      	lsls	r3, r3, #24
 8008280:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008284:	4931      	ldr	r1, [pc, #196]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 8008286:	4313      	orrs	r3, r2
 8008288:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800828a:	4b30      	ldr	r3, [pc, #192]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 800828c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	492d      	ldr	r1, [pc, #180]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 8008298:	4313      	orrs	r3, r2
 800829a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800829c:	4b2b      	ldr	r3, [pc, #172]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 800829e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	4928      	ldr	r1, [pc, #160]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80082ae:	4b27      	ldr	r3, [pc, #156]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 80082b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b2:	4a26      	ldr	r2, [pc, #152]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 80082b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80082ba:	4b24      	ldr	r3, [pc, #144]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 80082bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082be:	4b24      	ldr	r3, [pc, #144]	; (8008350 <RCCEx_PLL3_Config+0x160>)
 80082c0:	4013      	ands	r3, r2
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	69d2      	ldr	r2, [r2, #28]
 80082c6:	00d2      	lsls	r2, r2, #3
 80082c8:	4920      	ldr	r1, [pc, #128]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 80082ca:	4313      	orrs	r3, r2
 80082cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80082ce:	4b1f      	ldr	r3, [pc, #124]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 80082d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d2:	4a1e      	ldr	r2, [pc, #120]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 80082d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d106      	bne.n	80082ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80082e0:	4b1a      	ldr	r3, [pc, #104]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 80082e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e4:	4a19      	ldr	r2, [pc, #100]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 80082e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80082ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80082ec:	e00f      	b.n	800830e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d106      	bne.n	8008302 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80082f4:	4b15      	ldr	r3, [pc, #84]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 80082f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f8:	4a14      	ldr	r2, [pc, #80]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 80082fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80082fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008300:	e005      	b.n	800830e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008302:	4b12      	ldr	r3, [pc, #72]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 8008304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008306:	4a11      	ldr	r2, [pc, #68]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 8008308:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800830c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800830e:	4b0f      	ldr	r3, [pc, #60]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a0e      	ldr	r2, [pc, #56]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 8008314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800831a:	f7f9 f92d 	bl	8001578 <HAL_GetTick>
 800831e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008320:	e008      	b.n	8008334 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008322:	f7f9 f929 	bl	8001578 <HAL_GetTick>
 8008326:	4602      	mov	r2, r0
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	2b02      	cmp	r3, #2
 800832e:	d901      	bls.n	8008334 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e006      	b.n	8008342 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008334:	4b05      	ldr	r3, [pc, #20]	; (800834c <RCCEx_PLL3_Config+0x15c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d0f0      	beq.n	8008322 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008340:	7bfb      	ldrb	r3, [r7, #15]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	58024400 	.word	0x58024400
 8008350:	ffff0007 	.word	0xffff0007

08008354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d101      	bne.n	8008366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e049      	b.n	80083fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b00      	cmp	r3, #0
 8008370:	d106      	bne.n	8008380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f7f8 fe1a 	bl	8000fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2202      	movs	r2, #2
 8008384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	3304      	adds	r3, #4
 8008390:	4619      	mov	r1, r3
 8008392:	4610      	mov	r0, r2
 8008394:	f000 fafc 	bl	8008990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b082      	sub	sp, #8
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e049      	b.n	80084a8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b00      	cmp	r3, #0
 800841e:	d106      	bne.n	800842e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f841 	bl	80084b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2202      	movs	r2, #2
 8008432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3304      	adds	r3, #4
 800843e:	4619      	mov	r1, r3
 8008440:	4610      	mov	r0, r2
 8008442:	f000 faa5 	bl	8008990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	f003 0302 	and.w	r3, r3, #2
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d122      	bne.n	8008520 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	f003 0302 	and.w	r3, r3, #2
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d11b      	bne.n	8008520 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f06f 0202 	mvn.w	r2, #2
 80084f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	f003 0303 	and.w	r3, r3, #3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d003      	beq.n	800850e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fa24 	bl	8008954 <HAL_TIM_IC_CaptureCallback>
 800850c:	e005      	b.n	800851a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fa16 	bl	8008940 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fa27 	bl	8008968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	f003 0304 	and.w	r3, r3, #4
 800852a:	2b04      	cmp	r3, #4
 800852c:	d122      	bne.n	8008574 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	f003 0304 	and.w	r3, r3, #4
 8008538:	2b04      	cmp	r3, #4
 800853a:	d11b      	bne.n	8008574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f06f 0204 	mvn.w	r2, #4
 8008544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2202      	movs	r2, #2
 800854a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008556:	2b00      	cmp	r3, #0
 8008558:	d003      	beq.n	8008562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f9fa 	bl	8008954 <HAL_TIM_IC_CaptureCallback>
 8008560:	e005      	b.n	800856e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f9ec 	bl	8008940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f9fd 	bl	8008968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	f003 0308 	and.w	r3, r3, #8
 800857e:	2b08      	cmp	r3, #8
 8008580:	d122      	bne.n	80085c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	f003 0308 	and.w	r3, r3, #8
 800858c:	2b08      	cmp	r3, #8
 800858e:	d11b      	bne.n	80085c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f06f 0208 	mvn.w	r2, #8
 8008598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2204      	movs	r2, #4
 800859e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	f003 0303 	and.w	r3, r3, #3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d003      	beq.n	80085b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f9d0 	bl	8008954 <HAL_TIM_IC_CaptureCallback>
 80085b4:	e005      	b.n	80085c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f9c2 	bl	8008940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f9d3 	bl	8008968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	f003 0310 	and.w	r3, r3, #16
 80085d2:	2b10      	cmp	r3, #16
 80085d4:	d122      	bne.n	800861c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	f003 0310 	and.w	r3, r3, #16
 80085e0:	2b10      	cmp	r3, #16
 80085e2:	d11b      	bne.n	800861c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f06f 0210 	mvn.w	r2, #16
 80085ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2208      	movs	r2, #8
 80085f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	69db      	ldr	r3, [r3, #28]
 80085fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f9a6 	bl	8008954 <HAL_TIM_IC_CaptureCallback>
 8008608:	e005      	b.n	8008616 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f998 	bl	8008940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f9a9 	bl	8008968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	2b01      	cmp	r3, #1
 8008628:	d10e      	bne.n	8008648 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	f003 0301 	and.w	r3, r3, #1
 8008634:	2b01      	cmp	r3, #1
 8008636:	d107      	bne.n	8008648 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f06f 0201 	mvn.w	r2, #1
 8008640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 f972 	bl	800892c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008652:	2b80      	cmp	r3, #128	; 0x80
 8008654:	d10e      	bne.n	8008674 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008660:	2b80      	cmp	r3, #128	; 0x80
 8008662:	d107      	bne.n	8008674 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800866c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fd86 	bl	8009180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800867e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008682:	d10e      	bne.n	80086a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800868e:	2b80      	cmp	r3, #128	; 0x80
 8008690:	d107      	bne.n	80086a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800869a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fd79 	bl	8009194 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ac:	2b40      	cmp	r3, #64	; 0x40
 80086ae:	d10e      	bne.n	80086ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ba:	2b40      	cmp	r3, #64	; 0x40
 80086bc:	d107      	bne.n	80086ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80086c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f957 	bl	800897c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	f003 0320 	and.w	r3, r3, #32
 80086d8:	2b20      	cmp	r3, #32
 80086da:	d10e      	bne.n	80086fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	f003 0320 	and.w	r3, r3, #32
 80086e6:	2b20      	cmp	r3, #32
 80086e8:	d107      	bne.n	80086fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f06f 0220 	mvn.w	r2, #32
 80086f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fd39 	bl	800916c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086fa:	bf00      	nop
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
	...

08008704 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800871a:	2b01      	cmp	r3, #1
 800871c:	d101      	bne.n	8008722 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800871e:	2302      	movs	r3, #2
 8008720:	e0ff      	b.n	8008922 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2b14      	cmp	r3, #20
 800872e:	f200 80f0 	bhi.w	8008912 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008732:	a201      	add	r2, pc, #4	; (adr r2, 8008738 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008738:	0800878d 	.word	0x0800878d
 800873c:	08008913 	.word	0x08008913
 8008740:	08008913 	.word	0x08008913
 8008744:	08008913 	.word	0x08008913
 8008748:	080087cd 	.word	0x080087cd
 800874c:	08008913 	.word	0x08008913
 8008750:	08008913 	.word	0x08008913
 8008754:	08008913 	.word	0x08008913
 8008758:	0800880f 	.word	0x0800880f
 800875c:	08008913 	.word	0x08008913
 8008760:	08008913 	.word	0x08008913
 8008764:	08008913 	.word	0x08008913
 8008768:	0800884f 	.word	0x0800884f
 800876c:	08008913 	.word	0x08008913
 8008770:	08008913 	.word	0x08008913
 8008774:	08008913 	.word	0x08008913
 8008778:	08008891 	.word	0x08008891
 800877c:	08008913 	.word	0x08008913
 8008780:	08008913 	.word	0x08008913
 8008784:	08008913 	.word	0x08008913
 8008788:	080088d1 	.word	0x080088d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68b9      	ldr	r1, [r7, #8]
 8008792:	4618      	mov	r0, r3
 8008794:	f000 f996 	bl	8008ac4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	699a      	ldr	r2, [r3, #24]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f042 0208 	orr.w	r2, r2, #8
 80087a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	699a      	ldr	r2, [r3, #24]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f022 0204 	bic.w	r2, r2, #4
 80087b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6999      	ldr	r1, [r3, #24]
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	691a      	ldr	r2, [r3, #16]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	619a      	str	r2, [r3, #24]
      break;
 80087ca:	e0a5      	b.n	8008918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68b9      	ldr	r1, [r7, #8]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 fa06 	bl	8008be4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	699a      	ldr	r2, [r3, #24]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	699a      	ldr	r2, [r3, #24]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6999      	ldr	r1, [r3, #24]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	021a      	lsls	r2, r3, #8
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	619a      	str	r2, [r3, #24]
      break;
 800880c:	e084      	b.n	8008918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68b9      	ldr	r1, [r7, #8]
 8008814:	4618      	mov	r0, r3
 8008816:	f000 fa6f 	bl	8008cf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	69da      	ldr	r2, [r3, #28]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f042 0208 	orr.w	r2, r2, #8
 8008828:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	69da      	ldr	r2, [r3, #28]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f022 0204 	bic.w	r2, r2, #4
 8008838:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	69d9      	ldr	r1, [r3, #28]
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	691a      	ldr	r2, [r3, #16]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	430a      	orrs	r2, r1
 800884a:	61da      	str	r2, [r3, #28]
      break;
 800884c:	e064      	b.n	8008918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68b9      	ldr	r1, [r7, #8]
 8008854:	4618      	mov	r0, r3
 8008856:	f000 fad7 	bl	8008e08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	69da      	ldr	r2, [r3, #28]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	69da      	ldr	r2, [r3, #28]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	69d9      	ldr	r1, [r3, #28]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	021a      	lsls	r2, r3, #8
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	61da      	str	r2, [r3, #28]
      break;
 800888e:	e043      	b.n	8008918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68b9      	ldr	r1, [r7, #8]
 8008896:	4618      	mov	r0, r3
 8008898:	f000 fb20 	bl	8008edc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f042 0208 	orr.w	r2, r2, #8
 80088aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f022 0204 	bic.w	r2, r2, #4
 80088ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	691a      	ldr	r2, [r3, #16]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	430a      	orrs	r2, r1
 80088cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80088ce:	e023      	b.n	8008918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68b9      	ldr	r1, [r7, #8]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 fb64 	bl	8008fa4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	021a      	lsls	r2, r3, #8
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	430a      	orrs	r2, r1
 800890e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008910:	e002      	b.n	8008918 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	75fb      	strb	r3, [r7, #23]
      break;
 8008916:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008920:	7dfb      	ldrb	r3, [r7, #23]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3718      	adds	r7, #24
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop

0800892c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008948:	bf00      	nop
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800895c:	bf00      	nop
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008970:	bf00      	nop
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008984:	bf00      	nop
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a40      	ldr	r2, [pc, #256]	; (8008aa4 <TIM_Base_SetConfig+0x114>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d013      	beq.n	80089d0 <TIM_Base_SetConfig+0x40>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089ae:	d00f      	beq.n	80089d0 <TIM_Base_SetConfig+0x40>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a3d      	ldr	r2, [pc, #244]	; (8008aa8 <TIM_Base_SetConfig+0x118>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d00b      	beq.n	80089d0 <TIM_Base_SetConfig+0x40>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a3c      	ldr	r2, [pc, #240]	; (8008aac <TIM_Base_SetConfig+0x11c>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d007      	beq.n	80089d0 <TIM_Base_SetConfig+0x40>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a3b      	ldr	r2, [pc, #236]	; (8008ab0 <TIM_Base_SetConfig+0x120>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d003      	beq.n	80089d0 <TIM_Base_SetConfig+0x40>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a3a      	ldr	r2, [pc, #232]	; (8008ab4 <TIM_Base_SetConfig+0x124>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d108      	bne.n	80089e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	4313      	orrs	r3, r2
 80089e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a2f      	ldr	r2, [pc, #188]	; (8008aa4 <TIM_Base_SetConfig+0x114>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d01f      	beq.n	8008a2a <TIM_Base_SetConfig+0x9a>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089f0:	d01b      	beq.n	8008a2a <TIM_Base_SetConfig+0x9a>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a2c      	ldr	r2, [pc, #176]	; (8008aa8 <TIM_Base_SetConfig+0x118>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d017      	beq.n	8008a2a <TIM_Base_SetConfig+0x9a>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a2b      	ldr	r2, [pc, #172]	; (8008aac <TIM_Base_SetConfig+0x11c>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d013      	beq.n	8008a2a <TIM_Base_SetConfig+0x9a>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a2a      	ldr	r2, [pc, #168]	; (8008ab0 <TIM_Base_SetConfig+0x120>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d00f      	beq.n	8008a2a <TIM_Base_SetConfig+0x9a>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a29      	ldr	r2, [pc, #164]	; (8008ab4 <TIM_Base_SetConfig+0x124>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d00b      	beq.n	8008a2a <TIM_Base_SetConfig+0x9a>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a28      	ldr	r2, [pc, #160]	; (8008ab8 <TIM_Base_SetConfig+0x128>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d007      	beq.n	8008a2a <TIM_Base_SetConfig+0x9a>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a27      	ldr	r2, [pc, #156]	; (8008abc <TIM_Base_SetConfig+0x12c>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d003      	beq.n	8008a2a <TIM_Base_SetConfig+0x9a>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a26      	ldr	r2, [pc, #152]	; (8008ac0 <TIM_Base_SetConfig+0x130>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d108      	bne.n	8008a3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	695b      	ldr	r3, [r3, #20]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	689a      	ldr	r2, [r3, #8]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a10      	ldr	r2, [pc, #64]	; (8008aa4 <TIM_Base_SetConfig+0x114>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d00f      	beq.n	8008a88 <TIM_Base_SetConfig+0xf8>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a12      	ldr	r2, [pc, #72]	; (8008ab4 <TIM_Base_SetConfig+0x124>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d00b      	beq.n	8008a88 <TIM_Base_SetConfig+0xf8>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a11      	ldr	r2, [pc, #68]	; (8008ab8 <TIM_Base_SetConfig+0x128>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d007      	beq.n	8008a88 <TIM_Base_SetConfig+0xf8>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a10      	ldr	r2, [pc, #64]	; (8008abc <TIM_Base_SetConfig+0x12c>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d003      	beq.n	8008a88 <TIM_Base_SetConfig+0xf8>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a0f      	ldr	r2, [pc, #60]	; (8008ac0 <TIM_Base_SetConfig+0x130>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d103      	bne.n	8008a90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	691a      	ldr	r2, [r3, #16]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	615a      	str	r2, [r3, #20]
}
 8008a96:	bf00      	nop
 8008a98:	3714      	adds	r7, #20
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	40010000 	.word	0x40010000
 8008aa8:	40000400 	.word	0x40000400
 8008aac:	40000800 	.word	0x40000800
 8008ab0:	40000c00 	.word	0x40000c00
 8008ab4:	40010400 	.word	0x40010400
 8008ab8:	40014000 	.word	0x40014000
 8008abc:	40014400 	.word	0x40014400
 8008ac0:	40014800 	.word	0x40014800

08008ac4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b087      	sub	sp, #28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	f023 0201 	bic.w	r2, r3, #1
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	4b37      	ldr	r3, [pc, #220]	; (8008bcc <TIM_OC1_SetConfig+0x108>)
 8008af0:	4013      	ands	r3, r2
 8008af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f023 0303 	bic.w	r3, r3, #3
 8008afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f023 0302 	bic.w	r3, r3, #2
 8008b0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a2d      	ldr	r2, [pc, #180]	; (8008bd0 <TIM_OC1_SetConfig+0x10c>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d00f      	beq.n	8008b40 <TIM_OC1_SetConfig+0x7c>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a2c      	ldr	r2, [pc, #176]	; (8008bd4 <TIM_OC1_SetConfig+0x110>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d00b      	beq.n	8008b40 <TIM_OC1_SetConfig+0x7c>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a2b      	ldr	r2, [pc, #172]	; (8008bd8 <TIM_OC1_SetConfig+0x114>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d007      	beq.n	8008b40 <TIM_OC1_SetConfig+0x7c>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a2a      	ldr	r2, [pc, #168]	; (8008bdc <TIM_OC1_SetConfig+0x118>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d003      	beq.n	8008b40 <TIM_OC1_SetConfig+0x7c>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a29      	ldr	r2, [pc, #164]	; (8008be0 <TIM_OC1_SetConfig+0x11c>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d10c      	bne.n	8008b5a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	f023 0308 	bic.w	r3, r3, #8
 8008b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	f023 0304 	bic.w	r3, r3, #4
 8008b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a1c      	ldr	r2, [pc, #112]	; (8008bd0 <TIM_OC1_SetConfig+0x10c>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d00f      	beq.n	8008b82 <TIM_OC1_SetConfig+0xbe>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a1b      	ldr	r2, [pc, #108]	; (8008bd4 <TIM_OC1_SetConfig+0x110>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d00b      	beq.n	8008b82 <TIM_OC1_SetConfig+0xbe>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a1a      	ldr	r2, [pc, #104]	; (8008bd8 <TIM_OC1_SetConfig+0x114>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d007      	beq.n	8008b82 <TIM_OC1_SetConfig+0xbe>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a19      	ldr	r2, [pc, #100]	; (8008bdc <TIM_OC1_SetConfig+0x118>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d003      	beq.n	8008b82 <TIM_OC1_SetConfig+0xbe>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a18      	ldr	r2, [pc, #96]	; (8008be0 <TIM_OC1_SetConfig+0x11c>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d111      	bne.n	8008ba6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	695b      	ldr	r3, [r3, #20]
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	693a      	ldr	r2, [r7, #16]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	693a      	ldr	r2, [r7, #16]
 8008baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	685a      	ldr	r2, [r3, #4]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	697a      	ldr	r2, [r7, #20]
 8008bbe:	621a      	str	r2, [r3, #32]
}
 8008bc0:	bf00      	nop
 8008bc2:	371c      	adds	r7, #28
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr
 8008bcc:	fffeff8f 	.word	0xfffeff8f
 8008bd0:	40010000 	.word	0x40010000
 8008bd4:	40010400 	.word	0x40010400
 8008bd8:	40014000 	.word	0x40014000
 8008bdc:	40014400 	.word	0x40014400
 8008be0:	40014800 	.word	0x40014800

08008be4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b087      	sub	sp, #28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a1b      	ldr	r3, [r3, #32]
 8008bf2:	f023 0210 	bic.w	r2, r3, #16
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	4b34      	ldr	r3, [pc, #208]	; (8008ce0 <TIM_OC2_SetConfig+0xfc>)
 8008c10:	4013      	ands	r3, r2
 8008c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	021b      	lsls	r3, r3, #8
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	f023 0320 	bic.w	r3, r3, #32
 8008c2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	011b      	lsls	r3, r3, #4
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a29      	ldr	r2, [pc, #164]	; (8008ce4 <TIM_OC2_SetConfig+0x100>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d003      	beq.n	8008c4c <TIM_OC2_SetConfig+0x68>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a28      	ldr	r2, [pc, #160]	; (8008ce8 <TIM_OC2_SetConfig+0x104>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d10d      	bne.n	8008c68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	011b      	lsls	r3, r3, #4
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a1e      	ldr	r2, [pc, #120]	; (8008ce4 <TIM_OC2_SetConfig+0x100>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d00f      	beq.n	8008c90 <TIM_OC2_SetConfig+0xac>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a1d      	ldr	r2, [pc, #116]	; (8008ce8 <TIM_OC2_SetConfig+0x104>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d00b      	beq.n	8008c90 <TIM_OC2_SetConfig+0xac>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a1c      	ldr	r2, [pc, #112]	; (8008cec <TIM_OC2_SetConfig+0x108>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d007      	beq.n	8008c90 <TIM_OC2_SetConfig+0xac>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a1b      	ldr	r2, [pc, #108]	; (8008cf0 <TIM_OC2_SetConfig+0x10c>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d003      	beq.n	8008c90 <TIM_OC2_SetConfig+0xac>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a1a      	ldr	r2, [pc, #104]	; (8008cf4 <TIM_OC2_SetConfig+0x110>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d113      	bne.n	8008cb8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	695b      	ldr	r3, [r3, #20]
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	693a      	ldr	r2, [r7, #16]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	685a      	ldr	r2, [r3, #4]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	621a      	str	r2, [r3, #32]
}
 8008cd2:	bf00      	nop
 8008cd4:	371c      	adds	r7, #28
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	feff8fff 	.word	0xfeff8fff
 8008ce4:	40010000 	.word	0x40010000
 8008ce8:	40010400 	.word	0x40010400
 8008cec:	40014000 	.word	0x40014000
 8008cf0:	40014400 	.word	0x40014400
 8008cf4:	40014800 	.word	0x40014800

08008cf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b087      	sub	sp, #28
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a1b      	ldr	r3, [r3, #32]
 8008d12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	69db      	ldr	r3, [r3, #28]
 8008d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	4b33      	ldr	r3, [pc, #204]	; (8008df0 <TIM_OC3_SetConfig+0xf8>)
 8008d24:	4013      	ands	r3, r2
 8008d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f023 0303 	bic.w	r3, r3, #3
 8008d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	021b      	lsls	r3, r3, #8
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a28      	ldr	r2, [pc, #160]	; (8008df4 <TIM_OC3_SetConfig+0xfc>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d003      	beq.n	8008d5e <TIM_OC3_SetConfig+0x66>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a27      	ldr	r2, [pc, #156]	; (8008df8 <TIM_OC3_SetConfig+0x100>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d10d      	bne.n	8008d7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	021b      	lsls	r3, r3, #8
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a1d      	ldr	r2, [pc, #116]	; (8008df4 <TIM_OC3_SetConfig+0xfc>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d00f      	beq.n	8008da2 <TIM_OC3_SetConfig+0xaa>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a1c      	ldr	r2, [pc, #112]	; (8008df8 <TIM_OC3_SetConfig+0x100>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d00b      	beq.n	8008da2 <TIM_OC3_SetConfig+0xaa>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a1b      	ldr	r2, [pc, #108]	; (8008dfc <TIM_OC3_SetConfig+0x104>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d007      	beq.n	8008da2 <TIM_OC3_SetConfig+0xaa>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a1a      	ldr	r2, [pc, #104]	; (8008e00 <TIM_OC3_SetConfig+0x108>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d003      	beq.n	8008da2 <TIM_OC3_SetConfig+0xaa>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a19      	ldr	r2, [pc, #100]	; (8008e04 <TIM_OC3_SetConfig+0x10c>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d113      	bne.n	8008dca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	695b      	ldr	r3, [r3, #20]
 8008db6:	011b      	lsls	r3, r3, #4
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	011b      	lsls	r3, r3, #4
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	685a      	ldr	r2, [r3, #4]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	621a      	str	r2, [r3, #32]
}
 8008de4:	bf00      	nop
 8008de6:	371c      	adds	r7, #28
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr
 8008df0:	fffeff8f 	.word	0xfffeff8f
 8008df4:	40010000 	.word	0x40010000
 8008df8:	40010400 	.word	0x40010400
 8008dfc:	40014000 	.word	0x40014000
 8008e00:	40014400 	.word	0x40014400
 8008e04:	40014800 	.word	0x40014800

08008e08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b087      	sub	sp, #28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	69db      	ldr	r3, [r3, #28]
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	4b24      	ldr	r3, [pc, #144]	; (8008ec4 <TIM_OC4_SetConfig+0xbc>)
 8008e34:	4013      	ands	r3, r2
 8008e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	021b      	lsls	r3, r3, #8
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	031b      	lsls	r3, r3, #12
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a19      	ldr	r2, [pc, #100]	; (8008ec8 <TIM_OC4_SetConfig+0xc0>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d00f      	beq.n	8008e88 <TIM_OC4_SetConfig+0x80>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a18      	ldr	r2, [pc, #96]	; (8008ecc <TIM_OC4_SetConfig+0xc4>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d00b      	beq.n	8008e88 <TIM_OC4_SetConfig+0x80>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a17      	ldr	r2, [pc, #92]	; (8008ed0 <TIM_OC4_SetConfig+0xc8>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d007      	beq.n	8008e88 <TIM_OC4_SetConfig+0x80>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a16      	ldr	r2, [pc, #88]	; (8008ed4 <TIM_OC4_SetConfig+0xcc>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d003      	beq.n	8008e88 <TIM_OC4_SetConfig+0x80>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a15      	ldr	r2, [pc, #84]	; (8008ed8 <TIM_OC4_SetConfig+0xd0>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d109      	bne.n	8008e9c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	019b      	lsls	r3, r3, #6
 8008e96:	697a      	ldr	r2, [r7, #20]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	693a      	ldr	r2, [r7, #16]
 8008eb4:	621a      	str	r2, [r3, #32]
}
 8008eb6:	bf00      	nop
 8008eb8:	371c      	adds	r7, #28
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	feff8fff 	.word	0xfeff8fff
 8008ec8:	40010000 	.word	0x40010000
 8008ecc:	40010400 	.word	0x40010400
 8008ed0:	40014000 	.word	0x40014000
 8008ed4:	40014400 	.word	0x40014400
 8008ed8:	40014800 	.word	0x40014800

08008edc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b087      	sub	sp, #28
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a1b      	ldr	r3, [r3, #32]
 8008eea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	4b21      	ldr	r3, [pc, #132]	; (8008f8c <TIM_OC5_SetConfig+0xb0>)
 8008f08:	4013      	ands	r3, r2
 8008f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008f1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	041b      	lsls	r3, r3, #16
 8008f24:	693a      	ldr	r2, [r7, #16]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a18      	ldr	r2, [pc, #96]	; (8008f90 <TIM_OC5_SetConfig+0xb4>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d00f      	beq.n	8008f52 <TIM_OC5_SetConfig+0x76>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a17      	ldr	r2, [pc, #92]	; (8008f94 <TIM_OC5_SetConfig+0xb8>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d00b      	beq.n	8008f52 <TIM_OC5_SetConfig+0x76>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a16      	ldr	r2, [pc, #88]	; (8008f98 <TIM_OC5_SetConfig+0xbc>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d007      	beq.n	8008f52 <TIM_OC5_SetConfig+0x76>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a15      	ldr	r2, [pc, #84]	; (8008f9c <TIM_OC5_SetConfig+0xc0>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d003      	beq.n	8008f52 <TIM_OC5_SetConfig+0x76>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a14      	ldr	r2, [pc, #80]	; (8008fa0 <TIM_OC5_SetConfig+0xc4>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d109      	bne.n	8008f66 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	021b      	lsls	r3, r3, #8
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	697a      	ldr	r2, [r7, #20]
 8008f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	693a      	ldr	r2, [r7, #16]
 8008f7e:	621a      	str	r2, [r3, #32]
}
 8008f80:	bf00      	nop
 8008f82:	371c      	adds	r7, #28
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr
 8008f8c:	fffeff8f 	.word	0xfffeff8f
 8008f90:	40010000 	.word	0x40010000
 8008f94:	40010400 	.word	0x40010400
 8008f98:	40014000 	.word	0x40014000
 8008f9c:	40014400 	.word	0x40014400
 8008fa0:	40014800 	.word	0x40014800

08008fa4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b087      	sub	sp, #28
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a1b      	ldr	r3, [r3, #32]
 8008fb2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	4b22      	ldr	r3, [pc, #136]	; (8009058 <TIM_OC6_SetConfig+0xb4>)
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	021b      	lsls	r3, r3, #8
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008fe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	051b      	lsls	r3, r3, #20
 8008fee:	693a      	ldr	r2, [r7, #16]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a19      	ldr	r2, [pc, #100]	; (800905c <TIM_OC6_SetConfig+0xb8>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d00f      	beq.n	800901c <TIM_OC6_SetConfig+0x78>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a18      	ldr	r2, [pc, #96]	; (8009060 <TIM_OC6_SetConfig+0xbc>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d00b      	beq.n	800901c <TIM_OC6_SetConfig+0x78>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a17      	ldr	r2, [pc, #92]	; (8009064 <TIM_OC6_SetConfig+0xc0>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d007      	beq.n	800901c <TIM_OC6_SetConfig+0x78>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a16      	ldr	r2, [pc, #88]	; (8009068 <TIM_OC6_SetConfig+0xc4>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d003      	beq.n	800901c <TIM_OC6_SetConfig+0x78>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a15      	ldr	r2, [pc, #84]	; (800906c <TIM_OC6_SetConfig+0xc8>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d109      	bne.n	8009030 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009022:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	695b      	ldr	r3, [r3, #20]
 8009028:	029b      	lsls	r3, r3, #10
 800902a:	697a      	ldr	r2, [r7, #20]
 800902c:	4313      	orrs	r3, r2
 800902e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	697a      	ldr	r2, [r7, #20]
 8009034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	685a      	ldr	r2, [r3, #4]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	621a      	str	r2, [r3, #32]
}
 800904a:	bf00      	nop
 800904c:	371c      	adds	r7, #28
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	feff8fff 	.word	0xfeff8fff
 800905c:	40010000 	.word	0x40010000
 8009060:	40010400 	.word	0x40010400
 8009064:	40014000 	.word	0x40014000
 8009068:	40014400 	.word	0x40014400
 800906c:	40014800 	.word	0x40014800

08009070 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800907a:	2300      	movs	r3, #0
 800907c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009084:	2b01      	cmp	r3, #1
 8009086:	d101      	bne.n	800908c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009088:	2302      	movs	r3, #2
 800908a:	e065      	b.n	8009158 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	4313      	orrs	r3, r2
 80090a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4313      	orrs	r3, r2
 80090ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	695b      	ldr	r3, [r3, #20]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f2:	4313      	orrs	r3, r2
 80090f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	041b      	lsls	r3, r3, #16
 8009102:	4313      	orrs	r3, r2
 8009104:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a16      	ldr	r2, [pc, #88]	; (8009164 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d004      	beq.n	800911a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a14      	ldr	r2, [pc, #80]	; (8009168 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d115      	bne.n	8009146 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	051b      	lsls	r3, r3, #20
 8009126:	4313      	orrs	r3, r2
 8009128:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	69db      	ldr	r3, [r3, #28]
 8009134:	4313      	orrs	r3, r2
 8009136:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	6a1b      	ldr	r3, [r3, #32]
 8009142:	4313      	orrs	r3, r2
 8009144:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr
 8009164:	40010000 	.word	0x40010000
 8009168:	40010400 	.word	0x40010400

0800916c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009188:	bf00      	nop
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800919c:	bf00      	nop
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80091a8:	b084      	sub	sp, #16
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b084      	sub	sp, #16
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	f107 001c 	add.w	r0, r7, #28
 80091b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80091ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d120      	bne.n	8009202 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	68da      	ldr	r2, [r3, #12]
 80091d0:	4b2a      	ldr	r3, [pc, #168]	; (800927c <USB_CoreInit+0xd4>)
 80091d2:	4013      	ands	r3, r2
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80091e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d105      	bne.n	80091f6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f001 faf8 	bl	800a7ec <USB_CoreReset>
 80091fc:	4603      	mov	r3, r0
 80091fe:	73fb      	strb	r3, [r7, #15]
 8009200:	e01a      	b.n	8009238 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f001 faec 	bl	800a7ec <USB_CoreReset>
 8009214:	4603      	mov	r3, r0
 8009216:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800921a:	2b00      	cmp	r3, #0
 800921c:	d106      	bne.n	800922c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009222:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	639a      	str	r2, [r3, #56]	; 0x38
 800922a:	e005      	b.n	8009238 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009230:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	2b01      	cmp	r3, #1
 800923c:	d116      	bne.n	800926c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009242:	b29a      	uxth	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800924c:	4b0c      	ldr	r3, [pc, #48]	; (8009280 <USB_CoreInit+0xd8>)
 800924e:	4313      	orrs	r3, r2
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	f043 0206 	orr.w	r2, r3, #6
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	f043 0220 	orr.w	r2, r3, #32
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800926c:	7bfb      	ldrb	r3, [r7, #15]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009278:	b004      	add	sp, #16
 800927a:	4770      	bx	lr
 800927c:	ffbdffbf 	.word	0xffbdffbf
 8009280:	03ee0000 	.word	0x03ee0000

08009284 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009284:	b480      	push	{r7}
 8009286:	b087      	sub	sp, #28
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	4613      	mov	r3, r2
 8009290:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009292:	79fb      	ldrb	r3, [r7, #7]
 8009294:	2b02      	cmp	r3, #2
 8009296:	d165      	bne.n	8009364 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	4a41      	ldr	r2, [pc, #260]	; (80093a0 <USB_SetTurnaroundTime+0x11c>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d906      	bls.n	80092ae <USB_SetTurnaroundTime+0x2a>
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	4a40      	ldr	r2, [pc, #256]	; (80093a4 <USB_SetTurnaroundTime+0x120>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d202      	bcs.n	80092ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80092a8:	230f      	movs	r3, #15
 80092aa:	617b      	str	r3, [r7, #20]
 80092ac:	e062      	b.n	8009374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	4a3c      	ldr	r2, [pc, #240]	; (80093a4 <USB_SetTurnaroundTime+0x120>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d306      	bcc.n	80092c4 <USB_SetTurnaroundTime+0x40>
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	4a3b      	ldr	r2, [pc, #236]	; (80093a8 <USB_SetTurnaroundTime+0x124>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d202      	bcs.n	80092c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80092be:	230e      	movs	r3, #14
 80092c0:	617b      	str	r3, [r7, #20]
 80092c2:	e057      	b.n	8009374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	4a38      	ldr	r2, [pc, #224]	; (80093a8 <USB_SetTurnaroundTime+0x124>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d306      	bcc.n	80092da <USB_SetTurnaroundTime+0x56>
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	4a37      	ldr	r2, [pc, #220]	; (80093ac <USB_SetTurnaroundTime+0x128>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d202      	bcs.n	80092da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80092d4:	230d      	movs	r3, #13
 80092d6:	617b      	str	r3, [r7, #20]
 80092d8:	e04c      	b.n	8009374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	4a33      	ldr	r2, [pc, #204]	; (80093ac <USB_SetTurnaroundTime+0x128>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d306      	bcc.n	80092f0 <USB_SetTurnaroundTime+0x6c>
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	4a32      	ldr	r2, [pc, #200]	; (80093b0 <USB_SetTurnaroundTime+0x12c>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d802      	bhi.n	80092f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80092ea:	230c      	movs	r3, #12
 80092ec:	617b      	str	r3, [r7, #20]
 80092ee:	e041      	b.n	8009374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	4a2f      	ldr	r2, [pc, #188]	; (80093b0 <USB_SetTurnaroundTime+0x12c>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d906      	bls.n	8009306 <USB_SetTurnaroundTime+0x82>
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	4a2e      	ldr	r2, [pc, #184]	; (80093b4 <USB_SetTurnaroundTime+0x130>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d802      	bhi.n	8009306 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009300:	230b      	movs	r3, #11
 8009302:	617b      	str	r3, [r7, #20]
 8009304:	e036      	b.n	8009374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	4a2a      	ldr	r2, [pc, #168]	; (80093b4 <USB_SetTurnaroundTime+0x130>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d906      	bls.n	800931c <USB_SetTurnaroundTime+0x98>
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	4a29      	ldr	r2, [pc, #164]	; (80093b8 <USB_SetTurnaroundTime+0x134>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d802      	bhi.n	800931c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009316:	230a      	movs	r3, #10
 8009318:	617b      	str	r3, [r7, #20]
 800931a:	e02b      	b.n	8009374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	4a26      	ldr	r2, [pc, #152]	; (80093b8 <USB_SetTurnaroundTime+0x134>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d906      	bls.n	8009332 <USB_SetTurnaroundTime+0xae>
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	4a25      	ldr	r2, [pc, #148]	; (80093bc <USB_SetTurnaroundTime+0x138>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d202      	bcs.n	8009332 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800932c:	2309      	movs	r3, #9
 800932e:	617b      	str	r3, [r7, #20]
 8009330:	e020      	b.n	8009374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	4a21      	ldr	r2, [pc, #132]	; (80093bc <USB_SetTurnaroundTime+0x138>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d306      	bcc.n	8009348 <USB_SetTurnaroundTime+0xc4>
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	4a20      	ldr	r2, [pc, #128]	; (80093c0 <USB_SetTurnaroundTime+0x13c>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d802      	bhi.n	8009348 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009342:	2308      	movs	r3, #8
 8009344:	617b      	str	r3, [r7, #20]
 8009346:	e015      	b.n	8009374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	4a1d      	ldr	r2, [pc, #116]	; (80093c0 <USB_SetTurnaroundTime+0x13c>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d906      	bls.n	800935e <USB_SetTurnaroundTime+0xda>
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	4a1c      	ldr	r2, [pc, #112]	; (80093c4 <USB_SetTurnaroundTime+0x140>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d202      	bcs.n	800935e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009358:	2307      	movs	r3, #7
 800935a:	617b      	str	r3, [r7, #20]
 800935c:	e00a      	b.n	8009374 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800935e:	2306      	movs	r3, #6
 8009360:	617b      	str	r3, [r7, #20]
 8009362:	e007      	b.n	8009374 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009364:	79fb      	ldrb	r3, [r7, #7]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d102      	bne.n	8009370 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800936a:	2309      	movs	r3, #9
 800936c:	617b      	str	r3, [r7, #20]
 800936e:	e001      	b.n	8009374 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009370:	2309      	movs	r3, #9
 8009372:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	68da      	ldr	r2, [r3, #12]
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	029b      	lsls	r3, r3, #10
 8009388:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800938c:	431a      	orrs	r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	371c      	adds	r7, #28
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	00d8acbf 	.word	0x00d8acbf
 80093a4:	00e4e1c0 	.word	0x00e4e1c0
 80093a8:	00f42400 	.word	0x00f42400
 80093ac:	01067380 	.word	0x01067380
 80093b0:	011a499f 	.word	0x011a499f
 80093b4:	01312cff 	.word	0x01312cff
 80093b8:	014ca43f 	.word	0x014ca43f
 80093bc:	016e3600 	.word	0x016e3600
 80093c0:	01a6ab1f 	.word	0x01a6ab1f
 80093c4:	01e84800 	.word	0x01e84800

080093c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	f043 0201 	orr.w	r2, r3, #1
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	370c      	adds	r7, #12
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093ea:	b480      	push	{r7}
 80093ec:	b083      	sub	sp, #12
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	f023 0201 	bic.w	r2, r3, #1
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009418:	2300      	movs	r3, #0
 800941a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009428:	78fb      	ldrb	r3, [r7, #3]
 800942a:	2b01      	cmp	r3, #1
 800942c:	d115      	bne.n	800945a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800943a:	2001      	movs	r0, #1
 800943c:	f7f8 f8a8 	bl	8001590 <HAL_Delay>
      ms++;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	3301      	adds	r3, #1
 8009444:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f001 f93f 	bl	800a6ca <USB_GetMode>
 800944c:	4603      	mov	r3, r0
 800944e:	2b01      	cmp	r3, #1
 8009450:	d01e      	beq.n	8009490 <USB_SetCurrentMode+0x84>
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2b31      	cmp	r3, #49	; 0x31
 8009456:	d9f0      	bls.n	800943a <USB_SetCurrentMode+0x2e>
 8009458:	e01a      	b.n	8009490 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800945a:	78fb      	ldrb	r3, [r7, #3]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d115      	bne.n	800948c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800946c:	2001      	movs	r0, #1
 800946e:	f7f8 f88f 	bl	8001590 <HAL_Delay>
      ms++;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	3301      	adds	r3, #1
 8009476:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f001 f926 	bl	800a6ca <USB_GetMode>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d005      	beq.n	8009490 <USB_SetCurrentMode+0x84>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2b31      	cmp	r3, #49	; 0x31
 8009488:	d9f0      	bls.n	800946c <USB_SetCurrentMode+0x60>
 800948a:	e001      	b.n	8009490 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	e005      	b.n	800949c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2b32      	cmp	r3, #50	; 0x32
 8009494:	d101      	bne.n	800949a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	e000      	b.n	800949c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094a4:	b084      	sub	sp, #16
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b086      	sub	sp, #24
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
 80094ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80094b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80094b6:	2300      	movs	r3, #0
 80094b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80094be:	2300      	movs	r3, #0
 80094c0:	613b      	str	r3, [r7, #16]
 80094c2:	e009      	b.n	80094d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	3340      	adds	r3, #64	; 0x40
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4413      	add	r3, r2
 80094ce:	2200      	movs	r2, #0
 80094d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	3301      	adds	r3, #1
 80094d6:	613b      	str	r3, [r7, #16]
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	2b0e      	cmp	r3, #14
 80094dc:	d9f2      	bls.n	80094c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80094de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d11c      	bne.n	800951e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094f2:	f043 0302 	orr.w	r3, r3, #2
 80094f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	601a      	str	r2, [r3, #0]
 800951c:	e005      	b.n	800952a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009522:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009530:	461a      	mov	r2, r3
 8009532:	2300      	movs	r3, #0
 8009534:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800953c:	4619      	mov	r1, r3
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009544:	461a      	mov	r2, r3
 8009546:	680b      	ldr	r3, [r1, #0]
 8009548:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800954a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954c:	2b01      	cmp	r3, #1
 800954e:	d10c      	bne.n	800956a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009552:	2b00      	cmp	r3, #0
 8009554:	d104      	bne.n	8009560 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009556:	2100      	movs	r1, #0
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f965 	bl	8009828 <USB_SetDevSpeed>
 800955e:	e008      	b.n	8009572 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009560:	2101      	movs	r1, #1
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f960 	bl	8009828 <USB_SetDevSpeed>
 8009568:	e003      	b.n	8009572 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800956a:	2103      	movs	r1, #3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f95b 	bl	8009828 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009572:	2110      	movs	r1, #16
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f8f3 	bl	8009760 <USB_FlushTxFifo>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d001      	beq.n	8009584 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f91f 	bl	80097c8 <USB_FlushRxFifo>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d001      	beq.n	8009594 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800959a:	461a      	mov	r2, r3
 800959c:	2300      	movs	r3, #0
 800959e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095a6:	461a      	mov	r2, r3
 80095a8:	2300      	movs	r3, #0
 80095aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095b2:	461a      	mov	r2, r3
 80095b4:	2300      	movs	r3, #0
 80095b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095b8:	2300      	movs	r3, #0
 80095ba:	613b      	str	r3, [r7, #16]
 80095bc:	e043      	b.n	8009646 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	015a      	lsls	r2, r3, #5
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	4413      	add	r3, r2
 80095c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095d4:	d118      	bne.n	8009608 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d10a      	bne.n	80095f2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	015a      	lsls	r2, r3, #5
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	4413      	add	r3, r2
 80095e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e8:	461a      	mov	r2, r3
 80095ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80095ee:	6013      	str	r3, [r2, #0]
 80095f0:	e013      	b.n	800961a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	015a      	lsls	r2, r3, #5
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	4413      	add	r3, r2
 80095fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095fe:	461a      	mov	r2, r3
 8009600:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009604:	6013      	str	r3, [r2, #0]
 8009606:	e008      	b.n	800961a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	015a      	lsls	r2, r3, #5
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	4413      	add	r3, r2
 8009610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009614:	461a      	mov	r2, r3
 8009616:	2300      	movs	r3, #0
 8009618:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	015a      	lsls	r2, r3, #5
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	4413      	add	r3, r2
 8009622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009626:	461a      	mov	r2, r3
 8009628:	2300      	movs	r3, #0
 800962a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	015a      	lsls	r2, r3, #5
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	4413      	add	r3, r2
 8009634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009638:	461a      	mov	r2, r3
 800963a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800963e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	3301      	adds	r3, #1
 8009644:	613b      	str	r3, [r7, #16]
 8009646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009648:	693a      	ldr	r2, [r7, #16]
 800964a:	429a      	cmp	r2, r3
 800964c:	d3b7      	bcc.n	80095be <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800964e:	2300      	movs	r3, #0
 8009650:	613b      	str	r3, [r7, #16]
 8009652:	e043      	b.n	80096dc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	015a      	lsls	r2, r3, #5
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	4413      	add	r3, r2
 800965c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009666:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800966a:	d118      	bne.n	800969e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10a      	bne.n	8009688 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	015a      	lsls	r2, r3, #5
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	4413      	add	r3, r2
 800967a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800967e:	461a      	mov	r2, r3
 8009680:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009684:	6013      	str	r3, [r2, #0]
 8009686:	e013      	b.n	80096b0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	015a      	lsls	r2, r3, #5
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	4413      	add	r3, r2
 8009690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009694:	461a      	mov	r2, r3
 8009696:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800969a:	6013      	str	r3, [r2, #0]
 800969c:	e008      	b.n	80096b0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	015a      	lsls	r2, r3, #5
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	4413      	add	r3, r2
 80096a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096aa:	461a      	mov	r2, r3
 80096ac:	2300      	movs	r3, #0
 80096ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	015a      	lsls	r2, r3, #5
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	4413      	add	r3, r2
 80096b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096bc:	461a      	mov	r2, r3
 80096be:	2300      	movs	r3, #0
 80096c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	015a      	lsls	r2, r3, #5
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	4413      	add	r3, r2
 80096ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ce:	461a      	mov	r2, r3
 80096d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80096d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	3301      	adds	r3, #1
 80096da:	613b      	str	r3, [r7, #16]
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d3b7      	bcc.n	8009654 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009704:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009708:	2b00      	cmp	r3, #0
 800970a:	d105      	bne.n	8009718 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	699b      	ldr	r3, [r3, #24]
 8009710:	f043 0210 	orr.w	r2, r3, #16
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	699a      	ldr	r2, [r3, #24]
 800971c:	4b0e      	ldr	r3, [pc, #56]	; (8009758 <USB_DevInit+0x2b4>)
 800971e:	4313      	orrs	r3, r2
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009726:	2b00      	cmp	r3, #0
 8009728:	d005      	beq.n	8009736 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	f043 0208 	orr.w	r2, r3, #8
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009738:	2b01      	cmp	r3, #1
 800973a:	d105      	bne.n	8009748 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	699a      	ldr	r2, [r3, #24]
 8009740:	4b06      	ldr	r3, [pc, #24]	; (800975c <USB_DevInit+0x2b8>)
 8009742:	4313      	orrs	r3, r2
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009748:	7dfb      	ldrb	r3, [r7, #23]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3718      	adds	r7, #24
 800974e:	46bd      	mov	sp, r7
 8009750:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009754:	b004      	add	sp, #16
 8009756:	4770      	bx	lr
 8009758:	803c3800 	.word	0x803c3800
 800975c:	40000004 	.word	0x40000004

08009760 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800976a:	2300      	movs	r3, #0
 800976c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	3301      	adds	r3, #1
 8009772:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	4a13      	ldr	r2, [pc, #76]	; (80097c4 <USB_FlushTxFifo+0x64>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d901      	bls.n	8009780 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800977c:	2303      	movs	r3, #3
 800977e:	e01b      	b.n	80097b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	2b00      	cmp	r3, #0
 8009786:	daf2      	bge.n	800976e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009788:	2300      	movs	r3, #0
 800978a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	019b      	lsls	r3, r3, #6
 8009790:	f043 0220 	orr.w	r2, r3, #32
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	3301      	adds	r3, #1
 800979c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	4a08      	ldr	r2, [pc, #32]	; (80097c4 <USB_FlushTxFifo+0x64>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d901      	bls.n	80097aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e006      	b.n	80097b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	f003 0320 	and.w	r3, r3, #32
 80097b2:	2b20      	cmp	r3, #32
 80097b4:	d0f0      	beq.n	8009798 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr
 80097c4:	00030d40 	.word	0x00030d40

080097c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80097d0:	2300      	movs	r3, #0
 80097d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	3301      	adds	r3, #1
 80097d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	4a11      	ldr	r2, [pc, #68]	; (8009824 <USB_FlushRxFifo+0x5c>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d901      	bls.n	80097e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80097e2:	2303      	movs	r3, #3
 80097e4:	e018      	b.n	8009818 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	daf2      	bge.n	80097d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80097ee:	2300      	movs	r3, #0
 80097f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2210      	movs	r2, #16
 80097f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	3301      	adds	r3, #1
 80097fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	4a08      	ldr	r2, [pc, #32]	; (8009824 <USB_FlushRxFifo+0x5c>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d901      	bls.n	800980a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009806:	2303      	movs	r3, #3
 8009808:	e006      	b.n	8009818 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	691b      	ldr	r3, [r3, #16]
 800980e:	f003 0310 	and.w	r3, r3, #16
 8009812:	2b10      	cmp	r3, #16
 8009814:	d0f0      	beq.n	80097f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3714      	adds	r7, #20
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	00030d40 	.word	0x00030d40

08009828 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	460b      	mov	r3, r1
 8009832:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	78fb      	ldrb	r3, [r7, #3]
 8009842:	68f9      	ldr	r1, [r7, #12]
 8009844:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009848:	4313      	orrs	r3, r2
 800984a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800985a:	b480      	push	{r7}
 800985c:	b087      	sub	sp, #28
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	f003 0306 	and.w	r3, r3, #6
 8009872:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d102      	bne.n	8009880 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800987a:	2300      	movs	r3, #0
 800987c:	75fb      	strb	r3, [r7, #23]
 800987e:	e00a      	b.n	8009896 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2b02      	cmp	r3, #2
 8009884:	d002      	beq.n	800988c <USB_GetDevSpeed+0x32>
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b06      	cmp	r3, #6
 800988a:	d102      	bne.n	8009892 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800988c:	2302      	movs	r3, #2
 800988e:	75fb      	strb	r3, [r7, #23]
 8009890:	e001      	b.n	8009896 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009892:	230f      	movs	r3, #15
 8009894:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009896:	7dfb      	ldrb	r3, [r7, #23]
}
 8009898:	4618      	mov	r0, r3
 800989a:	371c      	adds	r7, #28
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	785b      	ldrb	r3, [r3, #1]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d139      	bne.n	8009934 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c6:	69da      	ldr	r2, [r3, #28]
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	f003 030f 	and.w	r3, r3, #15
 80098d0:	2101      	movs	r1, #1
 80098d2:	fa01 f303 	lsl.w	r3, r1, r3
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	68f9      	ldr	r1, [r7, #12]
 80098da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098de:	4313      	orrs	r3, r2
 80098e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	015a      	lsls	r2, r3, #5
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	4413      	add	r3, r2
 80098ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d153      	bne.n	80099a0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	015a      	lsls	r2, r3, #5
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	4413      	add	r3, r2
 8009900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	791b      	ldrb	r3, [r3, #4]
 8009912:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009914:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	059b      	lsls	r3, r3, #22
 800991a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800991c:	431a      	orrs	r2, r3
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	0159      	lsls	r1, r3, #5
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	440b      	add	r3, r1
 8009926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800992a:	4619      	mov	r1, r3
 800992c:	4b20      	ldr	r3, [pc, #128]	; (80099b0 <USB_ActivateEndpoint+0x10c>)
 800992e:	4313      	orrs	r3, r2
 8009930:	600b      	str	r3, [r1, #0]
 8009932:	e035      	b.n	80099a0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800993a:	69da      	ldr	r2, [r3, #28]
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	f003 030f 	and.w	r3, r3, #15
 8009944:	2101      	movs	r1, #1
 8009946:	fa01 f303 	lsl.w	r3, r1, r3
 800994a:	041b      	lsls	r3, r3, #16
 800994c:	68f9      	ldr	r1, [r7, #12]
 800994e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009952:	4313      	orrs	r3, r2
 8009954:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	015a      	lsls	r2, r3, #5
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	4413      	add	r3, r2
 800995e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009968:	2b00      	cmp	r3, #0
 800996a:	d119      	bne.n	80099a0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	015a      	lsls	r2, r3, #5
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	4413      	add	r3, r2
 8009974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	791b      	ldrb	r3, [r3, #4]
 8009986:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009988:	430b      	orrs	r3, r1
 800998a:	431a      	orrs	r2, r3
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	0159      	lsls	r1, r3, #5
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	440b      	add	r3, r1
 8009994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009998:	4619      	mov	r1, r3
 800999a:	4b05      	ldr	r3, [pc, #20]	; (80099b0 <USB_ActivateEndpoint+0x10c>)
 800999c:	4313      	orrs	r3, r2
 800999e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3714      	adds	r7, #20
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	10008000 	.word	0x10008000

080099b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	785b      	ldrb	r3, [r3, #1]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d161      	bne.n	8009a94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099e6:	d11f      	bne.n	8009a28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	015a      	lsls	r2, r3, #5
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	4413      	add	r3, r2
 80099f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68ba      	ldr	r2, [r7, #8]
 80099f8:	0151      	lsls	r1, r2, #5
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	440a      	add	r2, r1
 80099fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	015a      	lsls	r2, r3, #5
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	4413      	add	r3, r2
 8009a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	0151      	lsls	r1, r2, #5
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	440a      	add	r2, r1
 8009a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	f003 030f 	and.w	r3, r3, #15
 8009a38:	2101      	movs	r1, #1
 8009a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	43db      	mvns	r3, r3
 8009a42:	68f9      	ldr	r1, [r7, #12]
 8009a44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a48:	4013      	ands	r3, r2
 8009a4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a52:	69da      	ldr	r2, [r3, #28]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	f003 030f 	and.w	r3, r3, #15
 8009a5c:	2101      	movs	r1, #1
 8009a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	43db      	mvns	r3, r3
 8009a66:	68f9      	ldr	r1, [r7, #12]
 8009a68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	015a      	lsls	r2, r3, #5
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	4413      	add	r3, r2
 8009a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	0159      	lsls	r1, r3, #5
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	440b      	add	r3, r1
 8009a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	4b35      	ldr	r3, [pc, #212]	; (8009b64 <USB_DeactivateEndpoint+0x1b0>)
 8009a8e:	4013      	ands	r3, r2
 8009a90:	600b      	str	r3, [r1, #0]
 8009a92:	e060      	b.n	8009b56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	015a      	lsls	r2, r3, #5
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009aaa:	d11f      	bne.n	8009aec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	015a      	lsls	r2, r3, #5
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	0151      	lsls	r1, r2, #5
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	440a      	add	r2, r1
 8009ac2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ac6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009aca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	015a      	lsls	r2, r3, #5
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	0151      	lsls	r1, r2, #5
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	440a      	add	r2, r1
 8009ae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ae6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009aea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	f003 030f 	and.w	r3, r3, #15
 8009afc:	2101      	movs	r1, #1
 8009afe:	fa01 f303 	lsl.w	r3, r1, r3
 8009b02:	041b      	lsls	r3, r3, #16
 8009b04:	43db      	mvns	r3, r3
 8009b06:	68f9      	ldr	r1, [r7, #12]
 8009b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b16:	69da      	ldr	r2, [r3, #28]
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	f003 030f 	and.w	r3, r3, #15
 8009b20:	2101      	movs	r1, #1
 8009b22:	fa01 f303 	lsl.w	r3, r1, r3
 8009b26:	041b      	lsls	r3, r3, #16
 8009b28:	43db      	mvns	r3, r3
 8009b2a:	68f9      	ldr	r1, [r7, #12]
 8009b2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b30:	4013      	ands	r3, r2
 8009b32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	015a      	lsls	r2, r3, #5
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	0159      	lsls	r1, r3, #5
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	440b      	add	r3, r1
 8009b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b4e:	4619      	mov	r1, r3
 8009b50:	4b05      	ldr	r3, [pc, #20]	; (8009b68 <USB_DeactivateEndpoint+0x1b4>)
 8009b52:	4013      	ands	r3, r2
 8009b54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3714      	adds	r7, #20
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr
 8009b64:	ec337800 	.word	0xec337800
 8009b68:	eff37800 	.word	0xeff37800

08009b6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b08a      	sub	sp, #40	; 0x28
 8009b70:	af02      	add	r7, sp, #8
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	4613      	mov	r3, r2
 8009b78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	785b      	ldrb	r3, [r3, #1]
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	f040 8181 	bne.w	8009e90 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d132      	bne.n	8009bfc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	015a      	lsls	r2, r3, #5
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba2:	691a      	ldr	r2, [r3, #16]
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	0159      	lsls	r1, r3, #5
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	440b      	add	r3, r1
 8009bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	4ba5      	ldr	r3, [pc, #660]	; (8009e48 <USB_EPStartXfer+0x2dc>)
 8009bb4:	4013      	ands	r3, r2
 8009bb6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	69ba      	ldr	r2, [r7, #24]
 8009bc8:	0151      	lsls	r1, r2, #5
 8009bca:	69fa      	ldr	r2, [r7, #28]
 8009bcc:	440a      	add	r2, r1
 8009bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009bd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	015a      	lsls	r2, r3, #5
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	4413      	add	r3, r2
 8009be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be4:	691a      	ldr	r2, [r3, #16]
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	0159      	lsls	r1, r3, #5
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	440b      	add	r3, r1
 8009bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	4b95      	ldr	r3, [pc, #596]	; (8009e4c <USB_EPStartXfer+0x2e0>)
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	610b      	str	r3, [r1, #16]
 8009bfa:	e092      	b.n	8009d22 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	015a      	lsls	r2, r3, #5
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	4413      	add	r3, r2
 8009c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c08:	691a      	ldr	r2, [r3, #16]
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	0159      	lsls	r1, r3, #5
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	440b      	add	r3, r1
 8009c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c16:	4619      	mov	r1, r3
 8009c18:	4b8c      	ldr	r3, [pc, #560]	; (8009e4c <USB_EPStartXfer+0x2e0>)
 8009c1a:	4013      	ands	r3, r2
 8009c1c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	015a      	lsls	r2, r3, #5
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	4413      	add	r3, r2
 8009c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c2a:	691a      	ldr	r2, [r3, #16]
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	0159      	lsls	r1, r3, #5
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	440b      	add	r3, r1
 8009c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c38:	4619      	mov	r1, r3
 8009c3a:	4b83      	ldr	r3, [pc, #524]	; (8009e48 <USB_EPStartXfer+0x2dc>)
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d11a      	bne.n	8009c7c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	691a      	ldr	r2, [r3, #16]
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d903      	bls.n	8009c5a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	689a      	ldr	r2, [r3, #8]
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	015a      	lsls	r2, r3, #5
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	4413      	add	r3, r2
 8009c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c66:	691b      	ldr	r3, [r3, #16]
 8009c68:	69ba      	ldr	r2, [r7, #24]
 8009c6a:	0151      	lsls	r1, r2, #5
 8009c6c:	69fa      	ldr	r2, [r7, #28]
 8009c6e:	440a      	add	r2, r1
 8009c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c78:	6113      	str	r3, [r2, #16]
 8009c7a:	e01b      	b.n	8009cb4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	015a      	lsls	r2, r3, #5
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	4413      	add	r3, r2
 8009c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c88:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	6919      	ldr	r1, [r3, #16]
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	440b      	add	r3, r1
 8009c94:	1e59      	subs	r1, r3, #1
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009c9e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009ca0:	4b6b      	ldr	r3, [pc, #428]	; (8009e50 <USB_EPStartXfer+0x2e4>)
 8009ca2:	400b      	ands	r3, r1
 8009ca4:	69b9      	ldr	r1, [r7, #24]
 8009ca6:	0148      	lsls	r0, r1, #5
 8009ca8:	69f9      	ldr	r1, [r7, #28]
 8009caa:	4401      	add	r1, r0
 8009cac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	015a      	lsls	r2, r3, #5
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	4413      	add	r3, r2
 8009cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cc0:	691a      	ldr	r2, [r3, #16]
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cca:	69b9      	ldr	r1, [r7, #24]
 8009ccc:	0148      	lsls	r0, r1, #5
 8009cce:	69f9      	ldr	r1, [r7, #28]
 8009cd0:	4401      	add	r1, r0
 8009cd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	791b      	ldrb	r3, [r3, #4]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d11f      	bne.n	8009d22 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	015a      	lsls	r2, r3, #5
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	4413      	add	r3, r2
 8009cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	69ba      	ldr	r2, [r7, #24]
 8009cf2:	0151      	lsls	r1, r2, #5
 8009cf4:	69fa      	ldr	r2, [r7, #28]
 8009cf6:	440a      	add	r2, r1
 8009cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cfc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009d00:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	015a      	lsls	r2, r3, #5
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	4413      	add	r3, r2
 8009d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	69ba      	ldr	r2, [r7, #24]
 8009d12:	0151      	lsls	r1, r2, #5
 8009d14:	69fa      	ldr	r2, [r7, #28]
 8009d16:	440a      	add	r2, r1
 8009d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d20:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009d22:	79fb      	ldrb	r3, [r7, #7]
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d14b      	bne.n	8009dc0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	69db      	ldr	r3, [r3, #28]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d009      	beq.n	8009d44 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	015a      	lsls	r2, r3, #5
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	4413      	add	r3, r2
 8009d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	69db      	ldr	r3, [r3, #28]
 8009d42:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	791b      	ldrb	r3, [r3, #4]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d128      	bne.n	8009d9e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d110      	bne.n	8009d7e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	015a      	lsls	r2, r3, #5
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	4413      	add	r3, r2
 8009d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	69ba      	ldr	r2, [r7, #24]
 8009d6c:	0151      	lsls	r1, r2, #5
 8009d6e:	69fa      	ldr	r2, [r7, #28]
 8009d70:	440a      	add	r2, r1
 8009d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d7a:	6013      	str	r3, [r2, #0]
 8009d7c:	e00f      	b.n	8009d9e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009d7e:	69bb      	ldr	r3, [r7, #24]
 8009d80:	015a      	lsls	r2, r3, #5
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	4413      	add	r3, r2
 8009d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	69ba      	ldr	r2, [r7, #24]
 8009d8e:	0151      	lsls	r1, r2, #5
 8009d90:	69fa      	ldr	r2, [r7, #28]
 8009d92:	440a      	add	r2, r1
 8009d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d9c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d9e:	69bb      	ldr	r3, [r7, #24]
 8009da0:	015a      	lsls	r2, r3, #5
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	4413      	add	r3, r2
 8009da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	69ba      	ldr	r2, [r7, #24]
 8009dae:	0151      	lsls	r1, r2, #5
 8009db0:	69fa      	ldr	r2, [r7, #28]
 8009db2:	440a      	add	r2, r1
 8009db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009db8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009dbc:	6013      	str	r3, [r2, #0]
 8009dbe:	e16a      	b.n	800a096 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	015a      	lsls	r2, r3, #5
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	69ba      	ldr	r2, [r7, #24]
 8009dd0:	0151      	lsls	r1, r2, #5
 8009dd2:	69fa      	ldr	r2, [r7, #28]
 8009dd4:	440a      	add	r2, r1
 8009dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009dde:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	791b      	ldrb	r3, [r3, #4]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d015      	beq.n	8009e14 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 8152 	beq.w	800a096 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	f003 030f 	and.w	r3, r3, #15
 8009e02:	2101      	movs	r1, #1
 8009e04:	fa01 f303 	lsl.w	r3, r1, r3
 8009e08:	69f9      	ldr	r1, [r7, #28]
 8009e0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	634b      	str	r3, [r1, #52]	; 0x34
 8009e12:	e140      	b.n	800a096 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d117      	bne.n	8009e54 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	015a      	lsls	r2, r3, #5
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	69ba      	ldr	r2, [r7, #24]
 8009e34:	0151      	lsls	r1, r2, #5
 8009e36:	69fa      	ldr	r2, [r7, #28]
 8009e38:	440a      	add	r2, r1
 8009e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e42:	6013      	str	r3, [r2, #0]
 8009e44:	e016      	b.n	8009e74 <USB_EPStartXfer+0x308>
 8009e46:	bf00      	nop
 8009e48:	e007ffff 	.word	0xe007ffff
 8009e4c:	fff80000 	.word	0xfff80000
 8009e50:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	69ba      	ldr	r2, [r7, #24]
 8009e64:	0151      	lsls	r1, r2, #5
 8009e66:	69fa      	ldr	r2, [r7, #28]
 8009e68:	440a      	add	r2, r1
 8009e6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e72:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	68d9      	ldr	r1, [r3, #12]
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	781a      	ldrb	r2, [r3, #0]
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	b298      	uxth	r0, r3
 8009e82:	79fb      	ldrb	r3, [r7, #7]
 8009e84:	9300      	str	r3, [sp, #0]
 8009e86:	4603      	mov	r3, r0
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f000 f9b9 	bl	800a200 <USB_WritePacket>
 8009e8e:	e102      	b.n	800a096 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	015a      	lsls	r2, r3, #5
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	4413      	add	r3, r2
 8009e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e9c:	691a      	ldr	r2, [r3, #16]
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	0159      	lsls	r1, r3, #5
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	440b      	add	r3, r1
 8009ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eaa:	4619      	mov	r1, r3
 8009eac:	4b7c      	ldr	r3, [pc, #496]	; (800a0a0 <USB_EPStartXfer+0x534>)
 8009eae:	4013      	ands	r3, r2
 8009eb0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	015a      	lsls	r2, r3, #5
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	4413      	add	r3, r2
 8009eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ebe:	691a      	ldr	r2, [r3, #16]
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	0159      	lsls	r1, r3, #5
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	440b      	add	r3, r1
 8009ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ecc:	4619      	mov	r1, r3
 8009ece:	4b75      	ldr	r3, [pc, #468]	; (800a0a4 <USB_EPStartXfer+0x538>)
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d12f      	bne.n	8009f3a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d003      	beq.n	8009eea <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	689a      	ldr	r2, [r3, #8]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	689a      	ldr	r2, [r3, #8]
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	015a      	lsls	r2, r3, #5
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	4413      	add	r3, r2
 8009efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009efe:	691a      	ldr	r2, [r3, #16]
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	6a1b      	ldr	r3, [r3, #32]
 8009f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f08:	69b9      	ldr	r1, [r7, #24]
 8009f0a:	0148      	lsls	r0, r1, #5
 8009f0c:	69f9      	ldr	r1, [r7, #28]
 8009f0e:	4401      	add	r1, r0
 8009f10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009f14:	4313      	orrs	r3, r2
 8009f16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	015a      	lsls	r2, r3, #5
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	69ba      	ldr	r2, [r7, #24]
 8009f28:	0151      	lsls	r1, r2, #5
 8009f2a:	69fa      	ldr	r2, [r7, #28]
 8009f2c:	440a      	add	r2, r1
 8009f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f36:	6113      	str	r3, [r2, #16]
 8009f38:	e05f      	b.n	8009ffa <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d123      	bne.n	8009f8a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	015a      	lsls	r2, r3, #5
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	4413      	add	r3, r2
 8009f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f4e:	691a      	ldr	r2, [r3, #16]
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f58:	69b9      	ldr	r1, [r7, #24]
 8009f5a:	0148      	lsls	r0, r1, #5
 8009f5c:	69f9      	ldr	r1, [r7, #28]
 8009f5e:	4401      	add	r1, r0
 8009f60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009f64:	4313      	orrs	r3, r2
 8009f66:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	015a      	lsls	r2, r3, #5
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	4413      	add	r3, r2
 8009f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	69ba      	ldr	r2, [r7, #24]
 8009f78:	0151      	lsls	r1, r2, #5
 8009f7a:	69fa      	ldr	r2, [r7, #28]
 8009f7c:	440a      	add	r2, r1
 8009f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f86:	6113      	str	r3, [r2, #16]
 8009f88:	e037      	b.n	8009ffa <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	691a      	ldr	r2, [r3, #16]
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	4413      	add	r3, r2
 8009f94:	1e5a      	subs	r2, r3, #1
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f9e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	8afa      	ldrh	r2, [r7, #22]
 8009fa6:	fb03 f202 	mul.w	r2, r3, r2
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	015a      	lsls	r2, r3, #5
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fba:	691a      	ldr	r2, [r3, #16]
 8009fbc:	8afb      	ldrh	r3, [r7, #22]
 8009fbe:	04d9      	lsls	r1, r3, #19
 8009fc0:	4b39      	ldr	r3, [pc, #228]	; (800a0a8 <USB_EPStartXfer+0x53c>)
 8009fc2:	400b      	ands	r3, r1
 8009fc4:	69b9      	ldr	r1, [r7, #24]
 8009fc6:	0148      	lsls	r0, r1, #5
 8009fc8:	69f9      	ldr	r1, [r7, #28]
 8009fca:	4401      	add	r1, r0
 8009fcc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	015a      	lsls	r2, r3, #5
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	4413      	add	r3, r2
 8009fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fe0:	691a      	ldr	r2, [r3, #16]
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	6a1b      	ldr	r3, [r3, #32]
 8009fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fea:	69b9      	ldr	r1, [r7, #24]
 8009fec:	0148      	lsls	r0, r1, #5
 8009fee:	69f9      	ldr	r1, [r7, #28]
 8009ff0:	4401      	add	r1, r0
 8009ff2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009ffa:	79fb      	ldrb	r3, [r7, #7]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d10d      	bne.n	800a01c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d009      	beq.n	800a01c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	68d9      	ldr	r1, [r3, #12]
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	015a      	lsls	r2, r3, #5
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	4413      	add	r3, r2
 800a014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a018:	460a      	mov	r2, r1
 800a01a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	791b      	ldrb	r3, [r3, #4]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d128      	bne.n	800a076 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a030:	2b00      	cmp	r3, #0
 800a032:	d110      	bne.n	800a056 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	015a      	lsls	r2, r3, #5
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	4413      	add	r3, r2
 800a03c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	69ba      	ldr	r2, [r7, #24]
 800a044:	0151      	lsls	r1, r2, #5
 800a046:	69fa      	ldr	r2, [r7, #28]
 800a048:	440a      	add	r2, r1
 800a04a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a04e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a052:	6013      	str	r3, [r2, #0]
 800a054:	e00f      	b.n	800a076 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	015a      	lsls	r2, r3, #5
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	4413      	add	r3, r2
 800a05e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	69ba      	ldr	r2, [r7, #24]
 800a066:	0151      	lsls	r1, r2, #5
 800a068:	69fa      	ldr	r2, [r7, #28]
 800a06a:	440a      	add	r2, r1
 800a06c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a074:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	015a      	lsls	r2, r3, #5
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	4413      	add	r3, r2
 800a07e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	69ba      	ldr	r2, [r7, #24]
 800a086:	0151      	lsls	r1, r2, #5
 800a088:	69fa      	ldr	r2, [r7, #28]
 800a08a:	440a      	add	r2, r1
 800a08c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a090:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a094:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a096:	2300      	movs	r3, #0
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3720      	adds	r7, #32
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	fff80000 	.word	0xfff80000
 800a0a4:	e007ffff 	.word	0xe007ffff
 800a0a8:	1ff80000 	.word	0x1ff80000

0800a0ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b087      	sub	sp, #28
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	785b      	ldrb	r3, [r3, #1]
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d14a      	bne.n	800a160 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	015a      	lsls	r2, r3, #5
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0e2:	f040 8086 	bne.w	800a1f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	015a      	lsls	r2, r3, #5
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	7812      	ldrb	r2, [r2, #0]
 800a0fa:	0151      	lsls	r1, r2, #5
 800a0fc:	693a      	ldr	r2, [r7, #16]
 800a0fe:	440a      	add	r2, r1
 800a100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a104:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a108:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	015a      	lsls	r2, r3, #5
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	4413      	add	r3, r2
 800a114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	683a      	ldr	r2, [r7, #0]
 800a11c:	7812      	ldrb	r2, [r2, #0]
 800a11e:	0151      	lsls	r1, r2, #5
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	440a      	add	r2, r1
 800a124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a128:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a12c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	3301      	adds	r3, #1
 800a132:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f242 7210 	movw	r2, #10000	; 0x2710
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d902      	bls.n	800a144 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	75fb      	strb	r3, [r7, #23]
          break;
 800a142:	e056      	b.n	800a1f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	015a      	lsls	r2, r3, #5
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	4413      	add	r3, r2
 800a14e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a15c:	d0e7      	beq.n	800a12e <USB_EPStopXfer+0x82>
 800a15e:	e048      	b.n	800a1f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	015a      	lsls	r2, r3, #5
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	4413      	add	r3, r2
 800a16a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a178:	d13b      	bne.n	800a1f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	015a      	lsls	r2, r3, #5
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	4413      	add	r3, r2
 800a184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	683a      	ldr	r2, [r7, #0]
 800a18c:	7812      	ldrb	r2, [r2, #0]
 800a18e:	0151      	lsls	r1, r2, #5
 800a190:	693a      	ldr	r2, [r7, #16]
 800a192:	440a      	add	r2, r1
 800a194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a198:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a19c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	015a      	lsls	r2, r3, #5
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	4413      	add	r3, r2
 800a1a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	683a      	ldr	r2, [r7, #0]
 800a1b0:	7812      	ldrb	r2, [r2, #0]
 800a1b2:	0151      	lsls	r1, r2, #5
 800a1b4:	693a      	ldr	r2, [r7, #16]
 800a1b6:	440a      	add	r2, r1
 800a1b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a1c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f242 7210 	movw	r2, #10000	; 0x2710
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d902      	bls.n	800a1d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	75fb      	strb	r3, [r7, #23]
          break;
 800a1d6:	e00c      	b.n	800a1f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	015a      	lsls	r2, r3, #5
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1f0:	d0e7      	beq.n	800a1c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a1f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	371c      	adds	r7, #28
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a200:	b480      	push	{r7}
 800a202:	b089      	sub	sp, #36	; 0x24
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	4611      	mov	r1, r2
 800a20c:	461a      	mov	r2, r3
 800a20e:	460b      	mov	r3, r1
 800a210:	71fb      	strb	r3, [r7, #7]
 800a212:	4613      	mov	r3, r2
 800a214:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a21e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a222:	2b00      	cmp	r3, #0
 800a224:	d123      	bne.n	800a26e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a226:	88bb      	ldrh	r3, [r7, #4]
 800a228:	3303      	adds	r3, #3
 800a22a:	089b      	lsrs	r3, r3, #2
 800a22c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a22e:	2300      	movs	r3, #0
 800a230:	61bb      	str	r3, [r7, #24]
 800a232:	e018      	b.n	800a266 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a234:	79fb      	ldrb	r3, [r7, #7]
 800a236:	031a      	lsls	r2, r3, #12
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	4413      	add	r3, r2
 800a23c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a240:	461a      	mov	r2, r3
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	3301      	adds	r3, #1
 800a24c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	3301      	adds	r3, #1
 800a252:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	3301      	adds	r3, #1
 800a258:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	3301      	adds	r3, #1
 800a25e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	3301      	adds	r3, #1
 800a264:	61bb      	str	r3, [r7, #24]
 800a266:	69ba      	ldr	r2, [r7, #24]
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d3e2      	bcc.n	800a234 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3724      	adds	r7, #36	; 0x24
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b08b      	sub	sp, #44	; 0x2c
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	4613      	mov	r3, r2
 800a288:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a292:	88fb      	ldrh	r3, [r7, #6]
 800a294:	089b      	lsrs	r3, r3, #2
 800a296:	b29b      	uxth	r3, r3
 800a298:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a29a:	88fb      	ldrh	r3, [r7, #6]
 800a29c:	f003 0303 	and.w	r3, r3, #3
 800a2a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	623b      	str	r3, [r7, #32]
 800a2a6:	e014      	b.n	800a2d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b2:	601a      	str	r2, [r3, #0]
    pDest++;
 800a2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2bc:	3301      	adds	r3, #1
 800a2be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a2cc:	6a3b      	ldr	r3, [r7, #32]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	623b      	str	r3, [r7, #32]
 800a2d2:	6a3a      	ldr	r2, [r7, #32]
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d3e6      	bcc.n	800a2a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a2da:	8bfb      	ldrh	r3, [r7, #30]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d01e      	beq.n	800a31e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	f107 0310 	add.w	r3, r7, #16
 800a2f0:	6812      	ldr	r2, [r2, #0]
 800a2f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	6a3b      	ldr	r3, [r7, #32]
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	00db      	lsls	r3, r3, #3
 800a2fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a300:	b2da      	uxtb	r2, r3
 800a302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a304:	701a      	strb	r2, [r3, #0]
      i++;
 800a306:	6a3b      	ldr	r3, [r7, #32]
 800a308:	3301      	adds	r3, #1
 800a30a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30e:	3301      	adds	r3, #1
 800a310:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a312:	8bfb      	ldrh	r3, [r7, #30]
 800a314:	3b01      	subs	r3, #1
 800a316:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a318:	8bfb      	ldrh	r3, [r7, #30]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1ea      	bne.n	800a2f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a320:	4618      	mov	r0, r3
 800a322:	372c      	adds	r7, #44	; 0x2c
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	785b      	ldrb	r3, [r3, #1]
 800a344:	2b01      	cmp	r3, #1
 800a346:	d12c      	bne.n	800a3a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	015a      	lsls	r2, r3, #5
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	4413      	add	r3, r2
 800a350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	db12      	blt.n	800a380 <USB_EPSetStall+0x54>
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00f      	beq.n	800a380 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	015a      	lsls	r2, r3, #5
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	4413      	add	r3, r2
 800a368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	68ba      	ldr	r2, [r7, #8]
 800a370:	0151      	lsls	r1, r2, #5
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	440a      	add	r2, r1
 800a376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a37a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a37e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	015a      	lsls	r2, r3, #5
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	4413      	add	r3, r2
 800a388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68ba      	ldr	r2, [r7, #8]
 800a390:	0151      	lsls	r1, r2, #5
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	440a      	add	r2, r1
 800a396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a39a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a39e:	6013      	str	r3, [r2, #0]
 800a3a0:	e02b      	b.n	800a3fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	015a      	lsls	r2, r3, #5
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	db12      	blt.n	800a3da <USB_EPSetStall+0xae>
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00f      	beq.n	800a3da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	015a      	lsls	r2, r3, #5
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	68ba      	ldr	r2, [r7, #8]
 800a3ca:	0151      	lsls	r1, r2, #5
 800a3cc:	68fa      	ldr	r2, [r7, #12]
 800a3ce:	440a      	add	r2, r1
 800a3d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a3d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	015a      	lsls	r2, r3, #5
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	68ba      	ldr	r2, [r7, #8]
 800a3ea:	0151      	lsls	r1, r2, #5
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	440a      	add	r2, r1
 800a3f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a3f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3714      	adds	r7, #20
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	785b      	ldrb	r3, [r3, #1]
 800a420:	2b01      	cmp	r3, #1
 800a422:	d128      	bne.n	800a476 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	015a      	lsls	r2, r3, #5
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	4413      	add	r3, r2
 800a42c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68ba      	ldr	r2, [r7, #8]
 800a434:	0151      	lsls	r1, r2, #5
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	440a      	add	r2, r1
 800a43a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a43e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a442:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	791b      	ldrb	r3, [r3, #4]
 800a448:	2b03      	cmp	r3, #3
 800a44a:	d003      	beq.n	800a454 <USB_EPClearStall+0x4c>
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	791b      	ldrb	r3, [r3, #4]
 800a450:	2b02      	cmp	r3, #2
 800a452:	d138      	bne.n	800a4c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	015a      	lsls	r2, r3, #5
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	4413      	add	r3, r2
 800a45c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68ba      	ldr	r2, [r7, #8]
 800a464:	0151      	lsls	r1, r2, #5
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	440a      	add	r2, r1
 800a46a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a46e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a472:	6013      	str	r3, [r2, #0]
 800a474:	e027      	b.n	800a4c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	015a      	lsls	r2, r3, #5
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	4413      	add	r3, r2
 800a47e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	68ba      	ldr	r2, [r7, #8]
 800a486:	0151      	lsls	r1, r2, #5
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	440a      	add	r2, r1
 800a48c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a490:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a494:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	791b      	ldrb	r3, [r3, #4]
 800a49a:	2b03      	cmp	r3, #3
 800a49c:	d003      	beq.n	800a4a6 <USB_EPClearStall+0x9e>
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	791b      	ldrb	r3, [r3, #4]
 800a4a2:	2b02      	cmp	r3, #2
 800a4a4:	d10f      	bne.n	800a4c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	015a      	lsls	r2, r3, #5
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	0151      	lsls	r1, r2, #5
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	440a      	add	r2, r1
 800a4bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3714      	adds	r7, #20
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	460b      	mov	r3, r1
 800a4de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a4f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	78fb      	ldrb	r3, [r7, #3]
 800a502:	011b      	lsls	r3, r3, #4
 800a504:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a508:	68f9      	ldr	r1, [r7, #12]
 800a50a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a50e:	4313      	orrs	r3, r2
 800a510:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	3714      	adds	r7, #20
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a53a:	f023 0303 	bic.w	r3, r3, #3
 800a53e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a54e:	f023 0302 	bic.w	r3, r3, #2
 800a552:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3714      	adds	r7, #20
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr

0800a562 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a562:	b480      	push	{r7}
 800a564:	b085      	sub	sp, #20
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a57c:	f023 0303 	bic.w	r3, r3, #3
 800a580:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a590:	f043 0302 	orr.w	r3, r3, #2
 800a594:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a596:	2300      	movs	r3, #0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3714      	adds	r7, #20
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	695b      	ldr	r3, [r3, #20]
 800a5b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	68fa      	ldr	r2, [r7, #12]
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3714      	adds	r7, #20
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr

0800a5ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a5ca:	b480      	push	{r7}
 800a5cc:	b085      	sub	sp, #20
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5dc:	699b      	ldr	r3, [r3, #24]
 800a5de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5e6:	69db      	ldr	r3, [r3, #28]
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	4013      	ands	r3, r2
 800a5ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	0c1b      	lsrs	r3, r3, #16
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3714      	adds	r7, #20
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr

0800a5fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a5fe:	b480      	push	{r7}
 800a600:	b085      	sub	sp, #20
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a610:	699b      	ldr	r3, [r3, #24]
 800a612:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a61a:	69db      	ldr	r3, [r3, #28]
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	4013      	ands	r3, r2
 800a620:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	b29b      	uxth	r3, r3
}
 800a626:	4618      	mov	r0, r3
 800a628:	3714      	adds	r7, #20
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr

0800a632 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a632:	b480      	push	{r7}
 800a634:	b085      	sub	sp, #20
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	460b      	mov	r3, r1
 800a63c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a642:	78fb      	ldrb	r3, [r7, #3]
 800a644:	015a      	lsls	r2, r3, #5
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	4413      	add	r3, r2
 800a64a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a658:	695b      	ldr	r3, [r3, #20]
 800a65a:	68ba      	ldr	r2, [r7, #8]
 800a65c:	4013      	ands	r3, r2
 800a65e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a660:	68bb      	ldr	r3, [r7, #8]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3714      	adds	r7, #20
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a66e:	b480      	push	{r7}
 800a670:	b087      	sub	sp, #28
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	460b      	mov	r3, r1
 800a678:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a68e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a690:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a692:	78fb      	ldrb	r3, [r7, #3]
 800a694:	f003 030f 	and.w	r3, r3, #15
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	fa22 f303 	lsr.w	r3, r2, r3
 800a69e:	01db      	lsls	r3, r3, #7
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	693a      	ldr	r2, [r7, #16]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a6a8:	78fb      	ldrb	r3, [r7, #3]
 800a6aa:	015a      	lsls	r2, r3, #5
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	693a      	ldr	r2, [r7, #16]
 800a6b8:	4013      	ands	r3, r2
 800a6ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a6bc:	68bb      	ldr	r3, [r7, #8]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	371c      	adds	r7, #28
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	b083      	sub	sp, #12
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	695b      	ldr	r3, [r3, #20]
 800a6d6:	f003 0301 	and.w	r3, r3, #1
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	370c      	adds	r7, #12
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
	...

0800a6e8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a702:	4619      	mov	r1, r3
 800a704:	4b09      	ldr	r3, [pc, #36]	; (800a72c <USB_ActivateSetup+0x44>)
 800a706:	4013      	ands	r3, r2
 800a708:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a71c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	3714      	adds	r7, #20
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr
 800a72c:	fffff800 	.word	0xfffff800

0800a730 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a730:	b480      	push	{r7}
 800a732:	b087      	sub	sp, #28
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	460b      	mov	r3, r1
 800a73a:	607a      	str	r2, [r7, #4]
 800a73c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	333c      	adds	r3, #60	; 0x3c
 800a746:	3304      	adds	r3, #4
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	4a26      	ldr	r2, [pc, #152]	; (800a7e8 <USB_EP0_OutStart+0xb8>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d90a      	bls.n	800a76a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a764:	d101      	bne.n	800a76a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a766:	2300      	movs	r3, #0
 800a768:	e037      	b.n	800a7da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a770:	461a      	mov	r2, r3
 800a772:	2300      	movs	r3, #0
 800a774:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a77c:	691b      	ldr	r3, [r3, #16]
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a784:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a788:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	697a      	ldr	r2, [r7, #20]
 800a794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a798:	f043 0318 	orr.w	r3, r3, #24
 800a79c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	697a      	ldr	r2, [r7, #20]
 800a7a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a7b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a7b2:	7afb      	ldrb	r3, [r7, #11]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d10f      	bne.n	800a7d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7be:	461a      	mov	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	697a      	ldr	r2, [r7, #20]
 800a7ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a7d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a7d8:	2300      	movs	r3, #0
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	371c      	adds	r7, #28
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	4f54300a 	.word	0x4f54300a

0800a7ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	4a13      	ldr	r2, [pc, #76]	; (800a850 <USB_CoreReset+0x64>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d901      	bls.n	800a80a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a806:	2303      	movs	r3, #3
 800a808:	e01b      	b.n	800a842 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	691b      	ldr	r3, [r3, #16]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	daf2      	bge.n	800a7f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a812:	2300      	movs	r3, #0
 800a814:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	f043 0201 	orr.w	r2, r3, #1
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	3301      	adds	r3, #1
 800a826:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	4a09      	ldr	r2, [pc, #36]	; (800a850 <USB_CoreReset+0x64>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d901      	bls.n	800a834 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a830:	2303      	movs	r3, #3
 800a832:	e006      	b.n	800a842 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	691b      	ldr	r3, [r3, #16]
 800a838:	f003 0301 	and.w	r3, r3, #1
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d0f0      	beq.n	800a822 <USB_CoreReset+0x36>

  return HAL_OK;
 800a840:	2300      	movs	r3, #0
}
 800a842:	4618      	mov	r0, r3
 800a844:	3714      	adds	r7, #20
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	00030d40 	.word	0x00030d40

0800a854 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	460b      	mov	r3, r1
 800a85e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a860:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a864:	f002 fdb4 	bl	800d3d0 <USBD_static_malloc>
 800a868:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d109      	bne.n	800a884 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	32b0      	adds	r2, #176	; 0xb0
 800a87a:	2100      	movs	r1, #0
 800a87c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a880:	2302      	movs	r3, #2
 800a882:	e0d4      	b.n	800aa2e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a884:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a888:	2100      	movs	r1, #0
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f002 ff5c 	bl	800d748 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	32b0      	adds	r2, #176	; 0xb0
 800a89a:	68f9      	ldr	r1, [r7, #12]
 800a89c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	32b0      	adds	r2, #176	; 0xb0
 800a8aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	7c1b      	ldrb	r3, [r3, #16]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d138      	bne.n	800a92e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a8bc:	4b5e      	ldr	r3, [pc, #376]	; (800aa38 <USBD_CDC_Init+0x1e4>)
 800a8be:	7819      	ldrb	r1, [r3, #0]
 800a8c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8c4:	2202      	movs	r2, #2
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f002 fc5f 	bl	800d18a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a8cc:	4b5a      	ldr	r3, [pc, #360]	; (800aa38 <USBD_CDC_Init+0x1e4>)
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	f003 020f 	and.w	r2, r3, #15
 800a8d4:	6879      	ldr	r1, [r7, #4]
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	4413      	add	r3, r2
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	440b      	add	r3, r1
 800a8e0:	3324      	adds	r3, #36	; 0x24
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a8e6:	4b55      	ldr	r3, [pc, #340]	; (800aa3c <USBD_CDC_Init+0x1e8>)
 800a8e8:	7819      	ldrb	r1, [r3, #0]
 800a8ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8ee:	2202      	movs	r2, #2
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f002 fc4a 	bl	800d18a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a8f6:	4b51      	ldr	r3, [pc, #324]	; (800aa3c <USBD_CDC_Init+0x1e8>)
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	f003 020f 	and.w	r2, r3, #15
 800a8fe:	6879      	ldr	r1, [r7, #4]
 800a900:	4613      	mov	r3, r2
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	4413      	add	r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	440b      	add	r3, r1
 800a90a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a90e:	2201      	movs	r2, #1
 800a910:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a912:	4b4b      	ldr	r3, [pc, #300]	; (800aa40 <USBD_CDC_Init+0x1ec>)
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	f003 020f 	and.w	r2, r3, #15
 800a91a:	6879      	ldr	r1, [r7, #4]
 800a91c:	4613      	mov	r3, r2
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	4413      	add	r3, r2
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	440b      	add	r3, r1
 800a926:	3326      	adds	r3, #38	; 0x26
 800a928:	2210      	movs	r2, #16
 800a92a:	801a      	strh	r2, [r3, #0]
 800a92c:	e035      	b.n	800a99a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a92e:	4b42      	ldr	r3, [pc, #264]	; (800aa38 <USBD_CDC_Init+0x1e4>)
 800a930:	7819      	ldrb	r1, [r3, #0]
 800a932:	2340      	movs	r3, #64	; 0x40
 800a934:	2202      	movs	r2, #2
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f002 fc27 	bl	800d18a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a93c:	4b3e      	ldr	r3, [pc, #248]	; (800aa38 <USBD_CDC_Init+0x1e4>)
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	f003 020f 	and.w	r2, r3, #15
 800a944:	6879      	ldr	r1, [r7, #4]
 800a946:	4613      	mov	r3, r2
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	4413      	add	r3, r2
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	440b      	add	r3, r1
 800a950:	3324      	adds	r3, #36	; 0x24
 800a952:	2201      	movs	r2, #1
 800a954:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a956:	4b39      	ldr	r3, [pc, #228]	; (800aa3c <USBD_CDC_Init+0x1e8>)
 800a958:	7819      	ldrb	r1, [r3, #0]
 800a95a:	2340      	movs	r3, #64	; 0x40
 800a95c:	2202      	movs	r2, #2
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f002 fc13 	bl	800d18a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a964:	4b35      	ldr	r3, [pc, #212]	; (800aa3c <USBD_CDC_Init+0x1e8>)
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	f003 020f 	and.w	r2, r3, #15
 800a96c:	6879      	ldr	r1, [r7, #4]
 800a96e:	4613      	mov	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	4413      	add	r3, r2
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	440b      	add	r3, r1
 800a978:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a97c:	2201      	movs	r2, #1
 800a97e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a980:	4b2f      	ldr	r3, [pc, #188]	; (800aa40 <USBD_CDC_Init+0x1ec>)
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	f003 020f 	and.w	r2, r3, #15
 800a988:	6879      	ldr	r1, [r7, #4]
 800a98a:	4613      	mov	r3, r2
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	4413      	add	r3, r2
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	440b      	add	r3, r1
 800a994:	3326      	adds	r3, #38	; 0x26
 800a996:	2210      	movs	r2, #16
 800a998:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a99a:	4b29      	ldr	r3, [pc, #164]	; (800aa40 <USBD_CDC_Init+0x1ec>)
 800a99c:	7819      	ldrb	r1, [r3, #0]
 800a99e:	2308      	movs	r3, #8
 800a9a0:	2203      	movs	r2, #3
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f002 fbf1 	bl	800d18a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a9a8:	4b25      	ldr	r3, [pc, #148]	; (800aa40 <USBD_CDC_Init+0x1ec>)
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	f003 020f 	and.w	r2, r3, #15
 800a9b0:	6879      	ldr	r1, [r7, #4]
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4413      	add	r3, r2
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	440b      	add	r3, r1
 800a9bc:	3324      	adds	r3, #36	; 0x24
 800a9be:	2201      	movs	r2, #1
 800a9c0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	33b0      	adds	r3, #176	; 0xb0
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	4413      	add	r3, r2
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d101      	bne.n	800a9fc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a9f8:	2302      	movs	r3, #2
 800a9fa:	e018      	b.n	800aa2e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	7c1b      	ldrb	r3, [r3, #16]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d10a      	bne.n	800aa1a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa04:	4b0d      	ldr	r3, [pc, #52]	; (800aa3c <USBD_CDC_Init+0x1e8>)
 800aa06:	7819      	ldrb	r1, [r3, #0]
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f002 fca8 	bl	800d368 <USBD_LL_PrepareReceive>
 800aa18:	e008      	b.n	800aa2c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa1a:	4b08      	ldr	r3, [pc, #32]	; (800aa3c <USBD_CDC_Init+0x1e8>)
 800aa1c:	7819      	ldrb	r1, [r3, #0]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa24:	2340      	movs	r3, #64	; 0x40
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f002 fc9e 	bl	800d368 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	2400009f 	.word	0x2400009f
 800aa3c:	240000a0 	.word	0x240000a0
 800aa40:	240000a1 	.word	0x240000a1

0800aa44 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800aa50:	4b3a      	ldr	r3, [pc, #232]	; (800ab3c <USBD_CDC_DeInit+0xf8>)
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	4619      	mov	r1, r3
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f002 fbbd 	bl	800d1d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800aa5c:	4b37      	ldr	r3, [pc, #220]	; (800ab3c <USBD_CDC_DeInit+0xf8>)
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	f003 020f 	and.w	r2, r3, #15
 800aa64:	6879      	ldr	r1, [r7, #4]
 800aa66:	4613      	mov	r3, r2
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	440b      	add	r3, r1
 800aa70:	3324      	adds	r3, #36	; 0x24
 800aa72:	2200      	movs	r2, #0
 800aa74:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800aa76:	4b32      	ldr	r3, [pc, #200]	; (800ab40 <USBD_CDC_DeInit+0xfc>)
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f002 fbaa 	bl	800d1d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800aa82:	4b2f      	ldr	r3, [pc, #188]	; (800ab40 <USBD_CDC_DeInit+0xfc>)
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	f003 020f 	and.w	r2, r3, #15
 800aa8a:	6879      	ldr	r1, [r7, #4]
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	4413      	add	r3, r2
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	440b      	add	r3, r1
 800aa96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800aa9e:	4b29      	ldr	r3, [pc, #164]	; (800ab44 <USBD_CDC_DeInit+0x100>)
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f002 fb96 	bl	800d1d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800aaaa:	4b26      	ldr	r3, [pc, #152]	; (800ab44 <USBD_CDC_DeInit+0x100>)
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	f003 020f 	and.w	r2, r3, #15
 800aab2:	6879      	ldr	r1, [r7, #4]
 800aab4:	4613      	mov	r3, r2
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	4413      	add	r3, r2
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	440b      	add	r3, r1
 800aabe:	3324      	adds	r3, #36	; 0x24
 800aac0:	2200      	movs	r2, #0
 800aac2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800aac4:	4b1f      	ldr	r3, [pc, #124]	; (800ab44 <USBD_CDC_DeInit+0x100>)
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	f003 020f 	and.w	r2, r3, #15
 800aacc:	6879      	ldr	r1, [r7, #4]
 800aace:	4613      	mov	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4413      	add	r3, r2
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	440b      	add	r3, r1
 800aad8:	3326      	adds	r3, #38	; 0x26
 800aada:	2200      	movs	r2, #0
 800aadc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	32b0      	adds	r2, #176	; 0xb0
 800aae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d01f      	beq.n	800ab30 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	33b0      	adds	r3, #176	; 0xb0
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	4413      	add	r3, r2
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	32b0      	adds	r2, #176	; 0xb0
 800ab0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab12:	4618      	mov	r0, r3
 800ab14:	f002 fc6a 	bl	800d3ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	32b0      	adds	r2, #176	; 0xb0
 800ab22:	2100      	movs	r1, #0
 800ab24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3708      	adds	r7, #8
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	2400009f 	.word	0x2400009f
 800ab40:	240000a0 	.word	0x240000a0
 800ab44:	240000a1 	.word	0x240000a1

0800ab48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b086      	sub	sp, #24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	32b0      	adds	r2, #176	; 0xb0
 800ab5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab60:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ab62:	2300      	movs	r3, #0
 800ab64:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ab66:	2300      	movs	r3, #0
 800ab68:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d101      	bne.n	800ab78 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ab74:	2303      	movs	r3, #3
 800ab76:	e0bf      	b.n	800acf8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d050      	beq.n	800ac26 <USBD_CDC_Setup+0xde>
 800ab84:	2b20      	cmp	r3, #32
 800ab86:	f040 80af 	bne.w	800ace8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	88db      	ldrh	r3, [r3, #6]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d03a      	beq.n	800ac08 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	b25b      	sxtb	r3, r3
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	da1b      	bge.n	800abd4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	33b0      	adds	r3, #176	; 0xb0
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	4413      	add	r3, r2
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	683a      	ldr	r2, [r7, #0]
 800abb0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800abb2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800abb4:	683a      	ldr	r2, [r7, #0]
 800abb6:	88d2      	ldrh	r2, [r2, #6]
 800abb8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	88db      	ldrh	r3, [r3, #6]
 800abbe:	2b07      	cmp	r3, #7
 800abc0:	bf28      	it	cs
 800abc2:	2307      	movcs	r3, #7
 800abc4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	89fa      	ldrh	r2, [r7, #14]
 800abca:	4619      	mov	r1, r3
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f001 fdcf 	bl	800c770 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800abd2:	e090      	b.n	800acf6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	785a      	ldrb	r2, [r3, #1]
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	88db      	ldrh	r3, [r3, #6]
 800abe2:	2b3f      	cmp	r3, #63	; 0x3f
 800abe4:	d803      	bhi.n	800abee <USBD_CDC_Setup+0xa6>
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	88db      	ldrh	r3, [r3, #6]
 800abea:	b2da      	uxtb	r2, r3
 800abec:	e000      	b.n	800abf0 <USBD_CDC_Setup+0xa8>
 800abee:	2240      	movs	r2, #64	; 0x40
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800abf6:	6939      	ldr	r1, [r7, #16]
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800abfe:	461a      	mov	r2, r3
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f001 fde1 	bl	800c7c8 <USBD_CtlPrepareRx>
      break;
 800ac06:	e076      	b.n	800acf6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	33b0      	adds	r3, #176	; 0xb0
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	4413      	add	r3, r2
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	683a      	ldr	r2, [r7, #0]
 800ac1c:	7850      	ldrb	r0, [r2, #1]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	6839      	ldr	r1, [r7, #0]
 800ac22:	4798      	blx	r3
      break;
 800ac24:	e067      	b.n	800acf6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	785b      	ldrb	r3, [r3, #1]
 800ac2a:	2b0b      	cmp	r3, #11
 800ac2c:	d851      	bhi.n	800acd2 <USBD_CDC_Setup+0x18a>
 800ac2e:	a201      	add	r2, pc, #4	; (adr r2, 800ac34 <USBD_CDC_Setup+0xec>)
 800ac30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac34:	0800ac65 	.word	0x0800ac65
 800ac38:	0800ace1 	.word	0x0800ace1
 800ac3c:	0800acd3 	.word	0x0800acd3
 800ac40:	0800acd3 	.word	0x0800acd3
 800ac44:	0800acd3 	.word	0x0800acd3
 800ac48:	0800acd3 	.word	0x0800acd3
 800ac4c:	0800acd3 	.word	0x0800acd3
 800ac50:	0800acd3 	.word	0x0800acd3
 800ac54:	0800acd3 	.word	0x0800acd3
 800ac58:	0800acd3 	.word	0x0800acd3
 800ac5c:	0800ac8f 	.word	0x0800ac8f
 800ac60:	0800acb9 	.word	0x0800acb9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	2b03      	cmp	r3, #3
 800ac6e:	d107      	bne.n	800ac80 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ac70:	f107 030a 	add.w	r3, r7, #10
 800ac74:	2202      	movs	r2, #2
 800ac76:	4619      	mov	r1, r3
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f001 fd79 	bl	800c770 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac7e:	e032      	b.n	800ace6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ac80:	6839      	ldr	r1, [r7, #0]
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f001 fd03 	bl	800c68e <USBD_CtlError>
            ret = USBD_FAIL;
 800ac88:	2303      	movs	r3, #3
 800ac8a:	75fb      	strb	r3, [r7, #23]
          break;
 800ac8c:	e02b      	b.n	800ace6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	2b03      	cmp	r3, #3
 800ac98:	d107      	bne.n	800acaa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ac9a:	f107 030d 	add.w	r3, r7, #13
 800ac9e:	2201      	movs	r2, #1
 800aca0:	4619      	mov	r1, r3
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f001 fd64 	bl	800c770 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aca8:	e01d      	b.n	800ace6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800acaa:	6839      	ldr	r1, [r7, #0]
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f001 fcee 	bl	800c68e <USBD_CtlError>
            ret = USBD_FAIL;
 800acb2:	2303      	movs	r3, #3
 800acb4:	75fb      	strb	r3, [r7, #23]
          break;
 800acb6:	e016      	b.n	800ace6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	2b03      	cmp	r3, #3
 800acc2:	d00f      	beq.n	800ace4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800acc4:	6839      	ldr	r1, [r7, #0]
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f001 fce1 	bl	800c68e <USBD_CtlError>
            ret = USBD_FAIL;
 800accc:	2303      	movs	r3, #3
 800acce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800acd0:	e008      	b.n	800ace4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800acd2:	6839      	ldr	r1, [r7, #0]
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f001 fcda 	bl	800c68e <USBD_CtlError>
          ret = USBD_FAIL;
 800acda:	2303      	movs	r3, #3
 800acdc:	75fb      	strb	r3, [r7, #23]
          break;
 800acde:	e002      	b.n	800ace6 <USBD_CDC_Setup+0x19e>
          break;
 800ace0:	bf00      	nop
 800ace2:	e008      	b.n	800acf6 <USBD_CDC_Setup+0x1ae>
          break;
 800ace4:	bf00      	nop
      }
      break;
 800ace6:	e006      	b.n	800acf6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ace8:	6839      	ldr	r1, [r7, #0]
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f001 fccf 	bl	800c68e <USBD_CtlError>
      ret = USBD_FAIL;
 800acf0:	2303      	movs	r3, #3
 800acf2:	75fb      	strb	r3, [r7, #23]
      break;
 800acf4:	bf00      	nop
  }

  return (uint8_t)ret;
 800acf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3718      	adds	r7, #24
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	460b      	mov	r3, r1
 800ad0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	32b0      	adds	r2, #176	; 0xb0
 800ad1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d101      	bne.n	800ad2a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ad26:	2303      	movs	r3, #3
 800ad28:	e065      	b.n	800adf6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	32b0      	adds	r2, #176	; 0xb0
 800ad34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ad3a:	78fb      	ldrb	r3, [r7, #3]
 800ad3c:	f003 020f 	and.w	r2, r3, #15
 800ad40:	6879      	ldr	r1, [r7, #4]
 800ad42:	4613      	mov	r3, r2
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	4413      	add	r3, r2
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	440b      	add	r3, r1
 800ad4c:	3318      	adds	r3, #24
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d02f      	beq.n	800adb4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ad54:	78fb      	ldrb	r3, [r7, #3]
 800ad56:	f003 020f 	and.w	r2, r3, #15
 800ad5a:	6879      	ldr	r1, [r7, #4]
 800ad5c:	4613      	mov	r3, r2
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	4413      	add	r3, r2
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	440b      	add	r3, r1
 800ad66:	3318      	adds	r3, #24
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	78fb      	ldrb	r3, [r7, #3]
 800ad6c:	f003 010f 	and.w	r1, r3, #15
 800ad70:	68f8      	ldr	r0, [r7, #12]
 800ad72:	460b      	mov	r3, r1
 800ad74:	00db      	lsls	r3, r3, #3
 800ad76:	440b      	add	r3, r1
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	4403      	add	r3, r0
 800ad7c:	3344      	adds	r3, #68	; 0x44
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	fbb2 f1f3 	udiv	r1, r2, r3
 800ad84:	fb01 f303 	mul.w	r3, r1, r3
 800ad88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d112      	bne.n	800adb4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ad8e:	78fb      	ldrb	r3, [r7, #3]
 800ad90:	f003 020f 	and.w	r2, r3, #15
 800ad94:	6879      	ldr	r1, [r7, #4]
 800ad96:	4613      	mov	r3, r2
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	4413      	add	r3, r2
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	440b      	add	r3, r1
 800ada0:	3318      	adds	r3, #24
 800ada2:	2200      	movs	r2, #0
 800ada4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ada6:	78f9      	ldrb	r1, [r7, #3]
 800ada8:	2300      	movs	r3, #0
 800adaa:	2200      	movs	r2, #0
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f002 faba 	bl	800d326 <USBD_LL_Transmit>
 800adb2:	e01f      	b.n	800adf4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	33b0      	adds	r3, #176	; 0xb0
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	4413      	add	r3, r2
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	691b      	ldr	r3, [r3, #16]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d010      	beq.n	800adf4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	33b0      	adds	r3, #176	; 0xb0
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4413      	add	r3, r2
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	691b      	ldr	r3, [r3, #16]
 800ade4:	68ba      	ldr	r2, [r7, #8]
 800ade6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800adf0:	78fa      	ldrb	r2, [r7, #3]
 800adf2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800adf4:	2300      	movs	r3, #0
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b084      	sub	sp, #16
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
 800ae06:	460b      	mov	r3, r1
 800ae08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	32b0      	adds	r2, #176	; 0xb0
 800ae14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae18:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	32b0      	adds	r2, #176	; 0xb0
 800ae24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d101      	bne.n	800ae30 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ae2c:	2303      	movs	r3, #3
 800ae2e:	e01a      	b.n	800ae66 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ae30:	78fb      	ldrb	r3, [r7, #3]
 800ae32:	4619      	mov	r1, r3
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f002 fab8 	bl	800d3aa <USBD_LL_GetRxDataSize>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	33b0      	adds	r3, #176	; 0xb0
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	4413      	add	r3, r2
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ae5a:	68fa      	ldr	r2, [r7, #12]
 800ae5c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ae60:	4611      	mov	r1, r2
 800ae62:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b084      	sub	sp, #16
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	32b0      	adds	r2, #176	; 0xb0
 800ae80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d101      	bne.n	800ae90 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ae8c:	2303      	movs	r3, #3
 800ae8e:	e025      	b.n	800aedc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	33b0      	adds	r3, #176	; 0xb0
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	4413      	add	r3, r2
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d01a      	beq.n	800aeda <USBD_CDC_EP0_RxReady+0x6c>
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aeaa:	2bff      	cmp	r3, #255	; 0xff
 800aeac:	d015      	beq.n	800aeda <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	33b0      	adds	r3, #176	; 0xb0
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	4413      	add	r3, r2
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	68fa      	ldr	r2, [r7, #12]
 800aec2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800aec6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aece:	b292      	uxth	r2, r2
 800aed0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	22ff      	movs	r2, #255	; 0xff
 800aed6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b086      	sub	sp, #24
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aeec:	2182      	movs	r1, #130	; 0x82
 800aeee:	4818      	ldr	r0, [pc, #96]	; (800af50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aef0:	f000 fd6b 	bl	800b9ca <USBD_GetEpDesc>
 800aef4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aef6:	2101      	movs	r1, #1
 800aef8:	4815      	ldr	r0, [pc, #84]	; (800af50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aefa:	f000 fd66 	bl	800b9ca <USBD_GetEpDesc>
 800aefe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800af00:	2181      	movs	r1, #129	; 0x81
 800af02:	4813      	ldr	r0, [pc, #76]	; (800af50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800af04:	f000 fd61 	bl	800b9ca <USBD_GetEpDesc>
 800af08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d002      	beq.n	800af16 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	2210      	movs	r2, #16
 800af14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d006      	beq.n	800af2a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	2200      	movs	r2, #0
 800af20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af24:	711a      	strb	r2, [r3, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d006      	beq.n	800af3e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2200      	movs	r2, #0
 800af34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af38:	711a      	strb	r2, [r3, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2243      	movs	r2, #67	; 0x43
 800af42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800af44:	4b02      	ldr	r3, [pc, #8]	; (800af50 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800af46:	4618      	mov	r0, r3
 800af48:	3718      	adds	r7, #24
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	2400005c 	.word	0x2400005c

0800af54 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800af5c:	2182      	movs	r1, #130	; 0x82
 800af5e:	4818      	ldr	r0, [pc, #96]	; (800afc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800af60:	f000 fd33 	bl	800b9ca <USBD_GetEpDesc>
 800af64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800af66:	2101      	movs	r1, #1
 800af68:	4815      	ldr	r0, [pc, #84]	; (800afc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800af6a:	f000 fd2e 	bl	800b9ca <USBD_GetEpDesc>
 800af6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800af70:	2181      	movs	r1, #129	; 0x81
 800af72:	4813      	ldr	r0, [pc, #76]	; (800afc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800af74:	f000 fd29 	bl	800b9ca <USBD_GetEpDesc>
 800af78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d002      	beq.n	800af86 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	2210      	movs	r2, #16
 800af84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d006      	beq.n	800af9a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	2200      	movs	r2, #0
 800af90:	711a      	strb	r2, [r3, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	f042 0202 	orr.w	r2, r2, #2
 800af98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d006      	beq.n	800afae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2200      	movs	r2, #0
 800afa4:	711a      	strb	r2, [r3, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	f042 0202 	orr.w	r2, r2, #2
 800afac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2243      	movs	r2, #67	; 0x43
 800afb2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800afb4:	4b02      	ldr	r3, [pc, #8]	; (800afc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3718      	adds	r7, #24
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	2400005c 	.word	0x2400005c

0800afc4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b086      	sub	sp, #24
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800afcc:	2182      	movs	r1, #130	; 0x82
 800afce:	4818      	ldr	r0, [pc, #96]	; (800b030 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800afd0:	f000 fcfb 	bl	800b9ca <USBD_GetEpDesc>
 800afd4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800afd6:	2101      	movs	r1, #1
 800afd8:	4815      	ldr	r0, [pc, #84]	; (800b030 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800afda:	f000 fcf6 	bl	800b9ca <USBD_GetEpDesc>
 800afde:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800afe0:	2181      	movs	r1, #129	; 0x81
 800afe2:	4813      	ldr	r0, [pc, #76]	; (800b030 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800afe4:	f000 fcf1 	bl	800b9ca <USBD_GetEpDesc>
 800afe8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d002      	beq.n	800aff6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	2210      	movs	r2, #16
 800aff4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d006      	beq.n	800b00a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	2200      	movs	r2, #0
 800b000:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b004:	711a      	strb	r2, [r3, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d006      	beq.n	800b01e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2200      	movs	r2, #0
 800b014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b018:	711a      	strb	r2, [r3, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2243      	movs	r2, #67	; 0x43
 800b022:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b024:	4b02      	ldr	r3, [pc, #8]	; (800b030 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b026:	4618      	mov	r0, r3
 800b028:	3718      	adds	r7, #24
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	2400005c 	.word	0x2400005c

0800b034 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	220a      	movs	r2, #10
 800b040:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b042:	4b03      	ldr	r3, [pc, #12]	; (800b050 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b044:	4618      	mov	r0, r3
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr
 800b050:	24000018 	.word	0x24000018

0800b054 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b064:	2303      	movs	r3, #3
 800b066:	e009      	b.n	800b07c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	33b0      	adds	r3, #176	; 0xb0
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	4413      	add	r3, r2
 800b076:	683a      	ldr	r2, [r7, #0]
 800b078:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b07a:	2300      	movs	r3, #0
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	370c      	adds	r7, #12
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b088:	b480      	push	{r7}
 800b08a:	b087      	sub	sp, #28
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	32b0      	adds	r2, #176	; 0xb0
 800b09e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d101      	bne.n	800b0ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b0aa:	2303      	movs	r3, #3
 800b0ac:	e008      	b.n	800b0c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	68ba      	ldr	r2, [r7, #8]
 800b0b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	371c      	adds	r7, #28
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	32b0      	adds	r2, #176	; 0xb0
 800b0e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d101      	bne.n	800b0f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	e004      	b.n	800b0fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	683a      	ldr	r2, [r7, #0]
 800b0f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3714      	adds	r7, #20
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr
	...

0800b108 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	32b0      	adds	r2, #176	; 0xb0
 800b11a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b11e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b120:	2301      	movs	r3, #1
 800b122:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d101      	bne.n	800b12e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b12a:	2303      	movs	r3, #3
 800b12c:	e025      	b.n	800b17a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b134:	2b00      	cmp	r3, #0
 800b136:	d11f      	bne.n	800b178 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	2201      	movs	r2, #1
 800b13c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b140:	4b10      	ldr	r3, [pc, #64]	; (800b184 <USBD_CDC_TransmitPacket+0x7c>)
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	f003 020f 	and.w	r2, r3, #15
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	4613      	mov	r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	4413      	add	r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	4403      	add	r3, r0
 800b15a:	3318      	adds	r3, #24
 800b15c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b15e:	4b09      	ldr	r3, [pc, #36]	; (800b184 <USBD_CDC_TransmitPacket+0x7c>)
 800b160:	7819      	ldrb	r1, [r3, #0]
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f002 f8d9 	bl	800d326 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b174:	2300      	movs	r3, #0
 800b176:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b178:	7bfb      	ldrb	r3, [r7, #15]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3710      	adds	r7, #16
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	2400009f 	.word	0x2400009f

0800b188 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	32b0      	adds	r2, #176	; 0xb0
 800b19a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b19e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	32b0      	adds	r2, #176	; 0xb0
 800b1aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d101      	bne.n	800b1b6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b1b2:	2303      	movs	r3, #3
 800b1b4:	e018      	b.n	800b1e8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	7c1b      	ldrb	r3, [r3, #16]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d10a      	bne.n	800b1d4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1be:	4b0c      	ldr	r3, [pc, #48]	; (800b1f0 <USBD_CDC_ReceivePacket+0x68>)
 800b1c0:	7819      	ldrb	r1, [r3, #0]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f002 f8cb 	bl	800d368 <USBD_LL_PrepareReceive>
 800b1d2:	e008      	b.n	800b1e6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1d4:	4b06      	ldr	r3, [pc, #24]	; (800b1f0 <USBD_CDC_ReceivePacket+0x68>)
 800b1d6:	7819      	ldrb	r1, [r3, #0]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1de:	2340      	movs	r3, #64	; 0x40
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f002 f8c1 	bl	800d368 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	240000a0 	.word	0x240000a0

0800b1f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b086      	sub	sp, #24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	4613      	mov	r3, r2
 800b200:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10a      	bne.n	800b21e <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800b208:	4817      	ldr	r0, [pc, #92]	; (800b268 <USBD_Init+0x74>)
 800b20a:	f002 f9e7 	bl	800d5dc <printf>
 800b20e:	4817      	ldr	r0, [pc, #92]	; (800b26c <USBD_Init+0x78>)
 800b210:	f002 f9e4 	bl	800d5dc <printf>
 800b214:	200a      	movs	r0, #10
 800b216:	f002 f9f3 	bl	800d600 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b21a:	2303      	movs	r3, #3
 800b21c:	e01f      	b.n	800b25e <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2200      	movs	r2, #0
 800b222:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2200      	movs	r2, #0
 800b232:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d003      	beq.n	800b244 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	68ba      	ldr	r2, [r7, #8]
 800b240:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2201      	movs	r2, #1
 800b248:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	79fa      	ldrb	r2, [r7, #7]
 800b250:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	f001 ff2c 	bl	800d0b0 <USBD_LL_Init>
 800b258:	4603      	mov	r3, r0
 800b25a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b25c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3718      	adds	r7, #24
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	08011f30 	.word	0x08011f30
 800b26c:	08011f38 	.word	0x08011f38

0800b270 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b27a:	2300      	movs	r3, #0
 800b27c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d10a      	bne.n	800b29a <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800b284:	481a      	ldr	r0, [pc, #104]	; (800b2f0 <USBD_RegisterClass+0x80>)
 800b286:	f002 f9a9 	bl	800d5dc <printf>
 800b28a:	481a      	ldr	r0, [pc, #104]	; (800b2f4 <USBD_RegisterClass+0x84>)
 800b28c:	f002 f9a6 	bl	800d5dc <printf>
 800b290:	200a      	movs	r0, #10
 800b292:	f002 f9b5 	bl	800d600 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b296:	2303      	movs	r3, #3
 800b298:	e025      	b.n	800b2e6 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	683a      	ldr	r2, [r7, #0]
 800b29e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	32ae      	adds	r2, #174	; 0xae
 800b2ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00f      	beq.n	800b2d6 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	32ae      	adds	r2, #174	; 0xae
 800b2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c6:	f107 020e 	add.w	r2, r7, #14
 800b2ca:	4610      	mov	r0, r2
 800b2cc:	4798      	blx	r3
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b2dc:	1c5a      	adds	r2, r3, #1
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	08011f30 	.word	0x08011f30
 800b2f4:	08011f50 	.word	0x08011f50

0800b2f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f001 ff27 	bl	800d154 <USBD_LL_Start>
 800b306:	4603      	mov	r3, r0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b318:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	370c      	adds	r7, #12
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr

0800b326 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b326:	b580      	push	{r7, lr}
 800b328:	b084      	sub	sp, #16
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
 800b32e:	460b      	mov	r3, r1
 800b330:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b332:	2300      	movs	r3, #0
 800b334:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d009      	beq.n	800b354 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	78fa      	ldrb	r2, [r7, #3]
 800b34a:	4611      	mov	r1, r2
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	4798      	blx	r3
 800b350:	4603      	mov	r3, r0
 800b352:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b354:	7bfb      	ldrb	r3, [r7, #15]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b35e:	b580      	push	{r7, lr}
 800b360:	b084      	sub	sp, #16
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
 800b366:	460b      	mov	r3, r1
 800b368:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b36a:	2300      	movs	r3, #0
 800b36c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	78fa      	ldrb	r2, [r7, #3]
 800b378:	4611      	mov	r1, r2
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	4798      	blx	r3
 800b37e:	4603      	mov	r3, r0
 800b380:	2b00      	cmp	r3, #0
 800b382:	d001      	beq.n	800b388 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b384:	2303      	movs	r3, #3
 800b386:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b388:	7bfb      	ldrb	r3, [r7, #15]
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3710      	adds	r7, #16
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}

0800b392 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b392:	b580      	push	{r7, lr}
 800b394:	b084      	sub	sp, #16
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
 800b39a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b3a2:	6839      	ldr	r1, [r7, #0]
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f001 f938 	bl	800c61a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b3c6:	f003 031f 	and.w	r3, r3, #31
 800b3ca:	2b02      	cmp	r3, #2
 800b3cc:	d01a      	beq.n	800b404 <USBD_LL_SetupStage+0x72>
 800b3ce:	2b02      	cmp	r3, #2
 800b3d0:	d822      	bhi.n	800b418 <USBD_LL_SetupStage+0x86>
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d002      	beq.n	800b3dc <USBD_LL_SetupStage+0x4a>
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d00a      	beq.n	800b3f0 <USBD_LL_SetupStage+0x5e>
 800b3da:	e01d      	b.n	800b418 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 fb65 	bl	800bab4 <USBD_StdDevReq>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	73fb      	strb	r3, [r7, #15]
      break;
 800b3ee:	e020      	b.n	800b432 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 fbcd 	bl	800bb98 <USBD_StdItfReq>
 800b3fe:	4603      	mov	r3, r0
 800b400:	73fb      	strb	r3, [r7, #15]
      break;
 800b402:	e016      	b.n	800b432 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b40a:	4619      	mov	r1, r3
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f000 fc2f 	bl	800bc70 <USBD_StdEPReq>
 800b412:	4603      	mov	r3, r0
 800b414:	73fb      	strb	r3, [r7, #15]
      break;
 800b416:	e00c      	b.n	800b432 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b41e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b422:	b2db      	uxtb	r3, r3
 800b424:	4619      	mov	r1, r3
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f001 fef4 	bl	800d214 <USBD_LL_StallEP>
 800b42c:	4603      	mov	r3, r0
 800b42e:	73fb      	strb	r3, [r7, #15]
      break;
 800b430:	bf00      	nop
  }

  return ret;
 800b432:	7bfb      	ldrb	r3, [r7, #15]
}
 800b434:	4618      	mov	r0, r3
 800b436:	3710      	adds	r7, #16
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b086      	sub	sp, #24
 800b440:	af00      	add	r7, sp, #0
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	460b      	mov	r3, r1
 800b446:	607a      	str	r2, [r7, #4]
 800b448:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b44a:	2300      	movs	r3, #0
 800b44c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b44e:	7afb      	ldrb	r3, [r7, #11]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d16e      	bne.n	800b532 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b45a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b462:	2b03      	cmp	r3, #3
 800b464:	f040 8098 	bne.w	800b598 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	689a      	ldr	r2, [r3, #8]
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	429a      	cmp	r2, r3
 800b472:	d913      	bls.n	800b49c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	689a      	ldr	r2, [r3, #8]
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	68db      	ldr	r3, [r3, #12]
 800b47c:	1ad2      	subs	r2, r2, r3
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	68da      	ldr	r2, [r3, #12]
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	4293      	cmp	r3, r2
 800b48c:	bf28      	it	cs
 800b48e:	4613      	movcs	r3, r2
 800b490:	461a      	mov	r2, r3
 800b492:	6879      	ldr	r1, [r7, #4]
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f001 f9b4 	bl	800c802 <USBD_CtlContinueRx>
 800b49a:	e07d      	b.n	800b598 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b4a2:	f003 031f 	and.w	r3, r3, #31
 800b4a6:	2b02      	cmp	r3, #2
 800b4a8:	d014      	beq.n	800b4d4 <USBD_LL_DataOutStage+0x98>
 800b4aa:	2b02      	cmp	r3, #2
 800b4ac:	d81d      	bhi.n	800b4ea <USBD_LL_DataOutStage+0xae>
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d002      	beq.n	800b4b8 <USBD_LL_DataOutStage+0x7c>
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d003      	beq.n	800b4be <USBD_LL_DataOutStage+0x82>
 800b4b6:	e018      	b.n	800b4ea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	75bb      	strb	r3, [r7, #22]
            break;
 800b4bc:	e018      	b.n	800b4f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	68f8      	ldr	r0, [r7, #12]
 800b4ca:	f000 fa64 	bl	800b996 <USBD_CoreFindIF>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	75bb      	strb	r3, [r7, #22]
            break;
 800b4d2:	e00d      	b.n	800b4f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	4619      	mov	r1, r3
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f000 fa66 	bl	800b9b0 <USBD_CoreFindEP>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	75bb      	strb	r3, [r7, #22]
            break;
 800b4e8:	e002      	b.n	800b4f0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	75bb      	strb	r3, [r7, #22]
            break;
 800b4ee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b4f0:	7dbb      	ldrb	r3, [r7, #22]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d119      	bne.n	800b52a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	2b03      	cmp	r3, #3
 800b500:	d113      	bne.n	800b52a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b502:	7dba      	ldrb	r2, [r7, #22]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	32ae      	adds	r2, #174	; 0xae
 800b508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b50c:	691b      	ldr	r3, [r3, #16]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00b      	beq.n	800b52a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b512:	7dba      	ldrb	r2, [r7, #22]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b51a:	7dba      	ldrb	r2, [r7, #22]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	32ae      	adds	r2, #174	; 0xae
 800b520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b524:	691b      	ldr	r3, [r3, #16]
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b52a:	68f8      	ldr	r0, [r7, #12]
 800b52c:	f001 f97a 	bl	800c824 <USBD_CtlSendStatus>
 800b530:	e032      	b.n	800b598 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b532:	7afb      	ldrb	r3, [r7, #11]
 800b534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	4619      	mov	r1, r3
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f000 fa37 	bl	800b9b0 <USBD_CoreFindEP>
 800b542:	4603      	mov	r3, r0
 800b544:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b546:	7dbb      	ldrb	r3, [r7, #22]
 800b548:	2bff      	cmp	r3, #255	; 0xff
 800b54a:	d025      	beq.n	800b598 <USBD_LL_DataOutStage+0x15c>
 800b54c:	7dbb      	ldrb	r3, [r7, #22]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d122      	bne.n	800b598 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b03      	cmp	r3, #3
 800b55c:	d117      	bne.n	800b58e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b55e:	7dba      	ldrb	r2, [r7, #22]
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	32ae      	adds	r2, #174	; 0xae
 800b564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b568:	699b      	ldr	r3, [r3, #24]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00f      	beq.n	800b58e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b56e:	7dba      	ldrb	r2, [r7, #22]
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b576:	7dba      	ldrb	r2, [r7, #22]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	32ae      	adds	r2, #174	; 0xae
 800b57c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b580:	699b      	ldr	r3, [r3, #24]
 800b582:	7afa      	ldrb	r2, [r7, #11]
 800b584:	4611      	mov	r1, r2
 800b586:	68f8      	ldr	r0, [r7, #12]
 800b588:	4798      	blx	r3
 800b58a:	4603      	mov	r3, r0
 800b58c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b58e:	7dfb      	ldrb	r3, [r7, #23]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d001      	beq.n	800b598 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b594:	7dfb      	ldrb	r3, [r7, #23]
 800b596:	e000      	b.n	800b59a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3718      	adds	r7, #24
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b086      	sub	sp, #24
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	60f8      	str	r0, [r7, #12]
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	607a      	str	r2, [r7, #4]
 800b5ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b5b0:	7afb      	ldrb	r3, [r7, #11]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d16f      	bne.n	800b696 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	3314      	adds	r3, #20
 800b5ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b5c2:	2b02      	cmp	r3, #2
 800b5c4:	d15a      	bne.n	800b67c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	689a      	ldr	r2, [r3, #8]
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	68db      	ldr	r3, [r3, #12]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d914      	bls.n	800b5fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	689a      	ldr	r2, [r3, #8]
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	1ad2      	subs	r2, r2, r3
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	6879      	ldr	r1, [r7, #4]
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f001 f8dc 	bl	800c7a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	2100      	movs	r1, #0
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	f001 feb7 	bl	800d368 <USBD_LL_PrepareReceive>
 800b5fa:	e03f      	b.n	800b67c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	68da      	ldr	r2, [r3, #12]
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	429a      	cmp	r2, r3
 800b606:	d11c      	bne.n	800b642 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b610:	429a      	cmp	r2, r3
 800b612:	d316      	bcc.n	800b642 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	685a      	ldr	r2, [r3, #4]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b61e:	429a      	cmp	r2, r3
 800b620:	d20f      	bcs.n	800b642 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b622:	2200      	movs	r2, #0
 800b624:	2100      	movs	r1, #0
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f001 f8bd 	bl	800c7a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2200      	movs	r2, #0
 800b630:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b634:	2300      	movs	r3, #0
 800b636:	2200      	movs	r2, #0
 800b638:	2100      	movs	r1, #0
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	f001 fe94 	bl	800d368 <USBD_LL_PrepareReceive>
 800b640:	e01c      	b.n	800b67c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	2b03      	cmp	r3, #3
 800b64c:	d10f      	bne.n	800b66e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d009      	beq.n	800b66e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b66e:	2180      	movs	r1, #128	; 0x80
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	f001 fdcf 	bl	800d214 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b676:	68f8      	ldr	r0, [r7, #12]
 800b678:	f001 f8e7 	bl	800c84a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d03a      	beq.n	800b6fc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b686:	68f8      	ldr	r0, [r7, #12]
 800b688:	f7ff fe42 	bl	800b310 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2200      	movs	r2, #0
 800b690:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b694:	e032      	b.n	800b6fc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b696:	7afb      	ldrb	r3, [r7, #11]
 800b698:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	4619      	mov	r1, r3
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f000 f985 	bl	800b9b0 <USBD_CoreFindEP>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b6aa:	7dfb      	ldrb	r3, [r7, #23]
 800b6ac:	2bff      	cmp	r3, #255	; 0xff
 800b6ae:	d025      	beq.n	800b6fc <USBD_LL_DataInStage+0x15a>
 800b6b0:	7dfb      	ldrb	r3, [r7, #23]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d122      	bne.n	800b6fc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	2b03      	cmp	r3, #3
 800b6c0:	d11c      	bne.n	800b6fc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b6c2:	7dfa      	ldrb	r2, [r7, #23]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	32ae      	adds	r2, #174	; 0xae
 800b6c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6cc:	695b      	ldr	r3, [r3, #20]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d014      	beq.n	800b6fc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b6d2:	7dfa      	ldrb	r2, [r7, #23]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b6da:	7dfa      	ldrb	r2, [r7, #23]
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	32ae      	adds	r2, #174	; 0xae
 800b6e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6e4:	695b      	ldr	r3, [r3, #20]
 800b6e6:	7afa      	ldrb	r2, [r7, #11]
 800b6e8:	4611      	mov	r1, r2
 800b6ea:	68f8      	ldr	r0, [r7, #12]
 800b6ec:	4798      	blx	r3
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b6f2:	7dbb      	ldrb	r3, [r7, #22]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d001      	beq.n	800b6fc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b6f8:	7dbb      	ldrb	r3, [r7, #22]
 800b6fa:	e000      	b.n	800b6fe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3718      	adds	r7, #24
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b706:	b580      	push	{r7, lr}
 800b708:	b084      	sub	sp, #16
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b70e:	2300      	movs	r3, #0
 800b710:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2201      	movs	r2, #1
 800b716:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2200      	movs	r2, #0
 800b71e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2200      	movs	r2, #0
 800b734:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d014      	beq.n	800b76c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00e      	beq.n	800b76c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	6852      	ldr	r2, [r2, #4]
 800b75a:	b2d2      	uxtb	r2, r2
 800b75c:	4611      	mov	r1, r2
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	4798      	blx	r3
 800b762:	4603      	mov	r3, r0
 800b764:	2b00      	cmp	r3, #0
 800b766:	d001      	beq.n	800b76c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b768:	2303      	movs	r3, #3
 800b76a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b76c:	2340      	movs	r3, #64	; 0x40
 800b76e:	2200      	movs	r2, #0
 800b770:	2100      	movs	r1, #0
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f001 fd09 	bl	800d18a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2201      	movs	r2, #1
 800b77c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2240      	movs	r2, #64	; 0x40
 800b784:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b788:	2340      	movs	r3, #64	; 0x40
 800b78a:	2200      	movs	r2, #0
 800b78c:	2180      	movs	r1, #128	; 0x80
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f001 fcfb 	bl	800d18a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2201      	movs	r2, #1
 800b798:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2240      	movs	r2, #64	; 0x40
 800b79e:	621a      	str	r2, [r3, #32]

  return ret;
 800b7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b7aa:	b480      	push	{r7}
 800b7ac:	b083      	sub	sp, #12
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	78fa      	ldrb	r2, [r7, #3]
 800b7ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b7bc:	2300      	movs	r3, #0
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	370c      	adds	r7, #12
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr

0800b7ca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b7ca:	b480      	push	{r7}
 800b7cc:	b083      	sub	sp, #12
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	2b04      	cmp	r3, #4
 800b7dc:	d006      	beq.n	800b7ec <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7e4:	b2da      	uxtb	r2, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2204      	movs	r2, #4
 800b7f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	370c      	adds	r7, #12
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr

0800b802 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b802:	b480      	push	{r7}
 800b804:	b083      	sub	sp, #12
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b810:	b2db      	uxtb	r3, r3
 800b812:	2b04      	cmp	r3, #4
 800b814:	d106      	bne.n	800b824 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b81c:	b2da      	uxtb	r2, r3
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b824:	2300      	movs	r3, #0
}
 800b826:	4618      	mov	r0, r3
 800b828:	370c      	adds	r7, #12
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr

0800b832 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b832:	b580      	push	{r7, lr}
 800b834:	b082      	sub	sp, #8
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b840:	b2db      	uxtb	r3, r3
 800b842:	2b03      	cmp	r3, #3
 800b844:	d110      	bne.n	800b868 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00b      	beq.n	800b868 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b856:	69db      	ldr	r3, [r3, #28]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d005      	beq.n	800b868 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b862:	69db      	ldr	r3, [r3, #28]
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b868:	2300      	movs	r3, #0
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3708      	adds	r7, #8
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}

0800b872 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b872:	b580      	push	{r7, lr}
 800b874:	b082      	sub	sp, #8
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
 800b87a:	460b      	mov	r3, r1
 800b87c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	32ae      	adds	r2, #174	; 0xae
 800b888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d101      	bne.n	800b894 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b890:	2303      	movs	r3, #3
 800b892:	e01c      	b.n	800b8ce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	2b03      	cmp	r3, #3
 800b89e:	d115      	bne.n	800b8cc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	32ae      	adds	r2, #174	; 0xae
 800b8aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ae:	6a1b      	ldr	r3, [r3, #32]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00b      	beq.n	800b8cc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	32ae      	adds	r2, #174	; 0xae
 800b8be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8c2:	6a1b      	ldr	r3, [r3, #32]
 800b8c4:	78fa      	ldrb	r2, [r7, #3]
 800b8c6:	4611      	mov	r1, r2
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b8cc:	2300      	movs	r3, #0
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3708      	adds	r7, #8
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}

0800b8d6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b8d6:	b580      	push	{r7, lr}
 800b8d8:	b082      	sub	sp, #8
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
 800b8de:	460b      	mov	r3, r1
 800b8e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	32ae      	adds	r2, #174	; 0xae
 800b8ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d101      	bne.n	800b8f8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b8f4:	2303      	movs	r3, #3
 800b8f6:	e01c      	b.n	800b932 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8fe:	b2db      	uxtb	r3, r3
 800b900:	2b03      	cmp	r3, #3
 800b902:	d115      	bne.n	800b930 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	32ae      	adds	r2, #174	; 0xae
 800b90e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b914:	2b00      	cmp	r3, #0
 800b916:	d00b      	beq.n	800b930 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	32ae      	adds	r2, #174	; 0xae
 800b922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b928:	78fa      	ldrb	r2, [r7, #3]
 800b92a:	4611      	mov	r1, r2
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	3708      	adds	r7, #8
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b93a:	b480      	push	{r7}
 800b93c:	b083      	sub	sp, #12
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	370c      	adds	r7, #12
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b958:	2300      	movs	r3, #0
 800b95a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2201      	movs	r2, #1
 800b960:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d00e      	beq.n	800b98c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	6852      	ldr	r2, [r2, #4]
 800b97a:	b2d2      	uxtb	r2, r2
 800b97c:	4611      	mov	r1, r2
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	4798      	blx	r3
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d001      	beq.n	800b98c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b988:	2303      	movs	r3, #3
 800b98a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3710      	adds	r7, #16
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}

0800b996 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b996:	b480      	push	{r7}
 800b998:	b083      	sub	sp, #12
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
 800b99e:	460b      	mov	r3, r1
 800b9a0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b9a2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b9bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	370c      	adds	r7, #12
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr

0800b9ca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b086      	sub	sp, #24
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	885b      	ldrh	r3, [r3, #2]
 800b9e6:	b29a      	uxth	r2, r3
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d920      	bls.n	800ba34 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b9fa:	e013      	b.n	800ba24 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b9fc:	f107 030a 	add.w	r3, r7, #10
 800ba00:	4619      	mov	r1, r3
 800ba02:	6978      	ldr	r0, [r7, #20]
 800ba04:	f000 f81b 	bl	800ba3e <USBD_GetNextDesc>
 800ba08:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	785b      	ldrb	r3, [r3, #1]
 800ba0e:	2b05      	cmp	r3, #5
 800ba10:	d108      	bne.n	800ba24 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	789b      	ldrb	r3, [r3, #2]
 800ba1a:	78fa      	ldrb	r2, [r7, #3]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d008      	beq.n	800ba32 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ba20:	2300      	movs	r3, #0
 800ba22:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	885b      	ldrh	r3, [r3, #2]
 800ba28:	b29a      	uxth	r2, r3
 800ba2a:	897b      	ldrh	r3, [r7, #10]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d8e5      	bhi.n	800b9fc <USBD_GetEpDesc+0x32>
 800ba30:	e000      	b.n	800ba34 <USBD_GetEpDesc+0x6a>
          break;
 800ba32:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ba34:	693b      	ldr	r3, [r7, #16]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3718      	adds	r7, #24
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ba3e:	b480      	push	{r7}
 800ba40:	b085      	sub	sp, #20
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
 800ba46:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	881a      	ldrh	r2, [r3, #0]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	4413      	add	r3, r2
 800ba58:	b29a      	uxth	r2, r3
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	461a      	mov	r2, r3
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	4413      	add	r3, r2
 800ba68:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3714      	adds	r7, #20
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr

0800ba78 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b087      	sub	sp, #28
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ba96:	8a3b      	ldrh	r3, [r7, #16]
 800ba98:	021b      	lsls	r3, r3, #8
 800ba9a:	b21a      	sxth	r2, r3
 800ba9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	b21b      	sxth	r3, r3
 800baa4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800baa6:	89fb      	ldrh	r3, [r7, #14]
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	371c      	adds	r7, #28
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr

0800bab4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800babe:	2300      	movs	r3, #0
 800bac0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800baca:	2b40      	cmp	r3, #64	; 0x40
 800bacc:	d005      	beq.n	800bada <USBD_StdDevReq+0x26>
 800bace:	2b40      	cmp	r3, #64	; 0x40
 800bad0:	d857      	bhi.n	800bb82 <USBD_StdDevReq+0xce>
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00f      	beq.n	800baf6 <USBD_StdDevReq+0x42>
 800bad6:	2b20      	cmp	r3, #32
 800bad8:	d153      	bne.n	800bb82 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	32ae      	adds	r2, #174	; 0xae
 800bae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bae8:	689b      	ldr	r3, [r3, #8]
 800baea:	6839      	ldr	r1, [r7, #0]
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	4798      	blx	r3
 800baf0:	4603      	mov	r3, r0
 800baf2:	73fb      	strb	r3, [r7, #15]
      break;
 800baf4:	e04a      	b.n	800bb8c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	785b      	ldrb	r3, [r3, #1]
 800bafa:	2b09      	cmp	r3, #9
 800bafc:	d83b      	bhi.n	800bb76 <USBD_StdDevReq+0xc2>
 800bafe:	a201      	add	r2, pc, #4	; (adr r2, 800bb04 <USBD_StdDevReq+0x50>)
 800bb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb04:	0800bb59 	.word	0x0800bb59
 800bb08:	0800bb6d 	.word	0x0800bb6d
 800bb0c:	0800bb77 	.word	0x0800bb77
 800bb10:	0800bb63 	.word	0x0800bb63
 800bb14:	0800bb77 	.word	0x0800bb77
 800bb18:	0800bb37 	.word	0x0800bb37
 800bb1c:	0800bb2d 	.word	0x0800bb2d
 800bb20:	0800bb77 	.word	0x0800bb77
 800bb24:	0800bb4f 	.word	0x0800bb4f
 800bb28:	0800bb41 	.word	0x0800bb41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bb2c:	6839      	ldr	r1, [r7, #0]
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 fa3c 	bl	800bfac <USBD_GetDescriptor>
          break;
 800bb34:	e024      	b.n	800bb80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bb36:	6839      	ldr	r1, [r7, #0]
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 fbcb 	bl	800c2d4 <USBD_SetAddress>
          break;
 800bb3e:	e01f      	b.n	800bb80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bb40:	6839      	ldr	r1, [r7, #0]
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 fc0a 	bl	800c35c <USBD_SetConfig>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	73fb      	strb	r3, [r7, #15]
          break;
 800bb4c:	e018      	b.n	800bb80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bb4e:	6839      	ldr	r1, [r7, #0]
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 fcad 	bl	800c4b0 <USBD_GetConfig>
          break;
 800bb56:	e013      	b.n	800bb80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bb58:	6839      	ldr	r1, [r7, #0]
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 fcde 	bl	800c51c <USBD_GetStatus>
          break;
 800bb60:	e00e      	b.n	800bb80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bb62:	6839      	ldr	r1, [r7, #0]
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 fd0d 	bl	800c584 <USBD_SetFeature>
          break;
 800bb6a:	e009      	b.n	800bb80 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bb6c:	6839      	ldr	r1, [r7, #0]
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 fd31 	bl	800c5d6 <USBD_ClrFeature>
          break;
 800bb74:	e004      	b.n	800bb80 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bb76:	6839      	ldr	r1, [r7, #0]
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 fd88 	bl	800c68e <USBD_CtlError>
          break;
 800bb7e:	bf00      	nop
      }
      break;
 800bb80:	e004      	b.n	800bb8c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bb82:	6839      	ldr	r1, [r7, #0]
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 fd82 	bl	800c68e <USBD_CtlError>
      break;
 800bb8a:	bf00      	nop
  }

  return ret;
 800bb8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop

0800bb98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bba2:	2300      	movs	r3, #0
 800bba4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbae:	2b40      	cmp	r3, #64	; 0x40
 800bbb0:	d005      	beq.n	800bbbe <USBD_StdItfReq+0x26>
 800bbb2:	2b40      	cmp	r3, #64	; 0x40
 800bbb4:	d852      	bhi.n	800bc5c <USBD_StdItfReq+0xc4>
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d001      	beq.n	800bbbe <USBD_StdItfReq+0x26>
 800bbba:	2b20      	cmp	r3, #32
 800bbbc:	d14e      	bne.n	800bc5c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	2b02      	cmp	r3, #2
 800bbca:	d840      	bhi.n	800bc4e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	889b      	ldrh	r3, [r3, #4]
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d836      	bhi.n	800bc44 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	889b      	ldrh	r3, [r3, #4]
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	4619      	mov	r1, r3
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f7ff fed9 	bl	800b996 <USBD_CoreFindIF>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bbe8:	7bbb      	ldrb	r3, [r7, #14]
 800bbea:	2bff      	cmp	r3, #255	; 0xff
 800bbec:	d01d      	beq.n	800bc2a <USBD_StdItfReq+0x92>
 800bbee:	7bbb      	ldrb	r3, [r7, #14]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d11a      	bne.n	800bc2a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bbf4:	7bba      	ldrb	r2, [r7, #14]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	32ae      	adds	r2, #174	; 0xae
 800bbfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbfe:	689b      	ldr	r3, [r3, #8]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d00f      	beq.n	800bc24 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bc04:	7bba      	ldrb	r2, [r7, #14]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bc0c:	7bba      	ldrb	r2, [r7, #14]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	32ae      	adds	r2, #174	; 0xae
 800bc12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc16:	689b      	ldr	r3, [r3, #8]
 800bc18:	6839      	ldr	r1, [r7, #0]
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	4798      	blx	r3
 800bc1e:	4603      	mov	r3, r0
 800bc20:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bc22:	e004      	b.n	800bc2e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bc24:	2303      	movs	r3, #3
 800bc26:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bc28:	e001      	b.n	800bc2e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bc2a:	2303      	movs	r3, #3
 800bc2c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	88db      	ldrh	r3, [r3, #6]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d110      	bne.n	800bc58 <USBD_StdItfReq+0xc0>
 800bc36:	7bfb      	ldrb	r3, [r7, #15]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d10d      	bne.n	800bc58 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 fdf1 	bl	800c824 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bc42:	e009      	b.n	800bc58 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bc44:	6839      	ldr	r1, [r7, #0]
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 fd21 	bl	800c68e <USBD_CtlError>
          break;
 800bc4c:	e004      	b.n	800bc58 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bc4e:	6839      	ldr	r1, [r7, #0]
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f000 fd1c 	bl	800c68e <USBD_CtlError>
          break;
 800bc56:	e000      	b.n	800bc5a <USBD_StdItfReq+0xc2>
          break;
 800bc58:	bf00      	nop
      }
      break;
 800bc5a:	e004      	b.n	800bc66 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bc5c:	6839      	ldr	r1, [r7, #0]
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 fd15 	bl	800c68e <USBD_CtlError>
      break;
 800bc64:	bf00      	nop
  }

  return ret;
 800bc66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3710      	adds	r7, #16
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	889b      	ldrh	r3, [r3, #4]
 800bc82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc8c:	2b40      	cmp	r3, #64	; 0x40
 800bc8e:	d007      	beq.n	800bca0 <USBD_StdEPReq+0x30>
 800bc90:	2b40      	cmp	r3, #64	; 0x40
 800bc92:	f200 817f 	bhi.w	800bf94 <USBD_StdEPReq+0x324>
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d02a      	beq.n	800bcf0 <USBD_StdEPReq+0x80>
 800bc9a:	2b20      	cmp	r3, #32
 800bc9c:	f040 817a 	bne.w	800bf94 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bca0:	7bbb      	ldrb	r3, [r7, #14]
 800bca2:	4619      	mov	r1, r3
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f7ff fe83 	bl	800b9b0 <USBD_CoreFindEP>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcae:	7b7b      	ldrb	r3, [r7, #13]
 800bcb0:	2bff      	cmp	r3, #255	; 0xff
 800bcb2:	f000 8174 	beq.w	800bf9e <USBD_StdEPReq+0x32e>
 800bcb6:	7b7b      	ldrb	r3, [r7, #13]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	f040 8170 	bne.w	800bf9e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bcbe:	7b7a      	ldrb	r2, [r7, #13]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bcc6:	7b7a      	ldrb	r2, [r7, #13]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	32ae      	adds	r2, #174	; 0xae
 800bccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f000 8163 	beq.w	800bf9e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bcd8:	7b7a      	ldrb	r2, [r7, #13]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	32ae      	adds	r2, #174	; 0xae
 800bcde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	6839      	ldr	r1, [r7, #0]
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	4798      	blx	r3
 800bcea:	4603      	mov	r3, r0
 800bcec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bcee:	e156      	b.n	800bf9e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	785b      	ldrb	r3, [r3, #1]
 800bcf4:	2b03      	cmp	r3, #3
 800bcf6:	d008      	beq.n	800bd0a <USBD_StdEPReq+0x9a>
 800bcf8:	2b03      	cmp	r3, #3
 800bcfa:	f300 8145 	bgt.w	800bf88 <USBD_StdEPReq+0x318>
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	f000 809b 	beq.w	800be3a <USBD_StdEPReq+0x1ca>
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d03c      	beq.n	800bd82 <USBD_StdEPReq+0x112>
 800bd08:	e13e      	b.n	800bf88 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b02      	cmp	r3, #2
 800bd14:	d002      	beq.n	800bd1c <USBD_StdEPReq+0xac>
 800bd16:	2b03      	cmp	r3, #3
 800bd18:	d016      	beq.n	800bd48 <USBD_StdEPReq+0xd8>
 800bd1a:	e02c      	b.n	800bd76 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd1c:	7bbb      	ldrb	r3, [r7, #14]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d00d      	beq.n	800bd3e <USBD_StdEPReq+0xce>
 800bd22:	7bbb      	ldrb	r3, [r7, #14]
 800bd24:	2b80      	cmp	r3, #128	; 0x80
 800bd26:	d00a      	beq.n	800bd3e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd28:	7bbb      	ldrb	r3, [r7, #14]
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f001 fa71 	bl	800d214 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd32:	2180      	movs	r1, #128	; 0x80
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f001 fa6d 	bl	800d214 <USBD_LL_StallEP>
 800bd3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd3c:	e020      	b.n	800bd80 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bd3e:	6839      	ldr	r1, [r7, #0]
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 fca4 	bl	800c68e <USBD_CtlError>
              break;
 800bd46:	e01b      	b.n	800bd80 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	885b      	ldrh	r3, [r3, #2]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d10e      	bne.n	800bd6e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bd50:	7bbb      	ldrb	r3, [r7, #14]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d00b      	beq.n	800bd6e <USBD_StdEPReq+0xfe>
 800bd56:	7bbb      	ldrb	r3, [r7, #14]
 800bd58:	2b80      	cmp	r3, #128	; 0x80
 800bd5a:	d008      	beq.n	800bd6e <USBD_StdEPReq+0xfe>
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	88db      	ldrh	r3, [r3, #6]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d104      	bne.n	800bd6e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd64:	7bbb      	ldrb	r3, [r7, #14]
 800bd66:	4619      	mov	r1, r3
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f001 fa53 	bl	800d214 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 fd58 	bl	800c824 <USBD_CtlSendStatus>

              break;
 800bd74:	e004      	b.n	800bd80 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bd76:	6839      	ldr	r1, [r7, #0]
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 fc88 	bl	800c68e <USBD_CtlError>
              break;
 800bd7e:	bf00      	nop
          }
          break;
 800bd80:	e107      	b.n	800bf92 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	2b02      	cmp	r3, #2
 800bd8c:	d002      	beq.n	800bd94 <USBD_StdEPReq+0x124>
 800bd8e:	2b03      	cmp	r3, #3
 800bd90:	d016      	beq.n	800bdc0 <USBD_StdEPReq+0x150>
 800bd92:	e04b      	b.n	800be2c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd94:	7bbb      	ldrb	r3, [r7, #14]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d00d      	beq.n	800bdb6 <USBD_StdEPReq+0x146>
 800bd9a:	7bbb      	ldrb	r3, [r7, #14]
 800bd9c:	2b80      	cmp	r3, #128	; 0x80
 800bd9e:	d00a      	beq.n	800bdb6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bda0:	7bbb      	ldrb	r3, [r7, #14]
 800bda2:	4619      	mov	r1, r3
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f001 fa35 	bl	800d214 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bdaa:	2180      	movs	r1, #128	; 0x80
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f001 fa31 	bl	800d214 <USBD_LL_StallEP>
 800bdb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bdb4:	e040      	b.n	800be38 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bdb6:	6839      	ldr	r1, [r7, #0]
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f000 fc68 	bl	800c68e <USBD_CtlError>
              break;
 800bdbe:	e03b      	b.n	800be38 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	885b      	ldrh	r3, [r3, #2]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d136      	bne.n	800be36 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bdc8:	7bbb      	ldrb	r3, [r7, #14]
 800bdca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d004      	beq.n	800bddc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bdd2:	7bbb      	ldrb	r3, [r7, #14]
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f001 fa3b 	bl	800d252 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 fd21 	bl	800c824 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bde2:	7bbb      	ldrb	r3, [r7, #14]
 800bde4:	4619      	mov	r1, r3
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f7ff fde2 	bl	800b9b0 <USBD_CoreFindEP>
 800bdec:	4603      	mov	r3, r0
 800bdee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bdf0:	7b7b      	ldrb	r3, [r7, #13]
 800bdf2:	2bff      	cmp	r3, #255	; 0xff
 800bdf4:	d01f      	beq.n	800be36 <USBD_StdEPReq+0x1c6>
 800bdf6:	7b7b      	ldrb	r3, [r7, #13]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d11c      	bne.n	800be36 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bdfc:	7b7a      	ldrb	r2, [r7, #13]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800be04:	7b7a      	ldrb	r2, [r7, #13]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	32ae      	adds	r2, #174	; 0xae
 800be0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be0e:	689b      	ldr	r3, [r3, #8]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d010      	beq.n	800be36 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800be14:	7b7a      	ldrb	r2, [r7, #13]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	32ae      	adds	r2, #174	; 0xae
 800be1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be1e:	689b      	ldr	r3, [r3, #8]
 800be20:	6839      	ldr	r1, [r7, #0]
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	4798      	blx	r3
 800be26:	4603      	mov	r3, r0
 800be28:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800be2a:	e004      	b.n	800be36 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800be2c:	6839      	ldr	r1, [r7, #0]
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 fc2d 	bl	800c68e <USBD_CtlError>
              break;
 800be34:	e000      	b.n	800be38 <USBD_StdEPReq+0x1c8>
              break;
 800be36:	bf00      	nop
          }
          break;
 800be38:	e0ab      	b.n	800bf92 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be40:	b2db      	uxtb	r3, r3
 800be42:	2b02      	cmp	r3, #2
 800be44:	d002      	beq.n	800be4c <USBD_StdEPReq+0x1dc>
 800be46:	2b03      	cmp	r3, #3
 800be48:	d032      	beq.n	800beb0 <USBD_StdEPReq+0x240>
 800be4a:	e097      	b.n	800bf7c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be4c:	7bbb      	ldrb	r3, [r7, #14]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d007      	beq.n	800be62 <USBD_StdEPReq+0x1f2>
 800be52:	7bbb      	ldrb	r3, [r7, #14]
 800be54:	2b80      	cmp	r3, #128	; 0x80
 800be56:	d004      	beq.n	800be62 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800be58:	6839      	ldr	r1, [r7, #0]
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 fc17 	bl	800c68e <USBD_CtlError>
                break;
 800be60:	e091      	b.n	800bf86 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be66:	2b00      	cmp	r3, #0
 800be68:	da0b      	bge.n	800be82 <USBD_StdEPReq+0x212>
 800be6a:	7bbb      	ldrb	r3, [r7, #14]
 800be6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be70:	4613      	mov	r3, r2
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	4413      	add	r3, r2
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	3310      	adds	r3, #16
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	4413      	add	r3, r2
 800be7e:	3304      	adds	r3, #4
 800be80:	e00b      	b.n	800be9a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be82:	7bbb      	ldrb	r3, [r7, #14]
 800be84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be88:	4613      	mov	r3, r2
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	4413      	add	r3, r2
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	4413      	add	r3, r2
 800be98:	3304      	adds	r3, #4
 800be9a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	2200      	movs	r2, #0
 800bea0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	2202      	movs	r2, #2
 800bea6:	4619      	mov	r1, r3
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 fc61 	bl	800c770 <USBD_CtlSendData>
              break;
 800beae:	e06a      	b.n	800bf86 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800beb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	da11      	bge.n	800bedc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800beb8:	7bbb      	ldrb	r3, [r7, #14]
 800beba:	f003 020f 	and.w	r2, r3, #15
 800bebe:	6879      	ldr	r1, [r7, #4]
 800bec0:	4613      	mov	r3, r2
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	4413      	add	r3, r2
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	440b      	add	r3, r1
 800beca:	3324      	adds	r3, #36	; 0x24
 800becc:	881b      	ldrh	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d117      	bne.n	800bf02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bed2:	6839      	ldr	r1, [r7, #0]
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 fbda 	bl	800c68e <USBD_CtlError>
                  break;
 800beda:	e054      	b.n	800bf86 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bedc:	7bbb      	ldrb	r3, [r7, #14]
 800bede:	f003 020f 	and.w	r2, r3, #15
 800bee2:	6879      	ldr	r1, [r7, #4]
 800bee4:	4613      	mov	r3, r2
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	4413      	add	r3, r2
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	440b      	add	r3, r1
 800beee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bef2:	881b      	ldrh	r3, [r3, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d104      	bne.n	800bf02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bef8:	6839      	ldr	r1, [r7, #0]
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 fbc7 	bl	800c68e <USBD_CtlError>
                  break;
 800bf00:	e041      	b.n	800bf86 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	da0b      	bge.n	800bf22 <USBD_StdEPReq+0x2b2>
 800bf0a:	7bbb      	ldrb	r3, [r7, #14]
 800bf0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf10:	4613      	mov	r3, r2
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	4413      	add	r3, r2
 800bf16:	009b      	lsls	r3, r3, #2
 800bf18:	3310      	adds	r3, #16
 800bf1a:	687a      	ldr	r2, [r7, #4]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	3304      	adds	r3, #4
 800bf20:	e00b      	b.n	800bf3a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf22:	7bbb      	ldrb	r3, [r7, #14]
 800bf24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf28:	4613      	mov	r3, r2
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	4413      	add	r3, r2
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	4413      	add	r3, r2
 800bf38:	3304      	adds	r3, #4
 800bf3a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bf3c:	7bbb      	ldrb	r3, [r7, #14]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d002      	beq.n	800bf48 <USBD_StdEPReq+0x2d8>
 800bf42:	7bbb      	ldrb	r3, [r7, #14]
 800bf44:	2b80      	cmp	r3, #128	; 0x80
 800bf46:	d103      	bne.n	800bf50 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	601a      	str	r2, [r3, #0]
 800bf4e:	e00e      	b.n	800bf6e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bf50:	7bbb      	ldrb	r3, [r7, #14]
 800bf52:	4619      	mov	r1, r3
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f001 f99b 	bl	800d290 <USBD_LL_IsStallEP>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d003      	beq.n	800bf68 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	2201      	movs	r2, #1
 800bf64:	601a      	str	r2, [r3, #0]
 800bf66:	e002      	b.n	800bf6e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	2202      	movs	r2, #2
 800bf72:	4619      	mov	r1, r3
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 fbfb 	bl	800c770 <USBD_CtlSendData>
              break;
 800bf7a:	e004      	b.n	800bf86 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bf7c:	6839      	ldr	r1, [r7, #0]
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 fb85 	bl	800c68e <USBD_CtlError>
              break;
 800bf84:	bf00      	nop
          }
          break;
 800bf86:	e004      	b.n	800bf92 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bf88:	6839      	ldr	r1, [r7, #0]
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fb7f 	bl	800c68e <USBD_CtlError>
          break;
 800bf90:	bf00      	nop
      }
      break;
 800bf92:	e005      	b.n	800bfa0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bf94:	6839      	ldr	r1, [r7, #0]
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 fb79 	bl	800c68e <USBD_CtlError>
      break;
 800bf9c:	e000      	b.n	800bfa0 <USBD_StdEPReq+0x330>
      break;
 800bf9e:	bf00      	nop
  }

  return ret;
 800bfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
	...

0800bfac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b084      	sub	sp, #16
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	885b      	ldrh	r3, [r3, #2]
 800bfc6:	0a1b      	lsrs	r3, r3, #8
 800bfc8:	b29b      	uxth	r3, r3
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	2b0e      	cmp	r3, #14
 800bfce:	f200 8152 	bhi.w	800c276 <USBD_GetDescriptor+0x2ca>
 800bfd2:	a201      	add	r2, pc, #4	; (adr r2, 800bfd8 <USBD_GetDescriptor+0x2c>)
 800bfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd8:	0800c049 	.word	0x0800c049
 800bfdc:	0800c061 	.word	0x0800c061
 800bfe0:	0800c0a1 	.word	0x0800c0a1
 800bfe4:	0800c277 	.word	0x0800c277
 800bfe8:	0800c277 	.word	0x0800c277
 800bfec:	0800c217 	.word	0x0800c217
 800bff0:	0800c243 	.word	0x0800c243
 800bff4:	0800c277 	.word	0x0800c277
 800bff8:	0800c277 	.word	0x0800c277
 800bffc:	0800c277 	.word	0x0800c277
 800c000:	0800c277 	.word	0x0800c277
 800c004:	0800c277 	.word	0x0800c277
 800c008:	0800c277 	.word	0x0800c277
 800c00c:	0800c277 	.word	0x0800c277
 800c010:	0800c015 	.word	0x0800c015
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c01a:	69db      	ldr	r3, [r3, #28]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00b      	beq.n	800c038 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c026:	69db      	ldr	r3, [r3, #28]
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	7c12      	ldrb	r2, [r2, #16]
 800c02c:	f107 0108 	add.w	r1, r7, #8
 800c030:	4610      	mov	r0, r2
 800c032:	4798      	blx	r3
 800c034:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c036:	e126      	b.n	800c286 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c038:	6839      	ldr	r1, [r7, #0]
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 fb27 	bl	800c68e <USBD_CtlError>
        err++;
 800c040:	7afb      	ldrb	r3, [r7, #11]
 800c042:	3301      	adds	r3, #1
 800c044:	72fb      	strb	r3, [r7, #11]
      break;
 800c046:	e11e      	b.n	800c286 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	7c12      	ldrb	r2, [r2, #16]
 800c054:	f107 0108 	add.w	r1, r7, #8
 800c058:	4610      	mov	r0, r2
 800c05a:	4798      	blx	r3
 800c05c:	60f8      	str	r0, [r7, #12]
      break;
 800c05e:	e112      	b.n	800c286 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	7c1b      	ldrb	r3, [r3, #16]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d10d      	bne.n	800c084 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c070:	f107 0208 	add.w	r2, r7, #8
 800c074:	4610      	mov	r0, r2
 800c076:	4798      	blx	r3
 800c078:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	3301      	adds	r3, #1
 800c07e:	2202      	movs	r2, #2
 800c080:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c082:	e100      	b.n	800c286 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c08c:	f107 0208 	add.w	r2, r7, #8
 800c090:	4610      	mov	r0, r2
 800c092:	4798      	blx	r3
 800c094:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	3301      	adds	r3, #1
 800c09a:	2202      	movs	r2, #2
 800c09c:	701a      	strb	r2, [r3, #0]
      break;
 800c09e:	e0f2      	b.n	800c286 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	885b      	ldrh	r3, [r3, #2]
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	2b05      	cmp	r3, #5
 800c0a8:	f200 80ac 	bhi.w	800c204 <USBD_GetDescriptor+0x258>
 800c0ac:	a201      	add	r2, pc, #4	; (adr r2, 800c0b4 <USBD_GetDescriptor+0x108>)
 800c0ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b2:	bf00      	nop
 800c0b4:	0800c0cd 	.word	0x0800c0cd
 800c0b8:	0800c101 	.word	0x0800c101
 800c0bc:	0800c135 	.word	0x0800c135
 800c0c0:	0800c169 	.word	0x0800c169
 800c0c4:	0800c19d 	.word	0x0800c19d
 800c0c8:	0800c1d1 	.word	0x0800c1d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d00b      	beq.n	800c0f0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	7c12      	ldrb	r2, [r2, #16]
 800c0e4:	f107 0108 	add.w	r1, r7, #8
 800c0e8:	4610      	mov	r0, r2
 800c0ea:	4798      	blx	r3
 800c0ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0ee:	e091      	b.n	800c214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 facb 	bl	800c68e <USBD_CtlError>
            err++;
 800c0f8:	7afb      	ldrb	r3, [r7, #11]
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	72fb      	strb	r3, [r7, #11]
          break;
 800c0fe:	e089      	b.n	800c214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d00b      	beq.n	800c124 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c112:	689b      	ldr	r3, [r3, #8]
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	7c12      	ldrb	r2, [r2, #16]
 800c118:	f107 0108 	add.w	r1, r7, #8
 800c11c:	4610      	mov	r0, r2
 800c11e:	4798      	blx	r3
 800c120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c122:	e077      	b.n	800c214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c124:	6839      	ldr	r1, [r7, #0]
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 fab1 	bl	800c68e <USBD_CtlError>
            err++;
 800c12c:	7afb      	ldrb	r3, [r7, #11]
 800c12e:	3301      	adds	r3, #1
 800c130:	72fb      	strb	r3, [r7, #11]
          break;
 800c132:	e06f      	b.n	800c214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c13a:	68db      	ldr	r3, [r3, #12]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d00b      	beq.n	800c158 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	7c12      	ldrb	r2, [r2, #16]
 800c14c:	f107 0108 	add.w	r1, r7, #8
 800c150:	4610      	mov	r0, r2
 800c152:	4798      	blx	r3
 800c154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c156:	e05d      	b.n	800c214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c158:	6839      	ldr	r1, [r7, #0]
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 fa97 	bl	800c68e <USBD_CtlError>
            err++;
 800c160:	7afb      	ldrb	r3, [r7, #11]
 800c162:	3301      	adds	r3, #1
 800c164:	72fb      	strb	r3, [r7, #11]
          break;
 800c166:	e055      	b.n	800c214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c16e:	691b      	ldr	r3, [r3, #16]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00b      	beq.n	800c18c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c17a:	691b      	ldr	r3, [r3, #16]
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	7c12      	ldrb	r2, [r2, #16]
 800c180:	f107 0108 	add.w	r1, r7, #8
 800c184:	4610      	mov	r0, r2
 800c186:	4798      	blx	r3
 800c188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c18a:	e043      	b.n	800c214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c18c:	6839      	ldr	r1, [r7, #0]
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 fa7d 	bl	800c68e <USBD_CtlError>
            err++;
 800c194:	7afb      	ldrb	r3, [r7, #11]
 800c196:	3301      	adds	r3, #1
 800c198:	72fb      	strb	r3, [r7, #11]
          break;
 800c19a:	e03b      	b.n	800c214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1a2:	695b      	ldr	r3, [r3, #20]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d00b      	beq.n	800c1c0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1ae:	695b      	ldr	r3, [r3, #20]
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	7c12      	ldrb	r2, [r2, #16]
 800c1b4:	f107 0108 	add.w	r1, r7, #8
 800c1b8:	4610      	mov	r0, r2
 800c1ba:	4798      	blx	r3
 800c1bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1be:	e029      	b.n	800c214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c1c0:	6839      	ldr	r1, [r7, #0]
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 fa63 	bl	800c68e <USBD_CtlError>
            err++;
 800c1c8:	7afb      	ldrb	r3, [r7, #11]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	72fb      	strb	r3, [r7, #11]
          break;
 800c1ce:	e021      	b.n	800c214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1d6:	699b      	ldr	r3, [r3, #24]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d00b      	beq.n	800c1f4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1e2:	699b      	ldr	r3, [r3, #24]
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	7c12      	ldrb	r2, [r2, #16]
 800c1e8:	f107 0108 	add.w	r1, r7, #8
 800c1ec:	4610      	mov	r0, r2
 800c1ee:	4798      	blx	r3
 800c1f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1f2:	e00f      	b.n	800c214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c1f4:	6839      	ldr	r1, [r7, #0]
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 fa49 	bl	800c68e <USBD_CtlError>
            err++;
 800c1fc:	7afb      	ldrb	r3, [r7, #11]
 800c1fe:	3301      	adds	r3, #1
 800c200:	72fb      	strb	r3, [r7, #11]
          break;
 800c202:	e007      	b.n	800c214 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 fa41 	bl	800c68e <USBD_CtlError>
          err++;
 800c20c:	7afb      	ldrb	r3, [r7, #11]
 800c20e:	3301      	adds	r3, #1
 800c210:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c212:	bf00      	nop
      }
      break;
 800c214:	e037      	b.n	800c286 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	7c1b      	ldrb	r3, [r3, #16]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d109      	bne.n	800c232 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c226:	f107 0208 	add.w	r2, r7, #8
 800c22a:	4610      	mov	r0, r2
 800c22c:	4798      	blx	r3
 800c22e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c230:	e029      	b.n	800c286 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c232:	6839      	ldr	r1, [r7, #0]
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 fa2a 	bl	800c68e <USBD_CtlError>
        err++;
 800c23a:	7afb      	ldrb	r3, [r7, #11]
 800c23c:	3301      	adds	r3, #1
 800c23e:	72fb      	strb	r3, [r7, #11]
      break;
 800c240:	e021      	b.n	800c286 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	7c1b      	ldrb	r3, [r3, #16]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d10d      	bne.n	800c266 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c252:	f107 0208 	add.w	r2, r7, #8
 800c256:	4610      	mov	r0, r2
 800c258:	4798      	blx	r3
 800c25a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	3301      	adds	r3, #1
 800c260:	2207      	movs	r2, #7
 800c262:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c264:	e00f      	b.n	800c286 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c266:	6839      	ldr	r1, [r7, #0]
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 fa10 	bl	800c68e <USBD_CtlError>
        err++;
 800c26e:	7afb      	ldrb	r3, [r7, #11]
 800c270:	3301      	adds	r3, #1
 800c272:	72fb      	strb	r3, [r7, #11]
      break;
 800c274:	e007      	b.n	800c286 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c276:	6839      	ldr	r1, [r7, #0]
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 fa08 	bl	800c68e <USBD_CtlError>
      err++;
 800c27e:	7afb      	ldrb	r3, [r7, #11]
 800c280:	3301      	adds	r3, #1
 800c282:	72fb      	strb	r3, [r7, #11]
      break;
 800c284:	bf00      	nop
  }

  if (err != 0U)
 800c286:	7afb      	ldrb	r3, [r7, #11]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d11e      	bne.n	800c2ca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	88db      	ldrh	r3, [r3, #6]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d016      	beq.n	800c2c2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c294:	893b      	ldrh	r3, [r7, #8]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00e      	beq.n	800c2b8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	88da      	ldrh	r2, [r3, #6]
 800c29e:	893b      	ldrh	r3, [r7, #8]
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	bf28      	it	cs
 800c2a4:	4613      	movcs	r3, r2
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c2aa:	893b      	ldrh	r3, [r7, #8]
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	68f9      	ldr	r1, [r7, #12]
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 fa5d 	bl	800c770 <USBD_CtlSendData>
 800c2b6:	e009      	b.n	800c2cc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c2b8:	6839      	ldr	r1, [r7, #0]
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 f9e7 	bl	800c68e <USBD_CtlError>
 800c2c0:	e004      	b.n	800c2cc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 faae 	bl	800c824 <USBD_CtlSendStatus>
 800c2c8:	e000      	b.n	800c2cc <USBD_GetDescriptor+0x320>
    return;
 800c2ca:	bf00      	nop
  }
}
 800c2cc:	3710      	adds	r7, #16
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop

0800c2d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	889b      	ldrh	r3, [r3, #4]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d131      	bne.n	800c34a <USBD_SetAddress+0x76>
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	88db      	ldrh	r3, [r3, #6]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d12d      	bne.n	800c34a <USBD_SetAddress+0x76>
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	885b      	ldrh	r3, [r3, #2]
 800c2f2:	2b7f      	cmp	r3, #127	; 0x7f
 800c2f4:	d829      	bhi.n	800c34a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	885b      	ldrh	r3, [r3, #2]
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c300:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c308:	b2db      	uxtb	r3, r3
 800c30a:	2b03      	cmp	r3, #3
 800c30c:	d104      	bne.n	800c318 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c30e:	6839      	ldr	r1, [r7, #0]
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 f9bc 	bl	800c68e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c316:	e01d      	b.n	800c354 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	7bfa      	ldrb	r2, [r7, #15]
 800c31c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c320:	7bfb      	ldrb	r3, [r7, #15]
 800c322:	4619      	mov	r1, r3
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f000 ffdf 	bl	800d2e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 fa7a 	bl	800c824 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c330:	7bfb      	ldrb	r3, [r7, #15]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d004      	beq.n	800c340 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2202      	movs	r2, #2
 800c33a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c33e:	e009      	b.n	800c354 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2201      	movs	r2, #1
 800c344:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c348:	e004      	b.n	800c354 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c34a:	6839      	ldr	r1, [r7, #0]
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 f99e 	bl	800c68e <USBD_CtlError>
  }
}
 800c352:	bf00      	nop
 800c354:	bf00      	nop
 800c356:	3710      	adds	r7, #16
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c366:	2300      	movs	r3, #0
 800c368:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	885b      	ldrh	r3, [r3, #2]
 800c36e:	b2da      	uxtb	r2, r3
 800c370:	4b4e      	ldr	r3, [pc, #312]	; (800c4ac <USBD_SetConfig+0x150>)
 800c372:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c374:	4b4d      	ldr	r3, [pc, #308]	; (800c4ac <USBD_SetConfig+0x150>)
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d905      	bls.n	800c388 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c37c:	6839      	ldr	r1, [r7, #0]
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 f985 	bl	800c68e <USBD_CtlError>
    return USBD_FAIL;
 800c384:	2303      	movs	r3, #3
 800c386:	e08c      	b.n	800c4a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	2b02      	cmp	r3, #2
 800c392:	d002      	beq.n	800c39a <USBD_SetConfig+0x3e>
 800c394:	2b03      	cmp	r3, #3
 800c396:	d029      	beq.n	800c3ec <USBD_SetConfig+0x90>
 800c398:	e075      	b.n	800c486 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c39a:	4b44      	ldr	r3, [pc, #272]	; (800c4ac <USBD_SetConfig+0x150>)
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d020      	beq.n	800c3e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c3a2:	4b42      	ldr	r3, [pc, #264]	; (800c4ac <USBD_SetConfig+0x150>)
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c3ac:	4b3f      	ldr	r3, [pc, #252]	; (800c4ac <USBD_SetConfig+0x150>)
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f7fe ffb7 	bl	800b326 <USBD_SetClassConfig>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c3bc:	7bfb      	ldrb	r3, [r7, #15]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d008      	beq.n	800c3d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c3c2:	6839      	ldr	r1, [r7, #0]
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f000 f962 	bl	800c68e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2202      	movs	r2, #2
 800c3ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c3d2:	e065      	b.n	800c4a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f000 fa25 	bl	800c824 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2203      	movs	r2, #3
 800c3de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c3e2:	e05d      	b.n	800c4a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f000 fa1d 	bl	800c824 <USBD_CtlSendStatus>
      break;
 800c3ea:	e059      	b.n	800c4a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c3ec:	4b2f      	ldr	r3, [pc, #188]	; (800c4ac <USBD_SetConfig+0x150>)
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d112      	bne.n	800c41a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2202      	movs	r2, #2
 800c3f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c3fc:	4b2b      	ldr	r3, [pc, #172]	; (800c4ac <USBD_SetConfig+0x150>)
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	461a      	mov	r2, r3
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c406:	4b29      	ldr	r3, [pc, #164]	; (800c4ac <USBD_SetConfig+0x150>)
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	4619      	mov	r1, r3
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f7fe ffa6 	bl	800b35e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 fa06 	bl	800c824 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c418:	e042      	b.n	800c4a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c41a:	4b24      	ldr	r3, [pc, #144]	; (800c4ac <USBD_SetConfig+0x150>)
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	461a      	mov	r2, r3
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	429a      	cmp	r2, r3
 800c426:	d02a      	beq.n	800c47e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	4619      	mov	r1, r3
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f7fe ff94 	bl	800b35e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c436:	4b1d      	ldr	r3, [pc, #116]	; (800c4ac <USBD_SetConfig+0x150>)
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	461a      	mov	r2, r3
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c440:	4b1a      	ldr	r3, [pc, #104]	; (800c4ac <USBD_SetConfig+0x150>)
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	4619      	mov	r1, r3
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f7fe ff6d 	bl	800b326 <USBD_SetClassConfig>
 800c44c:	4603      	mov	r3, r0
 800c44e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c450:	7bfb      	ldrb	r3, [r7, #15]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d00f      	beq.n	800c476 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c456:	6839      	ldr	r1, [r7, #0]
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f000 f918 	bl	800c68e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	b2db      	uxtb	r3, r3
 800c464:	4619      	mov	r1, r3
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f7fe ff79 	bl	800b35e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2202      	movs	r2, #2
 800c470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c474:	e014      	b.n	800c4a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 f9d4 	bl	800c824 <USBD_CtlSendStatus>
      break;
 800c47c:	e010      	b.n	800c4a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f000 f9d0 	bl	800c824 <USBD_CtlSendStatus>
      break;
 800c484:	e00c      	b.n	800c4a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c486:	6839      	ldr	r1, [r7, #0]
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f000 f900 	bl	800c68e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c48e:	4b07      	ldr	r3, [pc, #28]	; (800c4ac <USBD_SetConfig+0x150>)
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	4619      	mov	r1, r3
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f7fe ff62 	bl	800b35e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c49a:	2303      	movs	r3, #3
 800c49c:	73fb      	strb	r3, [r7, #15]
      break;
 800c49e:	bf00      	nop
  }

  return ret;
 800c4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3710      	adds	r7, #16
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	24001200 	.word	0x24001200

0800c4b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	88db      	ldrh	r3, [r3, #6]
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d004      	beq.n	800c4cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c4c2:	6839      	ldr	r1, [r7, #0]
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f000 f8e2 	bl	800c68e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c4ca:	e023      	b.n	800c514 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	2b02      	cmp	r3, #2
 800c4d6:	dc02      	bgt.n	800c4de <USBD_GetConfig+0x2e>
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	dc03      	bgt.n	800c4e4 <USBD_GetConfig+0x34>
 800c4dc:	e015      	b.n	800c50a <USBD_GetConfig+0x5a>
 800c4de:	2b03      	cmp	r3, #3
 800c4e0:	d00b      	beq.n	800c4fa <USBD_GetConfig+0x4a>
 800c4e2:	e012      	b.n	800c50a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	3308      	adds	r3, #8
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 f93c 	bl	800c770 <USBD_CtlSendData>
        break;
 800c4f8:	e00c      	b.n	800c514 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	3304      	adds	r3, #4
 800c4fe:	2201      	movs	r2, #1
 800c500:	4619      	mov	r1, r3
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 f934 	bl	800c770 <USBD_CtlSendData>
        break;
 800c508:	e004      	b.n	800c514 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c50a:	6839      	ldr	r1, [r7, #0]
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 f8be 	bl	800c68e <USBD_CtlError>
        break;
 800c512:	bf00      	nop
}
 800c514:	bf00      	nop
 800c516:	3708      	adds	r7, #8
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	3b01      	subs	r3, #1
 800c530:	2b02      	cmp	r3, #2
 800c532:	d81e      	bhi.n	800c572 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	88db      	ldrh	r3, [r3, #6]
 800c538:	2b02      	cmp	r3, #2
 800c53a:	d004      	beq.n	800c546 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c53c:	6839      	ldr	r1, [r7, #0]
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 f8a5 	bl	800c68e <USBD_CtlError>
        break;
 800c544:	e01a      	b.n	800c57c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2201      	movs	r2, #1
 800c54a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c552:	2b00      	cmp	r3, #0
 800c554:	d005      	beq.n	800c562 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	f043 0202 	orr.w	r2, r3, #2
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	330c      	adds	r3, #12
 800c566:	2202      	movs	r2, #2
 800c568:	4619      	mov	r1, r3
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f000 f900 	bl	800c770 <USBD_CtlSendData>
      break;
 800c570:	e004      	b.n	800c57c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c572:	6839      	ldr	r1, [r7, #0]
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 f88a 	bl	800c68e <USBD_CtlError>
      break;
 800c57a:	bf00      	nop
  }
}
 800c57c:	bf00      	nop
 800c57e:	3708      	adds	r7, #8
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	885b      	ldrh	r3, [r3, #2]
 800c592:	2b01      	cmp	r3, #1
 800c594:	d107      	bne.n	800c5a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2201      	movs	r2, #1
 800c59a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 f940 	bl	800c824 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c5a4:	e013      	b.n	800c5ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	885b      	ldrh	r3, [r3, #2]
 800c5aa:	2b02      	cmp	r3, #2
 800c5ac:	d10b      	bne.n	800c5c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	889b      	ldrh	r3, [r3, #4]
 800c5b2:	0a1b      	lsrs	r3, r3, #8
 800c5b4:	b29b      	uxth	r3, r3
 800c5b6:	b2da      	uxtb	r2, r3
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 f930 	bl	800c824 <USBD_CtlSendStatus>
}
 800c5c4:	e003      	b.n	800c5ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c5c6:	6839      	ldr	r1, [r7, #0]
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f000 f860 	bl	800c68e <USBD_CtlError>
}
 800c5ce:	bf00      	nop
 800c5d0:	3708      	adds	r7, #8
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}

0800c5d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5d6:	b580      	push	{r7, lr}
 800c5d8:	b082      	sub	sp, #8
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
 800c5de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	3b01      	subs	r3, #1
 800c5ea:	2b02      	cmp	r3, #2
 800c5ec:	d80b      	bhi.n	800c606 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	885b      	ldrh	r3, [r3, #2]
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d10c      	bne.n	800c610 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 f910 	bl	800c824 <USBD_CtlSendStatus>
      }
      break;
 800c604:	e004      	b.n	800c610 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c606:	6839      	ldr	r1, [r7, #0]
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 f840 	bl	800c68e <USBD_CtlError>
      break;
 800c60e:	e000      	b.n	800c612 <USBD_ClrFeature+0x3c>
      break;
 800c610:	bf00      	nop
  }
}
 800c612:	bf00      	nop
 800c614:	3708      	adds	r7, #8
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}

0800c61a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c61a:	b580      	push	{r7, lr}
 800c61c:	b084      	sub	sp, #16
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
 800c622:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	781a      	ldrb	r2, [r3, #0]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	3301      	adds	r3, #1
 800c634:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	781a      	ldrb	r2, [r3, #0]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	3301      	adds	r3, #1
 800c642:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c644:	68f8      	ldr	r0, [r7, #12]
 800c646:	f7ff fa17 	bl	800ba78 <SWAPBYTE>
 800c64a:	4603      	mov	r3, r0
 800c64c:	461a      	mov	r2, r3
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	3301      	adds	r3, #1
 800c656:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	3301      	adds	r3, #1
 800c65c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c65e:	68f8      	ldr	r0, [r7, #12]
 800c660:	f7ff fa0a 	bl	800ba78 <SWAPBYTE>
 800c664:	4603      	mov	r3, r0
 800c666:	461a      	mov	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	3301      	adds	r3, #1
 800c670:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	3301      	adds	r3, #1
 800c676:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f7ff f9fd 	bl	800ba78 <SWAPBYTE>
 800c67e:	4603      	mov	r3, r0
 800c680:	461a      	mov	r2, r3
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	80da      	strh	r2, [r3, #6]
}
 800c686:	bf00      	nop
 800c688:	3710      	adds	r7, #16
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}

0800c68e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c68e:	b580      	push	{r7, lr}
 800c690:	b082      	sub	sp, #8
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]
 800c696:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c698:	2180      	movs	r1, #128	; 0x80
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 fdba 	bl	800d214 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 fdb6 	bl	800d214 <USBD_LL_StallEP>
}
 800c6a8:	bf00      	nop
 800c6aa:	3708      	adds	r7, #8
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b086      	sub	sp, #24
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d036      	beq.n	800c734 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c6ca:	6938      	ldr	r0, [r7, #16]
 800c6cc:	f000 f836 	bl	800c73c <USBD_GetLen>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	005b      	lsls	r3, r3, #1
 800c6d8:	b29a      	uxth	r2, r3
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c6de:	7dfb      	ldrb	r3, [r7, #23]
 800c6e0:	68ba      	ldr	r2, [r7, #8]
 800c6e2:	4413      	add	r3, r2
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	7812      	ldrb	r2, [r2, #0]
 800c6e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c6ea:	7dfb      	ldrb	r3, [r7, #23]
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c6f0:	7dfb      	ldrb	r3, [r7, #23]
 800c6f2:	68ba      	ldr	r2, [r7, #8]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	2203      	movs	r2, #3
 800c6f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c6fa:	7dfb      	ldrb	r3, [r7, #23]
 800c6fc:	3301      	adds	r3, #1
 800c6fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c700:	e013      	b.n	800c72a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c702:	7dfb      	ldrb	r3, [r7, #23]
 800c704:	68ba      	ldr	r2, [r7, #8]
 800c706:	4413      	add	r3, r2
 800c708:	693a      	ldr	r2, [r7, #16]
 800c70a:	7812      	ldrb	r2, [r2, #0]
 800c70c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	3301      	adds	r3, #1
 800c712:	613b      	str	r3, [r7, #16]
    idx++;
 800c714:	7dfb      	ldrb	r3, [r7, #23]
 800c716:	3301      	adds	r3, #1
 800c718:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c71a:	7dfb      	ldrb	r3, [r7, #23]
 800c71c:	68ba      	ldr	r2, [r7, #8]
 800c71e:	4413      	add	r3, r2
 800c720:	2200      	movs	r2, #0
 800c722:	701a      	strb	r2, [r3, #0]
    idx++;
 800c724:	7dfb      	ldrb	r3, [r7, #23]
 800c726:	3301      	adds	r3, #1
 800c728:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d1e7      	bne.n	800c702 <USBD_GetString+0x52>
 800c732:	e000      	b.n	800c736 <USBD_GetString+0x86>
    return;
 800c734:	bf00      	nop
  }
}
 800c736:	3718      	adds	r7, #24
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b085      	sub	sp, #20
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c744:	2300      	movs	r3, #0
 800c746:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c74c:	e005      	b.n	800c75a <USBD_GetLen+0x1e>
  {
    len++;
 800c74e:	7bfb      	ldrb	r3, [r7, #15]
 800c750:	3301      	adds	r3, #1
 800c752:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	3301      	adds	r3, #1
 800c758:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d1f5      	bne.n	800c74e <USBD_GetLen+0x12>
  }

  return len;
 800c762:	7bfb      	ldrb	r3, [r7, #15]
}
 800c764:	4618      	mov	r0, r3
 800c766:	3714      	adds	r7, #20
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr

0800c770 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2202      	movs	r2, #2
 800c780:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	68ba      	ldr	r2, [r7, #8]
 800c794:	2100      	movs	r1, #0
 800c796:	68f8      	ldr	r0, [r7, #12]
 800c798:	f000 fdc5 	bl	800d326 <USBD_LL_Transmit>

  return USBD_OK;
 800c79c:	2300      	movs	r3, #0
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3710      	adds	r7, #16
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}

0800c7a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c7a6:	b580      	push	{r7, lr}
 800c7a8:	b084      	sub	sp, #16
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	60f8      	str	r0, [r7, #12]
 800c7ae:	60b9      	str	r1, [r7, #8]
 800c7b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	68ba      	ldr	r2, [r7, #8]
 800c7b6:	2100      	movs	r1, #0
 800c7b8:	68f8      	ldr	r0, [r7, #12]
 800c7ba:	f000 fdb4 	bl	800d326 <USBD_LL_Transmit>

  return USBD_OK;
 800c7be:	2300      	movs	r3, #0
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3710      	adds	r7, #16
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2203      	movs	r2, #3
 800c7d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	687a      	ldr	r2, [r7, #4]
 800c7e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	68ba      	ldr	r2, [r7, #8]
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f000 fdb8 	bl	800d368 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7f8:	2300      	movs	r3, #0
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3710      	adds	r7, #16
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c802:	b580      	push	{r7, lr}
 800c804:	b084      	sub	sp, #16
 800c806:	af00      	add	r7, sp, #0
 800c808:	60f8      	str	r0, [r7, #12]
 800c80a:	60b9      	str	r1, [r7, #8]
 800c80c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	2100      	movs	r1, #0
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	f000 fda7 	bl	800d368 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c81a:	2300      	movs	r3, #0
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2204      	movs	r2, #4
 800c830:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c834:	2300      	movs	r3, #0
 800c836:	2200      	movs	r2, #0
 800c838:	2100      	movs	r1, #0
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f000 fd73 	bl	800d326 <USBD_LL_Transmit>

  return USBD_OK;
 800c840:	2300      	movs	r3, #0
}
 800c842:	4618      	mov	r0, r3
 800c844:	3708      	adds	r7, #8
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}

0800c84a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c84a:	b580      	push	{r7, lr}
 800c84c:	b082      	sub	sp, #8
 800c84e:	af00      	add	r7, sp, #0
 800c850:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2205      	movs	r2, #5
 800c856:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c85a:	2300      	movs	r3, #0
 800c85c:	2200      	movs	r2, #0
 800c85e:	2100      	movs	r1, #0
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f000 fd81 	bl	800d368 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3708      	adds	r7, #8
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <CDC_OTG_Send>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
uint16_t CDC_OTG_Send(uint8_t *Buf, uint16_t Len){
 800c870:	b590      	push	{r4, r7, lr}
 800c872:	b085      	sub	sp, #20
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	460b      	mov	r3, r1
 800c87a:	807b      	strh	r3, [r7, #2]
	  uint8_t result = USBD_OK;
 800c87c:	2300      	movs	r3, #0
 800c87e:	73fb      	strb	r3, [r7, #15]
	  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c880:	4b30      	ldr	r3, [pc, #192]	; (800c944 <CDC_OTG_Send+0xd4>)
 800c882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c886:	60bb      	str	r3, [r7, #8]
	  if (USB_OTG_FS_State != 0){
 800c888:	4b2f      	ldr	r3, [pc, #188]	; (800c948 <CDC_OTG_Send+0xd8>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d005      	beq.n	800c89c <CDC_OTG_Send+0x2c>
		  GPIOB->BSRR = (1<<16);
 800c890:	4b2e      	ldr	r3, [pc, #184]	; (800c94c <CDC_OTG_Send+0xdc>)
 800c892:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c896:	619a      	str	r2, [r3, #24]
		  return USBD_OK;
 800c898:	2300      	movs	r3, #0
 800c89a:	e04e      	b.n	800c93a <CDC_OTG_Send+0xca>
	  }

	  if (hcdc->TxState != 0 && hcdc->TxState != USBD_BUSY){
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d033      	beq.n	800c90e <CDC_OTG_Send+0x9e>
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d02e      	beq.n	800c90e <CDC_OTG_Send+0x9e>
		  GPIOB->BSRR = (1<<16);
 800c8b0:	4b26      	ldr	r3, [pc, #152]	; (800c94c <CDC_OTG_Send+0xdc>)
 800c8b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c8b6:	619a      	str	r2, [r3, #24]
	      return hcdc->TxState;
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	e03b      	b.n	800c93a <CDC_OTG_Send+0xca>
	  }

	  while(hcdc->TxState == USBD_BUSY){
		  GPIOB->BSRR = ((1<<0) << (16*flag));
 800c8c2:	4b23      	ldr	r3, [pc, #140]	; (800c950 <CDC_OTG_Send+0xe0>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	011b      	lsls	r3, r3, #4
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	409a      	lsls	r2, r3
 800c8cc:	4b1f      	ldr	r3, [pc, #124]	; (800c94c <CDC_OTG_Send+0xdc>)
 800c8ce:	619a      	str	r2, [r3, #24]
		  if(tick + 25 < HAL_GetTick()){
 800c8d0:	4b20      	ldr	r3, [pc, #128]	; (800c954 <CDC_OTG_Send+0xe4>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	3319      	adds	r3, #25
 800c8d6:	461c      	mov	r4, r3
 800c8d8:	f7f4 fe4e 	bl	8001578 <HAL_GetTick>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	429c      	cmp	r4, r3
 800c8e0:	d20f      	bcs.n	800c902 <CDC_OTG_Send+0x92>
			  flag = flag?0:1;
 800c8e2:	4b1b      	ldr	r3, [pc, #108]	; (800c950 <CDC_OTG_Send+0xe0>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	bf0c      	ite	eq
 800c8ea:	2301      	moveq	r3, #1
 800c8ec:	2300      	movne	r3, #0
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	461a      	mov	r2, r3
 800c8f2:	4b17      	ldr	r3, [pc, #92]	; (800c950 <CDC_OTG_Send+0xe0>)
 800c8f4:	601a      	str	r2, [r3, #0]
			  tick = HAL_GetTick();
 800c8f6:	f7f4 fe3f 	bl	8001578 <HAL_GetTick>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	4b15      	ldr	r3, [pc, #84]	; (800c954 <CDC_OTG_Send+0xe4>)
 800c900:	601a      	str	r2, [r3, #0]
		  }
		  if (USB_OTG_FS_State != 0){
 800c902:	4b11      	ldr	r3, [pc, #68]	; (800c948 <CDC_OTG_Send+0xd8>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d001      	beq.n	800c90e <CDC_OTG_Send+0x9e>
			  return USBD_OK;
 800c90a:	2300      	movs	r3, #0
 800c90c:	e015      	b.n	800c93a <CDC_OTG_Send+0xca>
	  while(hcdc->TxState == USBD_BUSY){
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c914:	2b01      	cmp	r3, #1
 800c916:	d0d4      	beq.n	800c8c2 <CDC_OTG_Send+0x52>
		  }
	  }
	  GPIOB->BSRR = (1<<16);
 800c918:	4b0c      	ldr	r3, [pc, #48]	; (800c94c <CDC_OTG_Send+0xdc>)
 800c91a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c91e:	619a      	str	r2, [r3, #24]

	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c920:	887b      	ldrh	r3, [r7, #2]
 800c922:	461a      	mov	r2, r3
 800c924:	6879      	ldr	r1, [r7, #4]
 800c926:	4807      	ldr	r0, [pc, #28]	; (800c944 <CDC_OTG_Send+0xd4>)
 800c928:	f7fe fbae 	bl	800b088 <USBD_CDC_SetTxBuffer>
	  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c92c:	4805      	ldr	r0, [pc, #20]	; (800c944 <CDC_OTG_Send+0xd4>)
 800c92e:	f7fe fbeb 	bl	800b108 <USBD_CDC_TransmitPacket>
 800c932:	4603      	mov	r3, r0
 800c934:	73fb      	strb	r3, [r7, #15]
	  return result;
 800c936:	7bfb      	ldrb	r3, [r7, #15]
 800c938:	b29b      	uxth	r3, r3
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3714      	adds	r7, #20
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd90      	pop	{r4, r7, pc}
 800c942:	bf00      	nop
 800c944:	2400120c 	.word	0x2400120c
 800c948:	240026f0 	.word	0x240026f0
 800c94c:	58020400 	.word	0x58020400
 800c950:	24001204 	.word	0x24001204
 800c954:	24001208 	.word	0x24001208

0800c958 <CDC_OTG_Recv>:

uint16_t CDC_OTG_Recv(uint8_t *Buf){
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]

	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 800c960:	6879      	ldr	r1, [r7, #4]
 800c962:	4805      	ldr	r0, [pc, #20]	; (800c978 <CDC_OTG_Recv+0x20>)
 800c964:	f7fe fbb2 	bl	800b0cc <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c968:	4803      	ldr	r0, [pc, #12]	; (800c978 <CDC_OTG_Recv+0x20>)
 800c96a:	f7fe fc0d 	bl	800b188 <USBD_CDC_ReceivePacket>
	  return (USBD_OK);
 800c96e:	2300      	movs	r3, #0
}
 800c970:	4618      	mov	r0, r3
 800c972:	3708      	adds	r7, #8
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	2400120c 	.word	0x2400120c

0800c97c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c980:	2200      	movs	r2, #0
 800c982:	4913      	ldr	r1, [pc, #76]	; (800c9d0 <MX_USB_DEVICE_Init+0x54>)
 800c984:	4813      	ldr	r0, [pc, #76]	; (800c9d4 <MX_USB_DEVICE_Init+0x58>)
 800c986:	f7fe fc35 	bl	800b1f4 <USBD_Init>
 800c98a:	4603      	mov	r3, r0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d001      	beq.n	800c994 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c990:	f7f4 fa2a 	bl	8000de8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c994:	4910      	ldr	r1, [pc, #64]	; (800c9d8 <MX_USB_DEVICE_Init+0x5c>)
 800c996:	480f      	ldr	r0, [pc, #60]	; (800c9d4 <MX_USB_DEVICE_Init+0x58>)
 800c998:	f7fe fc6a 	bl	800b270 <USBD_RegisterClass>
 800c99c:	4603      	mov	r3, r0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d001      	beq.n	800c9a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c9a2:	f7f4 fa21 	bl	8000de8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c9a6:	490d      	ldr	r1, [pc, #52]	; (800c9dc <MX_USB_DEVICE_Init+0x60>)
 800c9a8:	480a      	ldr	r0, [pc, #40]	; (800c9d4 <MX_USB_DEVICE_Init+0x58>)
 800c9aa:	f7fe fb53 	bl	800b054 <USBD_CDC_RegisterInterface>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d001      	beq.n	800c9b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c9b4:	f7f4 fa18 	bl	8000de8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c9b8:	4806      	ldr	r0, [pc, #24]	; (800c9d4 <MX_USB_DEVICE_Init+0x58>)
 800c9ba:	f7fe fc9d 	bl	800b2f8 <USBD_Start>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d001      	beq.n	800c9c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c9c4:	f7f4 fa10 	bl	8000de8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800c9c8:	f7f9 f98c 	bl	8005ce4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c9cc:	bf00      	nop
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	240000b8 	.word	0x240000b8
 800c9d4:	2400120c 	.word	0x2400120c
 800c9d8:	24000024 	.word	0x24000024
 800c9dc:	240000a4 	.word	0x240000a4

0800c9e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	4905      	ldr	r1, [pc, #20]	; (800c9fc <CDC_Init_FS+0x1c>)
 800c9e8:	4805      	ldr	r0, [pc, #20]	; (800ca00 <CDC_Init_FS+0x20>)
 800c9ea:	f7fe fb4d 	bl	800b088 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c9ee:	4905      	ldr	r1, [pc, #20]	; (800ca04 <CDC_Init_FS+0x24>)
 800c9f0:	4803      	ldr	r0, [pc, #12]	; (800ca00 <CDC_Init_FS+0x20>)
 800c9f2:	f7fe fb6b 	bl	800b0cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c9f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	24001cf0 	.word	0x24001cf0
 800ca00:	2400120c 	.word	0x2400120c
 800ca04:	240014f0 	.word	0x240014f0

0800ca08 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ca0c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr

0800ca18 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	4603      	mov	r3, r0
 800ca20:	6039      	str	r1, [r7, #0]
 800ca22:	71fb      	strb	r3, [r7, #7]
 800ca24:	4613      	mov	r3, r2
 800ca26:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ca28:	79fb      	ldrb	r3, [r7, #7]
 800ca2a:	2b23      	cmp	r3, #35	; 0x23
 800ca2c:	f200 8092 	bhi.w	800cb54 <CDC_Control_FS+0x13c>
 800ca30:	a201      	add	r2, pc, #4	; (adr r2, 800ca38 <CDC_Control_FS+0x20>)
 800ca32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca36:	bf00      	nop
 800ca38:	0800cb55 	.word	0x0800cb55
 800ca3c:	0800cb55 	.word	0x0800cb55
 800ca40:	0800cb55 	.word	0x0800cb55
 800ca44:	0800cb55 	.word	0x0800cb55
 800ca48:	0800cb55 	.word	0x0800cb55
 800ca4c:	0800cb55 	.word	0x0800cb55
 800ca50:	0800cb55 	.word	0x0800cb55
 800ca54:	0800cb55 	.word	0x0800cb55
 800ca58:	0800cb55 	.word	0x0800cb55
 800ca5c:	0800cb55 	.word	0x0800cb55
 800ca60:	0800cb55 	.word	0x0800cb55
 800ca64:	0800cb55 	.word	0x0800cb55
 800ca68:	0800cb55 	.word	0x0800cb55
 800ca6c:	0800cb55 	.word	0x0800cb55
 800ca70:	0800cb55 	.word	0x0800cb55
 800ca74:	0800cb55 	.word	0x0800cb55
 800ca78:	0800cb55 	.word	0x0800cb55
 800ca7c:	0800cb55 	.word	0x0800cb55
 800ca80:	0800cb55 	.word	0x0800cb55
 800ca84:	0800cb55 	.word	0x0800cb55
 800ca88:	0800cb55 	.word	0x0800cb55
 800ca8c:	0800cb55 	.word	0x0800cb55
 800ca90:	0800cb55 	.word	0x0800cb55
 800ca94:	0800cb55 	.word	0x0800cb55
 800ca98:	0800cb55 	.word	0x0800cb55
 800ca9c:	0800cb55 	.word	0x0800cb55
 800caa0:	0800cb55 	.word	0x0800cb55
 800caa4:	0800cb55 	.word	0x0800cb55
 800caa8:	0800cb55 	.word	0x0800cb55
 800caac:	0800cb55 	.word	0x0800cb55
 800cab0:	0800cb55 	.word	0x0800cb55
 800cab4:	0800cb55 	.word	0x0800cb55
 800cab8:	0800cac9 	.word	0x0800cac9
 800cabc:	0800cb0f 	.word	0x0800cb0f
 800cac0:	0800cb55 	.word	0x0800cb55
 800cac4:	0800cb55 	.word	0x0800cb55
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      tempbuf[0]=pbuf[0];
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	781a      	ldrb	r2, [r3, #0]
 800cacc:	4b25      	ldr	r3, [pc, #148]	; (800cb64 <CDC_Control_FS+0x14c>)
 800cace:	701a      	strb	r2, [r3, #0]
      tempbuf[1]=pbuf[1];
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	3301      	adds	r3, #1
 800cad4:	781a      	ldrb	r2, [r3, #0]
 800cad6:	4b23      	ldr	r3, [pc, #140]	; (800cb64 <CDC_Control_FS+0x14c>)
 800cad8:	705a      	strb	r2, [r3, #1]
      tempbuf[2]=pbuf[2];
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	3302      	adds	r3, #2
 800cade:	781a      	ldrb	r2, [r3, #0]
 800cae0:	4b20      	ldr	r3, [pc, #128]	; (800cb64 <CDC_Control_FS+0x14c>)
 800cae2:	709a      	strb	r2, [r3, #2]
      tempbuf[3]=pbuf[3];
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	3303      	adds	r3, #3
 800cae8:	781a      	ldrb	r2, [r3, #0]
 800caea:	4b1e      	ldr	r3, [pc, #120]	; (800cb64 <CDC_Control_FS+0x14c>)
 800caec:	70da      	strb	r2, [r3, #3]
      tempbuf[4]=pbuf[4];
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	3304      	adds	r3, #4
 800caf2:	781a      	ldrb	r2, [r3, #0]
 800caf4:	4b1b      	ldr	r3, [pc, #108]	; (800cb64 <CDC_Control_FS+0x14c>)
 800caf6:	711a      	strb	r2, [r3, #4]
      tempbuf[5]=pbuf[5];
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	3305      	adds	r3, #5
 800cafc:	781a      	ldrb	r2, [r3, #0]
 800cafe:	4b19      	ldr	r3, [pc, #100]	; (800cb64 <CDC_Control_FS+0x14c>)
 800cb00:	715a      	strb	r2, [r3, #5]
      tempbuf[6]=pbuf[6];
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	3306      	adds	r3, #6
 800cb06:	781a      	ldrb	r2, [r3, #0]
 800cb08:	4b16      	ldr	r3, [pc, #88]	; (800cb64 <CDC_Control_FS+0x14c>)
 800cb0a:	719a      	strb	r2, [r3, #6]
      break;
 800cb0c:	e023      	b.n	800cb56 <CDC_Control_FS+0x13e>
    case CDC_GET_LINE_CODING:
      pbuf[0]=tempbuf[0];
 800cb0e:	4b15      	ldr	r3, [pc, #84]	; (800cb64 <CDC_Control_FS+0x14c>)
 800cb10:	781a      	ldrb	r2, [r3, #0]
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	701a      	strb	r2, [r3, #0]
      pbuf[1]=tempbuf[1];
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	3301      	adds	r3, #1
 800cb1a:	4a12      	ldr	r2, [pc, #72]	; (800cb64 <CDC_Control_FS+0x14c>)
 800cb1c:	7852      	ldrb	r2, [r2, #1]
 800cb1e:	701a      	strb	r2, [r3, #0]
      pbuf[2]=tempbuf[2];
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	3302      	adds	r3, #2
 800cb24:	4a0f      	ldr	r2, [pc, #60]	; (800cb64 <CDC_Control_FS+0x14c>)
 800cb26:	7892      	ldrb	r2, [r2, #2]
 800cb28:	701a      	strb	r2, [r3, #0]
      pbuf[3]=tempbuf[3];
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	3303      	adds	r3, #3
 800cb2e:	4a0d      	ldr	r2, [pc, #52]	; (800cb64 <CDC_Control_FS+0x14c>)
 800cb30:	78d2      	ldrb	r2, [r2, #3]
 800cb32:	701a      	strb	r2, [r3, #0]
      pbuf[4]=tempbuf[4];
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	3304      	adds	r3, #4
 800cb38:	4a0a      	ldr	r2, [pc, #40]	; (800cb64 <CDC_Control_FS+0x14c>)
 800cb3a:	7912      	ldrb	r2, [r2, #4]
 800cb3c:	701a      	strb	r2, [r3, #0]
      pbuf[5]=tempbuf[5];
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	3305      	adds	r3, #5
 800cb42:	4a08      	ldr	r2, [pc, #32]	; (800cb64 <CDC_Control_FS+0x14c>)
 800cb44:	7952      	ldrb	r2, [r2, #5]
 800cb46:	701a      	strb	r2, [r3, #0]
      pbuf[6]=tempbuf[6];
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	3306      	adds	r3, #6
 800cb4c:	4a05      	ldr	r2, [pc, #20]	; (800cb64 <CDC_Control_FS+0x14c>)
 800cb4e:	7992      	ldrb	r2, [r2, #6]
 800cb50:	701a      	strb	r2, [r3, #0]
      break;
 800cb52:	e000      	b.n	800cb56 <CDC_Control_FS+0x13e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cb54:	bf00      	nop
  }

  return (USBD_OK);
 800cb56:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	370c      	adds	r7, #12
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr
 800cb64:	240014e8 	.word	0x240014e8

0800cb68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800cb72:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	370c      	adds	r7, #12
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b087      	sub	sp, #28
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	60f8      	str	r0, [r7, #12]
 800cb88:	60b9      	str	r1, [r7, #8]
 800cb8a:	4613      	mov	r3, r2
 800cb8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cb92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	371c      	adds	r7, #28
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr
	...

0800cba4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b083      	sub	sp, #12
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	4603      	mov	r3, r0
 800cbac:	6039      	str	r1, [r7, #0]
 800cbae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	2212      	movs	r2, #18
 800cbb4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cbb6:	4b03      	ldr	r3, [pc, #12]	; (800cbc4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	370c      	adds	r7, #12
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr
 800cbc4:	240000d8 	.word	0x240000d8

0800cbc8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b083      	sub	sp, #12
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	4603      	mov	r3, r0
 800cbd0:	6039      	str	r1, [r7, #0]
 800cbd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	2204      	movs	r2, #4
 800cbd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cbda:	4b03      	ldr	r3, [pc, #12]	; (800cbe8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	370c      	adds	r7, #12
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr
 800cbe8:	240000ec 	.word	0x240000ec

0800cbec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	6039      	str	r1, [r7, #0]
 800cbf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cbf8:	79fb      	ldrb	r3, [r7, #7]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d105      	bne.n	800cc0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cbfe:	683a      	ldr	r2, [r7, #0]
 800cc00:	4907      	ldr	r1, [pc, #28]	; (800cc20 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc02:	4808      	ldr	r0, [pc, #32]	; (800cc24 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc04:	f7ff fd54 	bl	800c6b0 <USBD_GetString>
 800cc08:	e004      	b.n	800cc14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc0a:	683a      	ldr	r2, [r7, #0]
 800cc0c:	4904      	ldr	r1, [pc, #16]	; (800cc20 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc0e:	4805      	ldr	r0, [pc, #20]	; (800cc24 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc10:	f7ff fd4e 	bl	800c6b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc14:	4b02      	ldr	r3, [pc, #8]	; (800cc20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3708      	adds	r7, #8
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	240024f0 	.word	0x240024f0
 800cc24:	08011f68 	.word	0x08011f68

0800cc28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	4603      	mov	r3, r0
 800cc30:	6039      	str	r1, [r7, #0]
 800cc32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc34:	683a      	ldr	r2, [r7, #0]
 800cc36:	4904      	ldr	r1, [pc, #16]	; (800cc48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc38:	4804      	ldr	r0, [pc, #16]	; (800cc4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc3a:	f7ff fd39 	bl	800c6b0 <USBD_GetString>
  return USBD_StrDesc;
 800cc3e:	4b02      	ldr	r3, [pc, #8]	; (800cc48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	240024f0 	.word	0x240024f0
 800cc4c:	08011f80 	.word	0x08011f80

0800cc50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	4603      	mov	r3, r0
 800cc58:	6039      	str	r1, [r7, #0]
 800cc5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	221a      	movs	r2, #26
 800cc60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc62:	f000 f843 	bl	800ccec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc66:	4b02      	ldr	r3, [pc, #8]	; (800cc70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3708      	adds	r7, #8
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	240000f0 	.word	0x240000f0

0800cc74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	6039      	str	r1, [r7, #0]
 800cc7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cc80:	79fb      	ldrb	r3, [r7, #7]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d105      	bne.n	800cc92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc86:	683a      	ldr	r2, [r7, #0]
 800cc88:	4907      	ldr	r1, [pc, #28]	; (800cca8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc8a:	4808      	ldr	r0, [pc, #32]	; (800ccac <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc8c:	f7ff fd10 	bl	800c6b0 <USBD_GetString>
 800cc90:	e004      	b.n	800cc9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc92:	683a      	ldr	r2, [r7, #0]
 800cc94:	4904      	ldr	r1, [pc, #16]	; (800cca8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc96:	4805      	ldr	r0, [pc, #20]	; (800ccac <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc98:	f7ff fd0a 	bl	800c6b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc9c:	4b02      	ldr	r3, [pc, #8]	; (800cca8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3708      	adds	r7, #8
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	240024f0 	.word	0x240024f0
 800ccac:	08011f94 	.word	0x08011f94

0800ccb0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	6039      	str	r1, [r7, #0]
 800ccba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ccbc:	79fb      	ldrb	r3, [r7, #7]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d105      	bne.n	800ccce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccc2:	683a      	ldr	r2, [r7, #0]
 800ccc4:	4907      	ldr	r1, [pc, #28]	; (800cce4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccc6:	4808      	ldr	r0, [pc, #32]	; (800cce8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccc8:	f7ff fcf2 	bl	800c6b0 <USBD_GetString>
 800cccc:	e004      	b.n	800ccd8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccce:	683a      	ldr	r2, [r7, #0]
 800ccd0:	4904      	ldr	r1, [pc, #16]	; (800cce4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccd2:	4805      	ldr	r0, [pc, #20]	; (800cce8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccd4:	f7ff fcec 	bl	800c6b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccd8:	4b02      	ldr	r3, [pc, #8]	; (800cce4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3708      	adds	r7, #8
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	240024f0 	.word	0x240024f0
 800cce8:	08011fa0 	.word	0x08011fa0

0800ccec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ccf2:	4b0f      	ldr	r3, [pc, #60]	; (800cd30 <Get_SerialNum+0x44>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ccf8:	4b0e      	ldr	r3, [pc, #56]	; (800cd34 <Get_SerialNum+0x48>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ccfe:	4b0e      	ldr	r3, [pc, #56]	; (800cd38 <Get_SerialNum+0x4c>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd04:	68fa      	ldr	r2, [r7, #12]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	4413      	add	r3, r2
 800cd0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d009      	beq.n	800cd26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd12:	2208      	movs	r2, #8
 800cd14:	4909      	ldr	r1, [pc, #36]	; (800cd3c <Get_SerialNum+0x50>)
 800cd16:	68f8      	ldr	r0, [r7, #12]
 800cd18:	f000 f814 	bl	800cd44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd1c:	2204      	movs	r2, #4
 800cd1e:	4908      	ldr	r1, [pc, #32]	; (800cd40 <Get_SerialNum+0x54>)
 800cd20:	68b8      	ldr	r0, [r7, #8]
 800cd22:	f000 f80f 	bl	800cd44 <IntToUnicode>
  }
}
 800cd26:	bf00      	nop
 800cd28:	3710      	adds	r7, #16
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	1ff1e800 	.word	0x1ff1e800
 800cd34:	1ff1e804 	.word	0x1ff1e804
 800cd38:	1ff1e808 	.word	0x1ff1e808
 800cd3c:	240000f2 	.word	0x240000f2
 800cd40:	24000102 	.word	0x24000102

0800cd44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b087      	sub	sp, #28
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	60f8      	str	r0, [r7, #12]
 800cd4c:	60b9      	str	r1, [r7, #8]
 800cd4e:	4613      	mov	r3, r2
 800cd50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd52:	2300      	movs	r3, #0
 800cd54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd56:	2300      	movs	r3, #0
 800cd58:	75fb      	strb	r3, [r7, #23]
 800cd5a:	e027      	b.n	800cdac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	0f1b      	lsrs	r3, r3, #28
 800cd60:	2b09      	cmp	r3, #9
 800cd62:	d80b      	bhi.n	800cd7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	0f1b      	lsrs	r3, r3, #28
 800cd68:	b2da      	uxtb	r2, r3
 800cd6a:	7dfb      	ldrb	r3, [r7, #23]
 800cd6c:	005b      	lsls	r3, r3, #1
 800cd6e:	4619      	mov	r1, r3
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	440b      	add	r3, r1
 800cd74:	3230      	adds	r2, #48	; 0x30
 800cd76:	b2d2      	uxtb	r2, r2
 800cd78:	701a      	strb	r2, [r3, #0]
 800cd7a:	e00a      	b.n	800cd92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	0f1b      	lsrs	r3, r3, #28
 800cd80:	b2da      	uxtb	r2, r3
 800cd82:	7dfb      	ldrb	r3, [r7, #23]
 800cd84:	005b      	lsls	r3, r3, #1
 800cd86:	4619      	mov	r1, r3
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	440b      	add	r3, r1
 800cd8c:	3237      	adds	r2, #55	; 0x37
 800cd8e:	b2d2      	uxtb	r2, r2
 800cd90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	011b      	lsls	r3, r3, #4
 800cd96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cd98:	7dfb      	ldrb	r3, [r7, #23]
 800cd9a:	005b      	lsls	r3, r3, #1
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	68ba      	ldr	r2, [r7, #8]
 800cda0:	4413      	add	r3, r2
 800cda2:	2200      	movs	r2, #0
 800cda4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cda6:	7dfb      	ldrb	r3, [r7, #23]
 800cda8:	3301      	adds	r3, #1
 800cdaa:	75fb      	strb	r3, [r7, #23]
 800cdac:	7dfa      	ldrb	r2, [r7, #23]
 800cdae:	79fb      	ldrb	r3, [r7, #7]
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d3d3      	bcc.n	800cd5c <IntToUnicode+0x18>
  }
}
 800cdb4:	bf00      	nop
 800cdb6:	bf00      	nop
 800cdb8:	371c      	adds	r7, #28
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
	...

0800cdc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b0ba      	sub	sp, #232	; 0xe8
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cdcc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	601a      	str	r2, [r3, #0]
 800cdd4:	605a      	str	r2, [r3, #4]
 800cdd6:	609a      	str	r2, [r3, #8]
 800cdd8:	60da      	str	r2, [r3, #12]
 800cdda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cddc:	f107 0310 	add.w	r3, r7, #16
 800cde0:	22c0      	movs	r2, #192	; 0xc0
 800cde2:	2100      	movs	r1, #0
 800cde4:	4618      	mov	r0, r3
 800cde6:	f000 fcaf 	bl	800d748 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4a34      	ldr	r2, [pc, #208]	; (800cec0 <HAL_PCD_MspInit+0xfc>)
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d161      	bne.n	800ceb8 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cdf4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800cdf8:	f04f 0300 	mov.w	r3, #0
 800cdfc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ce00:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800ce04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ce08:	f107 0310 	add.w	r3, r7, #16
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f7f9 ff33 	bl	8006c78 <HAL_RCCEx_PeriphCLKConfig>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d001      	beq.n	800ce1c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800ce18:	f7f3 ffe6 	bl	8000de8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800ce1c:	f7f8 ff62 	bl	8005ce4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce20:	4b28      	ldr	r3, [pc, #160]	; (800cec4 <HAL_PCD_MspInit+0x100>)
 800ce22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ce26:	4a27      	ldr	r2, [pc, #156]	; (800cec4 <HAL_PCD_MspInit+0x100>)
 800ce28:	f043 0301 	orr.w	r3, r3, #1
 800ce2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ce30:	4b24      	ldr	r3, [pc, #144]	; (800cec4 <HAL_PCD_MspInit+0x100>)
 800ce32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ce36:	f003 0301 	and.w	r3, r3, #1
 800ce3a:	60fb      	str	r3, [r7, #12]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ce3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ce46:	2300      	movs	r3, #0
 800ce48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce52:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800ce56:	4619      	mov	r1, r3
 800ce58:	481b      	ldr	r0, [pc, #108]	; (800cec8 <HAL_PCD_MspInit+0x104>)
 800ce5a:	f7f6 f99b 	bl	8003194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ce5e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ce62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce66:	2302      	movs	r3, #2
 800ce68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce72:	2300      	movs	r3, #0
 800ce74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800ce78:	230a      	movs	r3, #10
 800ce7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce7e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800ce82:	4619      	mov	r1, r3
 800ce84:	4810      	ldr	r0, [pc, #64]	; (800cec8 <HAL_PCD_MspInit+0x104>)
 800ce86:	f7f6 f985 	bl	8003194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ce8a:	4b0e      	ldr	r3, [pc, #56]	; (800cec4 <HAL_PCD_MspInit+0x100>)
 800ce8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ce90:	4a0c      	ldr	r2, [pc, #48]	; (800cec4 <HAL_PCD_MspInit+0x100>)
 800ce92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ce96:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800ce9a:	4b0a      	ldr	r3, [pc, #40]	; (800cec4 <HAL_PCD_MspInit+0x100>)
 800ce9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cea4:	60bb      	str	r3, [r7, #8]
 800cea6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cea8:	2200      	movs	r2, #0
 800ceaa:	2100      	movs	r1, #0
 800ceac:	2065      	movs	r0, #101	; 0x65
 800ceae:	f7f4 fc7a 	bl	80017a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ceb2:	2065      	movs	r0, #101	; 0x65
 800ceb4:	f7f4 fc91 	bl	80017da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ceb8:	bf00      	nop
 800ceba:	37e8      	adds	r7, #232	; 0xe8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}
 800cec0:	40080000 	.word	0x40080000
 800cec4:	58024400 	.word	0x58024400
 800cec8:	58020000 	.word	0x58020000

0800cecc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800cee0:	4619      	mov	r1, r3
 800cee2:	4610      	mov	r0, r2
 800cee4:	f7fe fa55 	bl	800b392 <USBD_LL_SetupStage>
}
 800cee8:	bf00      	nop
 800ceea:	3708      	adds	r7, #8
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	460b      	mov	r3, r1
 800cefa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800cf02:	78fa      	ldrb	r2, [r7, #3]
 800cf04:	6879      	ldr	r1, [r7, #4]
 800cf06:	4613      	mov	r3, r2
 800cf08:	00db      	lsls	r3, r3, #3
 800cf0a:	4413      	add	r3, r2
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	440b      	add	r3, r1
 800cf10:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	78fb      	ldrb	r3, [r7, #3]
 800cf18:	4619      	mov	r1, r3
 800cf1a:	f7fe fa8f 	bl	800b43c <USBD_LL_DataOutStage>
}
 800cf1e:	bf00      	nop
 800cf20:	3708      	adds	r7, #8
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf26:	b580      	push	{r7, lr}
 800cf28:	b082      	sub	sp, #8
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
 800cf2e:	460b      	mov	r3, r1
 800cf30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800cf38:	78fa      	ldrb	r2, [r7, #3]
 800cf3a:	6879      	ldr	r1, [r7, #4]
 800cf3c:	4613      	mov	r3, r2
 800cf3e:	00db      	lsls	r3, r3, #3
 800cf40:	4413      	add	r3, r2
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	440b      	add	r3, r1
 800cf46:	3348      	adds	r3, #72	; 0x48
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	78fb      	ldrb	r3, [r7, #3]
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	f7fe fb28 	bl	800b5a2 <USBD_LL_DataInStage>
}
 800cf52:	bf00      	nop
 800cf54:	3708      	adds	r7, #8
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b082      	sub	sp, #8
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f7fe fc62 	bl	800b832 <USBD_LL_SOF>
}
 800cf6e:	bf00      	nop
 800cf70:	3708      	adds	r7, #8
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}

0800cf76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf76:	b580      	push	{r7, lr}
 800cf78:	b084      	sub	sp, #16
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	691b      	ldr	r3, [r3, #16]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d102      	bne.n	800cf90 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	73fb      	strb	r3, [r7, #15]
 800cf8e:	e008      	b.n	800cfa2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	691b      	ldr	r3, [r3, #16]
 800cf94:	2b02      	cmp	r3, #2
 800cf96:	d102      	bne.n	800cf9e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cf98:	2301      	movs	r3, #1
 800cf9a:	73fb      	strb	r3, [r7, #15]
 800cf9c:	e001      	b.n	800cfa2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cf9e:	f7f3 ff23 	bl	8000de8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cfa8:	7bfa      	ldrb	r2, [r7, #15]
 800cfaa:	4611      	mov	r1, r2
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7fe fbfc 	bl	800b7aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7fe fba4 	bl	800b706 <USBD_LL_Reset>
}
 800cfbe:	bf00      	nop
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
	...

0800cfc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7fe fbf7 	bl	800b7ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	687a      	ldr	r2, [r7, #4]
 800cfe8:	6812      	ldr	r2, [r2, #0]
 800cfea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cfee:	f043 0301 	orr.w	r3, r3, #1
 800cff2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6a1b      	ldr	r3, [r3, #32]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d005      	beq.n	800d008 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cffc:	4b04      	ldr	r3, [pc, #16]	; (800d010 <HAL_PCD_SuspendCallback+0x48>)
 800cffe:	691b      	ldr	r3, [r3, #16]
 800d000:	4a03      	ldr	r2, [pc, #12]	; (800d010 <HAL_PCD_SuspendCallback+0x48>)
 800d002:	f043 0306 	orr.w	r3, r3, #6
 800d006:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d008:	bf00      	nop
 800d00a:	3708      	adds	r7, #8
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}
 800d010:	e000ed00 	.word	0xe000ed00

0800d014 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b082      	sub	sp, #8
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d022:	4618      	mov	r0, r3
 800d024:	f7fe fbed 	bl	800b802 <USBD_LL_Resume>
}
 800d028:	bf00      	nop
 800d02a:	3708      	adds	r7, #8
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	460b      	mov	r3, r1
 800d03a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d042:	78fa      	ldrb	r2, [r7, #3]
 800d044:	4611      	mov	r1, r2
 800d046:	4618      	mov	r0, r3
 800d048:	f7fe fc45 	bl	800b8d6 <USBD_LL_IsoOUTIncomplete>
}
 800d04c:	bf00      	nop
 800d04e:	3708      	adds	r7, #8
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	460b      	mov	r3, r1
 800d05e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d066:	78fa      	ldrb	r2, [r7, #3]
 800d068:	4611      	mov	r1, r2
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fe fc01 	bl	800b872 <USBD_LL_IsoINIncomplete>
}
 800d070:	bf00      	nop
 800d072:	3708      	adds	r7, #8
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d086:	4618      	mov	r0, r3
 800d088:	f7fe fc57 	bl	800b93a <USBD_LL_DevConnected>
}
 800d08c:	bf00      	nop
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7fe fc54 	bl	800b950 <USBD_LL_DevDisconnected>
}
 800d0a8:	bf00      	nop
 800d0aa:	3708      	adds	r7, #8
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d140      	bne.n	800d142 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d0c0:	4a22      	ldr	r2, [pc, #136]	; (800d14c <USBD_LL_Init+0x9c>)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	4a20      	ldr	r2, [pc, #128]	; (800d14c <USBD_LL_Init+0x9c>)
 800d0cc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d0d0:	4b1e      	ldr	r3, [pc, #120]	; (800d14c <USBD_LL_Init+0x9c>)
 800d0d2:	4a1f      	ldr	r2, [pc, #124]	; (800d150 <USBD_LL_Init+0xa0>)
 800d0d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800d0d6:	4b1d      	ldr	r3, [pc, #116]	; (800d14c <USBD_LL_Init+0x9c>)
 800d0d8:	2209      	movs	r2, #9
 800d0da:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d0dc:	4b1b      	ldr	r3, [pc, #108]	; (800d14c <USBD_LL_Init+0x9c>)
 800d0de:	2202      	movs	r2, #2
 800d0e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d0e2:	4b1a      	ldr	r3, [pc, #104]	; (800d14c <USBD_LL_Init+0x9c>)
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d0e8:	4b18      	ldr	r3, [pc, #96]	; (800d14c <USBD_LL_Init+0x9c>)
 800d0ea:	2202      	movs	r2, #2
 800d0ec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d0ee:	4b17      	ldr	r3, [pc, #92]	; (800d14c <USBD_LL_Init+0x9c>)
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d0f4:	4b15      	ldr	r3, [pc, #84]	; (800d14c <USBD_LL_Init+0x9c>)
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d0fa:	4b14      	ldr	r3, [pc, #80]	; (800d14c <USBD_LL_Init+0x9c>)
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d100:	4b12      	ldr	r3, [pc, #72]	; (800d14c <USBD_LL_Init+0x9c>)
 800d102:	2200      	movs	r2, #0
 800d104:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800d106:	4b11      	ldr	r3, [pc, #68]	; (800d14c <USBD_LL_Init+0x9c>)
 800d108:	2201      	movs	r2, #1
 800d10a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d10c:	4b0f      	ldr	r3, [pc, #60]	; (800d14c <USBD_LL_Init+0x9c>)
 800d10e:	2200      	movs	r2, #0
 800d110:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d112:	480e      	ldr	r0, [pc, #56]	; (800d14c <USBD_LL_Init+0x9c>)
 800d114:	f7f7 faf3 	bl	80046fe <HAL_PCD_Init>
 800d118:	4603      	mov	r3, r0
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d001      	beq.n	800d122 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800d11e:	f7f3 fe63 	bl	8000de8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x200);
 800d122:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d126:	4809      	ldr	r0, [pc, #36]	; (800d14c <USBD_LL_Init+0x9c>)
 800d128:	f7f8 fd61 	bl	8005bee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x80);
 800d12c:	2280      	movs	r2, #128	; 0x80
 800d12e:	2100      	movs	r1, #0
 800d130:	4806      	ldr	r0, [pc, #24]	; (800d14c <USBD_LL_Init+0x9c>)
 800d132:	f7f8 fd15 	bl	8005b60 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x200);
 800d136:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d13a:	2101      	movs	r1, #1
 800d13c:	4803      	ldr	r0, [pc, #12]	; (800d14c <USBD_LL_Init+0x9c>)
 800d13e:	f7f8 fd0f 	bl	8005b60 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800d142:	2300      	movs	r3, #0
}
 800d144:	4618      	mov	r0, r3
 800d146:	3708      	adds	r7, #8
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	240026f4 	.word	0x240026f4
 800d150:	40080000 	.word	0x40080000

0800d154 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d15c:	2300      	movs	r3, #0
 800d15e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d160:	2300      	movs	r3, #0
 800d162:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7f7 fbeb 	bl	8004946 <HAL_PCD_Start>
 800d170:	4603      	mov	r3, r0
 800d172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d174:	7bfb      	ldrb	r3, [r7, #15]
 800d176:	4618      	mov	r0, r3
 800d178:	f000 f942 	bl	800d400 <USBD_Get_USB_Status>
 800d17c:	4603      	mov	r3, r0
 800d17e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d180:	7bbb      	ldrb	r3, [r7, #14]
}
 800d182:	4618      	mov	r0, r3
 800d184:	3710      	adds	r7, #16
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}

0800d18a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d18a:	b580      	push	{r7, lr}
 800d18c:	b084      	sub	sp, #16
 800d18e:	af00      	add	r7, sp, #0
 800d190:	6078      	str	r0, [r7, #4]
 800d192:	4608      	mov	r0, r1
 800d194:	4611      	mov	r1, r2
 800d196:	461a      	mov	r2, r3
 800d198:	4603      	mov	r3, r0
 800d19a:	70fb      	strb	r3, [r7, #3]
 800d19c:	460b      	mov	r3, r1
 800d19e:	70bb      	strb	r3, [r7, #2]
 800d1a0:	4613      	mov	r3, r2
 800d1a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d1b2:	78bb      	ldrb	r3, [r7, #2]
 800d1b4:	883a      	ldrh	r2, [r7, #0]
 800d1b6:	78f9      	ldrb	r1, [r7, #3]
 800d1b8:	f7f8 f8eb 	bl	8005392 <HAL_PCD_EP_Open>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1c0:	7bfb      	ldrb	r3, [r7, #15]
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f000 f91c 	bl	800d400 <USBD_Get_USB_Status>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3710      	adds	r7, #16
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}

0800d1d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1d6:	b580      	push	{r7, lr}
 800d1d8:	b084      	sub	sp, #16
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
 800d1de:	460b      	mov	r3, r1
 800d1e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d1f0:	78fa      	ldrb	r2, [r7, #3]
 800d1f2:	4611      	mov	r1, r2
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f7f8 f934 	bl	8005462 <HAL_PCD_EP_Close>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1fe:	7bfb      	ldrb	r3, [r7, #15]
 800d200:	4618      	mov	r0, r3
 800d202:	f000 f8fd 	bl	800d400 <USBD_Get_USB_Status>
 800d206:	4603      	mov	r3, r0
 800d208:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d20a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3710      	adds	r7, #16
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	460b      	mov	r3, r1
 800d21e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d220:	2300      	movs	r3, #0
 800d222:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d224:	2300      	movs	r3, #0
 800d226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d22e:	78fa      	ldrb	r2, [r7, #3]
 800d230:	4611      	mov	r1, r2
 800d232:	4618      	mov	r0, r3
 800d234:	f7f8 f9ee 	bl	8005614 <HAL_PCD_EP_SetStall>
 800d238:	4603      	mov	r3, r0
 800d23a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d23c:	7bfb      	ldrb	r3, [r7, #15]
 800d23e:	4618      	mov	r0, r3
 800d240:	f000 f8de 	bl	800d400 <USBD_Get_USB_Status>
 800d244:	4603      	mov	r3, r0
 800d246:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d248:	7bbb      	ldrb	r3, [r7, #14]
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3710      	adds	r7, #16
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}

0800d252 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d252:	b580      	push	{r7, lr}
 800d254:	b084      	sub	sp, #16
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
 800d25a:	460b      	mov	r3, r1
 800d25c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d25e:	2300      	movs	r3, #0
 800d260:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d262:	2300      	movs	r3, #0
 800d264:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d26c:	78fa      	ldrb	r2, [r7, #3]
 800d26e:	4611      	mov	r1, r2
 800d270:	4618      	mov	r0, r3
 800d272:	f7f8 fa33 	bl	80056dc <HAL_PCD_EP_ClrStall>
 800d276:	4603      	mov	r3, r0
 800d278:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d27a:	7bfb      	ldrb	r3, [r7, #15]
 800d27c:	4618      	mov	r0, r3
 800d27e:	f000 f8bf 	bl	800d400 <USBD_Get_USB_Status>
 800d282:	4603      	mov	r3, r0
 800d284:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d286:	7bbb      	ldrb	r3, [r7, #14]
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3710      	adds	r7, #16
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d290:	b480      	push	{r7}
 800d292:	b085      	sub	sp, #20
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	460b      	mov	r3, r1
 800d29a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d2a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d2a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	da0b      	bge.n	800d2c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d2ac:	78fb      	ldrb	r3, [r7, #3]
 800d2ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d2b2:	68f9      	ldr	r1, [r7, #12]
 800d2b4:	4613      	mov	r3, r2
 800d2b6:	00db      	lsls	r3, r3, #3
 800d2b8:	4413      	add	r3, r2
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	440b      	add	r3, r1
 800d2be:	333e      	adds	r3, #62	; 0x3e
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	e00b      	b.n	800d2dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d2c4:	78fb      	ldrb	r3, [r7, #3]
 800d2c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d2ca:	68f9      	ldr	r1, [r7, #12]
 800d2cc:	4613      	mov	r3, r2
 800d2ce:	00db      	lsls	r3, r3, #3
 800d2d0:	4413      	add	r3, r2
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	440b      	add	r3, r1
 800d2d6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d2da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3714      	adds	r7, #20
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e6:	4770      	bx	lr

0800d2e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d302:	78fa      	ldrb	r2, [r7, #3]
 800d304:	4611      	mov	r1, r2
 800d306:	4618      	mov	r0, r3
 800d308:	f7f8 f81e 	bl	8005348 <HAL_PCD_SetAddress>
 800d30c:	4603      	mov	r3, r0
 800d30e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d310:	7bfb      	ldrb	r3, [r7, #15]
 800d312:	4618      	mov	r0, r3
 800d314:	f000 f874 	bl	800d400 <USBD_Get_USB_Status>
 800d318:	4603      	mov	r3, r0
 800d31a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d31c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3710      	adds	r7, #16
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}

0800d326 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d326:	b580      	push	{r7, lr}
 800d328:	b086      	sub	sp, #24
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	60f8      	str	r0, [r7, #12]
 800d32e:	607a      	str	r2, [r7, #4]
 800d330:	603b      	str	r3, [r7, #0]
 800d332:	460b      	mov	r3, r1
 800d334:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d336:	2300      	movs	r3, #0
 800d338:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d33a:	2300      	movs	r3, #0
 800d33c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d344:	7af9      	ldrb	r1, [r7, #11]
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	687a      	ldr	r2, [r7, #4]
 800d34a:	f7f8 f928 	bl	800559e <HAL_PCD_EP_Transmit>
 800d34e:	4603      	mov	r3, r0
 800d350:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d352:	7dfb      	ldrb	r3, [r7, #23]
 800d354:	4618      	mov	r0, r3
 800d356:	f000 f853 	bl	800d400 <USBD_Get_USB_Status>
 800d35a:	4603      	mov	r3, r0
 800d35c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d35e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d360:	4618      	mov	r0, r3
 800d362:	3718      	adds	r7, #24
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}

0800d368 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b086      	sub	sp, #24
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	607a      	str	r2, [r7, #4]
 800d372:	603b      	str	r3, [r7, #0]
 800d374:	460b      	mov	r3, r1
 800d376:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d378:	2300      	movs	r3, #0
 800d37a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d37c:	2300      	movs	r3, #0
 800d37e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d386:	7af9      	ldrb	r1, [r7, #11]
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	687a      	ldr	r2, [r7, #4]
 800d38c:	f7f8 f8b3 	bl	80054f6 <HAL_PCD_EP_Receive>
 800d390:	4603      	mov	r3, r0
 800d392:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d394:	7dfb      	ldrb	r3, [r7, #23]
 800d396:	4618      	mov	r0, r3
 800d398:	f000 f832 	bl	800d400 <USBD_Get_USB_Status>
 800d39c:	4603      	mov	r3, r0
 800d39e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d3a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3718      	adds	r7, #24
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}

0800d3aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3aa:	b580      	push	{r7, lr}
 800d3ac:	b082      	sub	sp, #8
 800d3ae:	af00      	add	r7, sp, #0
 800d3b0:	6078      	str	r0, [r7, #4]
 800d3b2:	460b      	mov	r3, r1
 800d3b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d3bc:	78fa      	ldrb	r2, [r7, #3]
 800d3be:	4611      	mov	r1, r2
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7f8 f8d4 	bl	800556e <HAL_PCD_EP_GetRxCount>
 800d3c6:	4603      	mov	r3, r0
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3708      	adds	r7, #8
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d3d8:	4b03      	ldr	r3, [pc, #12]	; (800d3e8 <USBD_static_malloc+0x18>)
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	370c      	adds	r7, #12
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e4:	4770      	bx	lr
 800d3e6:	bf00      	nop
 800d3e8:	24002c00 	.word	0x24002c00

0800d3ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b083      	sub	sp, #12
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800d3f4:	bf00      	nop
 800d3f6:	370c      	adds	r7, #12
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr

0800d400 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d400:	b480      	push	{r7}
 800d402:	b085      	sub	sp, #20
 800d404:	af00      	add	r7, sp, #0
 800d406:	4603      	mov	r3, r0
 800d408:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d40a:	2300      	movs	r3, #0
 800d40c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d40e:	79fb      	ldrb	r3, [r7, #7]
 800d410:	2b03      	cmp	r3, #3
 800d412:	d817      	bhi.n	800d444 <USBD_Get_USB_Status+0x44>
 800d414:	a201      	add	r2, pc, #4	; (adr r2, 800d41c <USBD_Get_USB_Status+0x1c>)
 800d416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d41a:	bf00      	nop
 800d41c:	0800d42d 	.word	0x0800d42d
 800d420:	0800d433 	.word	0x0800d433
 800d424:	0800d439 	.word	0x0800d439
 800d428:	0800d43f 	.word	0x0800d43f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d42c:	2300      	movs	r3, #0
 800d42e:	73fb      	strb	r3, [r7, #15]
    break;
 800d430:	e00b      	b.n	800d44a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d432:	2303      	movs	r3, #3
 800d434:	73fb      	strb	r3, [r7, #15]
    break;
 800d436:	e008      	b.n	800d44a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d438:	2301      	movs	r3, #1
 800d43a:	73fb      	strb	r3, [r7, #15]
    break;
 800d43c:	e005      	b.n	800d44a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d43e:	2303      	movs	r3, #3
 800d440:	73fb      	strb	r3, [r7, #15]
    break;
 800d442:	e002      	b.n	800d44a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d444:	2303      	movs	r3, #3
 800d446:	73fb      	strb	r3, [r7, #15]
    break;
 800d448:	bf00      	nop
  }
  return usb_status;
 800d44a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3714      	adds	r7, #20
 800d450:	46bd      	mov	sp, r7
 800d452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d456:	4770      	bx	lr

0800d458 <std>:
 800d458:	2300      	movs	r3, #0
 800d45a:	b510      	push	{r4, lr}
 800d45c:	4604      	mov	r4, r0
 800d45e:	e9c0 3300 	strd	r3, r3, [r0]
 800d462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d466:	6083      	str	r3, [r0, #8]
 800d468:	8181      	strh	r1, [r0, #12]
 800d46a:	6643      	str	r3, [r0, #100]	; 0x64
 800d46c:	81c2      	strh	r2, [r0, #14]
 800d46e:	6183      	str	r3, [r0, #24]
 800d470:	4619      	mov	r1, r3
 800d472:	2208      	movs	r2, #8
 800d474:	305c      	adds	r0, #92	; 0x5c
 800d476:	f000 f967 	bl	800d748 <memset>
 800d47a:	4b0d      	ldr	r3, [pc, #52]	; (800d4b0 <std+0x58>)
 800d47c:	6223      	str	r3, [r4, #32]
 800d47e:	4b0d      	ldr	r3, [pc, #52]	; (800d4b4 <std+0x5c>)
 800d480:	6263      	str	r3, [r4, #36]	; 0x24
 800d482:	4b0d      	ldr	r3, [pc, #52]	; (800d4b8 <std+0x60>)
 800d484:	62a3      	str	r3, [r4, #40]	; 0x28
 800d486:	4b0d      	ldr	r3, [pc, #52]	; (800d4bc <std+0x64>)
 800d488:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d48a:	4b0d      	ldr	r3, [pc, #52]	; (800d4c0 <std+0x68>)
 800d48c:	61e4      	str	r4, [r4, #28]
 800d48e:	429c      	cmp	r4, r3
 800d490:	d006      	beq.n	800d4a0 <std+0x48>
 800d492:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d496:	4294      	cmp	r4, r2
 800d498:	d002      	beq.n	800d4a0 <std+0x48>
 800d49a:	33d0      	adds	r3, #208	; 0xd0
 800d49c:	429c      	cmp	r4, r3
 800d49e:	d105      	bne.n	800d4ac <std+0x54>
 800d4a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d4a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4a8:	f000 b9c6 	b.w	800d838 <__retarget_lock_init_recursive>
 800d4ac:	bd10      	pop	{r4, pc}
 800d4ae:	bf00      	nop
 800d4b0:	0800d6ad 	.word	0x0800d6ad
 800d4b4:	0800d6cf 	.word	0x0800d6cf
 800d4b8:	0800d707 	.word	0x0800d707
 800d4bc:	0800d72b 	.word	0x0800d72b
 800d4c0:	24002e20 	.word	0x24002e20

0800d4c4 <stdio_exit_handler>:
 800d4c4:	4a02      	ldr	r2, [pc, #8]	; (800d4d0 <stdio_exit_handler+0xc>)
 800d4c6:	4903      	ldr	r1, [pc, #12]	; (800d4d4 <stdio_exit_handler+0x10>)
 800d4c8:	4803      	ldr	r0, [pc, #12]	; (800d4d8 <stdio_exit_handler+0x14>)
 800d4ca:	f000 b869 	b.w	800d5a0 <_fwalk_sglue>
 800d4ce:	bf00      	nop
 800d4d0:	2400010c 	.word	0x2400010c
 800d4d4:	0800fd51 	.word	0x0800fd51
 800d4d8:	24000118 	.word	0x24000118

0800d4dc <cleanup_stdio>:
 800d4dc:	6841      	ldr	r1, [r0, #4]
 800d4de:	4b0c      	ldr	r3, [pc, #48]	; (800d510 <cleanup_stdio+0x34>)
 800d4e0:	4299      	cmp	r1, r3
 800d4e2:	b510      	push	{r4, lr}
 800d4e4:	4604      	mov	r4, r0
 800d4e6:	d001      	beq.n	800d4ec <cleanup_stdio+0x10>
 800d4e8:	f002 fc32 	bl	800fd50 <_fclose_r>
 800d4ec:	68a1      	ldr	r1, [r4, #8]
 800d4ee:	4b09      	ldr	r3, [pc, #36]	; (800d514 <cleanup_stdio+0x38>)
 800d4f0:	4299      	cmp	r1, r3
 800d4f2:	d002      	beq.n	800d4fa <cleanup_stdio+0x1e>
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	f002 fc2b 	bl	800fd50 <_fclose_r>
 800d4fa:	68e1      	ldr	r1, [r4, #12]
 800d4fc:	4b06      	ldr	r3, [pc, #24]	; (800d518 <cleanup_stdio+0x3c>)
 800d4fe:	4299      	cmp	r1, r3
 800d500:	d004      	beq.n	800d50c <cleanup_stdio+0x30>
 800d502:	4620      	mov	r0, r4
 800d504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d508:	f002 bc22 	b.w	800fd50 <_fclose_r>
 800d50c:	bd10      	pop	{r4, pc}
 800d50e:	bf00      	nop
 800d510:	24002e20 	.word	0x24002e20
 800d514:	24002e88 	.word	0x24002e88
 800d518:	24002ef0 	.word	0x24002ef0

0800d51c <global_stdio_init.part.0>:
 800d51c:	b510      	push	{r4, lr}
 800d51e:	4b0b      	ldr	r3, [pc, #44]	; (800d54c <global_stdio_init.part.0+0x30>)
 800d520:	4c0b      	ldr	r4, [pc, #44]	; (800d550 <global_stdio_init.part.0+0x34>)
 800d522:	4a0c      	ldr	r2, [pc, #48]	; (800d554 <global_stdio_init.part.0+0x38>)
 800d524:	601a      	str	r2, [r3, #0]
 800d526:	4620      	mov	r0, r4
 800d528:	2200      	movs	r2, #0
 800d52a:	2104      	movs	r1, #4
 800d52c:	f7ff ff94 	bl	800d458 <std>
 800d530:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d534:	2201      	movs	r2, #1
 800d536:	2109      	movs	r1, #9
 800d538:	f7ff ff8e 	bl	800d458 <std>
 800d53c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d540:	2202      	movs	r2, #2
 800d542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d546:	2112      	movs	r1, #18
 800d548:	f7ff bf86 	b.w	800d458 <std>
 800d54c:	24002f58 	.word	0x24002f58
 800d550:	24002e20 	.word	0x24002e20
 800d554:	0800d4c5 	.word	0x0800d4c5

0800d558 <__sfp_lock_acquire>:
 800d558:	4801      	ldr	r0, [pc, #4]	; (800d560 <__sfp_lock_acquire+0x8>)
 800d55a:	f000 b96f 	b.w	800d83c <__retarget_lock_acquire_recursive>
 800d55e:	bf00      	nop
 800d560:	24002f62 	.word	0x24002f62

0800d564 <__sfp_lock_release>:
 800d564:	4801      	ldr	r0, [pc, #4]	; (800d56c <__sfp_lock_release+0x8>)
 800d566:	f000 b96a 	b.w	800d83e <__retarget_lock_release_recursive>
 800d56a:	bf00      	nop
 800d56c:	24002f62 	.word	0x24002f62

0800d570 <__sinit>:
 800d570:	b510      	push	{r4, lr}
 800d572:	4604      	mov	r4, r0
 800d574:	f7ff fff0 	bl	800d558 <__sfp_lock_acquire>
 800d578:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d57a:	b11b      	cbz	r3, 800d584 <__sinit+0x14>
 800d57c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d580:	f7ff bff0 	b.w	800d564 <__sfp_lock_release>
 800d584:	4b04      	ldr	r3, [pc, #16]	; (800d598 <__sinit+0x28>)
 800d586:	6363      	str	r3, [r4, #52]	; 0x34
 800d588:	4b04      	ldr	r3, [pc, #16]	; (800d59c <__sinit+0x2c>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d1f5      	bne.n	800d57c <__sinit+0xc>
 800d590:	f7ff ffc4 	bl	800d51c <global_stdio_init.part.0>
 800d594:	e7f2      	b.n	800d57c <__sinit+0xc>
 800d596:	bf00      	nop
 800d598:	0800d4dd 	.word	0x0800d4dd
 800d59c:	24002f58 	.word	0x24002f58

0800d5a0 <_fwalk_sglue>:
 800d5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5a4:	4607      	mov	r7, r0
 800d5a6:	4688      	mov	r8, r1
 800d5a8:	4614      	mov	r4, r2
 800d5aa:	2600      	movs	r6, #0
 800d5ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d5b0:	f1b9 0901 	subs.w	r9, r9, #1
 800d5b4:	d505      	bpl.n	800d5c2 <_fwalk_sglue+0x22>
 800d5b6:	6824      	ldr	r4, [r4, #0]
 800d5b8:	2c00      	cmp	r4, #0
 800d5ba:	d1f7      	bne.n	800d5ac <_fwalk_sglue+0xc>
 800d5bc:	4630      	mov	r0, r6
 800d5be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5c2:	89ab      	ldrh	r3, [r5, #12]
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	d907      	bls.n	800d5d8 <_fwalk_sglue+0x38>
 800d5c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d5cc:	3301      	adds	r3, #1
 800d5ce:	d003      	beq.n	800d5d8 <_fwalk_sglue+0x38>
 800d5d0:	4629      	mov	r1, r5
 800d5d2:	4638      	mov	r0, r7
 800d5d4:	47c0      	blx	r8
 800d5d6:	4306      	orrs	r6, r0
 800d5d8:	3568      	adds	r5, #104	; 0x68
 800d5da:	e7e9      	b.n	800d5b0 <_fwalk_sglue+0x10>

0800d5dc <printf>:
 800d5dc:	b40f      	push	{r0, r1, r2, r3}
 800d5de:	b507      	push	{r0, r1, r2, lr}
 800d5e0:	4906      	ldr	r1, [pc, #24]	; (800d5fc <printf+0x20>)
 800d5e2:	ab04      	add	r3, sp, #16
 800d5e4:	6808      	ldr	r0, [r1, #0]
 800d5e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5ea:	6881      	ldr	r1, [r0, #8]
 800d5ec:	9301      	str	r3, [sp, #4]
 800d5ee:	f000 fc93 	bl	800df18 <_vfprintf_r>
 800d5f2:	b003      	add	sp, #12
 800d5f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5f8:	b004      	add	sp, #16
 800d5fa:	4770      	bx	lr
 800d5fc:	24000238 	.word	0x24000238

0800d600 <putchar>:
 800d600:	4b02      	ldr	r3, [pc, #8]	; (800d60c <putchar+0xc>)
 800d602:	4601      	mov	r1, r0
 800d604:	6818      	ldr	r0, [r3, #0]
 800d606:	6882      	ldr	r2, [r0, #8]
 800d608:	f002 bdf8 	b.w	80101fc <_putc_r>
 800d60c:	24000238 	.word	0x24000238

0800d610 <_puts_r>:
 800d610:	b530      	push	{r4, r5, lr}
 800d612:	4605      	mov	r5, r0
 800d614:	b089      	sub	sp, #36	; 0x24
 800d616:	4608      	mov	r0, r1
 800d618:	460c      	mov	r4, r1
 800d61a:	f7f2 fe6b 	bl	80002f4 <strlen>
 800d61e:	4b1e      	ldr	r3, [pc, #120]	; (800d698 <_puts_r+0x88>)
 800d620:	9306      	str	r3, [sp, #24]
 800d622:	2301      	movs	r3, #1
 800d624:	e9cd 4004 	strd	r4, r0, [sp, #16]
 800d628:	9307      	str	r3, [sp, #28]
 800d62a:	4418      	add	r0, r3
 800d62c:	ab04      	add	r3, sp, #16
 800d62e:	9301      	str	r3, [sp, #4]
 800d630:	2302      	movs	r3, #2
 800d632:	9302      	str	r3, [sp, #8]
 800d634:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800d636:	68ac      	ldr	r4, [r5, #8]
 800d638:	9003      	str	r0, [sp, #12]
 800d63a:	b913      	cbnz	r3, 800d642 <_puts_r+0x32>
 800d63c:	4628      	mov	r0, r5
 800d63e:	f7ff ff97 	bl	800d570 <__sinit>
 800d642:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d644:	07db      	lsls	r3, r3, #31
 800d646:	d405      	bmi.n	800d654 <_puts_r+0x44>
 800d648:	89a3      	ldrh	r3, [r4, #12]
 800d64a:	0598      	lsls	r0, r3, #22
 800d64c:	d402      	bmi.n	800d654 <_puts_r+0x44>
 800d64e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d650:	f000 f8f4 	bl	800d83c <__retarget_lock_acquire_recursive>
 800d654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d658:	0499      	lsls	r1, r3, #18
 800d65a:	d406      	bmi.n	800d66a <_puts_r+0x5a>
 800d65c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d660:	81a3      	strh	r3, [r4, #12]
 800d662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d664:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d668:	6663      	str	r3, [r4, #100]	; 0x64
 800d66a:	4628      	mov	r0, r5
 800d66c:	aa01      	add	r2, sp, #4
 800d66e:	4621      	mov	r1, r4
 800d670:	f002 fc7a 	bl	800ff68 <__sfvwrite_r>
 800d674:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d676:	2800      	cmp	r0, #0
 800d678:	bf14      	ite	ne
 800d67a:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800d67e:	250a      	moveq	r5, #10
 800d680:	07da      	lsls	r2, r3, #31
 800d682:	d405      	bmi.n	800d690 <_puts_r+0x80>
 800d684:	89a3      	ldrh	r3, [r4, #12]
 800d686:	059b      	lsls	r3, r3, #22
 800d688:	d402      	bmi.n	800d690 <_puts_r+0x80>
 800d68a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d68c:	f000 f8d7 	bl	800d83e <__retarget_lock_release_recursive>
 800d690:	4628      	mov	r0, r5
 800d692:	b009      	add	sp, #36	; 0x24
 800d694:	bd30      	pop	{r4, r5, pc}
 800d696:	bf00      	nop
 800d698:	0801234f 	.word	0x0801234f

0800d69c <puts>:
 800d69c:	4b02      	ldr	r3, [pc, #8]	; (800d6a8 <puts+0xc>)
 800d69e:	4601      	mov	r1, r0
 800d6a0:	6818      	ldr	r0, [r3, #0]
 800d6a2:	f7ff bfb5 	b.w	800d610 <_puts_r>
 800d6a6:	bf00      	nop
 800d6a8:	24000238 	.word	0x24000238

0800d6ac <__sread>:
 800d6ac:	b510      	push	{r4, lr}
 800d6ae:	460c      	mov	r4, r1
 800d6b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6b4:	f000 f872 	bl	800d79c <_read_r>
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	bfab      	itete	ge
 800d6bc:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800d6be:	89a3      	ldrhlt	r3, [r4, #12]
 800d6c0:	181b      	addge	r3, r3, r0
 800d6c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d6c6:	bfac      	ite	ge
 800d6c8:	6523      	strge	r3, [r4, #80]	; 0x50
 800d6ca:	81a3      	strhlt	r3, [r4, #12]
 800d6cc:	bd10      	pop	{r4, pc}

0800d6ce <__swrite>:
 800d6ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6d2:	461f      	mov	r7, r3
 800d6d4:	898b      	ldrh	r3, [r1, #12]
 800d6d6:	05db      	lsls	r3, r3, #23
 800d6d8:	4605      	mov	r5, r0
 800d6da:	460c      	mov	r4, r1
 800d6dc:	4616      	mov	r6, r2
 800d6de:	d505      	bpl.n	800d6ec <__swrite+0x1e>
 800d6e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6e4:	2302      	movs	r3, #2
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	f000 f846 	bl	800d778 <_lseek_r>
 800d6ec:	89a3      	ldrh	r3, [r4, #12]
 800d6ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d6f6:	81a3      	strh	r3, [r4, #12]
 800d6f8:	4632      	mov	r2, r6
 800d6fa:	463b      	mov	r3, r7
 800d6fc:	4628      	mov	r0, r5
 800d6fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d702:	f000 b85d 	b.w	800d7c0 <_write_r>

0800d706 <__sseek>:
 800d706:	b510      	push	{r4, lr}
 800d708:	460c      	mov	r4, r1
 800d70a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d70e:	f000 f833 	bl	800d778 <_lseek_r>
 800d712:	1c43      	adds	r3, r0, #1
 800d714:	89a3      	ldrh	r3, [r4, #12]
 800d716:	bf15      	itete	ne
 800d718:	6520      	strne	r0, [r4, #80]	; 0x50
 800d71a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d71e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d722:	81a3      	strheq	r3, [r4, #12]
 800d724:	bf18      	it	ne
 800d726:	81a3      	strhne	r3, [r4, #12]
 800d728:	bd10      	pop	{r4, pc}

0800d72a <__sclose>:
 800d72a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d72e:	f000 b813 	b.w	800d758 <_close_r>
	...

0800d734 <vprintf>:
 800d734:	460b      	mov	r3, r1
 800d736:	4903      	ldr	r1, [pc, #12]	; (800d744 <vprintf+0x10>)
 800d738:	4602      	mov	r2, r0
 800d73a:	6808      	ldr	r0, [r1, #0]
 800d73c:	6881      	ldr	r1, [r0, #8]
 800d73e:	f000 bbeb 	b.w	800df18 <_vfprintf_r>
 800d742:	bf00      	nop
 800d744:	24000238 	.word	0x24000238

0800d748 <memset>:
 800d748:	4402      	add	r2, r0
 800d74a:	4603      	mov	r3, r0
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d100      	bne.n	800d752 <memset+0xa>
 800d750:	4770      	bx	lr
 800d752:	f803 1b01 	strb.w	r1, [r3], #1
 800d756:	e7f9      	b.n	800d74c <memset+0x4>

0800d758 <_close_r>:
 800d758:	b538      	push	{r3, r4, r5, lr}
 800d75a:	4d06      	ldr	r5, [pc, #24]	; (800d774 <_close_r+0x1c>)
 800d75c:	2300      	movs	r3, #0
 800d75e:	4604      	mov	r4, r0
 800d760:	4608      	mov	r0, r1
 800d762:	602b      	str	r3, [r5, #0]
 800d764:	f7f3 fd65 	bl	8001232 <_close>
 800d768:	1c43      	adds	r3, r0, #1
 800d76a:	d102      	bne.n	800d772 <_close_r+0x1a>
 800d76c:	682b      	ldr	r3, [r5, #0]
 800d76e:	b103      	cbz	r3, 800d772 <_close_r+0x1a>
 800d770:	6023      	str	r3, [r4, #0]
 800d772:	bd38      	pop	{r3, r4, r5, pc}
 800d774:	24002f5c 	.word	0x24002f5c

0800d778 <_lseek_r>:
 800d778:	b538      	push	{r3, r4, r5, lr}
 800d77a:	4d07      	ldr	r5, [pc, #28]	; (800d798 <_lseek_r+0x20>)
 800d77c:	4604      	mov	r4, r0
 800d77e:	4608      	mov	r0, r1
 800d780:	4611      	mov	r1, r2
 800d782:	2200      	movs	r2, #0
 800d784:	602a      	str	r2, [r5, #0]
 800d786:	461a      	mov	r2, r3
 800d788:	f7f3 fd7a 	bl	8001280 <_lseek>
 800d78c:	1c43      	adds	r3, r0, #1
 800d78e:	d102      	bne.n	800d796 <_lseek_r+0x1e>
 800d790:	682b      	ldr	r3, [r5, #0]
 800d792:	b103      	cbz	r3, 800d796 <_lseek_r+0x1e>
 800d794:	6023      	str	r3, [r4, #0]
 800d796:	bd38      	pop	{r3, r4, r5, pc}
 800d798:	24002f5c 	.word	0x24002f5c

0800d79c <_read_r>:
 800d79c:	b538      	push	{r3, r4, r5, lr}
 800d79e:	4d07      	ldr	r5, [pc, #28]	; (800d7bc <_read_r+0x20>)
 800d7a0:	4604      	mov	r4, r0
 800d7a2:	4608      	mov	r0, r1
 800d7a4:	4611      	mov	r1, r2
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	602a      	str	r2, [r5, #0]
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	f7f3 fd02 	bl	80011b4 <_read>
 800d7b0:	1c43      	adds	r3, r0, #1
 800d7b2:	d102      	bne.n	800d7ba <_read_r+0x1e>
 800d7b4:	682b      	ldr	r3, [r5, #0]
 800d7b6:	b103      	cbz	r3, 800d7ba <_read_r+0x1e>
 800d7b8:	6023      	str	r3, [r4, #0]
 800d7ba:	bd38      	pop	{r3, r4, r5, pc}
 800d7bc:	24002f5c 	.word	0x24002f5c

0800d7c0 <_write_r>:
 800d7c0:	b538      	push	{r3, r4, r5, lr}
 800d7c2:	4d07      	ldr	r5, [pc, #28]	; (800d7e0 <_write_r+0x20>)
 800d7c4:	4604      	mov	r4, r0
 800d7c6:	4608      	mov	r0, r1
 800d7c8:	4611      	mov	r1, r2
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	602a      	str	r2, [r5, #0]
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	f7f3 fd0d 	bl	80011ee <_write>
 800d7d4:	1c43      	adds	r3, r0, #1
 800d7d6:	d102      	bne.n	800d7de <_write_r+0x1e>
 800d7d8:	682b      	ldr	r3, [r5, #0]
 800d7da:	b103      	cbz	r3, 800d7de <_write_r+0x1e>
 800d7dc:	6023      	str	r3, [r4, #0]
 800d7de:	bd38      	pop	{r3, r4, r5, pc}
 800d7e0:	24002f5c 	.word	0x24002f5c

0800d7e4 <__errno>:
 800d7e4:	4b01      	ldr	r3, [pc, #4]	; (800d7ec <__errno+0x8>)
 800d7e6:	6818      	ldr	r0, [r3, #0]
 800d7e8:	4770      	bx	lr
 800d7ea:	bf00      	nop
 800d7ec:	24000238 	.word	0x24000238

0800d7f0 <__libc_init_array>:
 800d7f0:	b570      	push	{r4, r5, r6, lr}
 800d7f2:	4d0d      	ldr	r5, [pc, #52]	; (800d828 <__libc_init_array+0x38>)
 800d7f4:	4c0d      	ldr	r4, [pc, #52]	; (800d82c <__libc_init_array+0x3c>)
 800d7f6:	1b64      	subs	r4, r4, r5
 800d7f8:	10a4      	asrs	r4, r4, #2
 800d7fa:	2600      	movs	r6, #0
 800d7fc:	42a6      	cmp	r6, r4
 800d7fe:	d109      	bne.n	800d814 <__libc_init_array+0x24>
 800d800:	4d0b      	ldr	r5, [pc, #44]	; (800d830 <__libc_init_array+0x40>)
 800d802:	4c0c      	ldr	r4, [pc, #48]	; (800d834 <__libc_init_array+0x44>)
 800d804:	f004 fb4c 	bl	8011ea0 <_init>
 800d808:	1b64      	subs	r4, r4, r5
 800d80a:	10a4      	asrs	r4, r4, #2
 800d80c:	2600      	movs	r6, #0
 800d80e:	42a6      	cmp	r6, r4
 800d810:	d105      	bne.n	800d81e <__libc_init_array+0x2e>
 800d812:	bd70      	pop	{r4, r5, r6, pc}
 800d814:	f855 3b04 	ldr.w	r3, [r5], #4
 800d818:	4798      	blx	r3
 800d81a:	3601      	adds	r6, #1
 800d81c:	e7ee      	b.n	800d7fc <__libc_init_array+0xc>
 800d81e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d822:	4798      	blx	r3
 800d824:	3601      	adds	r6, #1
 800d826:	e7f2      	b.n	800d80e <__libc_init_array+0x1e>
 800d828:	0801235c 	.word	0x0801235c
 800d82c:	0801235c 	.word	0x0801235c
 800d830:	0801235c 	.word	0x0801235c
 800d834:	08012364 	.word	0x08012364

0800d838 <__retarget_lock_init_recursive>:
 800d838:	4770      	bx	lr

0800d83a <__retarget_lock_close_recursive>:
 800d83a:	4770      	bx	lr

0800d83c <__retarget_lock_acquire_recursive>:
 800d83c:	4770      	bx	lr

0800d83e <__retarget_lock_release_recursive>:
 800d83e:	4770      	bx	lr

0800d840 <register_fini>:
 800d840:	4b02      	ldr	r3, [pc, #8]	; (800d84c <register_fini+0xc>)
 800d842:	b113      	cbz	r3, 800d84a <register_fini+0xa>
 800d844:	4802      	ldr	r0, [pc, #8]	; (800d850 <register_fini+0x10>)
 800d846:	f000 b805 	b.w	800d854 <atexit>
 800d84a:	4770      	bx	lr
 800d84c:	00000000 	.word	0x00000000
 800d850:	0801050d 	.word	0x0801050d

0800d854 <atexit>:
 800d854:	2300      	movs	r3, #0
 800d856:	4601      	mov	r1, r0
 800d858:	461a      	mov	r2, r3
 800d85a:	4618      	mov	r0, r3
 800d85c:	f002 bebc 	b.w	80105d8 <__register_exitproc>

0800d860 <_malloc_trim_r>:
 800d860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d864:	4606      	mov	r6, r0
 800d866:	2008      	movs	r0, #8
 800d868:	460c      	mov	r4, r1
 800d86a:	f002 fe63 	bl	8010534 <sysconf>
 800d86e:	4f23      	ldr	r7, [pc, #140]	; (800d8fc <_malloc_trim_r+0x9c>)
 800d870:	4680      	mov	r8, r0
 800d872:	4630      	mov	r0, r6
 800d874:	f000 fb42 	bl	800defc <__malloc_lock>
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	685d      	ldr	r5, [r3, #4]
 800d87c:	f025 0503 	bic.w	r5, r5, #3
 800d880:	1b2c      	subs	r4, r5, r4
 800d882:	3c11      	subs	r4, #17
 800d884:	4444      	add	r4, r8
 800d886:	fbb4 f4f8 	udiv	r4, r4, r8
 800d88a:	3c01      	subs	r4, #1
 800d88c:	fb08 f404 	mul.w	r4, r8, r4
 800d890:	45a0      	cmp	r8, r4
 800d892:	dd05      	ble.n	800d8a0 <_malloc_trim_r+0x40>
 800d894:	4630      	mov	r0, r6
 800d896:	f000 fb37 	bl	800df08 <__malloc_unlock>
 800d89a:	2000      	movs	r0, #0
 800d89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8a0:	2100      	movs	r1, #0
 800d8a2:	4630      	mov	r0, r6
 800d8a4:	f002 fe22 	bl	80104ec <_sbrk_r>
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	442b      	add	r3, r5
 800d8ac:	4298      	cmp	r0, r3
 800d8ae:	d1f1      	bne.n	800d894 <_malloc_trim_r+0x34>
 800d8b0:	4261      	negs	r1, r4
 800d8b2:	4630      	mov	r0, r6
 800d8b4:	f002 fe1a 	bl	80104ec <_sbrk_r>
 800d8b8:	3001      	adds	r0, #1
 800d8ba:	d110      	bne.n	800d8de <_malloc_trim_r+0x7e>
 800d8bc:	2100      	movs	r1, #0
 800d8be:	4630      	mov	r0, r6
 800d8c0:	f002 fe14 	bl	80104ec <_sbrk_r>
 800d8c4:	68ba      	ldr	r2, [r7, #8]
 800d8c6:	1a83      	subs	r3, r0, r2
 800d8c8:	2b0f      	cmp	r3, #15
 800d8ca:	dde3      	ble.n	800d894 <_malloc_trim_r+0x34>
 800d8cc:	490c      	ldr	r1, [pc, #48]	; (800d900 <_malloc_trim_r+0xa0>)
 800d8ce:	6809      	ldr	r1, [r1, #0]
 800d8d0:	1a40      	subs	r0, r0, r1
 800d8d2:	490c      	ldr	r1, [pc, #48]	; (800d904 <_malloc_trim_r+0xa4>)
 800d8d4:	f043 0301 	orr.w	r3, r3, #1
 800d8d8:	6008      	str	r0, [r1, #0]
 800d8da:	6053      	str	r3, [r2, #4]
 800d8dc:	e7da      	b.n	800d894 <_malloc_trim_r+0x34>
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	4a08      	ldr	r2, [pc, #32]	; (800d904 <_malloc_trim_r+0xa4>)
 800d8e2:	1b2d      	subs	r5, r5, r4
 800d8e4:	f045 0501 	orr.w	r5, r5, #1
 800d8e8:	605d      	str	r5, [r3, #4]
 800d8ea:	6813      	ldr	r3, [r2, #0]
 800d8ec:	4630      	mov	r0, r6
 800d8ee:	1b1b      	subs	r3, r3, r4
 800d8f0:	6013      	str	r3, [r2, #0]
 800d8f2:	f000 fb09 	bl	800df08 <__malloc_unlock>
 800d8f6:	2001      	movs	r0, #1
 800d8f8:	e7d0      	b.n	800d89c <_malloc_trim_r+0x3c>
 800d8fa:	bf00      	nop
 800d8fc:	24000240 	.word	0x24000240
 800d900:	24000648 	.word	0x24000648
 800d904:	24002f68 	.word	0x24002f68

0800d908 <_free_r>:
 800d908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d90a:	4605      	mov	r5, r0
 800d90c:	460f      	mov	r7, r1
 800d90e:	2900      	cmp	r1, #0
 800d910:	f000 80b1 	beq.w	800da76 <_free_r+0x16e>
 800d914:	f000 faf2 	bl	800defc <__malloc_lock>
 800d918:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800d91c:	4856      	ldr	r0, [pc, #344]	; (800da78 <_free_r+0x170>)
 800d91e:	f022 0401 	bic.w	r4, r2, #1
 800d922:	f1a7 0308 	sub.w	r3, r7, #8
 800d926:	eb03 0c04 	add.w	ip, r3, r4
 800d92a:	6881      	ldr	r1, [r0, #8]
 800d92c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800d930:	4561      	cmp	r1, ip
 800d932:	f026 0603 	bic.w	r6, r6, #3
 800d936:	f002 0201 	and.w	r2, r2, #1
 800d93a:	d11b      	bne.n	800d974 <_free_r+0x6c>
 800d93c:	4426      	add	r6, r4
 800d93e:	b93a      	cbnz	r2, 800d950 <_free_r+0x48>
 800d940:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800d944:	1a9b      	subs	r3, r3, r2
 800d946:	4416      	add	r6, r2
 800d948:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800d94c:	60ca      	str	r2, [r1, #12]
 800d94e:	6091      	str	r1, [r2, #8]
 800d950:	f046 0201 	orr.w	r2, r6, #1
 800d954:	605a      	str	r2, [r3, #4]
 800d956:	6083      	str	r3, [r0, #8]
 800d958:	4b48      	ldr	r3, [pc, #288]	; (800da7c <_free_r+0x174>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	42b3      	cmp	r3, r6
 800d95e:	d804      	bhi.n	800d96a <_free_r+0x62>
 800d960:	4b47      	ldr	r3, [pc, #284]	; (800da80 <_free_r+0x178>)
 800d962:	4628      	mov	r0, r5
 800d964:	6819      	ldr	r1, [r3, #0]
 800d966:	f7ff ff7b 	bl	800d860 <_malloc_trim_r>
 800d96a:	4628      	mov	r0, r5
 800d96c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d970:	f000 baca 	b.w	800df08 <__malloc_unlock>
 800d974:	f8cc 6004 	str.w	r6, [ip, #4]
 800d978:	2a00      	cmp	r2, #0
 800d97a:	d138      	bne.n	800d9ee <_free_r+0xe6>
 800d97c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800d980:	1a5b      	subs	r3, r3, r1
 800d982:	440c      	add	r4, r1
 800d984:	6899      	ldr	r1, [r3, #8]
 800d986:	f100 0708 	add.w	r7, r0, #8
 800d98a:	42b9      	cmp	r1, r7
 800d98c:	d031      	beq.n	800d9f2 <_free_r+0xea>
 800d98e:	68df      	ldr	r7, [r3, #12]
 800d990:	60cf      	str	r7, [r1, #12]
 800d992:	60b9      	str	r1, [r7, #8]
 800d994:	eb0c 0106 	add.w	r1, ip, r6
 800d998:	6849      	ldr	r1, [r1, #4]
 800d99a:	07c9      	lsls	r1, r1, #31
 800d99c:	d40b      	bmi.n	800d9b6 <_free_r+0xae>
 800d99e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800d9a2:	4434      	add	r4, r6
 800d9a4:	bb3a      	cbnz	r2, 800d9f6 <_free_r+0xee>
 800d9a6:	4e37      	ldr	r6, [pc, #220]	; (800da84 <_free_r+0x17c>)
 800d9a8:	42b1      	cmp	r1, r6
 800d9aa:	d124      	bne.n	800d9f6 <_free_r+0xee>
 800d9ac:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d9b0:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800d9b4:	2201      	movs	r2, #1
 800d9b6:	f044 0101 	orr.w	r1, r4, #1
 800d9ba:	6059      	str	r1, [r3, #4]
 800d9bc:	511c      	str	r4, [r3, r4]
 800d9be:	2a00      	cmp	r2, #0
 800d9c0:	d1d3      	bne.n	800d96a <_free_r+0x62>
 800d9c2:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800d9c6:	d21b      	bcs.n	800da00 <_free_r+0xf8>
 800d9c8:	08e2      	lsrs	r2, r4, #3
 800d9ca:	2101      	movs	r1, #1
 800d9cc:	0964      	lsrs	r4, r4, #5
 800d9ce:	40a1      	lsls	r1, r4
 800d9d0:	6844      	ldr	r4, [r0, #4]
 800d9d2:	3201      	adds	r2, #1
 800d9d4:	4321      	orrs	r1, r4
 800d9d6:	6041      	str	r1, [r0, #4]
 800d9d8:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800d9dc:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800d9e0:	3908      	subs	r1, #8
 800d9e2:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800d9e6:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800d9ea:	60e3      	str	r3, [r4, #12]
 800d9ec:	e7bd      	b.n	800d96a <_free_r+0x62>
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	e7d0      	b.n	800d994 <_free_r+0x8c>
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	e7ce      	b.n	800d994 <_free_r+0x8c>
 800d9f6:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800d9fa:	60ce      	str	r6, [r1, #12]
 800d9fc:	60b1      	str	r1, [r6, #8]
 800d9fe:	e7da      	b.n	800d9b6 <_free_r+0xae>
 800da00:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800da04:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800da08:	d214      	bcs.n	800da34 <_free_r+0x12c>
 800da0a:	09a2      	lsrs	r2, r4, #6
 800da0c:	3238      	adds	r2, #56	; 0x38
 800da0e:	1c51      	adds	r1, r2, #1
 800da10:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800da14:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800da18:	428e      	cmp	r6, r1
 800da1a:	d125      	bne.n	800da68 <_free_r+0x160>
 800da1c:	2401      	movs	r4, #1
 800da1e:	1092      	asrs	r2, r2, #2
 800da20:	fa04 f202 	lsl.w	r2, r4, r2
 800da24:	6844      	ldr	r4, [r0, #4]
 800da26:	4322      	orrs	r2, r4
 800da28:	6042      	str	r2, [r0, #4]
 800da2a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800da2e:	60b3      	str	r3, [r6, #8]
 800da30:	60cb      	str	r3, [r1, #12]
 800da32:	e79a      	b.n	800d96a <_free_r+0x62>
 800da34:	2a14      	cmp	r2, #20
 800da36:	d801      	bhi.n	800da3c <_free_r+0x134>
 800da38:	325b      	adds	r2, #91	; 0x5b
 800da3a:	e7e8      	b.n	800da0e <_free_r+0x106>
 800da3c:	2a54      	cmp	r2, #84	; 0x54
 800da3e:	d802      	bhi.n	800da46 <_free_r+0x13e>
 800da40:	0b22      	lsrs	r2, r4, #12
 800da42:	326e      	adds	r2, #110	; 0x6e
 800da44:	e7e3      	b.n	800da0e <_free_r+0x106>
 800da46:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800da4a:	d802      	bhi.n	800da52 <_free_r+0x14a>
 800da4c:	0be2      	lsrs	r2, r4, #15
 800da4e:	3277      	adds	r2, #119	; 0x77
 800da50:	e7dd      	b.n	800da0e <_free_r+0x106>
 800da52:	f240 5154 	movw	r1, #1364	; 0x554
 800da56:	428a      	cmp	r2, r1
 800da58:	bf9a      	itte	ls
 800da5a:	0ca2      	lsrls	r2, r4, #18
 800da5c:	327c      	addls	r2, #124	; 0x7c
 800da5e:	227e      	movhi	r2, #126	; 0x7e
 800da60:	e7d5      	b.n	800da0e <_free_r+0x106>
 800da62:	6889      	ldr	r1, [r1, #8]
 800da64:	428e      	cmp	r6, r1
 800da66:	d004      	beq.n	800da72 <_free_r+0x16a>
 800da68:	684a      	ldr	r2, [r1, #4]
 800da6a:	f022 0203 	bic.w	r2, r2, #3
 800da6e:	42a2      	cmp	r2, r4
 800da70:	d8f7      	bhi.n	800da62 <_free_r+0x15a>
 800da72:	68ce      	ldr	r6, [r1, #12]
 800da74:	e7d9      	b.n	800da2a <_free_r+0x122>
 800da76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da78:	24000240 	.word	0x24000240
 800da7c:	2400064c 	.word	0x2400064c
 800da80:	24002f98 	.word	0x24002f98
 800da84:	24000248 	.word	0x24000248

0800da88 <_malloc_r>:
 800da88:	f101 030b 	add.w	r3, r1, #11
 800da8c:	2b16      	cmp	r3, #22
 800da8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da92:	4605      	mov	r5, r0
 800da94:	d906      	bls.n	800daa4 <_malloc_r+0x1c>
 800da96:	f033 0707 	bics.w	r7, r3, #7
 800da9a:	d504      	bpl.n	800daa6 <_malloc_r+0x1e>
 800da9c:	230c      	movs	r3, #12
 800da9e:	602b      	str	r3, [r5, #0]
 800daa0:	2400      	movs	r4, #0
 800daa2:	e1a3      	b.n	800ddec <_malloc_r+0x364>
 800daa4:	2710      	movs	r7, #16
 800daa6:	42b9      	cmp	r1, r7
 800daa8:	d8f8      	bhi.n	800da9c <_malloc_r+0x14>
 800daaa:	4628      	mov	r0, r5
 800daac:	f000 fa26 	bl	800defc <__malloc_lock>
 800dab0:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800dab4:	4eaf      	ldr	r6, [pc, #700]	; (800dd74 <_malloc_r+0x2ec>)
 800dab6:	d237      	bcs.n	800db28 <_malloc_r+0xa0>
 800dab8:	f107 0208 	add.w	r2, r7, #8
 800dabc:	4432      	add	r2, r6
 800dabe:	f1a2 0108 	sub.w	r1, r2, #8
 800dac2:	6854      	ldr	r4, [r2, #4]
 800dac4:	428c      	cmp	r4, r1
 800dac6:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800daca:	d102      	bne.n	800dad2 <_malloc_r+0x4a>
 800dacc:	68d4      	ldr	r4, [r2, #12]
 800dace:	42a2      	cmp	r2, r4
 800dad0:	d010      	beq.n	800daf4 <_malloc_r+0x6c>
 800dad2:	6863      	ldr	r3, [r4, #4]
 800dad4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800dad8:	f023 0303 	bic.w	r3, r3, #3
 800dadc:	60ca      	str	r2, [r1, #12]
 800dade:	4423      	add	r3, r4
 800dae0:	6091      	str	r1, [r2, #8]
 800dae2:	685a      	ldr	r2, [r3, #4]
 800dae4:	f042 0201 	orr.w	r2, r2, #1
 800dae8:	605a      	str	r2, [r3, #4]
 800daea:	4628      	mov	r0, r5
 800daec:	f000 fa0c 	bl	800df08 <__malloc_unlock>
 800daf0:	3408      	adds	r4, #8
 800daf2:	e17b      	b.n	800ddec <_malloc_r+0x364>
 800daf4:	3302      	adds	r3, #2
 800daf6:	6934      	ldr	r4, [r6, #16]
 800daf8:	499f      	ldr	r1, [pc, #636]	; (800dd78 <_malloc_r+0x2f0>)
 800dafa:	428c      	cmp	r4, r1
 800dafc:	d077      	beq.n	800dbee <_malloc_r+0x166>
 800dafe:	6862      	ldr	r2, [r4, #4]
 800db00:	f022 0c03 	bic.w	ip, r2, #3
 800db04:	ebac 0007 	sub.w	r0, ip, r7
 800db08:	280f      	cmp	r0, #15
 800db0a:	dd48      	ble.n	800db9e <_malloc_r+0x116>
 800db0c:	19e2      	adds	r2, r4, r7
 800db0e:	f040 0301 	orr.w	r3, r0, #1
 800db12:	f047 0701 	orr.w	r7, r7, #1
 800db16:	6067      	str	r7, [r4, #4]
 800db18:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800db1c:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800db20:	6053      	str	r3, [r2, #4]
 800db22:	f844 000c 	str.w	r0, [r4, ip]
 800db26:	e7e0      	b.n	800daea <_malloc_r+0x62>
 800db28:	0a7b      	lsrs	r3, r7, #9
 800db2a:	d02a      	beq.n	800db82 <_malloc_r+0xfa>
 800db2c:	2b04      	cmp	r3, #4
 800db2e:	d812      	bhi.n	800db56 <_malloc_r+0xce>
 800db30:	09bb      	lsrs	r3, r7, #6
 800db32:	3338      	adds	r3, #56	; 0x38
 800db34:	1c5a      	adds	r2, r3, #1
 800db36:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800db3a:	f1a2 0c08 	sub.w	ip, r2, #8
 800db3e:	6854      	ldr	r4, [r2, #4]
 800db40:	4564      	cmp	r4, ip
 800db42:	d006      	beq.n	800db52 <_malloc_r+0xca>
 800db44:	6862      	ldr	r2, [r4, #4]
 800db46:	f022 0203 	bic.w	r2, r2, #3
 800db4a:	1bd0      	subs	r0, r2, r7
 800db4c:	280f      	cmp	r0, #15
 800db4e:	dd1c      	ble.n	800db8a <_malloc_r+0x102>
 800db50:	3b01      	subs	r3, #1
 800db52:	3301      	adds	r3, #1
 800db54:	e7cf      	b.n	800daf6 <_malloc_r+0x6e>
 800db56:	2b14      	cmp	r3, #20
 800db58:	d801      	bhi.n	800db5e <_malloc_r+0xd6>
 800db5a:	335b      	adds	r3, #91	; 0x5b
 800db5c:	e7ea      	b.n	800db34 <_malloc_r+0xac>
 800db5e:	2b54      	cmp	r3, #84	; 0x54
 800db60:	d802      	bhi.n	800db68 <_malloc_r+0xe0>
 800db62:	0b3b      	lsrs	r3, r7, #12
 800db64:	336e      	adds	r3, #110	; 0x6e
 800db66:	e7e5      	b.n	800db34 <_malloc_r+0xac>
 800db68:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800db6c:	d802      	bhi.n	800db74 <_malloc_r+0xec>
 800db6e:	0bfb      	lsrs	r3, r7, #15
 800db70:	3377      	adds	r3, #119	; 0x77
 800db72:	e7df      	b.n	800db34 <_malloc_r+0xac>
 800db74:	f240 5254 	movw	r2, #1364	; 0x554
 800db78:	4293      	cmp	r3, r2
 800db7a:	d804      	bhi.n	800db86 <_malloc_r+0xfe>
 800db7c:	0cbb      	lsrs	r3, r7, #18
 800db7e:	337c      	adds	r3, #124	; 0x7c
 800db80:	e7d8      	b.n	800db34 <_malloc_r+0xac>
 800db82:	233f      	movs	r3, #63	; 0x3f
 800db84:	e7d6      	b.n	800db34 <_malloc_r+0xac>
 800db86:	237e      	movs	r3, #126	; 0x7e
 800db88:	e7d4      	b.n	800db34 <_malloc_r+0xac>
 800db8a:	2800      	cmp	r0, #0
 800db8c:	68e1      	ldr	r1, [r4, #12]
 800db8e:	db04      	blt.n	800db9a <_malloc_r+0x112>
 800db90:	68a3      	ldr	r3, [r4, #8]
 800db92:	60d9      	str	r1, [r3, #12]
 800db94:	608b      	str	r3, [r1, #8]
 800db96:	18a3      	adds	r3, r4, r2
 800db98:	e7a3      	b.n	800dae2 <_malloc_r+0x5a>
 800db9a:	460c      	mov	r4, r1
 800db9c:	e7d0      	b.n	800db40 <_malloc_r+0xb8>
 800db9e:	2800      	cmp	r0, #0
 800dba0:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800dba4:	db07      	blt.n	800dbb6 <_malloc_r+0x12e>
 800dba6:	44a4      	add	ip, r4
 800dba8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800dbac:	f043 0301 	orr.w	r3, r3, #1
 800dbb0:	f8cc 3004 	str.w	r3, [ip, #4]
 800dbb4:	e799      	b.n	800daea <_malloc_r+0x62>
 800dbb6:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800dbba:	6870      	ldr	r0, [r6, #4]
 800dbbc:	f080 8095 	bcs.w	800dcea <_malloc_r+0x262>
 800dbc0:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800dbc4:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800dbc8:	f04f 0c01 	mov.w	ip, #1
 800dbcc:	3201      	adds	r2, #1
 800dbce:	fa0c fc0e 	lsl.w	ip, ip, lr
 800dbd2:	ea4c 0000 	orr.w	r0, ip, r0
 800dbd6:	6070      	str	r0, [r6, #4]
 800dbd8:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800dbdc:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800dbe0:	3808      	subs	r0, #8
 800dbe2:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800dbe6:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800dbea:	f8cc 400c 	str.w	r4, [ip, #12]
 800dbee:	1098      	asrs	r0, r3, #2
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	4082      	lsls	r2, r0
 800dbf4:	6870      	ldr	r0, [r6, #4]
 800dbf6:	4290      	cmp	r0, r2
 800dbf8:	d326      	bcc.n	800dc48 <_malloc_r+0x1c0>
 800dbfa:	4210      	tst	r0, r2
 800dbfc:	d106      	bne.n	800dc0c <_malloc_r+0x184>
 800dbfe:	f023 0303 	bic.w	r3, r3, #3
 800dc02:	0052      	lsls	r2, r2, #1
 800dc04:	4210      	tst	r0, r2
 800dc06:	f103 0304 	add.w	r3, r3, #4
 800dc0a:	d0fa      	beq.n	800dc02 <_malloc_r+0x17a>
 800dc0c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800dc10:	46c1      	mov	r9, r8
 800dc12:	469e      	mov	lr, r3
 800dc14:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800dc18:	454c      	cmp	r4, r9
 800dc1a:	f040 80b9 	bne.w	800dd90 <_malloc_r+0x308>
 800dc1e:	f10e 0e01 	add.w	lr, lr, #1
 800dc22:	f01e 0f03 	tst.w	lr, #3
 800dc26:	f109 0908 	add.w	r9, r9, #8
 800dc2a:	d1f3      	bne.n	800dc14 <_malloc_r+0x18c>
 800dc2c:	0798      	lsls	r0, r3, #30
 800dc2e:	f040 80e3 	bne.w	800ddf8 <_malloc_r+0x370>
 800dc32:	6873      	ldr	r3, [r6, #4]
 800dc34:	ea23 0302 	bic.w	r3, r3, r2
 800dc38:	6073      	str	r3, [r6, #4]
 800dc3a:	6870      	ldr	r0, [r6, #4]
 800dc3c:	0052      	lsls	r2, r2, #1
 800dc3e:	4290      	cmp	r0, r2
 800dc40:	d302      	bcc.n	800dc48 <_malloc_r+0x1c0>
 800dc42:	2a00      	cmp	r2, #0
 800dc44:	f040 80e5 	bne.w	800de12 <_malloc_r+0x38a>
 800dc48:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800dc4c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800dc50:	f023 0903 	bic.w	r9, r3, #3
 800dc54:	45b9      	cmp	r9, r7
 800dc56:	d304      	bcc.n	800dc62 <_malloc_r+0x1da>
 800dc58:	eba9 0207 	sub.w	r2, r9, r7
 800dc5c:	2a0f      	cmp	r2, #15
 800dc5e:	f300 8141 	bgt.w	800dee4 <_malloc_r+0x45c>
 800dc62:	4b46      	ldr	r3, [pc, #280]	; (800dd7c <_malloc_r+0x2f4>)
 800dc64:	6819      	ldr	r1, [r3, #0]
 800dc66:	3110      	adds	r1, #16
 800dc68:	4439      	add	r1, r7
 800dc6a:	2008      	movs	r0, #8
 800dc6c:	9101      	str	r1, [sp, #4]
 800dc6e:	f002 fc61 	bl	8010534 <sysconf>
 800dc72:	4a43      	ldr	r2, [pc, #268]	; (800dd80 <_malloc_r+0x2f8>)
 800dc74:	9901      	ldr	r1, [sp, #4]
 800dc76:	6813      	ldr	r3, [r2, #0]
 800dc78:	3301      	adds	r3, #1
 800dc7a:	bf1f      	itttt	ne
 800dc7c:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 800dc80:	1809      	addne	r1, r1, r0
 800dc82:	4243      	negne	r3, r0
 800dc84:	4019      	andne	r1, r3
 800dc86:	4680      	mov	r8, r0
 800dc88:	4628      	mov	r0, r5
 800dc8a:	9101      	str	r1, [sp, #4]
 800dc8c:	f002 fc2e 	bl	80104ec <_sbrk_r>
 800dc90:	1c42      	adds	r2, r0, #1
 800dc92:	eb0a 0b09 	add.w	fp, sl, r9
 800dc96:	4604      	mov	r4, r0
 800dc98:	f000 80f7 	beq.w	800de8a <_malloc_r+0x402>
 800dc9c:	4583      	cmp	fp, r0
 800dc9e:	9901      	ldr	r1, [sp, #4]
 800dca0:	4a37      	ldr	r2, [pc, #220]	; (800dd80 <_malloc_r+0x2f8>)
 800dca2:	d902      	bls.n	800dcaa <_malloc_r+0x222>
 800dca4:	45b2      	cmp	sl, r6
 800dca6:	f040 80f0 	bne.w	800de8a <_malloc_r+0x402>
 800dcaa:	4b36      	ldr	r3, [pc, #216]	; (800dd84 <_malloc_r+0x2fc>)
 800dcac:	6818      	ldr	r0, [r3, #0]
 800dcae:	45a3      	cmp	fp, r4
 800dcb0:	eb00 0e01 	add.w	lr, r0, r1
 800dcb4:	f8c3 e000 	str.w	lr, [r3]
 800dcb8:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 800dcbc:	f040 80ab 	bne.w	800de16 <_malloc_r+0x38e>
 800dcc0:	ea1b 0f0c 	tst.w	fp, ip
 800dcc4:	f040 80a7 	bne.w	800de16 <_malloc_r+0x38e>
 800dcc8:	68b2      	ldr	r2, [r6, #8]
 800dcca:	4449      	add	r1, r9
 800dccc:	f041 0101 	orr.w	r1, r1, #1
 800dcd0:	6051      	str	r1, [r2, #4]
 800dcd2:	4a2d      	ldr	r2, [pc, #180]	; (800dd88 <_malloc_r+0x300>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	6811      	ldr	r1, [r2, #0]
 800dcd8:	428b      	cmp	r3, r1
 800dcda:	bf88      	it	hi
 800dcdc:	6013      	strhi	r3, [r2, #0]
 800dcde:	4a2b      	ldr	r2, [pc, #172]	; (800dd8c <_malloc_r+0x304>)
 800dce0:	6811      	ldr	r1, [r2, #0]
 800dce2:	428b      	cmp	r3, r1
 800dce4:	bf88      	it	hi
 800dce6:	6013      	strhi	r3, [r2, #0]
 800dce8:	e0cf      	b.n	800de8a <_malloc_r+0x402>
 800dcea:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800dcee:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800dcf2:	d218      	bcs.n	800dd26 <_malloc_r+0x29e>
 800dcf4:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800dcf8:	3238      	adds	r2, #56	; 0x38
 800dcfa:	f102 0e01 	add.w	lr, r2, #1
 800dcfe:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800dd02:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800dd06:	45f0      	cmp	r8, lr
 800dd08:	d12b      	bne.n	800dd62 <_malloc_r+0x2da>
 800dd0a:	1092      	asrs	r2, r2, #2
 800dd0c:	f04f 0c01 	mov.w	ip, #1
 800dd10:	fa0c f202 	lsl.w	r2, ip, r2
 800dd14:	4302      	orrs	r2, r0
 800dd16:	6072      	str	r2, [r6, #4]
 800dd18:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800dd1c:	f8c8 4008 	str.w	r4, [r8, #8]
 800dd20:	f8ce 400c 	str.w	r4, [lr, #12]
 800dd24:	e763      	b.n	800dbee <_malloc_r+0x166>
 800dd26:	2a14      	cmp	r2, #20
 800dd28:	d801      	bhi.n	800dd2e <_malloc_r+0x2a6>
 800dd2a:	325b      	adds	r2, #91	; 0x5b
 800dd2c:	e7e5      	b.n	800dcfa <_malloc_r+0x272>
 800dd2e:	2a54      	cmp	r2, #84	; 0x54
 800dd30:	d803      	bhi.n	800dd3a <_malloc_r+0x2b2>
 800dd32:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800dd36:	326e      	adds	r2, #110	; 0x6e
 800dd38:	e7df      	b.n	800dcfa <_malloc_r+0x272>
 800dd3a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800dd3e:	d803      	bhi.n	800dd48 <_malloc_r+0x2c0>
 800dd40:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800dd44:	3277      	adds	r2, #119	; 0x77
 800dd46:	e7d8      	b.n	800dcfa <_malloc_r+0x272>
 800dd48:	f240 5e54 	movw	lr, #1364	; 0x554
 800dd4c:	4572      	cmp	r2, lr
 800dd4e:	bf9a      	itte	ls
 800dd50:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800dd54:	327c      	addls	r2, #124	; 0x7c
 800dd56:	227e      	movhi	r2, #126	; 0x7e
 800dd58:	e7cf      	b.n	800dcfa <_malloc_r+0x272>
 800dd5a:	f8de e008 	ldr.w	lr, [lr, #8]
 800dd5e:	45f0      	cmp	r8, lr
 800dd60:	d005      	beq.n	800dd6e <_malloc_r+0x2e6>
 800dd62:	f8de 2004 	ldr.w	r2, [lr, #4]
 800dd66:	f022 0203 	bic.w	r2, r2, #3
 800dd6a:	4562      	cmp	r2, ip
 800dd6c:	d8f5      	bhi.n	800dd5a <_malloc_r+0x2d2>
 800dd6e:	f8de 800c 	ldr.w	r8, [lr, #12]
 800dd72:	e7d1      	b.n	800dd18 <_malloc_r+0x290>
 800dd74:	24000240 	.word	0x24000240
 800dd78:	24000248 	.word	0x24000248
 800dd7c:	24002f98 	.word	0x24002f98
 800dd80:	24000648 	.word	0x24000648
 800dd84:	24002f68 	.word	0x24002f68
 800dd88:	24002f90 	.word	0x24002f90
 800dd8c:	24002f94 	.word	0x24002f94
 800dd90:	6860      	ldr	r0, [r4, #4]
 800dd92:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800dd96:	f020 0003 	bic.w	r0, r0, #3
 800dd9a:	eba0 0a07 	sub.w	sl, r0, r7
 800dd9e:	f1ba 0f0f 	cmp.w	sl, #15
 800dda2:	dd12      	ble.n	800ddca <_malloc_r+0x342>
 800dda4:	68a3      	ldr	r3, [r4, #8]
 800dda6:	19e2      	adds	r2, r4, r7
 800dda8:	f047 0701 	orr.w	r7, r7, #1
 800ddac:	6067      	str	r7, [r4, #4]
 800ddae:	f8c3 c00c 	str.w	ip, [r3, #12]
 800ddb2:	f8cc 3008 	str.w	r3, [ip, #8]
 800ddb6:	f04a 0301 	orr.w	r3, sl, #1
 800ddba:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800ddbe:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800ddc2:	6053      	str	r3, [r2, #4]
 800ddc4:	f844 a000 	str.w	sl, [r4, r0]
 800ddc8:	e68f      	b.n	800daea <_malloc_r+0x62>
 800ddca:	f1ba 0f00 	cmp.w	sl, #0
 800ddce:	db11      	blt.n	800ddf4 <_malloc_r+0x36c>
 800ddd0:	4420      	add	r0, r4
 800ddd2:	6843      	ldr	r3, [r0, #4]
 800ddd4:	f043 0301 	orr.w	r3, r3, #1
 800ddd8:	6043      	str	r3, [r0, #4]
 800ddda:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800ddde:	4628      	mov	r0, r5
 800dde0:	f8c3 c00c 	str.w	ip, [r3, #12]
 800dde4:	f8cc 3008 	str.w	r3, [ip, #8]
 800dde8:	f000 f88e 	bl	800df08 <__malloc_unlock>
 800ddec:	4620      	mov	r0, r4
 800ddee:	b003      	add	sp, #12
 800ddf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddf4:	4664      	mov	r4, ip
 800ddf6:	e70f      	b.n	800dc18 <_malloc_r+0x190>
 800ddf8:	f858 0908 	ldr.w	r0, [r8], #-8
 800ddfc:	4540      	cmp	r0, r8
 800ddfe:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800de02:	f43f af13 	beq.w	800dc2c <_malloc_r+0x1a4>
 800de06:	e718      	b.n	800dc3a <_malloc_r+0x1b2>
 800de08:	3304      	adds	r3, #4
 800de0a:	0052      	lsls	r2, r2, #1
 800de0c:	4210      	tst	r0, r2
 800de0e:	d0fb      	beq.n	800de08 <_malloc_r+0x380>
 800de10:	e6fc      	b.n	800dc0c <_malloc_r+0x184>
 800de12:	4673      	mov	r3, lr
 800de14:	e7fa      	b.n	800de0c <_malloc_r+0x384>
 800de16:	6810      	ldr	r0, [r2, #0]
 800de18:	3001      	adds	r0, #1
 800de1a:	bf1b      	ittet	ne
 800de1c:	eba4 0b0b 	subne.w	fp, r4, fp
 800de20:	eb0b 020e 	addne.w	r2, fp, lr
 800de24:	6014      	streq	r4, [r2, #0]
 800de26:	601a      	strne	r2, [r3, #0]
 800de28:	f014 0b07 	ands.w	fp, r4, #7
 800de2c:	bf1a      	itte	ne
 800de2e:	f1cb 0008 	rsbne	r0, fp, #8
 800de32:	1824      	addne	r4, r4, r0
 800de34:	4658      	moveq	r0, fp
 800de36:	1862      	adds	r2, r4, r1
 800de38:	ea02 010c 	and.w	r1, r2, ip
 800de3c:	4480      	add	r8, r0
 800de3e:	eba8 0801 	sub.w	r8, r8, r1
 800de42:	ea08 080c 	and.w	r8, r8, ip
 800de46:	4641      	mov	r1, r8
 800de48:	4628      	mov	r0, r5
 800de4a:	9201      	str	r2, [sp, #4]
 800de4c:	f002 fb4e 	bl	80104ec <_sbrk_r>
 800de50:	1c43      	adds	r3, r0, #1
 800de52:	9a01      	ldr	r2, [sp, #4]
 800de54:	4b28      	ldr	r3, [pc, #160]	; (800def8 <_malloc_r+0x470>)
 800de56:	d107      	bne.n	800de68 <_malloc_r+0x3e0>
 800de58:	f1bb 0f00 	cmp.w	fp, #0
 800de5c:	d023      	beq.n	800dea6 <_malloc_r+0x41e>
 800de5e:	f1ab 0008 	sub.w	r0, fp, #8
 800de62:	4410      	add	r0, r2
 800de64:	f04f 0800 	mov.w	r8, #0
 800de68:	681a      	ldr	r2, [r3, #0]
 800de6a:	60b4      	str	r4, [r6, #8]
 800de6c:	1b00      	subs	r0, r0, r4
 800de6e:	4440      	add	r0, r8
 800de70:	4442      	add	r2, r8
 800de72:	f040 0001 	orr.w	r0, r0, #1
 800de76:	45b2      	cmp	sl, r6
 800de78:	601a      	str	r2, [r3, #0]
 800de7a:	6060      	str	r0, [r4, #4]
 800de7c:	f43f af29 	beq.w	800dcd2 <_malloc_r+0x24a>
 800de80:	f1b9 0f0f 	cmp.w	r9, #15
 800de84:	d812      	bhi.n	800deac <_malloc_r+0x424>
 800de86:	2301      	movs	r3, #1
 800de88:	6063      	str	r3, [r4, #4]
 800de8a:	68b3      	ldr	r3, [r6, #8]
 800de8c:	685b      	ldr	r3, [r3, #4]
 800de8e:	f023 0303 	bic.w	r3, r3, #3
 800de92:	42bb      	cmp	r3, r7
 800de94:	eba3 0207 	sub.w	r2, r3, r7
 800de98:	d301      	bcc.n	800de9e <_malloc_r+0x416>
 800de9a:	2a0f      	cmp	r2, #15
 800de9c:	dc22      	bgt.n	800dee4 <_malloc_r+0x45c>
 800de9e:	4628      	mov	r0, r5
 800dea0:	f000 f832 	bl	800df08 <__malloc_unlock>
 800dea4:	e5fc      	b.n	800daa0 <_malloc_r+0x18>
 800dea6:	4610      	mov	r0, r2
 800dea8:	46d8      	mov	r8, fp
 800deaa:	e7dd      	b.n	800de68 <_malloc_r+0x3e0>
 800deac:	f8da 2004 	ldr.w	r2, [sl, #4]
 800deb0:	f1a9 090c 	sub.w	r9, r9, #12
 800deb4:	f029 0907 	bic.w	r9, r9, #7
 800deb8:	f002 0201 	and.w	r2, r2, #1
 800debc:	ea42 0209 	orr.w	r2, r2, r9
 800dec0:	f8ca 2004 	str.w	r2, [sl, #4]
 800dec4:	2105      	movs	r1, #5
 800dec6:	eb0a 0209 	add.w	r2, sl, r9
 800deca:	f1b9 0f0f 	cmp.w	r9, #15
 800dece:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800ded2:	f67f aefe 	bls.w	800dcd2 <_malloc_r+0x24a>
 800ded6:	f10a 0108 	add.w	r1, sl, #8
 800deda:	4628      	mov	r0, r5
 800dedc:	f7ff fd14 	bl	800d908 <_free_r>
 800dee0:	4b05      	ldr	r3, [pc, #20]	; (800def8 <_malloc_r+0x470>)
 800dee2:	e6f6      	b.n	800dcd2 <_malloc_r+0x24a>
 800dee4:	68b4      	ldr	r4, [r6, #8]
 800dee6:	f047 0301 	orr.w	r3, r7, #1
 800deea:	4427      	add	r7, r4
 800deec:	f042 0201 	orr.w	r2, r2, #1
 800def0:	6063      	str	r3, [r4, #4]
 800def2:	60b7      	str	r7, [r6, #8]
 800def4:	607a      	str	r2, [r7, #4]
 800def6:	e5f8      	b.n	800daea <_malloc_r+0x62>
 800def8:	24002f68 	.word	0x24002f68

0800defc <__malloc_lock>:
 800defc:	4801      	ldr	r0, [pc, #4]	; (800df04 <__malloc_lock+0x8>)
 800defe:	f7ff bc9d 	b.w	800d83c <__retarget_lock_acquire_recursive>
 800df02:	bf00      	nop
 800df04:	24002f61 	.word	0x24002f61

0800df08 <__malloc_unlock>:
 800df08:	4801      	ldr	r0, [pc, #4]	; (800df10 <__malloc_unlock+0x8>)
 800df0a:	f7ff bc98 	b.w	800d83e <__retarget_lock_release_recursive>
 800df0e:	bf00      	nop
 800df10:	24002f61 	.word	0x24002f61
 800df14:	00000000 	.word	0x00000000

0800df18 <_vfprintf_r>:
 800df18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df1c:	ed2d 8b04 	vpush	{d8-d9}
 800df20:	b0cb      	sub	sp, #300	; 0x12c
 800df22:	460d      	mov	r5, r1
 800df24:	4693      	mov	fp, r2
 800df26:	461c      	mov	r4, r3
 800df28:	461e      	mov	r6, r3
 800df2a:	4680      	mov	r8, r0
 800df2c:	f002 fada 	bl	80104e4 <_localeconv_r>
 800df30:	6803      	ldr	r3, [r0, #0]
 800df32:	930f      	str	r3, [sp, #60]	; 0x3c
 800df34:	4618      	mov	r0, r3
 800df36:	f7f2 f9dd 	bl	80002f4 <strlen>
 800df3a:	900a      	str	r0, [sp, #40]	; 0x28
 800df3c:	f1b8 0f00 	cmp.w	r8, #0
 800df40:	d005      	beq.n	800df4e <_vfprintf_r+0x36>
 800df42:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800df46:	b913      	cbnz	r3, 800df4e <_vfprintf_r+0x36>
 800df48:	4640      	mov	r0, r8
 800df4a:	f7ff fb11 	bl	800d570 <__sinit>
 800df4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df50:	07d8      	lsls	r0, r3, #31
 800df52:	d405      	bmi.n	800df60 <_vfprintf_r+0x48>
 800df54:	89ab      	ldrh	r3, [r5, #12]
 800df56:	0599      	lsls	r1, r3, #22
 800df58:	d402      	bmi.n	800df60 <_vfprintf_r+0x48>
 800df5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df5c:	f7ff fc6e 	bl	800d83c <__retarget_lock_acquire_recursive>
 800df60:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 800df64:	049a      	lsls	r2, r3, #18
 800df66:	d406      	bmi.n	800df76 <_vfprintf_r+0x5e>
 800df68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800df6c:	81ab      	strh	r3, [r5, #12]
 800df6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800df74:	666b      	str	r3, [r5, #100]	; 0x64
 800df76:	89ab      	ldrh	r3, [r5, #12]
 800df78:	071f      	lsls	r7, r3, #28
 800df7a:	d501      	bpl.n	800df80 <_vfprintf_r+0x68>
 800df7c:	692b      	ldr	r3, [r5, #16]
 800df7e:	b9bb      	cbnz	r3, 800dfb0 <_vfprintf_r+0x98>
 800df80:	4629      	mov	r1, r5
 800df82:	4640      	mov	r0, r8
 800df84:	f002 f9b8 	bl	80102f8 <__swsetup_r>
 800df88:	b190      	cbz	r0, 800dfb0 <_vfprintf_r+0x98>
 800df8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df8c:	07d8      	lsls	r0, r3, #31
 800df8e:	d508      	bpl.n	800dfa2 <_vfprintf_r+0x8a>
 800df90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df94:	930b      	str	r3, [sp, #44]	; 0x2c
 800df96:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800df98:	b04b      	add	sp, #300	; 0x12c
 800df9a:	ecbd 8b04 	vpop	{d8-d9}
 800df9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfa2:	89ab      	ldrh	r3, [r5, #12]
 800dfa4:	0599      	lsls	r1, r3, #22
 800dfa6:	d4f3      	bmi.n	800df90 <_vfprintf_r+0x78>
 800dfa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfaa:	f7ff fc48 	bl	800d83e <__retarget_lock_release_recursive>
 800dfae:	e7ef      	b.n	800df90 <_vfprintf_r+0x78>
 800dfb0:	89ab      	ldrh	r3, [r5, #12]
 800dfb2:	f003 021a 	and.w	r2, r3, #26
 800dfb6:	2a0a      	cmp	r2, #10
 800dfb8:	d116      	bne.n	800dfe8 <_vfprintf_r+0xd0>
 800dfba:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
 800dfbe:	2a00      	cmp	r2, #0
 800dfc0:	db12      	blt.n	800dfe8 <_vfprintf_r+0xd0>
 800dfc2:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800dfc4:	07d2      	lsls	r2, r2, #31
 800dfc6:	d404      	bmi.n	800dfd2 <_vfprintf_r+0xba>
 800dfc8:	059b      	lsls	r3, r3, #22
 800dfca:	d402      	bmi.n	800dfd2 <_vfprintf_r+0xba>
 800dfcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfce:	f7ff fc36 	bl	800d83e <__retarget_lock_release_recursive>
 800dfd2:	4623      	mov	r3, r4
 800dfd4:	465a      	mov	r2, fp
 800dfd6:	4629      	mov	r1, r5
 800dfd8:	4640      	mov	r0, r8
 800dfda:	b04b      	add	sp, #300	; 0x12c
 800dfdc:	ecbd 8b04 	vpop	{d8-d9}
 800dfe0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe4:	f001 b970 	b.w	800f2c8 <__sbprintf>
 800dfe8:	2300      	movs	r3, #0
 800dfea:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 800dfee:	ed9f 8b98 	vldr	d8, [pc, #608]	; 800e250 <_vfprintf_r+0x338>
 800dff2:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 800dff6:	ac21      	add	r4, sp, #132	; 0x84
 800dff8:	941e      	str	r4, [sp, #120]	; 0x78
 800dffa:	9303      	str	r3, [sp, #12]
 800dffc:	9308      	str	r3, [sp, #32]
 800dffe:	930e      	str	r3, [sp, #56]	; 0x38
 800e000:	9310      	str	r3, [sp, #64]	; 0x40
 800e002:	930b      	str	r3, [sp, #44]	; 0x2c
 800e004:	465b      	mov	r3, fp
 800e006:	461f      	mov	r7, r3
 800e008:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e00c:	b10a      	cbz	r2, 800e012 <_vfprintf_r+0xfa>
 800e00e:	2a25      	cmp	r2, #37	; 0x25
 800e010:	d1f9      	bne.n	800e006 <_vfprintf_r+0xee>
 800e012:	ebb7 090b 	subs.w	r9, r7, fp
 800e016:	d00d      	beq.n	800e034 <_vfprintf_r+0x11c>
 800e018:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e01a:	444b      	add	r3, r9
 800e01c:	9320      	str	r3, [sp, #128]	; 0x80
 800e01e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e020:	3301      	adds	r3, #1
 800e022:	2b07      	cmp	r3, #7
 800e024:	e9c4 b900 	strd	fp, r9, [r4]
 800e028:	931f      	str	r3, [sp, #124]	; 0x7c
 800e02a:	dc77      	bgt.n	800e11c <_vfprintf_r+0x204>
 800e02c:	3408      	adds	r4, #8
 800e02e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e030:	444b      	add	r3, r9
 800e032:	930b      	str	r3, [sp, #44]	; 0x2c
 800e034:	783b      	ldrb	r3, [r7, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	f001 8106 	beq.w	800f248 <_vfprintf_r+0x1330>
 800e03c:	2300      	movs	r3, #0
 800e03e:	3701      	adds	r7, #1
 800e040:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800e044:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800e048:	930c      	str	r3, [sp, #48]	; 0x30
 800e04a:	469a      	mov	sl, r3
 800e04c:	212b      	movs	r1, #43	; 0x2b
 800e04e:	463b      	mov	r3, r7
 800e050:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e054:	9205      	str	r2, [sp, #20]
 800e056:	9309      	str	r3, [sp, #36]	; 0x24
 800e058:	9b05      	ldr	r3, [sp, #20]
 800e05a:	3b20      	subs	r3, #32
 800e05c:	2b5a      	cmp	r3, #90	; 0x5a
 800e05e:	f200 8574 	bhi.w	800eb4a <_vfprintf_r+0xc32>
 800e062:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e066:	007e      	.short	0x007e
 800e068:	05720572 	.word	0x05720572
 800e06c:	05720086 	.word	0x05720086
 800e070:	05720572 	.word	0x05720572
 800e074:	05720065 	.word	0x05720065
 800e078:	00890572 	.word	0x00890572
 800e07c:	05720093 	.word	0x05720093
 800e080:	00960090 	.word	0x00960090
 800e084:	00b00572 	.word	0x00b00572
 800e088:	00b300b3 	.word	0x00b300b3
 800e08c:	00b300b3 	.word	0x00b300b3
 800e090:	00b300b3 	.word	0x00b300b3
 800e094:	00b300b3 	.word	0x00b300b3
 800e098:	057200b3 	.word	0x057200b3
 800e09c:	05720572 	.word	0x05720572
 800e0a0:	05720572 	.word	0x05720572
 800e0a4:	05720572 	.word	0x05720572
 800e0a8:	0572012d 	.word	0x0572012d
 800e0ac:	00fd00e1 	.word	0x00fd00e1
 800e0b0:	012d012d 	.word	0x012d012d
 800e0b4:	0572012d 	.word	0x0572012d
 800e0b8:	05720572 	.word	0x05720572
 800e0bc:	00c40572 	.word	0x00c40572
 800e0c0:	05720572 	.word	0x05720572
 800e0c4:	0572044b 	.word	0x0572044b
 800e0c8:	05720572 	.word	0x05720572
 800e0cc:	05720495 	.word	0x05720495
 800e0d0:	057204b8 	.word	0x057204b8
 800e0d4:	04da0572 	.word	0x04da0572
 800e0d8:	05720572 	.word	0x05720572
 800e0dc:	05720572 	.word	0x05720572
 800e0e0:	05720572 	.word	0x05720572
 800e0e4:	05720572 	.word	0x05720572
 800e0e8:	0572012d 	.word	0x0572012d
 800e0ec:	00ff00e1 	.word	0x00ff00e1
 800e0f0:	012d012d 	.word	0x012d012d
 800e0f4:	00c7012d 	.word	0x00c7012d
 800e0f8:	00db00ff 	.word	0x00db00ff
 800e0fc:	00d40572 	.word	0x00d40572
 800e100:	04260572 	.word	0x04260572
 800e104:	0484044d 	.word	0x0484044d
 800e108:	057200db 	.word	0x057200db
 800e10c:	007c0495 	.word	0x007c0495
 800e110:	057204ba 	.word	0x057204ba
 800e114:	04f90572 	.word	0x04f90572
 800e118:	007c0572 	.word	0x007c0572
 800e11c:	aa1e      	add	r2, sp, #120	; 0x78
 800e11e:	4629      	mov	r1, r5
 800e120:	4640      	mov	r0, r8
 800e122:	f001 f911 	bl	800f348 <__sprint_r>
 800e126:	2800      	cmp	r0, #0
 800e128:	f040 8124 	bne.w	800e374 <_vfprintf_r+0x45c>
 800e12c:	ac21      	add	r4, sp, #132	; 0x84
 800e12e:	e77e      	b.n	800e02e <_vfprintf_r+0x116>
 800e130:	4640      	mov	r0, r8
 800e132:	f002 f9d7 	bl	80104e4 <_localeconv_r>
 800e136:	6843      	ldr	r3, [r0, #4]
 800e138:	9310      	str	r3, [sp, #64]	; 0x40
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7f2 f8da 	bl	80002f4 <strlen>
 800e140:	900e      	str	r0, [sp, #56]	; 0x38
 800e142:	4640      	mov	r0, r8
 800e144:	f002 f9ce 	bl	80104e4 <_localeconv_r>
 800e148:	6883      	ldr	r3, [r0, #8]
 800e14a:	9308      	str	r3, [sp, #32]
 800e14c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e14e:	212b      	movs	r1, #43	; 0x2b
 800e150:	b12b      	cbz	r3, 800e15e <_vfprintf_r+0x246>
 800e152:	9b08      	ldr	r3, [sp, #32]
 800e154:	b11b      	cbz	r3, 800e15e <_vfprintf_r+0x246>
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	b10b      	cbz	r3, 800e15e <_vfprintf_r+0x246>
 800e15a:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800e15e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e160:	e775      	b.n	800e04e <_vfprintf_r+0x136>
 800e162:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800e166:	2b00      	cmp	r3, #0
 800e168:	d1f9      	bne.n	800e15e <_vfprintf_r+0x246>
 800e16a:	2320      	movs	r3, #32
 800e16c:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800e170:	e7f5      	b.n	800e15e <_vfprintf_r+0x246>
 800e172:	f04a 0a01 	orr.w	sl, sl, #1
 800e176:	e7f2      	b.n	800e15e <_vfprintf_r+0x246>
 800e178:	f856 3b04 	ldr.w	r3, [r6], #4
 800e17c:	930c      	str	r3, [sp, #48]	; 0x30
 800e17e:	2b00      	cmp	r3, #0
 800e180:	daed      	bge.n	800e15e <_vfprintf_r+0x246>
 800e182:	425b      	negs	r3, r3
 800e184:	930c      	str	r3, [sp, #48]	; 0x30
 800e186:	f04a 0a04 	orr.w	sl, sl, #4
 800e18a:	e7e8      	b.n	800e15e <_vfprintf_r+0x246>
 800e18c:	f88d 105b 	strb.w	r1, [sp, #91]	; 0x5b
 800e190:	e7e5      	b.n	800e15e <_vfprintf_r+0x246>
 800e192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e194:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e198:	9205      	str	r2, [sp, #20]
 800e19a:	2a2a      	cmp	r2, #42	; 0x2a
 800e19c:	d110      	bne.n	800e1c0 <_vfprintf_r+0x2a8>
 800e19e:	f856 2b04 	ldr.w	r2, [r6], #4
 800e1a2:	9309      	str	r3, [sp, #36]	; 0x24
 800e1a4:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 800e1a8:	e7d9      	b.n	800e15e <_vfprintf_r+0x246>
 800e1aa:	200a      	movs	r0, #10
 800e1ac:	fb00 2909 	mla	r9, r0, r9, r2
 800e1b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1b4:	9205      	str	r2, [sp, #20]
 800e1b6:	9a05      	ldr	r2, [sp, #20]
 800e1b8:	3a30      	subs	r2, #48	; 0x30
 800e1ba:	2a09      	cmp	r2, #9
 800e1bc:	d9f5      	bls.n	800e1aa <_vfprintf_r+0x292>
 800e1be:	e74a      	b.n	800e056 <_vfprintf_r+0x13e>
 800e1c0:	f04f 0900 	mov.w	r9, #0
 800e1c4:	e7f7      	b.n	800e1b6 <_vfprintf_r+0x29e>
 800e1c6:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800e1ca:	e7c8      	b.n	800e15e <_vfprintf_r+0x246>
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1d0:	920c      	str	r2, [sp, #48]	; 0x30
 800e1d2:	9a05      	ldr	r2, [sp, #20]
 800e1d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e1d6:	3a30      	subs	r2, #48	; 0x30
 800e1d8:	270a      	movs	r7, #10
 800e1da:	fb07 2200 	mla	r2, r7, r0, r2
 800e1de:	920c      	str	r2, [sp, #48]	; 0x30
 800e1e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1e4:	9205      	str	r2, [sp, #20]
 800e1e6:	3a30      	subs	r2, #48	; 0x30
 800e1e8:	2a09      	cmp	r2, #9
 800e1ea:	d9f2      	bls.n	800e1d2 <_vfprintf_r+0x2ba>
 800e1ec:	e733      	b.n	800e056 <_vfprintf_r+0x13e>
 800e1ee:	f04a 0a08 	orr.w	sl, sl, #8
 800e1f2:	e7b4      	b.n	800e15e <_vfprintf_r+0x246>
 800e1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1f6:	781b      	ldrb	r3, [r3, #0]
 800e1f8:	2b68      	cmp	r3, #104	; 0x68
 800e1fa:	bf01      	itttt	eq
 800e1fc:	9b09      	ldreq	r3, [sp, #36]	; 0x24
 800e1fe:	3301      	addeq	r3, #1
 800e200:	9309      	streq	r3, [sp, #36]	; 0x24
 800e202:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800e206:	bf18      	it	ne
 800e208:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800e20c:	e7a7      	b.n	800e15e <_vfprintf_r+0x246>
 800e20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e210:	781b      	ldrb	r3, [r3, #0]
 800e212:	2b6c      	cmp	r3, #108	; 0x6c
 800e214:	d105      	bne.n	800e222 <_vfprintf_r+0x30a>
 800e216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e218:	3301      	adds	r3, #1
 800e21a:	9309      	str	r3, [sp, #36]	; 0x24
 800e21c:	f04a 0a20 	orr.w	sl, sl, #32
 800e220:	e79d      	b.n	800e15e <_vfprintf_r+0x246>
 800e222:	f04a 0a10 	orr.w	sl, sl, #16
 800e226:	e79a      	b.n	800e15e <_vfprintf_r+0x246>
 800e228:	4632      	mov	r2, r6
 800e22a:	f852 3b04 	ldr.w	r3, [r2], #4
 800e22e:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 800e232:	2300      	movs	r3, #0
 800e234:	9204      	str	r2, [sp, #16]
 800e236:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800e23a:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800e23e:	9302      	str	r3, [sp, #8]
 800e240:	f04f 0901 	mov.w	r9, #1
 800e244:	461f      	mov	r7, r3
 800e246:	461e      	mov	r6, r3
 800e248:	f10d 0bc4 	add.w	fp, sp, #196	; 0xc4
 800e24c:	e18d      	b.n	800e56a <_vfprintf_r+0x652>
 800e24e:	bf00      	nop
	...
 800e258:	ffffffff 	.word	0xffffffff
 800e25c:	7fefffff 	.word	0x7fefffff
 800e260:	f04a 0a10 	orr.w	sl, sl, #16
 800e264:	f01a 0f20 	tst.w	sl, #32
 800e268:	d012      	beq.n	800e290 <_vfprintf_r+0x378>
 800e26a:	3607      	adds	r6, #7
 800e26c:	f026 0307 	bic.w	r3, r6, #7
 800e270:	461a      	mov	r2, r3
 800e272:	685f      	ldr	r7, [r3, #4]
 800e274:	f852 6b08 	ldr.w	r6, [r2], #8
 800e278:	9204      	str	r2, [sp, #16]
 800e27a:	2f00      	cmp	r7, #0
 800e27c:	da06      	bge.n	800e28c <_vfprintf_r+0x374>
 800e27e:	4276      	negs	r6, r6
 800e280:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800e284:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800e288:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800e28c:	2301      	movs	r3, #1
 800e28e:	e348      	b.n	800e922 <_vfprintf_r+0xa0a>
 800e290:	4633      	mov	r3, r6
 800e292:	f01a 0f10 	tst.w	sl, #16
 800e296:	f853 7b04 	ldr.w	r7, [r3], #4
 800e29a:	9304      	str	r3, [sp, #16]
 800e29c:	d002      	beq.n	800e2a4 <_vfprintf_r+0x38c>
 800e29e:	463e      	mov	r6, r7
 800e2a0:	17ff      	asrs	r7, r7, #31
 800e2a2:	e7ea      	b.n	800e27a <_vfprintf_r+0x362>
 800e2a4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800e2a8:	d003      	beq.n	800e2b2 <_vfprintf_r+0x39a>
 800e2aa:	b23e      	sxth	r6, r7
 800e2ac:	f347 37c0 	sbfx	r7, r7, #15, #1
 800e2b0:	e7e3      	b.n	800e27a <_vfprintf_r+0x362>
 800e2b2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800e2b6:	d0f2      	beq.n	800e29e <_vfprintf_r+0x386>
 800e2b8:	b27e      	sxtb	r6, r7
 800e2ba:	f347 17c0 	sbfx	r7, r7, #7, #1
 800e2be:	e7dc      	b.n	800e27a <_vfprintf_r+0x362>
 800e2c0:	3607      	adds	r6, #7
 800e2c2:	f026 0307 	bic.w	r3, r6, #7
 800e2c6:	ecb3 8b02 	vldmia	r3!, {d8}
 800e2ca:	ed1f 7b1d 	vldr	d7, [pc, #-116]	; 800e258 <_vfprintf_r+0x340>
 800e2ce:	eeb0 6bc8 	vabs.f64	d6, d8
 800e2d2:	eeb4 6b47 	vcmp.f64	d6, d7
 800e2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2da:	9304      	str	r3, [sp, #16]
 800e2dc:	dd19      	ble.n	800e312 <_vfprintf_r+0x3fa>
 800e2de:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800e2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2e6:	d502      	bpl.n	800e2ee <_vfprintf_r+0x3d6>
 800e2e8:	232d      	movs	r3, #45	; 0x2d
 800e2ea:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800e2ee:	4a28      	ldr	r2, [pc, #160]	; (800e390 <_vfprintf_r+0x478>)
 800e2f0:	4b28      	ldr	r3, [pc, #160]	; (800e394 <_vfprintf_r+0x47c>)
 800e2f2:	9905      	ldr	r1, [sp, #20]
 800e2f4:	2947      	cmp	r1, #71	; 0x47
 800e2f6:	bfd4      	ite	le
 800e2f8:	4693      	movle	fp, r2
 800e2fa:	469b      	movgt	fp, r3
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800e302:	9302      	str	r3, [sp, #8]
 800e304:	f04f 0903 	mov.w	r9, #3
 800e308:	461f      	mov	r7, r3
 800e30a:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800e30e:	461e      	mov	r6, r3
 800e310:	e12b      	b.n	800e56a <_vfprintf_r+0x652>
 800e312:	eeb4 8b48 	vcmp.f64	d8, d8
 800e316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e31a:	d709      	bvc.n	800e330 <_vfprintf_r+0x418>
 800e31c:	ee18 3a90 	vmov	r3, s17
 800e320:	2b00      	cmp	r3, #0
 800e322:	bfbc      	itt	lt
 800e324:	232d      	movlt	r3, #45	; 0x2d
 800e326:	f88d 305b 	strblt.w	r3, [sp, #91]	; 0x5b
 800e32a:	4a1b      	ldr	r2, [pc, #108]	; (800e398 <_vfprintf_r+0x480>)
 800e32c:	4b1b      	ldr	r3, [pc, #108]	; (800e39c <_vfprintf_r+0x484>)
 800e32e:	e7e0      	b.n	800e2f2 <_vfprintf_r+0x3da>
 800e330:	9b05      	ldr	r3, [sp, #20]
 800e332:	f023 0720 	bic.w	r7, r3, #32
 800e336:	2f41      	cmp	r7, #65	; 0x41
 800e338:	d132      	bne.n	800e3a0 <_vfprintf_r+0x488>
 800e33a:	2330      	movs	r3, #48	; 0x30
 800e33c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 800e340:	9b05      	ldr	r3, [sp, #20]
 800e342:	2b61      	cmp	r3, #97	; 0x61
 800e344:	bf0c      	ite	eq
 800e346:	2378      	moveq	r3, #120	; 0x78
 800e348:	2358      	movne	r3, #88	; 0x58
 800e34a:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 800e34e:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 800e352:	f04a 0a02 	orr.w	sl, sl, #2
 800e356:	f340 81db 	ble.w	800e710 <_vfprintf_r+0x7f8>
 800e35a:	f109 0101 	add.w	r1, r9, #1
 800e35e:	4640      	mov	r0, r8
 800e360:	f7ff fb92 	bl	800da88 <_malloc_r>
 800e364:	4683      	mov	fp, r0
 800e366:	2800      	cmp	r0, #0
 800e368:	f040 81d7 	bne.w	800e71a <_vfprintf_r+0x802>
 800e36c:	89ab      	ldrh	r3, [r5, #12]
 800e36e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e372:	81ab      	strh	r3, [r5, #12]
 800e374:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e376:	07d9      	lsls	r1, r3, #31
 800e378:	d405      	bmi.n	800e386 <_vfprintf_r+0x46e>
 800e37a:	89ab      	ldrh	r3, [r5, #12]
 800e37c:	059a      	lsls	r2, r3, #22
 800e37e:	d402      	bmi.n	800e386 <_vfprintf_r+0x46e>
 800e380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e382:	f7ff fa5c 	bl	800d83e <__retarget_lock_release_recursive>
 800e386:	89ab      	ldrh	r3, [r5, #12]
 800e388:	065b      	lsls	r3, r3, #25
 800e38a:	f57f ae04 	bpl.w	800df96 <_vfprintf_r+0x7e>
 800e38e:	e5ff      	b.n	800df90 <_vfprintf_r+0x78>
 800e390:	08011fc8 	.word	0x08011fc8
 800e394:	08011fcc 	.word	0x08011fcc
 800e398:	08011fd0 	.word	0x08011fd0
 800e39c:	08011fd4 	.word	0x08011fd4
 800e3a0:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800e3a4:	f000 81bb 	beq.w	800e71e <_vfprintf_r+0x806>
 800e3a8:	2f47      	cmp	r7, #71	; 0x47
 800e3aa:	f040 81bd 	bne.w	800e728 <_vfprintf_r+0x810>
 800e3ae:	f1b9 0f00 	cmp.w	r9, #0
 800e3b2:	f040 81b9 	bne.w	800e728 <_vfprintf_r+0x810>
 800e3b6:	f8cd 9008 	str.w	r9, [sp, #8]
 800e3ba:	f04f 0901 	mov.w	r9, #1
 800e3be:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 800e3c2:	930d      	str	r3, [sp, #52]	; 0x34
 800e3c4:	ee18 3a90 	vmov	r3, s17
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	f280 81b0 	bge.w	800e72e <_vfprintf_r+0x816>
 800e3ce:	eeb1 9b48 	vneg.f64	d9, d8
 800e3d2:	232d      	movs	r3, #45	; 0x2d
 800e3d4:	2f41      	cmp	r7, #65	; 0x41
 800e3d6:	9313      	str	r3, [sp, #76]	; 0x4c
 800e3d8:	f040 81c0 	bne.w	800e75c <_vfprintf_r+0x844>
 800e3dc:	eeb0 0b49 	vmov.f64	d0, d9
 800e3e0:	a818      	add	r0, sp, #96	; 0x60
 800e3e2:	f002 f8c1 	bl	8010568 <frexp>
 800e3e6:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
 800e3ea:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e3ee:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3f6:	bf08      	it	eq
 800e3f8:	2301      	moveq	r3, #1
 800e3fa:	9a05      	ldr	r2, [sp, #20]
 800e3fc:	bf08      	it	eq
 800e3fe:	9318      	streq	r3, [sp, #96]	; 0x60
 800e400:	49b2      	ldr	r1, [pc, #712]	; (800e6cc <_vfprintf_r+0x7b4>)
 800e402:	4bb3      	ldr	r3, [pc, #716]	; (800e6d0 <_vfprintf_r+0x7b8>)
 800e404:	eeb3 7b00 	vmov.f64	d7, #48	; 0x41800000  16.0
 800e408:	2a61      	cmp	r2, #97	; 0x61
 800e40a:	bf18      	it	ne
 800e40c:	4619      	movne	r1, r3
 800e40e:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 800e412:	465b      	mov	r3, fp
 800e414:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e418:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800e41c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800e420:	ee16 6a90 	vmov	r6, s13
 800e424:	5d88      	ldrb	r0, [r1, r6]
 800e426:	f803 0b01 	strb.w	r0, [r3], #1
 800e42a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e42e:	4610      	mov	r0, r2
 800e430:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e434:	d006      	beq.n	800e444 <_vfprintf_r+0x52c>
 800e436:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e43e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800e442:	d1e7      	bne.n	800e414 <_vfprintf_r+0x4fc>
 800e444:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e448:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e450:	dc08      	bgt.n	800e464 <_vfprintf_r+0x54c>
 800e452:	eeb4 0b47 	vcmp.f64	d0, d7
 800e456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e45a:	f040 817a 	bne.w	800e752 <_vfprintf_r+0x83a>
 800e45e:	07f2      	lsls	r2, r6, #31
 800e460:	f140 8177 	bpl.w	800e752 <_vfprintf_r+0x83a>
 800e464:	7bce      	ldrb	r6, [r1, #15]
 800e466:	931c      	str	r3, [sp, #112]	; 0x70
 800e468:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800e46c:	981c      	ldr	r0, [sp, #112]	; 0x70
 800e46e:	1e42      	subs	r2, r0, #1
 800e470:	921c      	str	r2, [sp, #112]	; 0x70
 800e472:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 800e476:	42b2      	cmp	r2, r6
 800e478:	f000 815d 	beq.w	800e736 <_vfprintf_r+0x81e>
 800e47c:	2a39      	cmp	r2, #57	; 0x39
 800e47e:	bf16      	itet	ne
 800e480:	3201      	addne	r2, #1
 800e482:	7a8a      	ldrbeq	r2, [r1, #10]
 800e484:	b2d2      	uxtbne	r2, r2
 800e486:	f800 2c01 	strb.w	r2, [r0, #-1]
 800e48a:	eba3 030b 	sub.w	r3, r3, fp
 800e48e:	2f47      	cmp	r7, #71	; 0x47
 800e490:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800e492:	9303      	str	r3, [sp, #12]
 800e494:	f040 81a1 	bne.w	800e7da <_vfprintf_r+0x8c2>
 800e498:	1cf7      	adds	r7, r6, #3
 800e49a:	db02      	blt.n	800e4a2 <_vfprintf_r+0x58a>
 800e49c:	45b1      	cmp	r9, r6
 800e49e:	f280 81be 	bge.w	800e81e <_vfprintf_r+0x906>
 800e4a2:	9b05      	ldr	r3, [sp, #20]
 800e4a4:	3b02      	subs	r3, #2
 800e4a6:	9305      	str	r3, [sp, #20]
 800e4a8:	9905      	ldr	r1, [sp, #20]
 800e4aa:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800e4ae:	f021 0120 	bic.w	r1, r1, #32
 800e4b2:	2941      	cmp	r1, #65	; 0x41
 800e4b4:	bf08      	it	eq
 800e4b6:	320f      	addeq	r2, #15
 800e4b8:	f106 33ff 	add.w	r3, r6, #4294967295	; 0xffffffff
 800e4bc:	bf06      	itte	eq
 800e4be:	b2d2      	uxtbeq	r2, r2
 800e4c0:	2101      	moveq	r1, #1
 800e4c2:	2100      	movne	r1, #0
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	9318      	str	r3, [sp, #96]	; 0x60
 800e4c8:	bfb8      	it	lt
 800e4ca:	f1c6 0301 	rsblt	r3, r6, #1
 800e4ce:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 800e4d2:	bfb4      	ite	lt
 800e4d4:	222d      	movlt	r2, #45	; 0x2d
 800e4d6:	222b      	movge	r2, #43	; 0x2b
 800e4d8:	2b09      	cmp	r3, #9
 800e4da:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 800e4de:	f340 8191 	ble.w	800e804 <_vfprintf_r+0x8ec>
 800e4e2:	f10d 0077 	add.w	r0, sp, #119	; 0x77
 800e4e6:	210a      	movs	r1, #10
 800e4e8:	4602      	mov	r2, r0
 800e4ea:	fb93 f6f1 	sdiv	r6, r3, r1
 800e4ee:	fb01 3116 	mls	r1, r1, r6, r3
 800e4f2:	3130      	adds	r1, #48	; 0x30
 800e4f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	2963      	cmp	r1, #99	; 0x63
 800e4fc:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800e500:	4633      	mov	r3, r6
 800e502:	dcf0      	bgt.n	800e4e6 <_vfprintf_r+0x5ce>
 800e504:	3330      	adds	r3, #48	; 0x30
 800e506:	1e91      	subs	r1, r2, #2
 800e508:	f800 3c01 	strb.w	r3, [r0, #-1]
 800e50c:	f10d 0669 	add.w	r6, sp, #105	; 0x69
 800e510:	460b      	mov	r3, r1
 800e512:	f10d 0077 	add.w	r0, sp, #119	; 0x77
 800e516:	4283      	cmp	r3, r0
 800e518:	f0c0 816f 	bcc.w	800e7fa <_vfprintf_r+0x8e2>
 800e51c:	f10d 0379 	add.w	r3, sp, #121	; 0x79
 800e520:	1a9b      	subs	r3, r3, r2
 800e522:	4281      	cmp	r1, r0
 800e524:	bf88      	it	hi
 800e526:	2300      	movhi	r3, #0
 800e528:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 800e52c:	441a      	add	r2, r3
 800e52e:	ab1a      	add	r3, sp, #104	; 0x68
 800e530:	1ad3      	subs	r3, r2, r3
 800e532:	9a03      	ldr	r2, [sp, #12]
 800e534:	9311      	str	r3, [sp, #68]	; 0x44
 800e536:	2a01      	cmp	r2, #1
 800e538:	eb03 0902 	add.w	r9, r3, r2
 800e53c:	dc02      	bgt.n	800e544 <_vfprintf_r+0x62c>
 800e53e:	f01a 0f01 	tst.w	sl, #1
 800e542:	d001      	beq.n	800e548 <_vfprintf_r+0x630>
 800e544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e546:	4499      	add	r9, r3
 800e548:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 800e54c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e550:	930d      	str	r3, [sp, #52]	; 0x34
 800e552:	2300      	movs	r3, #0
 800e554:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800e558:	461e      	mov	r6, r3
 800e55a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e55c:	b113      	cbz	r3, 800e564 <_vfprintf_r+0x64c>
 800e55e:	232d      	movs	r3, #45	; 0x2d
 800e560:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800e564:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800e568:	2700      	movs	r7, #0
 800e56a:	454f      	cmp	r7, r9
 800e56c:	463b      	mov	r3, r7
 800e56e:	bfb8      	it	lt
 800e570:	464b      	movlt	r3, r9
 800e572:	930d      	str	r3, [sp, #52]	; 0x34
 800e574:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800e578:	b113      	cbz	r3, 800e580 <_vfprintf_r+0x668>
 800e57a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e57c:	3301      	adds	r3, #1
 800e57e:	930d      	str	r3, [sp, #52]	; 0x34
 800e580:	f01a 0302 	ands.w	r3, sl, #2
 800e584:	9313      	str	r3, [sp, #76]	; 0x4c
 800e586:	bf1e      	ittt	ne
 800e588:	9b0d      	ldrne	r3, [sp, #52]	; 0x34
 800e58a:	3302      	addne	r3, #2
 800e58c:	930d      	strne	r3, [sp, #52]	; 0x34
 800e58e:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800e592:	9314      	str	r3, [sp, #80]	; 0x50
 800e594:	d120      	bne.n	800e5d8 <_vfprintf_r+0x6c0>
 800e596:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800e59a:	1a9b      	subs	r3, r3, r2
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	dd1b      	ble.n	800e5d8 <_vfprintf_r+0x6c0>
 800e5a0:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 800e5a4:	494b      	ldr	r1, [pc, #300]	; (800e6d4 <_vfprintf_r+0x7bc>)
 800e5a6:	6021      	str	r1, [r4, #0]
 800e5a8:	2b10      	cmp	r3, #16
 800e5aa:	f102 0201 	add.w	r2, r2, #1
 800e5ae:	f104 0008 	add.w	r0, r4, #8
 800e5b2:	f300 82d8 	bgt.w	800eb66 <_vfprintf_r+0xc4e>
 800e5b6:	eb0c 0103 	add.w	r1, ip, r3
 800e5ba:	2a07      	cmp	r2, #7
 800e5bc:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800e5c0:	6063      	str	r3, [r4, #4]
 800e5c2:	f340 82e5 	ble.w	800eb90 <_vfprintf_r+0xc78>
 800e5c6:	aa1e      	add	r2, sp, #120	; 0x78
 800e5c8:	4629      	mov	r1, r5
 800e5ca:	4640      	mov	r0, r8
 800e5cc:	f000 febc 	bl	800f348 <__sprint_r>
 800e5d0:	2800      	cmp	r0, #0
 800e5d2:	f040 8616 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800e5d6:	ac21      	add	r4, sp, #132	; 0x84
 800e5d8:	f89d 205b 	ldrb.w	r2, [sp, #91]	; 0x5b
 800e5dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e5de:	b16a      	cbz	r2, 800e5fc <_vfprintf_r+0x6e4>
 800e5e0:	f10d 025b 	add.w	r2, sp, #91	; 0x5b
 800e5e4:	6022      	str	r2, [r4, #0]
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	4413      	add	r3, r2
 800e5ea:	9320      	str	r3, [sp, #128]	; 0x80
 800e5ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e5ee:	6062      	str	r2, [r4, #4]
 800e5f0:	4413      	add	r3, r2
 800e5f2:	2b07      	cmp	r3, #7
 800e5f4:	931f      	str	r3, [sp, #124]	; 0x7c
 800e5f6:	f300 82cd 	bgt.w	800eb94 <_vfprintf_r+0xc7c>
 800e5fa:	3408      	adds	r4, #8
 800e5fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e5fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e600:	b162      	cbz	r2, 800e61c <_vfprintf_r+0x704>
 800e602:	aa17      	add	r2, sp, #92	; 0x5c
 800e604:	6022      	str	r2, [r4, #0]
 800e606:	2202      	movs	r2, #2
 800e608:	4413      	add	r3, r2
 800e60a:	9320      	str	r3, [sp, #128]	; 0x80
 800e60c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e60e:	6062      	str	r2, [r4, #4]
 800e610:	3301      	adds	r3, #1
 800e612:	2b07      	cmp	r3, #7
 800e614:	931f      	str	r3, [sp, #124]	; 0x7c
 800e616:	f300 82c7 	bgt.w	800eba8 <_vfprintf_r+0xc90>
 800e61a:	3408      	adds	r4, #8
 800e61c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e61e:	2b80      	cmp	r3, #128	; 0x80
 800e620:	d120      	bne.n	800e664 <_vfprintf_r+0x74c>
 800e622:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800e626:	1a9b      	subs	r3, r3, r2
 800e628:	2b00      	cmp	r3, #0
 800e62a:	dd1b      	ble.n	800e664 <_vfprintf_r+0x74c>
 800e62c:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 800e630:	4929      	ldr	r1, [pc, #164]	; (800e6d8 <_vfprintf_r+0x7c0>)
 800e632:	6021      	str	r1, [r4, #0]
 800e634:	2b10      	cmp	r3, #16
 800e636:	f102 0201 	add.w	r2, r2, #1
 800e63a:	f104 0008 	add.w	r0, r4, #8
 800e63e:	f300 82bd 	bgt.w	800ebbc <_vfprintf_r+0xca4>
 800e642:	eb0c 0103 	add.w	r1, ip, r3
 800e646:	2a07      	cmp	r2, #7
 800e648:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800e64c:	6063      	str	r3, [r4, #4]
 800e64e:	f340 82ca 	ble.w	800ebe6 <_vfprintf_r+0xcce>
 800e652:	aa1e      	add	r2, sp, #120	; 0x78
 800e654:	4629      	mov	r1, r5
 800e656:	4640      	mov	r0, r8
 800e658:	f000 fe76 	bl	800f348 <__sprint_r>
 800e65c:	2800      	cmp	r0, #0
 800e65e:	f040 85d0 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800e662:	ac21      	add	r4, sp, #132	; 0x84
 800e664:	eba7 0709 	sub.w	r7, r7, r9
 800e668:	2f00      	cmp	r7, #0
 800e66a:	dd1a      	ble.n	800e6a2 <_vfprintf_r+0x78a>
 800e66c:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800e670:	4819      	ldr	r0, [pc, #100]	; (800e6d8 <_vfprintf_r+0x7c0>)
 800e672:	6020      	str	r0, [r4, #0]
 800e674:	2f10      	cmp	r7, #16
 800e676:	f103 0301 	add.w	r3, r3, #1
 800e67a:	f104 0108 	add.w	r1, r4, #8
 800e67e:	f300 82b4 	bgt.w	800ebea <_vfprintf_r+0xcd2>
 800e682:	6067      	str	r7, [r4, #4]
 800e684:	2b07      	cmp	r3, #7
 800e686:	4417      	add	r7, r2
 800e688:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 800e68c:	f340 82c0 	ble.w	800ec10 <_vfprintf_r+0xcf8>
 800e690:	aa1e      	add	r2, sp, #120	; 0x78
 800e692:	4629      	mov	r1, r5
 800e694:	4640      	mov	r0, r8
 800e696:	f000 fe57 	bl	800f348 <__sprint_r>
 800e69a:	2800      	cmp	r0, #0
 800e69c:	f040 85b1 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800e6a0:	ac21      	add	r4, sp, #132	; 0x84
 800e6a2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e6a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e6a8:	f040 82b8 	bne.w	800ec1c <_vfprintf_r+0xd04>
 800e6ac:	444b      	add	r3, r9
 800e6ae:	9320      	str	r3, [sp, #128]	; 0x80
 800e6b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	2b07      	cmp	r3, #7
 800e6b6:	e9c4 b900 	strd	fp, r9, [r4]
 800e6ba:	931f      	str	r3, [sp, #124]	; 0x7c
 800e6bc:	f300 82f1 	bgt.w	800eca2 <_vfprintf_r+0xd8a>
 800e6c0:	3408      	adds	r4, #8
 800e6c2:	f01a 0f04 	tst.w	sl, #4
 800e6c6:	f040 857d 	bne.w	800f1c4 <_vfprintf_r+0x12ac>
 800e6ca:	e007      	b.n	800e6dc <_vfprintf_r+0x7c4>
 800e6cc:	08011fd8 	.word	0x08011fd8
 800e6d0:	08011fe9 	.word	0x08011fe9
 800e6d4:	08011ffc 	.word	0x08011ffc
 800e6d8:	0801200c 	.word	0x0801200c
 800e6dc:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
 800e6e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e6e2:	428a      	cmp	r2, r1
 800e6e4:	bfac      	ite	ge
 800e6e6:	189b      	addge	r3, r3, r2
 800e6e8:	185b      	addlt	r3, r3, r1
 800e6ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800e6ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e6ee:	b13b      	cbz	r3, 800e700 <_vfprintf_r+0x7e8>
 800e6f0:	aa1e      	add	r2, sp, #120	; 0x78
 800e6f2:	4629      	mov	r1, r5
 800e6f4:	4640      	mov	r0, r8
 800e6f6:	f000 fe27 	bl	800f348 <__sprint_r>
 800e6fa:	2800      	cmp	r0, #0
 800e6fc:	f040 8581 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800e700:	2300      	movs	r3, #0
 800e702:	931f      	str	r3, [sp, #124]	; 0x7c
 800e704:	9b02      	ldr	r3, [sp, #8]
 800e706:	2b00      	cmp	r3, #0
 800e708:	f040 8598 	bne.w	800f23c <_vfprintf_r+0x1324>
 800e70c:	ac21      	add	r4, sp, #132	; 0x84
 800e70e:	e0db      	b.n	800e8c8 <_vfprintf_r+0x9b0>
 800e710:	2300      	movs	r3, #0
 800e712:	9302      	str	r3, [sp, #8]
 800e714:	f10d 0bc4 	add.w	fp, sp, #196	; 0xc4
 800e718:	e651      	b.n	800e3be <_vfprintf_r+0x4a6>
 800e71a:	9002      	str	r0, [sp, #8]
 800e71c:	e64f      	b.n	800e3be <_vfprintf_r+0x4a6>
 800e71e:	2300      	movs	r3, #0
 800e720:	9302      	str	r3, [sp, #8]
 800e722:	f04f 0906 	mov.w	r9, #6
 800e726:	e64a      	b.n	800e3be <_vfprintf_r+0x4a6>
 800e728:	2300      	movs	r3, #0
 800e72a:	9302      	str	r3, [sp, #8]
 800e72c:	e647      	b.n	800e3be <_vfprintf_r+0x4a6>
 800e72e:	2300      	movs	r3, #0
 800e730:	eeb0 9b48 	vmov.f64	d9, d8
 800e734:	e64e      	b.n	800e3d4 <_vfprintf_r+0x4bc>
 800e736:	f800 cc01 	strb.w	ip, [r0, #-1]
 800e73a:	e697      	b.n	800e46c <_vfprintf_r+0x554>
 800e73c:	f802 cb01 	strb.w	ip, [r2], #1
 800e740:	1ab1      	subs	r1, r6, r2
 800e742:	2900      	cmp	r1, #0
 800e744:	dafa      	bge.n	800e73c <_vfprintf_r+0x824>
 800e746:	1c42      	adds	r2, r0, #1
 800e748:	3001      	adds	r0, #1
 800e74a:	bfb8      	it	lt
 800e74c:	2200      	movlt	r2, #0
 800e74e:	4413      	add	r3, r2
 800e750:	e69b      	b.n	800e48a <_vfprintf_r+0x572>
 800e752:	461a      	mov	r2, r3
 800e754:	181e      	adds	r6, r3, r0
 800e756:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800e75a:	e7f1      	b.n	800e740 <_vfprintf_r+0x828>
 800e75c:	2f46      	cmp	r7, #70	; 0x46
 800e75e:	d005      	beq.n	800e76c <_vfprintf_r+0x854>
 800e760:	2f45      	cmp	r7, #69	; 0x45
 800e762:	d118      	bne.n	800e796 <_vfprintf_r+0x87e>
 800e764:	f109 0601 	add.w	r6, r9, #1
 800e768:	2102      	movs	r1, #2
 800e76a:	e001      	b.n	800e770 <_vfprintf_r+0x858>
 800e76c:	464e      	mov	r6, r9
 800e76e:	2103      	movs	r1, #3
 800e770:	ab1c      	add	r3, sp, #112	; 0x70
 800e772:	9301      	str	r3, [sp, #4]
 800e774:	ab19      	add	r3, sp, #100	; 0x64
 800e776:	9300      	str	r3, [sp, #0]
 800e778:	4632      	mov	r2, r6
 800e77a:	ab18      	add	r3, sp, #96	; 0x60
 800e77c:	4640      	mov	r0, r8
 800e77e:	eeb0 0b49 	vmov.f64	d0, d9
 800e782:	f001 fff1 	bl	8010768 <_dtoa_r>
 800e786:	2f47      	cmp	r7, #71	; 0x47
 800e788:	4683      	mov	fp, r0
 800e78a:	d106      	bne.n	800e79a <_vfprintf_r+0x882>
 800e78c:	f01a 0f01 	tst.w	sl, #1
 800e790:	d103      	bne.n	800e79a <_vfprintf_r+0x882>
 800e792:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e794:	e679      	b.n	800e48a <_vfprintf_r+0x572>
 800e796:	464e      	mov	r6, r9
 800e798:	e7e6      	b.n	800e768 <_vfprintf_r+0x850>
 800e79a:	2f46      	cmp	r7, #70	; 0x46
 800e79c:	eb0b 0306 	add.w	r3, fp, r6
 800e7a0:	d10d      	bne.n	800e7be <_vfprintf_r+0x8a6>
 800e7a2:	f89b 2000 	ldrb.w	r2, [fp]
 800e7a6:	2a30      	cmp	r2, #48	; 0x30
 800e7a8:	d107      	bne.n	800e7ba <_vfprintf_r+0x8a2>
 800e7aa:	eeb5 9b40 	vcmp.f64	d9, #0.0
 800e7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7b2:	bf1c      	itt	ne
 800e7b4:	f1c6 0601 	rsbne	r6, r6, #1
 800e7b8:	9618      	strne	r6, [sp, #96]	; 0x60
 800e7ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e7bc:	4413      	add	r3, r2
 800e7be:	eeb5 9b40 	vcmp.f64	d9, #0.0
 800e7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7c6:	bf08      	it	eq
 800e7c8:	931c      	streq	r3, [sp, #112]	; 0x70
 800e7ca:	2130      	movs	r1, #48	; 0x30
 800e7cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	d9df      	bls.n	800e792 <_vfprintf_r+0x87a>
 800e7d2:	1c50      	adds	r0, r2, #1
 800e7d4:	901c      	str	r0, [sp, #112]	; 0x70
 800e7d6:	7011      	strb	r1, [r2, #0]
 800e7d8:	e7f8      	b.n	800e7cc <_vfprintf_r+0x8b4>
 800e7da:	2f46      	cmp	r7, #70	; 0x46
 800e7dc:	f47f ae64 	bne.w	800e4a8 <_vfprintf_r+0x590>
 800e7e0:	f00a 0301 	and.w	r3, sl, #1
 800e7e4:	2e00      	cmp	r6, #0
 800e7e6:	ea43 0309 	orr.w	r3, r3, r9
 800e7ea:	dd25      	ble.n	800e838 <_vfprintf_r+0x920>
 800e7ec:	b383      	cbz	r3, 800e850 <_vfprintf_r+0x938>
 800e7ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7f0:	18f3      	adds	r3, r6, r3
 800e7f2:	4499      	add	r9, r3
 800e7f4:	2366      	movs	r3, #102	; 0x66
 800e7f6:	9305      	str	r3, [sp, #20]
 800e7f8:	e030      	b.n	800e85c <_vfprintf_r+0x944>
 800e7fa:	f813 7b01 	ldrb.w	r7, [r3], #1
 800e7fe:	f806 7f01 	strb.w	r7, [r6, #1]!
 800e802:	e688      	b.n	800e516 <_vfprintf_r+0x5fe>
 800e804:	b941      	cbnz	r1, 800e818 <_vfprintf_r+0x900>
 800e806:	2230      	movs	r2, #48	; 0x30
 800e808:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
 800e80c:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 800e810:	3330      	adds	r3, #48	; 0x30
 800e812:	f802 3b01 	strb.w	r3, [r2], #1
 800e816:	e68a      	b.n	800e52e <_vfprintf_r+0x616>
 800e818:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 800e81c:	e7f8      	b.n	800e810 <_vfprintf_r+0x8f8>
 800e81e:	9b03      	ldr	r3, [sp, #12]
 800e820:	42b3      	cmp	r3, r6
 800e822:	dd0d      	ble.n	800e840 <_vfprintf_r+0x928>
 800e824:	9b03      	ldr	r3, [sp, #12]
 800e826:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e828:	2e00      	cmp	r6, #0
 800e82a:	eb03 0902 	add.w	r9, r3, r2
 800e82e:	dc0d      	bgt.n	800e84c <_vfprintf_r+0x934>
 800e830:	f1c6 0301 	rsb	r3, r6, #1
 800e834:	4499      	add	r9, r3
 800e836:	e009      	b.n	800e84c <_vfprintf_r+0x934>
 800e838:	b163      	cbz	r3, 800e854 <_vfprintf_r+0x93c>
 800e83a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e83c:	3301      	adds	r3, #1
 800e83e:	e7d8      	b.n	800e7f2 <_vfprintf_r+0x8da>
 800e840:	f01a 0f01 	tst.w	sl, #1
 800e844:	d01f      	beq.n	800e886 <_vfprintf_r+0x96e>
 800e846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e848:	eb06 0903 	add.w	r9, r6, r3
 800e84c:	2367      	movs	r3, #103	; 0x67
 800e84e:	e7d2      	b.n	800e7f6 <_vfprintf_r+0x8de>
 800e850:	46b1      	mov	r9, r6
 800e852:	e7cf      	b.n	800e7f4 <_vfprintf_r+0x8dc>
 800e854:	2366      	movs	r3, #102	; 0x66
 800e856:	9305      	str	r3, [sp, #20]
 800e858:	f04f 0901 	mov.w	r9, #1
 800e85c:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 800e860:	9307      	str	r3, [sp, #28]
 800e862:	d023      	beq.n	800e8ac <_vfprintf_r+0x994>
 800e864:	2300      	movs	r3, #0
 800e866:	2e00      	cmp	r6, #0
 800e868:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800e86c:	f77f ae75 	ble.w	800e55a <_vfprintf_r+0x642>
 800e870:	9b08      	ldr	r3, [sp, #32]
 800e872:	781b      	ldrb	r3, [r3, #0]
 800e874:	2bff      	cmp	r3, #255	; 0xff
 800e876:	d108      	bne.n	800e88a <_vfprintf_r+0x972>
 800e878:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e87c:	4413      	add	r3, r2
 800e87e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e880:	fb02 9903 	mla	r9, r2, r3, r9
 800e884:	e669      	b.n	800e55a <_vfprintf_r+0x642>
 800e886:	46b1      	mov	r9, r6
 800e888:	e7e0      	b.n	800e84c <_vfprintf_r+0x934>
 800e88a:	42b3      	cmp	r3, r6
 800e88c:	daf4      	bge.n	800e878 <_vfprintf_r+0x960>
 800e88e:	1af6      	subs	r6, r6, r3
 800e890:	9b08      	ldr	r3, [sp, #32]
 800e892:	785b      	ldrb	r3, [r3, #1]
 800e894:	b133      	cbz	r3, 800e8a4 <_vfprintf_r+0x98c>
 800e896:	9b07      	ldr	r3, [sp, #28]
 800e898:	3301      	adds	r3, #1
 800e89a:	9307      	str	r3, [sp, #28]
 800e89c:	9b08      	ldr	r3, [sp, #32]
 800e89e:	3301      	adds	r3, #1
 800e8a0:	9308      	str	r3, [sp, #32]
 800e8a2:	e7e5      	b.n	800e870 <_vfprintf_r+0x958>
 800e8a4:	9b06      	ldr	r3, [sp, #24]
 800e8a6:	3301      	adds	r3, #1
 800e8a8:	9306      	str	r3, [sp, #24]
 800e8aa:	e7e1      	b.n	800e870 <_vfprintf_r+0x958>
 800e8ac:	9b07      	ldr	r3, [sp, #28]
 800e8ae:	9306      	str	r3, [sp, #24]
 800e8b0:	e653      	b.n	800e55a <_vfprintf_r+0x642>
 800e8b2:	1d33      	adds	r3, r6, #4
 800e8b4:	f01a 0f20 	tst.w	sl, #32
 800e8b8:	9304      	str	r3, [sp, #16]
 800e8ba:	d00a      	beq.n	800e8d2 <_vfprintf_r+0x9ba>
 800e8bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e8be:	6833      	ldr	r3, [r6, #0]
 800e8c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8c2:	17d2      	asrs	r2, r2, #31
 800e8c4:	e9c3 1200 	strd	r1, r2, [r3]
 800e8c8:	9e04      	ldr	r6, [sp, #16]
 800e8ca:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800e8ce:	f7ff bb99 	b.w	800e004 <_vfprintf_r+0xec>
 800e8d2:	f01a 0f10 	tst.w	sl, #16
 800e8d6:	d003      	beq.n	800e8e0 <_vfprintf_r+0x9c8>
 800e8d8:	6833      	ldr	r3, [r6, #0]
 800e8da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e8dc:	601a      	str	r2, [r3, #0]
 800e8de:	e7f3      	b.n	800e8c8 <_vfprintf_r+0x9b0>
 800e8e0:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800e8e4:	d003      	beq.n	800e8ee <_vfprintf_r+0x9d6>
 800e8e6:	6833      	ldr	r3, [r6, #0]
 800e8e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e8ea:	801a      	strh	r2, [r3, #0]
 800e8ec:	e7ec      	b.n	800e8c8 <_vfprintf_r+0x9b0>
 800e8ee:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800e8f2:	d0f1      	beq.n	800e8d8 <_vfprintf_r+0x9c0>
 800e8f4:	6833      	ldr	r3, [r6, #0]
 800e8f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e8f8:	701a      	strb	r2, [r3, #0]
 800e8fa:	e7e5      	b.n	800e8c8 <_vfprintf_r+0x9b0>
 800e8fc:	f04a 0a10 	orr.w	sl, sl, #16
 800e900:	f01a 0320 	ands.w	r3, sl, #32
 800e904:	d020      	beq.n	800e948 <_vfprintf_r+0xa30>
 800e906:	3607      	adds	r6, #7
 800e908:	f026 0307 	bic.w	r3, r6, #7
 800e90c:	461a      	mov	r2, r3
 800e90e:	685f      	ldr	r7, [r3, #4]
 800e910:	f852 6b08 	ldr.w	r6, [r2], #8
 800e914:	9204      	str	r2, [sp, #16]
 800e916:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800e91a:	2300      	movs	r3, #0
 800e91c:	2200      	movs	r2, #0
 800e91e:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 800e922:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800e926:	f000 849e 	beq.w	800f266 <_vfprintf_r+0x134e>
 800e92a:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800e92e:	9202      	str	r2, [sp, #8]
 800e930:	ea56 0207 	orrs.w	r2, r6, r7
 800e934:	f040 849d 	bne.w	800f272 <_vfprintf_r+0x135a>
 800e938:	f1b9 0f00 	cmp.w	r9, #0
 800e93c:	f000 80fa 	beq.w	800eb34 <_vfprintf_r+0xc1c>
 800e940:	2b01      	cmp	r3, #1
 800e942:	f040 8499 	bne.w	800f278 <_vfprintf_r+0x1360>
 800e946:	e0a0      	b.n	800ea8a <_vfprintf_r+0xb72>
 800e948:	4632      	mov	r2, r6
 800e94a:	f01a 0710 	ands.w	r7, sl, #16
 800e94e:	f852 6b04 	ldr.w	r6, [r2], #4
 800e952:	9204      	str	r2, [sp, #16]
 800e954:	d001      	beq.n	800e95a <_vfprintf_r+0xa42>
 800e956:	461f      	mov	r7, r3
 800e958:	e7dd      	b.n	800e916 <_vfprintf_r+0x9fe>
 800e95a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800e95e:	d001      	beq.n	800e964 <_vfprintf_r+0xa4c>
 800e960:	b2b6      	uxth	r6, r6
 800e962:	e7d8      	b.n	800e916 <_vfprintf_r+0x9fe>
 800e964:	f41a 7700 	ands.w	r7, sl, #512	; 0x200
 800e968:	d0d5      	beq.n	800e916 <_vfprintf_r+0x9fe>
 800e96a:	b2f6      	uxtb	r6, r6
 800e96c:	e7f3      	b.n	800e956 <_vfprintf_r+0xa3e>
 800e96e:	4633      	mov	r3, r6
 800e970:	2278      	movs	r2, #120	; 0x78
 800e972:	f853 6b04 	ldr.w	r6, [r3], #4
 800e976:	9304      	str	r3, [sp, #16]
 800e978:	f647 0330 	movw	r3, #30768	; 0x7830
 800e97c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
 800e980:	4ba4      	ldr	r3, [pc, #656]	; (800ec14 <_vfprintf_r+0xcfc>)
 800e982:	9312      	str	r3, [sp, #72]	; 0x48
 800e984:	2700      	movs	r7, #0
 800e986:	f04a 0a02 	orr.w	sl, sl, #2
 800e98a:	2302      	movs	r3, #2
 800e98c:	9205      	str	r2, [sp, #20]
 800e98e:	e7c5      	b.n	800e91c <_vfprintf_r+0xa04>
 800e990:	4633      	mov	r3, r6
 800e992:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800e996:	f853 bb04 	ldr.w	fp, [r3], #4
 800e99a:	9304      	str	r3, [sp, #16]
 800e99c:	f04f 0600 	mov.w	r6, #0
 800e9a0:	f88d 605b 	strb.w	r6, [sp, #91]	; 0x5b
 800e9a4:	d00f      	beq.n	800e9c6 <_vfprintf_r+0xaae>
 800e9a6:	464a      	mov	r2, r9
 800e9a8:	4631      	mov	r1, r6
 800e9aa:	4658      	mov	r0, fp
 800e9ac:	f7f1 fcb0 	bl	8000310 <memchr>
 800e9b0:	9002      	str	r0, [sp, #8]
 800e9b2:	2800      	cmp	r0, #0
 800e9b4:	f000 80d5 	beq.w	800eb62 <_vfprintf_r+0xc4a>
 800e9b8:	e9cd 6606 	strd	r6, r6, [sp, #24]
 800e9bc:	eba0 090b 	sub.w	r9, r0, fp
 800e9c0:	9602      	str	r6, [sp, #8]
 800e9c2:	4637      	mov	r7, r6
 800e9c4:	e5d1      	b.n	800e56a <_vfprintf_r+0x652>
 800e9c6:	4658      	mov	r0, fp
 800e9c8:	f7f1 fc94 	bl	80002f4 <strlen>
 800e9cc:	4637      	mov	r7, r6
 800e9ce:	4681      	mov	r9, r0
 800e9d0:	9602      	str	r6, [sp, #8]
 800e9d2:	463b      	mov	r3, r7
 800e9d4:	e499      	b.n	800e30a <_vfprintf_r+0x3f2>
 800e9d6:	f04a 0a10 	orr.w	sl, sl, #16
 800e9da:	f01a 0320 	ands.w	r3, sl, #32
 800e9de:	d009      	beq.n	800e9f4 <_vfprintf_r+0xadc>
 800e9e0:	3607      	adds	r6, #7
 800e9e2:	f026 0307 	bic.w	r3, r6, #7
 800e9e6:	461a      	mov	r2, r3
 800e9e8:	685f      	ldr	r7, [r3, #4]
 800e9ea:	f852 6b08 	ldr.w	r6, [r2], #8
 800e9ee:	9204      	str	r2, [sp, #16]
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	e793      	b.n	800e91c <_vfprintf_r+0xa04>
 800e9f4:	4632      	mov	r2, r6
 800e9f6:	f01a 0710 	ands.w	r7, sl, #16
 800e9fa:	f852 6b04 	ldr.w	r6, [r2], #4
 800e9fe:	9204      	str	r2, [sp, #16]
 800ea00:	d001      	beq.n	800ea06 <_vfprintf_r+0xaee>
 800ea02:	461f      	mov	r7, r3
 800ea04:	e7f4      	b.n	800e9f0 <_vfprintf_r+0xad8>
 800ea06:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800ea0a:	d001      	beq.n	800ea10 <_vfprintf_r+0xaf8>
 800ea0c:	b2b6      	uxth	r6, r6
 800ea0e:	e7ef      	b.n	800e9f0 <_vfprintf_r+0xad8>
 800ea10:	f41a 7700 	ands.w	r7, sl, #512	; 0x200
 800ea14:	d0ec      	beq.n	800e9f0 <_vfprintf_r+0xad8>
 800ea16:	b2f6      	uxtb	r6, r6
 800ea18:	e7f3      	b.n	800ea02 <_vfprintf_r+0xaea>
 800ea1a:	4b7f      	ldr	r3, [pc, #508]	; (800ec18 <_vfprintf_r+0xd00>)
 800ea1c:	9312      	str	r3, [sp, #72]	; 0x48
 800ea1e:	f01a 0320 	ands.w	r3, sl, #32
 800ea22:	d01b      	beq.n	800ea5c <_vfprintf_r+0xb44>
 800ea24:	3607      	adds	r6, #7
 800ea26:	f026 0307 	bic.w	r3, r6, #7
 800ea2a:	461a      	mov	r2, r3
 800ea2c:	685f      	ldr	r7, [r3, #4]
 800ea2e:	f852 6b08 	ldr.w	r6, [r2], #8
 800ea32:	9204      	str	r2, [sp, #16]
 800ea34:	f01a 0f01 	tst.w	sl, #1
 800ea38:	d00a      	beq.n	800ea50 <_vfprintf_r+0xb38>
 800ea3a:	ea56 0307 	orrs.w	r3, r6, r7
 800ea3e:	d007      	beq.n	800ea50 <_vfprintf_r+0xb38>
 800ea40:	2330      	movs	r3, #48	; 0x30
 800ea42:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 800ea46:	9b05      	ldr	r3, [sp, #20]
 800ea48:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 800ea4c:	f04a 0a02 	orr.w	sl, sl, #2
 800ea50:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800ea54:	2302      	movs	r3, #2
 800ea56:	e761      	b.n	800e91c <_vfprintf_r+0xa04>
 800ea58:	4b6e      	ldr	r3, [pc, #440]	; (800ec14 <_vfprintf_r+0xcfc>)
 800ea5a:	e7df      	b.n	800ea1c <_vfprintf_r+0xb04>
 800ea5c:	4632      	mov	r2, r6
 800ea5e:	f01a 0710 	ands.w	r7, sl, #16
 800ea62:	f852 6b04 	ldr.w	r6, [r2], #4
 800ea66:	9204      	str	r2, [sp, #16]
 800ea68:	d001      	beq.n	800ea6e <_vfprintf_r+0xb56>
 800ea6a:	461f      	mov	r7, r3
 800ea6c:	e7e2      	b.n	800ea34 <_vfprintf_r+0xb1c>
 800ea6e:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800ea72:	d001      	beq.n	800ea78 <_vfprintf_r+0xb60>
 800ea74:	b2b6      	uxth	r6, r6
 800ea76:	e7dd      	b.n	800ea34 <_vfprintf_r+0xb1c>
 800ea78:	f41a 7700 	ands.w	r7, sl, #512	; 0x200
 800ea7c:	d0da      	beq.n	800ea34 <_vfprintf_r+0xb1c>
 800ea7e:	b2f6      	uxtb	r6, r6
 800ea80:	e7f3      	b.n	800ea6a <_vfprintf_r+0xb52>
 800ea82:	2e0a      	cmp	r6, #10
 800ea84:	f177 0300 	sbcs.w	r3, r7, #0
 800ea88:	d206      	bcs.n	800ea98 <_vfprintf_r+0xb80>
 800ea8a:	3630      	adds	r6, #48	; 0x30
 800ea8c:	f88d 6127 	strb.w	r6, [sp, #295]	; 0x127
 800ea90:	f20d 1b27 	addw	fp, sp, #295	; 0x127
 800ea94:	f000 bc0c 	b.w	800f2b0 <_vfprintf_r+0x1398>
 800ea98:	2300      	movs	r3, #0
 800ea9a:	9303      	str	r3, [sp, #12]
 800ea9c:	9b02      	ldr	r3, [sp, #8]
 800ea9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eaa2:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 800eaa6:	9306      	str	r3, [sp, #24]
 800eaa8:	220a      	movs	r2, #10
 800eaaa:	2300      	movs	r3, #0
 800eaac:	4630      	mov	r0, r6
 800eaae:	4639      	mov	r1, r7
 800eab0:	f7f1 fc7e 	bl	80003b0 <__aeabi_uldivmod>
 800eab4:	3230      	adds	r2, #48	; 0x30
 800eab6:	f80a 2c01 	strb.w	r2, [sl, #-1]
 800eaba:	9a03      	ldr	r2, [sp, #12]
 800eabc:	9007      	str	r0, [sp, #28]
 800eabe:	3201      	adds	r2, #1
 800eac0:	9203      	str	r2, [sp, #12]
 800eac2:	9a06      	ldr	r2, [sp, #24]
 800eac4:	460b      	mov	r3, r1
 800eac6:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
 800eaca:	b1e2      	cbz	r2, 800eb06 <_vfprintf_r+0xbee>
 800eacc:	9a08      	ldr	r2, [sp, #32]
 800eace:	9903      	ldr	r1, [sp, #12]
 800ead0:	7812      	ldrb	r2, [r2, #0]
 800ead2:	4291      	cmp	r1, r2
 800ead4:	d117      	bne.n	800eb06 <_vfprintf_r+0xbee>
 800ead6:	29ff      	cmp	r1, #255	; 0xff
 800ead8:	d015      	beq.n	800eb06 <_vfprintf_r+0xbee>
 800eada:	2e0a      	cmp	r6, #10
 800eadc:	f177 0200 	sbcs.w	r2, r7, #0
 800eae0:	d311      	bcc.n	800eb06 <_vfprintf_r+0xbee>
 800eae2:	9303      	str	r3, [sp, #12]
 800eae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eae6:	9910      	ldr	r1, [sp, #64]	; 0x40
 800eae8:	ebab 0b03 	sub.w	fp, fp, r3
 800eaec:	461a      	mov	r2, r3
 800eaee:	4658      	mov	r0, fp
 800eaf0:	f001 fcdf 	bl	80104b2 <strncpy>
 800eaf4:	9b08      	ldr	r3, [sp, #32]
 800eaf6:	785a      	ldrb	r2, [r3, #1]
 800eaf8:	9b03      	ldr	r3, [sp, #12]
 800eafa:	b11a      	cbz	r2, 800eb04 <_vfprintf_r+0xbec>
 800eafc:	9a08      	ldr	r2, [sp, #32]
 800eafe:	3201      	adds	r2, #1
 800eb00:	9208      	str	r2, [sp, #32]
 800eb02:	2200      	movs	r2, #0
 800eb04:	9203      	str	r2, [sp, #12]
 800eb06:	2e0a      	cmp	r6, #10
 800eb08:	f177 0700 	sbcs.w	r7, r7, #0
 800eb0c:	f0c0 83d0 	bcc.w	800f2b0 <_vfprintf_r+0x1398>
 800eb10:	9e07      	ldr	r6, [sp, #28]
 800eb12:	461f      	mov	r7, r3
 800eb14:	46da      	mov	sl, fp
 800eb16:	e7c7      	b.n	800eaa8 <_vfprintf_r+0xb90>
 800eb18:	f006 030f 	and.w	r3, r6, #15
 800eb1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eb1e:	0936      	lsrs	r6, r6, #4
 800eb20:	5cd3      	ldrb	r3, [r2, r3]
 800eb22:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 800eb26:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 800eb2a:	093f      	lsrs	r7, r7, #4
 800eb2c:	ea56 0307 	orrs.w	r3, r6, r7
 800eb30:	d1f2      	bne.n	800eb18 <_vfprintf_r+0xc00>
 800eb32:	e3bd      	b.n	800f2b0 <_vfprintf_r+0x1398>
 800eb34:	b933      	cbnz	r3, 800eb44 <_vfprintf_r+0xc2c>
 800eb36:	f01a 0f01 	tst.w	sl, #1
 800eb3a:	d003      	beq.n	800eb44 <_vfprintf_r+0xc2c>
 800eb3c:	2330      	movs	r3, #48	; 0x30
 800eb3e:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
 800eb42:	e7a5      	b.n	800ea90 <_vfprintf_r+0xb78>
 800eb44:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800eb48:	e3b2      	b.n	800f2b0 <_vfprintf_r+0x1398>
 800eb4a:	9b05      	ldr	r3, [sp, #20]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	f000 837b 	beq.w	800f248 <_vfprintf_r+0x1330>
 800eb52:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 800eb56:	2300      	movs	r3, #0
 800eb58:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800eb5c:	9604      	str	r6, [sp, #16]
 800eb5e:	f7ff bb6c 	b.w	800e23a <_vfprintf_r+0x322>
 800eb62:	9f02      	ldr	r7, [sp, #8]
 800eb64:	e735      	b.n	800e9d2 <_vfprintf_r+0xaba>
 800eb66:	2110      	movs	r1, #16
 800eb68:	6061      	str	r1, [r4, #4]
 800eb6a:	2a07      	cmp	r2, #7
 800eb6c:	4461      	add	r1, ip
 800eb6e:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800eb72:	dd0a      	ble.n	800eb8a <_vfprintf_r+0xc72>
 800eb74:	aa1e      	add	r2, sp, #120	; 0x78
 800eb76:	4629      	mov	r1, r5
 800eb78:	4640      	mov	r0, r8
 800eb7a:	9315      	str	r3, [sp, #84]	; 0x54
 800eb7c:	f000 fbe4 	bl	800f348 <__sprint_r>
 800eb80:	2800      	cmp	r0, #0
 800eb82:	f040 833e 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800eb86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb88:	a821      	add	r0, sp, #132	; 0x84
 800eb8a:	3b10      	subs	r3, #16
 800eb8c:	4604      	mov	r4, r0
 800eb8e:	e507      	b.n	800e5a0 <_vfprintf_r+0x688>
 800eb90:	4604      	mov	r4, r0
 800eb92:	e521      	b.n	800e5d8 <_vfprintf_r+0x6c0>
 800eb94:	aa1e      	add	r2, sp, #120	; 0x78
 800eb96:	4629      	mov	r1, r5
 800eb98:	4640      	mov	r0, r8
 800eb9a:	f000 fbd5 	bl	800f348 <__sprint_r>
 800eb9e:	2800      	cmp	r0, #0
 800eba0:	f040 832f 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800eba4:	ac21      	add	r4, sp, #132	; 0x84
 800eba6:	e529      	b.n	800e5fc <_vfprintf_r+0x6e4>
 800eba8:	aa1e      	add	r2, sp, #120	; 0x78
 800ebaa:	4629      	mov	r1, r5
 800ebac:	4640      	mov	r0, r8
 800ebae:	f000 fbcb 	bl	800f348 <__sprint_r>
 800ebb2:	2800      	cmp	r0, #0
 800ebb4:	f040 8325 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800ebb8:	ac21      	add	r4, sp, #132	; 0x84
 800ebba:	e52f      	b.n	800e61c <_vfprintf_r+0x704>
 800ebbc:	2110      	movs	r1, #16
 800ebbe:	6061      	str	r1, [r4, #4]
 800ebc0:	2a07      	cmp	r2, #7
 800ebc2:	4461      	add	r1, ip
 800ebc4:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800ebc8:	dd0a      	ble.n	800ebe0 <_vfprintf_r+0xcc8>
 800ebca:	aa1e      	add	r2, sp, #120	; 0x78
 800ebcc:	4629      	mov	r1, r5
 800ebce:	4640      	mov	r0, r8
 800ebd0:	9313      	str	r3, [sp, #76]	; 0x4c
 800ebd2:	f000 fbb9 	bl	800f348 <__sprint_r>
 800ebd6:	2800      	cmp	r0, #0
 800ebd8:	f040 8313 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800ebdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ebde:	a821      	add	r0, sp, #132	; 0x84
 800ebe0:	3b10      	subs	r3, #16
 800ebe2:	4604      	mov	r4, r0
 800ebe4:	e522      	b.n	800e62c <_vfprintf_r+0x714>
 800ebe6:	4604      	mov	r4, r0
 800ebe8:	e53c      	b.n	800e664 <_vfprintf_r+0x74c>
 800ebea:	2010      	movs	r0, #16
 800ebec:	4402      	add	r2, r0
 800ebee:	2b07      	cmp	r3, #7
 800ebf0:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800ebf4:	6060      	str	r0, [r4, #4]
 800ebf6:	dd08      	ble.n	800ec0a <_vfprintf_r+0xcf2>
 800ebf8:	aa1e      	add	r2, sp, #120	; 0x78
 800ebfa:	4629      	mov	r1, r5
 800ebfc:	4640      	mov	r0, r8
 800ebfe:	f000 fba3 	bl	800f348 <__sprint_r>
 800ec02:	2800      	cmp	r0, #0
 800ec04:	f040 82fd 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800ec08:	a921      	add	r1, sp, #132	; 0x84
 800ec0a:	3f10      	subs	r7, #16
 800ec0c:	460c      	mov	r4, r1
 800ec0e:	e52d      	b.n	800e66c <_vfprintf_r+0x754>
 800ec10:	460c      	mov	r4, r1
 800ec12:	e546      	b.n	800e6a2 <_vfprintf_r+0x78a>
 800ec14:	08011fd8 	.word	0x08011fd8
 800ec18:	08011fe9 	.word	0x08011fe9
 800ec1c:	9a05      	ldr	r2, [sp, #20]
 800ec1e:	2a65      	cmp	r2, #101	; 0x65
 800ec20:	f340 8240 	ble.w	800f0a4 <_vfprintf_r+0x118c>
 800ec24:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ec28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec2c:	d16a      	bne.n	800ed04 <_vfprintf_r+0xdec>
 800ec2e:	4a73      	ldr	r2, [pc, #460]	; (800edfc <_vfprintf_r+0xee4>)
 800ec30:	6022      	str	r2, [r4, #0]
 800ec32:	2201      	movs	r2, #1
 800ec34:	4413      	add	r3, r2
 800ec36:	9320      	str	r3, [sp, #128]	; 0x80
 800ec38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ec3a:	6062      	str	r2, [r4, #4]
 800ec3c:	4413      	add	r3, r2
 800ec3e:	2b07      	cmp	r3, #7
 800ec40:	931f      	str	r3, [sp, #124]	; 0x7c
 800ec42:	dc38      	bgt.n	800ecb6 <_vfprintf_r+0xd9e>
 800ec44:	3408      	adds	r4, #8
 800ec46:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ec48:	9a03      	ldr	r2, [sp, #12]
 800ec4a:	4293      	cmp	r3, r2
 800ec4c:	db03      	blt.n	800ec56 <_vfprintf_r+0xd3e>
 800ec4e:	f01a 0f01 	tst.w	sl, #1
 800ec52:	f43f ad36 	beq.w	800e6c2 <_vfprintf_r+0x7aa>
 800ec56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec58:	6023      	str	r3, [r4, #0]
 800ec5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec5e:	6063      	str	r3, [r4, #4]
 800ec60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ec62:	4413      	add	r3, r2
 800ec64:	9320      	str	r3, [sp, #128]	; 0x80
 800ec66:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ec68:	3301      	adds	r3, #1
 800ec6a:	2b07      	cmp	r3, #7
 800ec6c:	931f      	str	r3, [sp, #124]	; 0x7c
 800ec6e:	dc2c      	bgt.n	800ecca <_vfprintf_r+0xdb2>
 800ec70:	3408      	adds	r4, #8
 800ec72:	9b03      	ldr	r3, [sp, #12]
 800ec74:	1e5e      	subs	r6, r3, #1
 800ec76:	2e00      	cmp	r6, #0
 800ec78:	f77f ad23 	ble.w	800e6c2 <_vfprintf_r+0x7aa>
 800ec7c:	4f60      	ldr	r7, [pc, #384]	; (800ee00 <_vfprintf_r+0xee8>)
 800ec7e:	f04f 0910 	mov.w	r9, #16
 800ec82:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800ec86:	2e10      	cmp	r6, #16
 800ec88:	f103 0301 	add.w	r3, r3, #1
 800ec8c:	f104 0108 	add.w	r1, r4, #8
 800ec90:	6027      	str	r7, [r4, #0]
 800ec92:	dc24      	bgt.n	800ecde <_vfprintf_r+0xdc6>
 800ec94:	6066      	str	r6, [r4, #4]
 800ec96:	2b07      	cmp	r3, #7
 800ec98:	4416      	add	r6, r2
 800ec9a:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
 800ec9e:	f340 828e 	ble.w	800f1be <_vfprintf_r+0x12a6>
 800eca2:	aa1e      	add	r2, sp, #120	; 0x78
 800eca4:	4629      	mov	r1, r5
 800eca6:	4640      	mov	r0, r8
 800eca8:	f000 fb4e 	bl	800f348 <__sprint_r>
 800ecac:	2800      	cmp	r0, #0
 800ecae:	f040 82a8 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800ecb2:	ac21      	add	r4, sp, #132	; 0x84
 800ecb4:	e505      	b.n	800e6c2 <_vfprintf_r+0x7aa>
 800ecb6:	aa1e      	add	r2, sp, #120	; 0x78
 800ecb8:	4629      	mov	r1, r5
 800ecba:	4640      	mov	r0, r8
 800ecbc:	f000 fb44 	bl	800f348 <__sprint_r>
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	f040 829e 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800ecc6:	ac21      	add	r4, sp, #132	; 0x84
 800ecc8:	e7bd      	b.n	800ec46 <_vfprintf_r+0xd2e>
 800ecca:	aa1e      	add	r2, sp, #120	; 0x78
 800eccc:	4629      	mov	r1, r5
 800ecce:	4640      	mov	r0, r8
 800ecd0:	f000 fb3a 	bl	800f348 <__sprint_r>
 800ecd4:	2800      	cmp	r0, #0
 800ecd6:	f040 8294 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800ecda:	ac21      	add	r4, sp, #132	; 0x84
 800ecdc:	e7c9      	b.n	800ec72 <_vfprintf_r+0xd5a>
 800ecde:	3210      	adds	r2, #16
 800ece0:	2b07      	cmp	r3, #7
 800ece2:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800ece6:	f8c4 9004 	str.w	r9, [r4, #4]
 800ecea:	dd08      	ble.n	800ecfe <_vfprintf_r+0xde6>
 800ecec:	aa1e      	add	r2, sp, #120	; 0x78
 800ecee:	4629      	mov	r1, r5
 800ecf0:	4640      	mov	r0, r8
 800ecf2:	f000 fb29 	bl	800f348 <__sprint_r>
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	f040 8283 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800ecfc:	a921      	add	r1, sp, #132	; 0x84
 800ecfe:	3e10      	subs	r6, #16
 800ed00:	460c      	mov	r4, r1
 800ed02:	e7be      	b.n	800ec82 <_vfprintf_r+0xd6a>
 800ed04:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ed06:	2a00      	cmp	r2, #0
 800ed08:	dc7c      	bgt.n	800ee04 <_vfprintf_r+0xeec>
 800ed0a:	4a3c      	ldr	r2, [pc, #240]	; (800edfc <_vfprintf_r+0xee4>)
 800ed0c:	6022      	str	r2, [r4, #0]
 800ed0e:	2201      	movs	r2, #1
 800ed10:	4413      	add	r3, r2
 800ed12:	9320      	str	r3, [sp, #128]	; 0x80
 800ed14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ed16:	6062      	str	r2, [r4, #4]
 800ed18:	4413      	add	r3, r2
 800ed1a:	2b07      	cmp	r3, #7
 800ed1c:	931f      	str	r3, [sp, #124]	; 0x7c
 800ed1e:	dc46      	bgt.n	800edae <_vfprintf_r+0xe96>
 800ed20:	3408      	adds	r4, #8
 800ed22:	9903      	ldr	r1, [sp, #12]
 800ed24:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ed26:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ed28:	430b      	orrs	r3, r1
 800ed2a:	f00a 0101 	and.w	r1, sl, #1
 800ed2e:	430b      	orrs	r3, r1
 800ed30:	f43f acc7 	beq.w	800e6c2 <_vfprintf_r+0x7aa>
 800ed34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed36:	6023      	str	r3, [r4, #0]
 800ed38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed3a:	6063      	str	r3, [r4, #4]
 800ed3c:	441a      	add	r2, r3
 800ed3e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ed40:	9220      	str	r2, [sp, #128]	; 0x80
 800ed42:	3301      	adds	r3, #1
 800ed44:	2b07      	cmp	r3, #7
 800ed46:	931f      	str	r3, [sp, #124]	; 0x7c
 800ed48:	dc3b      	bgt.n	800edc2 <_vfprintf_r+0xeaa>
 800ed4a:	f104 0308 	add.w	r3, r4, #8
 800ed4e:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800ed50:	2e00      	cmp	r6, #0
 800ed52:	da1b      	bge.n	800ed8c <_vfprintf_r+0xe74>
 800ed54:	4f2a      	ldr	r7, [pc, #168]	; (800ee00 <_vfprintf_r+0xee8>)
 800ed56:	4276      	negs	r6, r6
 800ed58:	461a      	mov	r2, r3
 800ed5a:	2410      	movs	r4, #16
 800ed5c:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	; 0x7c
 800ed60:	2e10      	cmp	r6, #16
 800ed62:	f101 0101 	add.w	r1, r1, #1
 800ed66:	f103 0308 	add.w	r3, r3, #8
 800ed6a:	6017      	str	r7, [r2, #0]
 800ed6c:	dc33      	bgt.n	800edd6 <_vfprintf_r+0xebe>
 800ed6e:	6056      	str	r6, [r2, #4]
 800ed70:	2907      	cmp	r1, #7
 800ed72:	4406      	add	r6, r0
 800ed74:	e9cd 161f 	strd	r1, r6, [sp, #124]	; 0x7c
 800ed78:	dd08      	ble.n	800ed8c <_vfprintf_r+0xe74>
 800ed7a:	aa1e      	add	r2, sp, #120	; 0x78
 800ed7c:	4629      	mov	r1, r5
 800ed7e:	4640      	mov	r0, r8
 800ed80:	f000 fae2 	bl	800f348 <__sprint_r>
 800ed84:	2800      	cmp	r0, #0
 800ed86:	f040 823c 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800ed8a:	ab21      	add	r3, sp, #132	; 0x84
 800ed8c:	9a03      	ldr	r2, [sp, #12]
 800ed8e:	605a      	str	r2, [r3, #4]
 800ed90:	9903      	ldr	r1, [sp, #12]
 800ed92:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ed94:	f8c3 b000 	str.w	fp, [r3]
 800ed98:	440a      	add	r2, r1
 800ed9a:	9220      	str	r2, [sp, #128]	; 0x80
 800ed9c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ed9e:	3201      	adds	r2, #1
 800eda0:	2a07      	cmp	r2, #7
 800eda2:	921f      	str	r2, [sp, #124]	; 0x7c
 800eda4:	f73f af7d 	bgt.w	800eca2 <_vfprintf_r+0xd8a>
 800eda8:	f103 0408 	add.w	r4, r3, #8
 800edac:	e489      	b.n	800e6c2 <_vfprintf_r+0x7aa>
 800edae:	aa1e      	add	r2, sp, #120	; 0x78
 800edb0:	4629      	mov	r1, r5
 800edb2:	4640      	mov	r0, r8
 800edb4:	f000 fac8 	bl	800f348 <__sprint_r>
 800edb8:	2800      	cmp	r0, #0
 800edba:	f040 8222 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800edbe:	ac21      	add	r4, sp, #132	; 0x84
 800edc0:	e7af      	b.n	800ed22 <_vfprintf_r+0xe0a>
 800edc2:	aa1e      	add	r2, sp, #120	; 0x78
 800edc4:	4629      	mov	r1, r5
 800edc6:	4640      	mov	r0, r8
 800edc8:	f000 fabe 	bl	800f348 <__sprint_r>
 800edcc:	2800      	cmp	r0, #0
 800edce:	f040 8218 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800edd2:	ab21      	add	r3, sp, #132	; 0x84
 800edd4:	e7bb      	b.n	800ed4e <_vfprintf_r+0xe36>
 800edd6:	3010      	adds	r0, #16
 800edd8:	2907      	cmp	r1, #7
 800edda:	e9cd 101f 	strd	r1, r0, [sp, #124]	; 0x7c
 800edde:	6054      	str	r4, [r2, #4]
 800ede0:	dd08      	ble.n	800edf4 <_vfprintf_r+0xedc>
 800ede2:	aa1e      	add	r2, sp, #120	; 0x78
 800ede4:	4629      	mov	r1, r5
 800ede6:	4640      	mov	r0, r8
 800ede8:	f000 faae 	bl	800f348 <__sprint_r>
 800edec:	2800      	cmp	r0, #0
 800edee:	f040 8208 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800edf2:	ab21      	add	r3, sp, #132	; 0x84
 800edf4:	3e10      	subs	r6, #16
 800edf6:	461a      	mov	r2, r3
 800edf8:	e7b0      	b.n	800ed5c <_vfprintf_r+0xe44>
 800edfa:	bf00      	nop
 800edfc:	08011ffa 	.word	0x08011ffa
 800ee00:	0801200c 	.word	0x0801200c
 800ee04:	9a03      	ldr	r2, [sp, #12]
 800ee06:	42b2      	cmp	r2, r6
 800ee08:	bfa8      	it	ge
 800ee0a:	4632      	movge	r2, r6
 800ee0c:	2a00      	cmp	r2, #0
 800ee0e:	4691      	mov	r9, r2
 800ee10:	dd0a      	ble.n	800ee28 <_vfprintf_r+0xf10>
 800ee12:	4413      	add	r3, r2
 800ee14:	9320      	str	r3, [sp, #128]	; 0x80
 800ee16:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ee18:	3301      	adds	r3, #1
 800ee1a:	2b07      	cmp	r3, #7
 800ee1c:	e9c4 b200 	strd	fp, r2, [r4]
 800ee20:	931f      	str	r3, [sp, #124]	; 0x7c
 800ee22:	f300 808a 	bgt.w	800ef3a <_vfprintf_r+0x1022>
 800ee26:	3408      	adds	r4, #8
 800ee28:	f1b9 0f00 	cmp.w	r9, #0
 800ee2c:	bfac      	ite	ge
 800ee2e:	eba6 0709 	subge.w	r7, r6, r9
 800ee32:	4637      	movlt	r7, r6
 800ee34:	2f00      	cmp	r7, #0
 800ee36:	dd1b      	ble.n	800ee70 <_vfprintf_r+0xf58>
 800ee38:	f8df 9368 	ldr.w	r9, [pc, #872]	; 800f1a4 <_vfprintf_r+0x128c>
 800ee3c:	f8c4 9000 	str.w	r9, [r4]
 800ee40:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800ee44:	2f10      	cmp	r7, #16
 800ee46:	f103 0301 	add.w	r3, r3, #1
 800ee4a:	f104 0108 	add.w	r1, r4, #8
 800ee4e:	dc7e      	bgt.n	800ef4e <_vfprintf_r+0x1036>
 800ee50:	6067      	str	r7, [r4, #4]
 800ee52:	2b07      	cmp	r3, #7
 800ee54:	4417      	add	r7, r2
 800ee56:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 800ee5a:	f340 808b 	ble.w	800ef74 <_vfprintf_r+0x105c>
 800ee5e:	aa1e      	add	r2, sp, #120	; 0x78
 800ee60:	4629      	mov	r1, r5
 800ee62:	4640      	mov	r0, r8
 800ee64:	f000 fa70 	bl	800f348 <__sprint_r>
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	f040 81ca 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800ee6e:	ac21      	add	r4, sp, #132	; 0x84
 800ee70:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 800ee74:	445e      	add	r6, fp
 800ee76:	d00a      	beq.n	800ee8e <_vfprintf_r+0xf76>
 800ee78:	9b07      	ldr	r3, [sp, #28]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d17c      	bne.n	800ef78 <_vfprintf_r+0x1060>
 800ee7e:	9b06      	ldr	r3, [sp, #24]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d17c      	bne.n	800ef7e <_vfprintf_r+0x1066>
 800ee84:	9b03      	ldr	r3, [sp, #12]
 800ee86:	445b      	add	r3, fp
 800ee88:	429e      	cmp	r6, r3
 800ee8a:	bf28      	it	cs
 800ee8c:	461e      	movcs	r6, r3
 800ee8e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ee90:	9a03      	ldr	r2, [sp, #12]
 800ee92:	4293      	cmp	r3, r2
 800ee94:	db02      	blt.n	800ee9c <_vfprintf_r+0xf84>
 800ee96:	f01a 0f01 	tst.w	sl, #1
 800ee9a:	d00e      	beq.n	800eeba <_vfprintf_r+0xfa2>
 800ee9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee9e:	6023      	str	r3, [r4, #0]
 800eea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eea2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eea4:	6063      	str	r3, [r4, #4]
 800eea6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800eea8:	4413      	add	r3, r2
 800eeaa:	9320      	str	r3, [sp, #128]	; 0x80
 800eeac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800eeae:	3301      	adds	r3, #1
 800eeb0:	2b07      	cmp	r3, #7
 800eeb2:	931f      	str	r3, [sp, #124]	; 0x7c
 800eeb4:	f300 80e2 	bgt.w	800f07c <_vfprintf_r+0x1164>
 800eeb8:	3408      	adds	r4, #8
 800eeba:	9b03      	ldr	r3, [sp, #12]
 800eebc:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800eebe:	1bdf      	subs	r7, r3, r7
 800eec0:	445b      	add	r3, fp
 800eec2:	1b9b      	subs	r3, r3, r6
 800eec4:	429f      	cmp	r7, r3
 800eec6:	bfa8      	it	ge
 800eec8:	461f      	movge	r7, r3
 800eeca:	2f00      	cmp	r7, #0
 800eecc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800eece:	dd0a      	ble.n	800eee6 <_vfprintf_r+0xfce>
 800eed0:	443b      	add	r3, r7
 800eed2:	9320      	str	r3, [sp, #128]	; 0x80
 800eed4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800eed6:	3301      	adds	r3, #1
 800eed8:	2b07      	cmp	r3, #7
 800eeda:	e9c4 6700 	strd	r6, r7, [r4]
 800eede:	931f      	str	r3, [sp, #124]	; 0x7c
 800eee0:	f300 80d6 	bgt.w	800f090 <_vfprintf_r+0x1178>
 800eee4:	3408      	adds	r4, #8
 800eee6:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800eee8:	9b03      	ldr	r3, [sp, #12]
 800eeea:	2f00      	cmp	r7, #0
 800eeec:	eba3 0606 	sub.w	r6, r3, r6
 800eef0:	bfa8      	it	ge
 800eef2:	1bf6      	subge	r6, r6, r7
 800eef4:	2e00      	cmp	r6, #0
 800eef6:	f77f abe4 	ble.w	800e6c2 <_vfprintf_r+0x7aa>
 800eefa:	4faa      	ldr	r7, [pc, #680]	; (800f1a4 <_vfprintf_r+0x128c>)
 800eefc:	f04f 0910 	mov.w	r9, #16
 800ef00:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800ef04:	2e10      	cmp	r6, #16
 800ef06:	f103 0301 	add.w	r3, r3, #1
 800ef0a:	f104 0108 	add.w	r1, r4, #8
 800ef0e:	6027      	str	r7, [r4, #0]
 800ef10:	f77f aec0 	ble.w	800ec94 <_vfprintf_r+0xd7c>
 800ef14:	3210      	adds	r2, #16
 800ef16:	2b07      	cmp	r3, #7
 800ef18:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800ef1c:	f8c4 9004 	str.w	r9, [r4, #4]
 800ef20:	dd08      	ble.n	800ef34 <_vfprintf_r+0x101c>
 800ef22:	aa1e      	add	r2, sp, #120	; 0x78
 800ef24:	4629      	mov	r1, r5
 800ef26:	4640      	mov	r0, r8
 800ef28:	f000 fa0e 	bl	800f348 <__sprint_r>
 800ef2c:	2800      	cmp	r0, #0
 800ef2e:	f040 8168 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800ef32:	a921      	add	r1, sp, #132	; 0x84
 800ef34:	3e10      	subs	r6, #16
 800ef36:	460c      	mov	r4, r1
 800ef38:	e7e2      	b.n	800ef00 <_vfprintf_r+0xfe8>
 800ef3a:	aa1e      	add	r2, sp, #120	; 0x78
 800ef3c:	4629      	mov	r1, r5
 800ef3e:	4640      	mov	r0, r8
 800ef40:	f000 fa02 	bl	800f348 <__sprint_r>
 800ef44:	2800      	cmp	r0, #0
 800ef46:	f040 815c 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800ef4a:	ac21      	add	r4, sp, #132	; 0x84
 800ef4c:	e76c      	b.n	800ee28 <_vfprintf_r+0xf10>
 800ef4e:	2010      	movs	r0, #16
 800ef50:	4402      	add	r2, r0
 800ef52:	2b07      	cmp	r3, #7
 800ef54:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800ef58:	6060      	str	r0, [r4, #4]
 800ef5a:	dd08      	ble.n	800ef6e <_vfprintf_r+0x1056>
 800ef5c:	aa1e      	add	r2, sp, #120	; 0x78
 800ef5e:	4629      	mov	r1, r5
 800ef60:	4640      	mov	r0, r8
 800ef62:	f000 f9f1 	bl	800f348 <__sprint_r>
 800ef66:	2800      	cmp	r0, #0
 800ef68:	f040 814b 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800ef6c:	a921      	add	r1, sp, #132	; 0x84
 800ef6e:	3f10      	subs	r7, #16
 800ef70:	460c      	mov	r4, r1
 800ef72:	e763      	b.n	800ee3c <_vfprintf_r+0xf24>
 800ef74:	460c      	mov	r4, r1
 800ef76:	e77b      	b.n	800ee70 <_vfprintf_r+0xf58>
 800ef78:	9b06      	ldr	r3, [sp, #24]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d04e      	beq.n	800f01c <_vfprintf_r+0x1104>
 800ef7e:	9b06      	ldr	r3, [sp, #24]
 800ef80:	3b01      	subs	r3, #1
 800ef82:	9306      	str	r3, [sp, #24]
 800ef84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef86:	6023      	str	r3, [r4, #0]
 800ef88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ef8c:	6063      	str	r3, [r4, #4]
 800ef8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ef90:	4413      	add	r3, r2
 800ef92:	9320      	str	r3, [sp, #128]	; 0x80
 800ef94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ef96:	3301      	adds	r3, #1
 800ef98:	2b07      	cmp	r3, #7
 800ef9a:	931f      	str	r3, [sp, #124]	; 0x7c
 800ef9c:	dc45      	bgt.n	800f02a <_vfprintf_r+0x1112>
 800ef9e:	3408      	adds	r4, #8
 800efa0:	9b03      	ldr	r3, [sp, #12]
 800efa2:	eb0b 0903 	add.w	r9, fp, r3
 800efa6:	9b08      	ldr	r3, [sp, #32]
 800efa8:	781b      	ldrb	r3, [r3, #0]
 800efaa:	eba9 0906 	sub.w	r9, r9, r6
 800efae:	4599      	cmp	r9, r3
 800efb0:	bfa8      	it	ge
 800efb2:	4699      	movge	r9, r3
 800efb4:	f1b9 0f00 	cmp.w	r9, #0
 800efb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800efba:	dd09      	ble.n	800efd0 <_vfprintf_r+0x10b8>
 800efbc:	444b      	add	r3, r9
 800efbe:	9320      	str	r3, [sp, #128]	; 0x80
 800efc0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800efc2:	3301      	adds	r3, #1
 800efc4:	2b07      	cmp	r3, #7
 800efc6:	e9c4 6900 	strd	r6, r9, [r4]
 800efca:	931f      	str	r3, [sp, #124]	; 0x7c
 800efcc:	dc37      	bgt.n	800f03e <_vfprintf_r+0x1126>
 800efce:	3408      	adds	r4, #8
 800efd0:	9b08      	ldr	r3, [sp, #32]
 800efd2:	781f      	ldrb	r7, [r3, #0]
 800efd4:	f1b9 0f00 	cmp.w	r9, #0
 800efd8:	bfa8      	it	ge
 800efda:	eba7 0709 	subge.w	r7, r7, r9
 800efde:	2f00      	cmp	r7, #0
 800efe0:	dd18      	ble.n	800f014 <_vfprintf_r+0x10fc>
 800efe2:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800efe6:	486f      	ldr	r0, [pc, #444]	; (800f1a4 <_vfprintf_r+0x128c>)
 800efe8:	6020      	str	r0, [r4, #0]
 800efea:	2f10      	cmp	r7, #16
 800efec:	f103 0301 	add.w	r3, r3, #1
 800eff0:	f104 0108 	add.w	r1, r4, #8
 800eff4:	dc2d      	bgt.n	800f052 <_vfprintf_r+0x113a>
 800eff6:	6067      	str	r7, [r4, #4]
 800eff8:	2b07      	cmp	r3, #7
 800effa:	4417      	add	r7, r2
 800effc:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 800f000:	dd3a      	ble.n	800f078 <_vfprintf_r+0x1160>
 800f002:	aa1e      	add	r2, sp, #120	; 0x78
 800f004:	4629      	mov	r1, r5
 800f006:	4640      	mov	r0, r8
 800f008:	f000 f99e 	bl	800f348 <__sprint_r>
 800f00c:	2800      	cmp	r0, #0
 800f00e:	f040 80f8 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800f012:	ac21      	add	r4, sp, #132	; 0x84
 800f014:	9b08      	ldr	r3, [sp, #32]
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	441e      	add	r6, r3
 800f01a:	e72d      	b.n	800ee78 <_vfprintf_r+0xf60>
 800f01c:	9b08      	ldr	r3, [sp, #32]
 800f01e:	3b01      	subs	r3, #1
 800f020:	9308      	str	r3, [sp, #32]
 800f022:	9b07      	ldr	r3, [sp, #28]
 800f024:	3b01      	subs	r3, #1
 800f026:	9307      	str	r3, [sp, #28]
 800f028:	e7ac      	b.n	800ef84 <_vfprintf_r+0x106c>
 800f02a:	aa1e      	add	r2, sp, #120	; 0x78
 800f02c:	4629      	mov	r1, r5
 800f02e:	4640      	mov	r0, r8
 800f030:	f000 f98a 	bl	800f348 <__sprint_r>
 800f034:	2800      	cmp	r0, #0
 800f036:	f040 80e4 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800f03a:	ac21      	add	r4, sp, #132	; 0x84
 800f03c:	e7b0      	b.n	800efa0 <_vfprintf_r+0x1088>
 800f03e:	aa1e      	add	r2, sp, #120	; 0x78
 800f040:	4629      	mov	r1, r5
 800f042:	4640      	mov	r0, r8
 800f044:	f000 f980 	bl	800f348 <__sprint_r>
 800f048:	2800      	cmp	r0, #0
 800f04a:	f040 80da 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800f04e:	ac21      	add	r4, sp, #132	; 0x84
 800f050:	e7be      	b.n	800efd0 <_vfprintf_r+0x10b8>
 800f052:	2010      	movs	r0, #16
 800f054:	4402      	add	r2, r0
 800f056:	2b07      	cmp	r3, #7
 800f058:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800f05c:	6060      	str	r0, [r4, #4]
 800f05e:	dd08      	ble.n	800f072 <_vfprintf_r+0x115a>
 800f060:	aa1e      	add	r2, sp, #120	; 0x78
 800f062:	4629      	mov	r1, r5
 800f064:	4640      	mov	r0, r8
 800f066:	f000 f96f 	bl	800f348 <__sprint_r>
 800f06a:	2800      	cmp	r0, #0
 800f06c:	f040 80c9 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800f070:	a921      	add	r1, sp, #132	; 0x84
 800f072:	3f10      	subs	r7, #16
 800f074:	460c      	mov	r4, r1
 800f076:	e7b4      	b.n	800efe2 <_vfprintf_r+0x10ca>
 800f078:	460c      	mov	r4, r1
 800f07a:	e7cb      	b.n	800f014 <_vfprintf_r+0x10fc>
 800f07c:	aa1e      	add	r2, sp, #120	; 0x78
 800f07e:	4629      	mov	r1, r5
 800f080:	4640      	mov	r0, r8
 800f082:	f000 f961 	bl	800f348 <__sprint_r>
 800f086:	2800      	cmp	r0, #0
 800f088:	f040 80bb 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800f08c:	ac21      	add	r4, sp, #132	; 0x84
 800f08e:	e714      	b.n	800eeba <_vfprintf_r+0xfa2>
 800f090:	aa1e      	add	r2, sp, #120	; 0x78
 800f092:	4629      	mov	r1, r5
 800f094:	4640      	mov	r0, r8
 800f096:	f000 f957 	bl	800f348 <__sprint_r>
 800f09a:	2800      	cmp	r0, #0
 800f09c:	f040 80b1 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800f0a0:	ac21      	add	r4, sp, #132	; 0x84
 800f0a2:	e720      	b.n	800eee6 <_vfprintf_r+0xfce>
 800f0a4:	9803      	ldr	r0, [sp, #12]
 800f0a6:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800f0a8:	2801      	cmp	r0, #1
 800f0aa:	f103 0201 	add.w	r2, r3, #1
 800f0ae:	f101 0101 	add.w	r1, r1, #1
 800f0b2:	f104 0308 	add.w	r3, r4, #8
 800f0b6:	dc02      	bgt.n	800f0be <_vfprintf_r+0x11a6>
 800f0b8:	f01a 0f01 	tst.w	sl, #1
 800f0bc:	d074      	beq.n	800f1a8 <_vfprintf_r+0x1290>
 800f0be:	2001      	movs	r0, #1
 800f0c0:	2907      	cmp	r1, #7
 800f0c2:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 800f0c6:	f8c4 b000 	str.w	fp, [r4]
 800f0ca:	6060      	str	r0, [r4, #4]
 800f0cc:	dd08      	ble.n	800f0e0 <_vfprintf_r+0x11c8>
 800f0ce:	aa1e      	add	r2, sp, #120	; 0x78
 800f0d0:	4629      	mov	r1, r5
 800f0d2:	4640      	mov	r0, r8
 800f0d4:	f000 f938 	bl	800f348 <__sprint_r>
 800f0d8:	2800      	cmp	r0, #0
 800f0da:	f040 8092 	bne.w	800f202 <_vfprintf_r+0x12ea>
 800f0de:	ab21      	add	r3, sp, #132	; 0x84
 800f0e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f0e2:	601a      	str	r2, [r3, #0]
 800f0e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f0e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f0e8:	605a      	str	r2, [r3, #4]
 800f0ea:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f0ec:	440a      	add	r2, r1
 800f0ee:	9220      	str	r2, [sp, #128]	; 0x80
 800f0f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f0f2:	3201      	adds	r2, #1
 800f0f4:	2a07      	cmp	r2, #7
 800f0f6:	921f      	str	r2, [sp, #124]	; 0x7c
 800f0f8:	dc25      	bgt.n	800f146 <_vfprintf_r+0x122e>
 800f0fa:	3308      	adds	r3, #8
 800f0fc:	9803      	ldr	r0, [sp, #12]
 800f0fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f106:	e9dd 121f 	ldrd	r1, r2, [sp, #124]	; 0x7c
 800f10a:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800f10e:	d023      	beq.n	800f158 <_vfprintf_r+0x1240>
 800f110:	f10b 0001 	add.w	r0, fp, #1
 800f114:	e9c3 0400 	strd	r0, r4, [r3]
 800f118:	9803      	ldr	r0, [sp, #12]
 800f11a:	3101      	adds	r1, #1
 800f11c:	3a01      	subs	r2, #1
 800f11e:	4402      	add	r2, r0
 800f120:	2907      	cmp	r1, #7
 800f122:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 800f126:	dd48      	ble.n	800f1ba <_vfprintf_r+0x12a2>
 800f128:	aa1e      	add	r2, sp, #120	; 0x78
 800f12a:	4629      	mov	r1, r5
 800f12c:	4640      	mov	r0, r8
 800f12e:	f000 f90b 	bl	800f348 <__sprint_r>
 800f132:	2800      	cmp	r0, #0
 800f134:	d165      	bne.n	800f202 <_vfprintf_r+0x12ea>
 800f136:	ab21      	add	r3, sp, #132	; 0x84
 800f138:	aa1a      	add	r2, sp, #104	; 0x68
 800f13a:	601a      	str	r2, [r3, #0]
 800f13c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f13e:	605a      	str	r2, [r3, #4]
 800f140:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f142:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f144:	e628      	b.n	800ed98 <_vfprintf_r+0xe80>
 800f146:	aa1e      	add	r2, sp, #120	; 0x78
 800f148:	4629      	mov	r1, r5
 800f14a:	4640      	mov	r0, r8
 800f14c:	f000 f8fc 	bl	800f348 <__sprint_r>
 800f150:	2800      	cmp	r0, #0
 800f152:	d156      	bne.n	800f202 <_vfprintf_r+0x12ea>
 800f154:	ab21      	add	r3, sp, #132	; 0x84
 800f156:	e7d1      	b.n	800f0fc <_vfprintf_r+0x11e4>
 800f158:	2c00      	cmp	r4, #0
 800f15a:	dded      	ble.n	800f138 <_vfprintf_r+0x1220>
 800f15c:	4e11      	ldr	r6, [pc, #68]	; (800f1a4 <_vfprintf_r+0x128c>)
 800f15e:	2710      	movs	r7, #16
 800f160:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	; 0x7c
 800f164:	2c10      	cmp	r4, #16
 800f166:	f102 0201 	add.w	r2, r2, #1
 800f16a:	f103 0008 	add.w	r0, r3, #8
 800f16e:	601e      	str	r6, [r3, #0]
 800f170:	dc07      	bgt.n	800f182 <_vfprintf_r+0x126a>
 800f172:	605c      	str	r4, [r3, #4]
 800f174:	2a07      	cmp	r2, #7
 800f176:	440c      	add	r4, r1
 800f178:	e9cd 241f 	strd	r2, r4, [sp, #124]	; 0x7c
 800f17c:	dcd4      	bgt.n	800f128 <_vfprintf_r+0x1210>
 800f17e:	4603      	mov	r3, r0
 800f180:	e7da      	b.n	800f138 <_vfprintf_r+0x1220>
 800f182:	3110      	adds	r1, #16
 800f184:	2a07      	cmp	r2, #7
 800f186:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800f18a:	605f      	str	r7, [r3, #4]
 800f18c:	dd06      	ble.n	800f19c <_vfprintf_r+0x1284>
 800f18e:	aa1e      	add	r2, sp, #120	; 0x78
 800f190:	4629      	mov	r1, r5
 800f192:	4640      	mov	r0, r8
 800f194:	f000 f8d8 	bl	800f348 <__sprint_r>
 800f198:	bb98      	cbnz	r0, 800f202 <_vfprintf_r+0x12ea>
 800f19a:	a821      	add	r0, sp, #132	; 0x84
 800f19c:	3c10      	subs	r4, #16
 800f19e:	4603      	mov	r3, r0
 800f1a0:	e7de      	b.n	800f160 <_vfprintf_r+0x1248>
 800f1a2:	bf00      	nop
 800f1a4:	0801200c 	.word	0x0801200c
 800f1a8:	2001      	movs	r0, #1
 800f1aa:	2907      	cmp	r1, #7
 800f1ac:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 800f1b0:	f8c4 b000 	str.w	fp, [r4]
 800f1b4:	6060      	str	r0, [r4, #4]
 800f1b6:	ddbf      	ble.n	800f138 <_vfprintf_r+0x1220>
 800f1b8:	e7b6      	b.n	800f128 <_vfprintf_r+0x1210>
 800f1ba:	3308      	adds	r3, #8
 800f1bc:	e7bc      	b.n	800f138 <_vfprintf_r+0x1220>
 800f1be:	460c      	mov	r4, r1
 800f1c0:	f7ff ba7f 	b.w	800e6c2 <_vfprintf_r+0x7aa>
 800f1c4:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800f1c8:	1a9e      	subs	r6, r3, r2
 800f1ca:	2e00      	cmp	r6, #0
 800f1cc:	f77f aa86 	ble.w	800e6dc <_vfprintf_r+0x7c4>
 800f1d0:	4f3c      	ldr	r7, [pc, #240]	; (800f2c4 <_vfprintf_r+0x13ac>)
 800f1d2:	f04f 0910 	mov.w	r9, #16
 800f1d6:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800f1da:	2e10      	cmp	r6, #16
 800f1dc:	f103 0301 	add.w	r3, r3, #1
 800f1e0:	6027      	str	r7, [r4, #0]
 800f1e2:	dc18      	bgt.n	800f216 <_vfprintf_r+0x12fe>
 800f1e4:	6066      	str	r6, [r4, #4]
 800f1e6:	2b07      	cmp	r3, #7
 800f1e8:	4416      	add	r6, r2
 800f1ea:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
 800f1ee:	f77f aa75 	ble.w	800e6dc <_vfprintf_r+0x7c4>
 800f1f2:	aa1e      	add	r2, sp, #120	; 0x78
 800f1f4:	4629      	mov	r1, r5
 800f1f6:	4640      	mov	r0, r8
 800f1f8:	f000 f8a6 	bl	800f348 <__sprint_r>
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	f43f aa6d 	beq.w	800e6dc <_vfprintf_r+0x7c4>
 800f202:	9b02      	ldr	r3, [sp, #8]
 800f204:	2b00      	cmp	r3, #0
 800f206:	f43f a8b5 	beq.w	800e374 <_vfprintf_r+0x45c>
 800f20a:	4619      	mov	r1, r3
 800f20c:	4640      	mov	r0, r8
 800f20e:	f7fe fb7b 	bl	800d908 <_free_r>
 800f212:	f7ff b8af 	b.w	800e374 <_vfprintf_r+0x45c>
 800f216:	3210      	adds	r2, #16
 800f218:	2b07      	cmp	r3, #7
 800f21a:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800f21e:	f8c4 9004 	str.w	r9, [r4, #4]
 800f222:	dc02      	bgt.n	800f22a <_vfprintf_r+0x1312>
 800f224:	3408      	adds	r4, #8
 800f226:	3e10      	subs	r6, #16
 800f228:	e7d5      	b.n	800f1d6 <_vfprintf_r+0x12be>
 800f22a:	aa1e      	add	r2, sp, #120	; 0x78
 800f22c:	4629      	mov	r1, r5
 800f22e:	4640      	mov	r0, r8
 800f230:	f000 f88a 	bl	800f348 <__sprint_r>
 800f234:	2800      	cmp	r0, #0
 800f236:	d1e4      	bne.n	800f202 <_vfprintf_r+0x12ea>
 800f238:	ac21      	add	r4, sp, #132	; 0x84
 800f23a:	e7f4      	b.n	800f226 <_vfprintf_r+0x130e>
 800f23c:	9902      	ldr	r1, [sp, #8]
 800f23e:	4640      	mov	r0, r8
 800f240:	f7fe fb62 	bl	800d908 <_free_r>
 800f244:	f7ff ba62 	b.w	800e70c <_vfprintf_r+0x7f4>
 800f248:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f24a:	b91b      	cbnz	r3, 800f254 <_vfprintf_r+0x133c>
 800f24c:	2300      	movs	r3, #0
 800f24e:	931f      	str	r3, [sp, #124]	; 0x7c
 800f250:	f7ff b890 	b.w	800e374 <_vfprintf_r+0x45c>
 800f254:	aa1e      	add	r2, sp, #120	; 0x78
 800f256:	4629      	mov	r1, r5
 800f258:	4640      	mov	r0, r8
 800f25a:	f000 f875 	bl	800f348 <__sprint_r>
 800f25e:	2800      	cmp	r0, #0
 800f260:	d0f4      	beq.n	800f24c <_vfprintf_r+0x1334>
 800f262:	f7ff b887 	b.w	800e374 <_vfprintf_r+0x45c>
 800f266:	ea56 0207 	orrs.w	r2, r6, r7
 800f26a:	f8cd a008 	str.w	sl, [sp, #8]
 800f26e:	f43f ab67 	beq.w	800e940 <_vfprintf_r+0xa28>
 800f272:	2b01      	cmp	r3, #1
 800f274:	f43f ac05 	beq.w	800ea82 <_vfprintf_r+0xb6a>
 800f278:	2b02      	cmp	r3, #2
 800f27a:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800f27e:	f43f ac4b 	beq.w	800eb18 <_vfprintf_r+0xc00>
 800f282:	f006 0307 	and.w	r3, r6, #7
 800f286:	08f6      	lsrs	r6, r6, #3
 800f288:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 800f28c:	08ff      	lsrs	r7, r7, #3
 800f28e:	3330      	adds	r3, #48	; 0x30
 800f290:	ea56 0107 	orrs.w	r1, r6, r7
 800f294:	465a      	mov	r2, fp
 800f296:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 800f29a:	d1f2      	bne.n	800f282 <_vfprintf_r+0x136a>
 800f29c:	9902      	ldr	r1, [sp, #8]
 800f29e:	07c8      	lsls	r0, r1, #31
 800f2a0:	d506      	bpl.n	800f2b0 <_vfprintf_r+0x1398>
 800f2a2:	2b30      	cmp	r3, #48	; 0x30
 800f2a4:	d004      	beq.n	800f2b0 <_vfprintf_r+0x1398>
 800f2a6:	2330      	movs	r3, #48	; 0x30
 800f2a8:	f80b 3c01 	strb.w	r3, [fp, #-1]
 800f2ac:	f1a2 0b02 	sub.w	fp, r2, #2
 800f2b0:	ab4a      	add	r3, sp, #296	; 0x128
 800f2b2:	464f      	mov	r7, r9
 800f2b4:	eba3 090b 	sub.w	r9, r3, fp
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	f8dd a008 	ldr.w	sl, [sp, #8]
 800f2be:	9302      	str	r3, [sp, #8]
 800f2c0:	f7ff b823 	b.w	800e30a <_vfprintf_r+0x3f2>
 800f2c4:	08011ffc 	.word	0x08011ffc

0800f2c8 <__sbprintf>:
 800f2c8:	b570      	push	{r4, r5, r6, lr}
 800f2ca:	460c      	mov	r4, r1
 800f2cc:	8989      	ldrh	r1, [r1, #12]
 800f2ce:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800f2d2:	f021 0102 	bic.w	r1, r1, #2
 800f2d6:	f8ad 1014 	strh.w	r1, [sp, #20]
 800f2da:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800f2dc:	911b      	str	r1, [sp, #108]	; 0x6c
 800f2de:	89e1      	ldrh	r1, [r4, #14]
 800f2e0:	f8ad 1016 	strh.w	r1, [sp, #22]
 800f2e4:	69e1      	ldr	r1, [r4, #28]
 800f2e6:	9109      	str	r1, [sp, #36]	; 0x24
 800f2e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f2ea:	910b      	str	r1, [sp, #44]	; 0x2c
 800f2ec:	a91c      	add	r1, sp, #112	; 0x70
 800f2ee:	9102      	str	r1, [sp, #8]
 800f2f0:	9106      	str	r1, [sp, #24]
 800f2f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f2f6:	4606      	mov	r6, r0
 800f2f8:	9104      	str	r1, [sp, #16]
 800f2fa:	9107      	str	r1, [sp, #28]
 800f2fc:	a818      	add	r0, sp, #96	; 0x60
 800f2fe:	2100      	movs	r1, #0
 800f300:	e9cd 3200 	strd	r3, r2, [sp]
 800f304:	9108      	str	r1, [sp, #32]
 800f306:	f7fe fa97 	bl	800d838 <__retarget_lock_init_recursive>
 800f30a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f30e:	a902      	add	r1, sp, #8
 800f310:	4630      	mov	r0, r6
 800f312:	f7fe fe01 	bl	800df18 <_vfprintf_r>
 800f316:	1e05      	subs	r5, r0, #0
 800f318:	db07      	blt.n	800f32a <__sbprintf+0x62>
 800f31a:	a902      	add	r1, sp, #8
 800f31c:	4630      	mov	r0, r6
 800f31e:	f000 fdfd 	bl	800ff1c <_fflush_r>
 800f322:	2800      	cmp	r0, #0
 800f324:	bf18      	it	ne
 800f326:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800f32a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800f32e:	9818      	ldr	r0, [sp, #96]	; 0x60
 800f330:	065b      	lsls	r3, r3, #25
 800f332:	bf42      	ittt	mi
 800f334:	89a3      	ldrhmi	r3, [r4, #12]
 800f336:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800f33a:	81a3      	strhmi	r3, [r4, #12]
 800f33c:	f7fe fa7d 	bl	800d83a <__retarget_lock_close_recursive>
 800f340:	4628      	mov	r0, r5
 800f342:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800f346:	bd70      	pop	{r4, r5, r6, pc}

0800f348 <__sprint_r>:
 800f348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f34c:	6893      	ldr	r3, [r2, #8]
 800f34e:	4680      	mov	r8, r0
 800f350:	460f      	mov	r7, r1
 800f352:	4614      	mov	r4, r2
 800f354:	b343      	cbz	r3, 800f3a8 <__sprint_r+0x60>
 800f356:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800f358:	049d      	lsls	r5, r3, #18
 800f35a:	d522      	bpl.n	800f3a2 <__sprint_r+0x5a>
 800f35c:	6815      	ldr	r5, [r2, #0]
 800f35e:	3508      	adds	r5, #8
 800f360:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800f364:	f04f 0900 	mov.w	r9, #0
 800f368:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800f36c:	45ca      	cmp	sl, r9
 800f36e:	dc0d      	bgt.n	800f38c <__sprint_r+0x44>
 800f370:	68a3      	ldr	r3, [r4, #8]
 800f372:	f026 0603 	bic.w	r6, r6, #3
 800f376:	1b98      	subs	r0, r3, r6
 800f378:	60a0      	str	r0, [r4, #8]
 800f37a:	3508      	adds	r5, #8
 800f37c:	2800      	cmp	r0, #0
 800f37e:	d1ef      	bne.n	800f360 <__sprint_r+0x18>
 800f380:	2300      	movs	r3, #0
 800f382:	60a3      	str	r3, [r4, #8]
 800f384:	2300      	movs	r3, #0
 800f386:	6063      	str	r3, [r4, #4]
 800f388:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f38c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800f390:	463a      	mov	r2, r7
 800f392:	4640      	mov	r0, r8
 800f394:	f001 f849 	bl	801042a <_fputwc_r>
 800f398:	1c43      	adds	r3, r0, #1
 800f39a:	d0f1      	beq.n	800f380 <__sprint_r+0x38>
 800f39c:	f109 0901 	add.w	r9, r9, #1
 800f3a0:	e7e4      	b.n	800f36c <__sprint_r+0x24>
 800f3a2:	f000 fde1 	bl	800ff68 <__sfvwrite_r>
 800f3a6:	e7eb      	b.n	800f380 <__sprint_r+0x38>
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	e7eb      	b.n	800f384 <__sprint_r+0x3c>

0800f3ac <_vfiprintf_r>:
 800f3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3b0:	ed2d 8b02 	vpush	{d8}
 800f3b4:	b0bb      	sub	sp, #236	; 0xec
 800f3b6:	460f      	mov	r7, r1
 800f3b8:	9201      	str	r2, [sp, #4]
 800f3ba:	461d      	mov	r5, r3
 800f3bc:	461c      	mov	r4, r3
 800f3be:	4681      	mov	r9, r0
 800f3c0:	b118      	cbz	r0, 800f3ca <_vfiprintf_r+0x1e>
 800f3c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f3c4:	b90b      	cbnz	r3, 800f3ca <_vfiprintf_r+0x1e>
 800f3c6:	f7fe f8d3 	bl	800d570 <__sinit>
 800f3ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f3cc:	07d8      	lsls	r0, r3, #31
 800f3ce:	d405      	bmi.n	800f3dc <_vfiprintf_r+0x30>
 800f3d0:	89bb      	ldrh	r3, [r7, #12]
 800f3d2:	0599      	lsls	r1, r3, #22
 800f3d4:	d402      	bmi.n	800f3dc <_vfiprintf_r+0x30>
 800f3d6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f3d8:	f7fe fa30 	bl	800d83c <__retarget_lock_acquire_recursive>
 800f3dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f3e0:	049a      	lsls	r2, r3, #18
 800f3e2:	d406      	bmi.n	800f3f2 <_vfiprintf_r+0x46>
 800f3e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f3e8:	81bb      	strh	r3, [r7, #12]
 800f3ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f3ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f3f0:	667b      	str	r3, [r7, #100]	; 0x64
 800f3f2:	89bb      	ldrh	r3, [r7, #12]
 800f3f4:	071e      	lsls	r6, r3, #28
 800f3f6:	d501      	bpl.n	800f3fc <_vfiprintf_r+0x50>
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	b9bb      	cbnz	r3, 800f42c <_vfiprintf_r+0x80>
 800f3fc:	4639      	mov	r1, r7
 800f3fe:	4648      	mov	r0, r9
 800f400:	f000 ff7a 	bl	80102f8 <__swsetup_r>
 800f404:	b190      	cbz	r0, 800f42c <_vfiprintf_r+0x80>
 800f406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f408:	07d8      	lsls	r0, r3, #31
 800f40a:	d508      	bpl.n	800f41e <_vfiprintf_r+0x72>
 800f40c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f410:	9302      	str	r3, [sp, #8]
 800f412:	9802      	ldr	r0, [sp, #8]
 800f414:	b03b      	add	sp, #236	; 0xec
 800f416:	ecbd 8b02 	vpop	{d8}
 800f41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f41e:	89bb      	ldrh	r3, [r7, #12]
 800f420:	0599      	lsls	r1, r3, #22
 800f422:	d4f3      	bmi.n	800f40c <_vfiprintf_r+0x60>
 800f424:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f426:	f7fe fa0a 	bl	800d83e <__retarget_lock_release_recursive>
 800f42a:	e7ef      	b.n	800f40c <_vfiprintf_r+0x60>
 800f42c:	89bb      	ldrh	r3, [r7, #12]
 800f42e:	f003 021a 	and.w	r2, r3, #26
 800f432:	2a0a      	cmp	r2, #10
 800f434:	d116      	bne.n	800f464 <_vfiprintf_r+0xb8>
 800f436:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f43a:	2a00      	cmp	r2, #0
 800f43c:	db12      	blt.n	800f464 <_vfiprintf_r+0xb8>
 800f43e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f440:	07d2      	lsls	r2, r2, #31
 800f442:	d404      	bmi.n	800f44e <_vfiprintf_r+0xa2>
 800f444:	059e      	lsls	r6, r3, #22
 800f446:	d402      	bmi.n	800f44e <_vfiprintf_r+0xa2>
 800f448:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f44a:	f7fe f9f8 	bl	800d83e <__retarget_lock_release_recursive>
 800f44e:	9a01      	ldr	r2, [sp, #4]
 800f450:	462b      	mov	r3, r5
 800f452:	4639      	mov	r1, r7
 800f454:	4648      	mov	r0, r9
 800f456:	b03b      	add	sp, #236	; 0xec
 800f458:	ecbd 8b02 	vpop	{d8}
 800f45c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f460:	f000 bc36 	b.w	800fcd0 <__sbprintf>
 800f464:	2300      	movs	r3, #0
 800f466:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800f46a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800f46e:	ae11      	add	r6, sp, #68	; 0x44
 800f470:	ee08 3a10 	vmov	s16, r3
 800f474:	960e      	str	r6, [sp, #56]	; 0x38
 800f476:	9307      	str	r3, [sp, #28]
 800f478:	9302      	str	r3, [sp, #8]
 800f47a:	9b01      	ldr	r3, [sp, #4]
 800f47c:	461d      	mov	r5, r3
 800f47e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f482:	b10a      	cbz	r2, 800f488 <_vfiprintf_r+0xdc>
 800f484:	2a25      	cmp	r2, #37	; 0x25
 800f486:	d1f9      	bne.n	800f47c <_vfiprintf_r+0xd0>
 800f488:	9b01      	ldr	r3, [sp, #4]
 800f48a:	ebb5 0803 	subs.w	r8, r5, r3
 800f48e:	d00d      	beq.n	800f4ac <_vfiprintf_r+0x100>
 800f490:	e9c6 3800 	strd	r3, r8, [r6]
 800f494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f496:	4443      	add	r3, r8
 800f498:	9310      	str	r3, [sp, #64]	; 0x40
 800f49a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f49c:	3301      	adds	r3, #1
 800f49e:	2b07      	cmp	r3, #7
 800f4a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f4a2:	dc76      	bgt.n	800f592 <_vfiprintf_r+0x1e6>
 800f4a4:	3608      	adds	r6, #8
 800f4a6:	9b02      	ldr	r3, [sp, #8]
 800f4a8:	4443      	add	r3, r8
 800f4aa:	9302      	str	r3, [sp, #8]
 800f4ac:	782b      	ldrb	r3, [r5, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	f000 83d0 	beq.w	800fc54 <_vfiprintf_r+0x8a8>
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f4ba:	3501      	adds	r5, #1
 800f4bc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800f4c0:	9200      	str	r2, [sp, #0]
 800f4c2:	9303      	str	r3, [sp, #12]
 800f4c4:	469a      	mov	sl, r3
 800f4c6:	462a      	mov	r2, r5
 800f4c8:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f4cc:	9201      	str	r2, [sp, #4]
 800f4ce:	f1a3 0220 	sub.w	r2, r3, #32
 800f4d2:	2a5a      	cmp	r2, #90	; 0x5a
 800f4d4:	f200 831c 	bhi.w	800fb10 <_vfiprintf_r+0x764>
 800f4d8:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f4dc:	031a007e 	.word	0x031a007e
 800f4e0:	0086031a 	.word	0x0086031a
 800f4e4:	031a031a 	.word	0x031a031a
 800f4e8:	0065031a 	.word	0x0065031a
 800f4ec:	031a031a 	.word	0x031a031a
 800f4f0:	00930089 	.word	0x00930089
 800f4f4:	0090031a 	.word	0x0090031a
 800f4f8:	031a0095 	.word	0x031a0095
 800f4fc:	00b300b0 	.word	0x00b300b0
 800f500:	00b300b3 	.word	0x00b300b3
 800f504:	00b300b3 	.word	0x00b300b3
 800f508:	00b300b3 	.word	0x00b300b3
 800f50c:	00b300b3 	.word	0x00b300b3
 800f510:	031a031a 	.word	0x031a031a
 800f514:	031a031a 	.word	0x031a031a
 800f518:	031a031a 	.word	0x031a031a
 800f51c:	031a031a 	.word	0x031a031a
 800f520:	00dd031a 	.word	0x00dd031a
 800f524:	031a00eb 	.word	0x031a00eb
 800f528:	031a031a 	.word	0x031a031a
 800f52c:	031a031a 	.word	0x031a031a
 800f530:	031a031a 	.word	0x031a031a
 800f534:	031a031a 	.word	0x031a031a
 800f538:	013b031a 	.word	0x013b031a
 800f53c:	031a031a 	.word	0x031a031a
 800f540:	0180031a 	.word	0x0180031a
 800f544:	025e031a 	.word	0x025e031a
 800f548:	031a031a 	.word	0x031a031a
 800f54c:	031a027e 	.word	0x031a027e
 800f550:	031a031a 	.word	0x031a031a
 800f554:	031a031a 	.word	0x031a031a
 800f558:	031a031a 	.word	0x031a031a
 800f55c:	031a031a 	.word	0x031a031a
 800f560:	00dd031a 	.word	0x00dd031a
 800f564:	031a00ed 	.word	0x031a00ed
 800f568:	031a031a 	.word	0x031a031a
 800f56c:	00ed00c3 	.word	0x00ed00c3
 800f570:	031a00d7 	.word	0x031a00d7
 800f574:	031a00d0 	.word	0x031a00d0
 800f578:	013d0119 	.word	0x013d0119
 800f57c:	00d70172 	.word	0x00d70172
 800f580:	0180031a 	.word	0x0180031a
 800f584:	0260007c 	.word	0x0260007c
 800f588:	031a031a 	.word	0x031a031a
 800f58c:	031a029a 	.word	0x031a029a
 800f590:	007c      	.short	0x007c
 800f592:	aa0e      	add	r2, sp, #56	; 0x38
 800f594:	4639      	mov	r1, r7
 800f596:	4648      	mov	r0, r9
 800f598:	f7ff fed6 	bl	800f348 <__sprint_r>
 800f59c:	2800      	cmp	r0, #0
 800f59e:	f040 8338 	bne.w	800fc12 <_vfiprintf_r+0x866>
 800f5a2:	ae11      	add	r6, sp, #68	; 0x44
 800f5a4:	e77f      	b.n	800f4a6 <_vfiprintf_r+0xfa>
 800f5a6:	4648      	mov	r0, r9
 800f5a8:	f000 ff9c 	bl	80104e4 <_localeconv_r>
 800f5ac:	6843      	ldr	r3, [r0, #4]
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	ee08 3a10 	vmov	s16, r3
 800f5b4:	f7f0 fe9e 	bl	80002f4 <strlen>
 800f5b8:	9007      	str	r0, [sp, #28]
 800f5ba:	4648      	mov	r0, r9
 800f5bc:	f000 ff92 	bl	80104e4 <_localeconv_r>
 800f5c0:	6883      	ldr	r3, [r0, #8]
 800f5c2:	9306      	str	r3, [sp, #24]
 800f5c4:	9b07      	ldr	r3, [sp, #28]
 800f5c6:	b12b      	cbz	r3, 800f5d4 <_vfiprintf_r+0x228>
 800f5c8:	9b06      	ldr	r3, [sp, #24]
 800f5ca:	b11b      	cbz	r3, 800f5d4 <_vfiprintf_r+0x228>
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	b10b      	cbz	r3, 800f5d4 <_vfiprintf_r+0x228>
 800f5d0:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800f5d4:	9d01      	ldr	r5, [sp, #4]
 800f5d6:	e776      	b.n	800f4c6 <_vfiprintf_r+0x11a>
 800f5d8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d1f9      	bne.n	800f5d4 <_vfiprintf_r+0x228>
 800f5e0:	2320      	movs	r3, #32
 800f5e2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800f5e6:	e7f5      	b.n	800f5d4 <_vfiprintf_r+0x228>
 800f5e8:	f04a 0a01 	orr.w	sl, sl, #1
 800f5ec:	e7f2      	b.n	800f5d4 <_vfiprintf_r+0x228>
 800f5ee:	f854 3b04 	ldr.w	r3, [r4], #4
 800f5f2:	9303      	str	r3, [sp, #12]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	daed      	bge.n	800f5d4 <_vfiprintf_r+0x228>
 800f5f8:	425b      	negs	r3, r3
 800f5fa:	9303      	str	r3, [sp, #12]
 800f5fc:	f04a 0a04 	orr.w	sl, sl, #4
 800f600:	e7e8      	b.n	800f5d4 <_vfiprintf_r+0x228>
 800f602:	232b      	movs	r3, #43	; 0x2b
 800f604:	e7ed      	b.n	800f5e2 <_vfiprintf_r+0x236>
 800f606:	9a01      	ldr	r2, [sp, #4]
 800f608:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f60c:	2b2a      	cmp	r3, #42	; 0x2a
 800f60e:	d112      	bne.n	800f636 <_vfiprintf_r+0x28a>
 800f610:	f854 3b04 	ldr.w	r3, [r4], #4
 800f614:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f618:	e9cd 3200 	strd	r3, r2, [sp]
 800f61c:	e7da      	b.n	800f5d4 <_vfiprintf_r+0x228>
 800f61e:	9b00      	ldr	r3, [sp, #0]
 800f620:	200a      	movs	r0, #10
 800f622:	fb00 1303 	mla	r3, r0, r3, r1
 800f626:	9300      	str	r3, [sp, #0]
 800f628:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f62c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f630:	2909      	cmp	r1, #9
 800f632:	d9f4      	bls.n	800f61e <_vfiprintf_r+0x272>
 800f634:	e74a      	b.n	800f4cc <_vfiprintf_r+0x120>
 800f636:	2100      	movs	r1, #0
 800f638:	9100      	str	r1, [sp, #0]
 800f63a:	e7f7      	b.n	800f62c <_vfiprintf_r+0x280>
 800f63c:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800f640:	e7c8      	b.n	800f5d4 <_vfiprintf_r+0x228>
 800f642:	2100      	movs	r1, #0
 800f644:	9a01      	ldr	r2, [sp, #4]
 800f646:	9103      	str	r1, [sp, #12]
 800f648:	9903      	ldr	r1, [sp, #12]
 800f64a:	3b30      	subs	r3, #48	; 0x30
 800f64c:	200a      	movs	r0, #10
 800f64e:	fb00 3301 	mla	r3, r0, r1, r3
 800f652:	9303      	str	r3, [sp, #12]
 800f654:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f658:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f65c:	2909      	cmp	r1, #9
 800f65e:	d9f3      	bls.n	800f648 <_vfiprintf_r+0x29c>
 800f660:	e734      	b.n	800f4cc <_vfiprintf_r+0x120>
 800f662:	9b01      	ldr	r3, [sp, #4]
 800f664:	781b      	ldrb	r3, [r3, #0]
 800f666:	2b68      	cmp	r3, #104	; 0x68
 800f668:	bf01      	itttt	eq
 800f66a:	9b01      	ldreq	r3, [sp, #4]
 800f66c:	3301      	addeq	r3, #1
 800f66e:	9301      	streq	r3, [sp, #4]
 800f670:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800f674:	bf18      	it	ne
 800f676:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800f67a:	e7ab      	b.n	800f5d4 <_vfiprintf_r+0x228>
 800f67c:	9b01      	ldr	r3, [sp, #4]
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	2b6c      	cmp	r3, #108	; 0x6c
 800f682:	d105      	bne.n	800f690 <_vfiprintf_r+0x2e4>
 800f684:	9b01      	ldr	r3, [sp, #4]
 800f686:	3301      	adds	r3, #1
 800f688:	9301      	str	r3, [sp, #4]
 800f68a:	f04a 0a20 	orr.w	sl, sl, #32
 800f68e:	e7a1      	b.n	800f5d4 <_vfiprintf_r+0x228>
 800f690:	f04a 0a10 	orr.w	sl, sl, #16
 800f694:	e79e      	b.n	800f5d4 <_vfiprintf_r+0x228>
 800f696:	46a0      	mov	r8, r4
 800f698:	f858 3b04 	ldr.w	r3, [r8], #4
 800f69c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	9200      	str	r2, [sp, #0]
 800f6aa:	461d      	mov	r5, r3
 800f6ac:	f10d 0b84 	add.w	fp, sp, #132	; 0x84
 800f6b0:	e0a9      	b.n	800f806 <_vfiprintf_r+0x45a>
 800f6b2:	f04a 0a10 	orr.w	sl, sl, #16
 800f6b6:	f01a 0f20 	tst.w	sl, #32
 800f6ba:	d011      	beq.n	800f6e0 <_vfiprintf_r+0x334>
 800f6bc:	3407      	adds	r4, #7
 800f6be:	f024 0307 	bic.w	r3, r4, #7
 800f6c2:	4698      	mov	r8, r3
 800f6c4:	685d      	ldr	r5, [r3, #4]
 800f6c6:	f858 4b08 	ldr.w	r4, [r8], #8
 800f6ca:	2d00      	cmp	r5, #0
 800f6cc:	da06      	bge.n	800f6dc <_vfiprintf_r+0x330>
 800f6ce:	4264      	negs	r4, r4
 800f6d0:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800f6d4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800f6d8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800f6dc:	2301      	movs	r3, #1
 800f6de:	e04a      	b.n	800f776 <_vfiprintf_r+0x3ca>
 800f6e0:	46a0      	mov	r8, r4
 800f6e2:	f01a 0f10 	tst.w	sl, #16
 800f6e6:	f858 5b04 	ldr.w	r5, [r8], #4
 800f6ea:	d002      	beq.n	800f6f2 <_vfiprintf_r+0x346>
 800f6ec:	462c      	mov	r4, r5
 800f6ee:	17ed      	asrs	r5, r5, #31
 800f6f0:	e7eb      	b.n	800f6ca <_vfiprintf_r+0x31e>
 800f6f2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800f6f6:	d003      	beq.n	800f700 <_vfiprintf_r+0x354>
 800f6f8:	b22c      	sxth	r4, r5
 800f6fa:	f345 35c0 	sbfx	r5, r5, #15, #1
 800f6fe:	e7e4      	b.n	800f6ca <_vfiprintf_r+0x31e>
 800f700:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800f704:	d0f2      	beq.n	800f6ec <_vfiprintf_r+0x340>
 800f706:	b26c      	sxtb	r4, r5
 800f708:	f345 15c0 	sbfx	r5, r5, #7, #1
 800f70c:	e7dd      	b.n	800f6ca <_vfiprintf_r+0x31e>
 800f70e:	f01a 0f20 	tst.w	sl, #32
 800f712:	f104 0804 	add.w	r8, r4, #4
 800f716:	d007      	beq.n	800f728 <_vfiprintf_r+0x37c>
 800f718:	9a02      	ldr	r2, [sp, #8]
 800f71a:	6823      	ldr	r3, [r4, #0]
 800f71c:	9902      	ldr	r1, [sp, #8]
 800f71e:	17d2      	asrs	r2, r2, #31
 800f720:	e9c3 1200 	strd	r1, r2, [r3]
 800f724:	4644      	mov	r4, r8
 800f726:	e6a8      	b.n	800f47a <_vfiprintf_r+0xce>
 800f728:	f01a 0f10 	tst.w	sl, #16
 800f72c:	d003      	beq.n	800f736 <_vfiprintf_r+0x38a>
 800f72e:	6823      	ldr	r3, [r4, #0]
 800f730:	9a02      	ldr	r2, [sp, #8]
 800f732:	601a      	str	r2, [r3, #0]
 800f734:	e7f6      	b.n	800f724 <_vfiprintf_r+0x378>
 800f736:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800f73a:	d003      	beq.n	800f744 <_vfiprintf_r+0x398>
 800f73c:	6823      	ldr	r3, [r4, #0]
 800f73e:	9a02      	ldr	r2, [sp, #8]
 800f740:	801a      	strh	r2, [r3, #0]
 800f742:	e7ef      	b.n	800f724 <_vfiprintf_r+0x378>
 800f744:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800f748:	d0f1      	beq.n	800f72e <_vfiprintf_r+0x382>
 800f74a:	6823      	ldr	r3, [r4, #0]
 800f74c:	9a02      	ldr	r2, [sp, #8]
 800f74e:	701a      	strb	r2, [r3, #0]
 800f750:	e7e8      	b.n	800f724 <_vfiprintf_r+0x378>
 800f752:	f04a 0a10 	orr.w	sl, sl, #16
 800f756:	f01a 0320 	ands.w	r3, sl, #32
 800f75a:	d01f      	beq.n	800f79c <_vfiprintf_r+0x3f0>
 800f75c:	3407      	adds	r4, #7
 800f75e:	f024 0307 	bic.w	r3, r4, #7
 800f762:	4698      	mov	r8, r3
 800f764:	685d      	ldr	r5, [r3, #4]
 800f766:	f858 4b08 	ldr.w	r4, [r8], #8
 800f76a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800f76e:	2300      	movs	r3, #0
 800f770:	2200      	movs	r2, #0
 800f772:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800f776:	9a00      	ldr	r2, [sp, #0]
 800f778:	3201      	adds	r2, #1
 800f77a:	f000 8278 	beq.w	800fc6e <_vfiprintf_r+0x8c2>
 800f77e:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800f782:	9204      	str	r2, [sp, #16]
 800f784:	ea54 0205 	orrs.w	r2, r4, r5
 800f788:	f040 8277 	bne.w	800fc7a <_vfiprintf_r+0x8ce>
 800f78c:	9a00      	ldr	r2, [sp, #0]
 800f78e:	2a00      	cmp	r2, #0
 800f790:	f000 81b3 	beq.w	800fafa <_vfiprintf_r+0x74e>
 800f794:	2b01      	cmp	r3, #1
 800f796:	f040 8273 	bne.w	800fc80 <_vfiprintf_r+0x8d4>
 800f79a:	e151      	b.n	800fa40 <_vfiprintf_r+0x694>
 800f79c:	46a0      	mov	r8, r4
 800f79e:	f01a 0510 	ands.w	r5, sl, #16
 800f7a2:	f858 4b04 	ldr.w	r4, [r8], #4
 800f7a6:	d001      	beq.n	800f7ac <_vfiprintf_r+0x400>
 800f7a8:	461d      	mov	r5, r3
 800f7aa:	e7de      	b.n	800f76a <_vfiprintf_r+0x3be>
 800f7ac:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800f7b0:	d001      	beq.n	800f7b6 <_vfiprintf_r+0x40a>
 800f7b2:	b2a4      	uxth	r4, r4
 800f7b4:	e7d9      	b.n	800f76a <_vfiprintf_r+0x3be>
 800f7b6:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800f7ba:	d0d6      	beq.n	800f76a <_vfiprintf_r+0x3be>
 800f7bc:	b2e4      	uxtb	r4, r4
 800f7be:	e7f3      	b.n	800f7a8 <_vfiprintf_r+0x3fc>
 800f7c0:	46a0      	mov	r8, r4
 800f7c2:	f647 0330 	movw	r3, #30768	; 0x7830
 800f7c6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800f7ca:	f858 4b04 	ldr.w	r4, [r8], #4
 800f7ce:	4b9f      	ldr	r3, [pc, #636]	; (800fa4c <_vfiprintf_r+0x6a0>)
 800f7d0:	9305      	str	r3, [sp, #20]
 800f7d2:	2500      	movs	r5, #0
 800f7d4:	f04a 0a02 	orr.w	sl, sl, #2
 800f7d8:	2302      	movs	r3, #2
 800f7da:	e7c9      	b.n	800f770 <_vfiprintf_r+0x3c4>
 800f7dc:	9b00      	ldr	r3, [sp, #0]
 800f7de:	46a0      	mov	r8, r4
 800f7e0:	2500      	movs	r5, #0
 800f7e2:	1c5c      	adds	r4, r3, #1
 800f7e4:	f858 bb04 	ldr.w	fp, [r8], #4
 800f7e8:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 800f7ec:	f000 80cf 	beq.w	800f98e <_vfiprintf_r+0x5e2>
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	4629      	mov	r1, r5
 800f7f4:	4658      	mov	r0, fp
 800f7f6:	f7f0 fd8b 	bl	8000310 <memchr>
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	f000 8192 	beq.w	800fb24 <_vfiprintf_r+0x778>
 800f800:	eba0 030b 	sub.w	r3, r0, fp
 800f804:	9300      	str	r3, [sp, #0]
 800f806:	9b00      	ldr	r3, [sp, #0]
 800f808:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800f80c:	42ab      	cmp	r3, r5
 800f80e:	bfb8      	it	lt
 800f810:	462b      	movlt	r3, r5
 800f812:	9304      	str	r3, [sp, #16]
 800f814:	b10a      	cbz	r2, 800f81a <_vfiprintf_r+0x46e>
 800f816:	3301      	adds	r3, #1
 800f818:	9304      	str	r3, [sp, #16]
 800f81a:	f01a 0302 	ands.w	r3, sl, #2
 800f81e:	9308      	str	r3, [sp, #32]
 800f820:	bf1e      	ittt	ne
 800f822:	9b04      	ldrne	r3, [sp, #16]
 800f824:	3302      	addne	r3, #2
 800f826:	9304      	strne	r3, [sp, #16]
 800f828:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800f82c:	9309      	str	r3, [sp, #36]	; 0x24
 800f82e:	d11f      	bne.n	800f870 <_vfiprintf_r+0x4c4>
 800f830:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f834:	1a9c      	subs	r4, r3, r2
 800f836:	2c00      	cmp	r4, #0
 800f838:	dd1a      	ble.n	800f870 <_vfiprintf_r+0x4c4>
 800f83a:	4b85      	ldr	r3, [pc, #532]	; (800fa50 <_vfiprintf_r+0x6a4>)
 800f83c:	6033      	str	r3, [r6, #0]
 800f83e:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 800f842:	2c10      	cmp	r4, #16
 800f844:	f102 0201 	add.w	r2, r2, #1
 800f848:	f106 0008 	add.w	r0, r6, #8
 800f84c:	f300 816c 	bgt.w	800fb28 <_vfiprintf_r+0x77c>
 800f850:	6074      	str	r4, [r6, #4]
 800f852:	2a07      	cmp	r2, #7
 800f854:	4464      	add	r4, ip
 800f856:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800f85a:	f340 8178 	ble.w	800fb4e <_vfiprintf_r+0x7a2>
 800f85e:	aa0e      	add	r2, sp, #56	; 0x38
 800f860:	4639      	mov	r1, r7
 800f862:	4648      	mov	r0, r9
 800f864:	f7ff fd70 	bl	800f348 <__sprint_r>
 800f868:	2800      	cmp	r0, #0
 800f86a:	f040 81d2 	bne.w	800fc12 <_vfiprintf_r+0x866>
 800f86e:	ae11      	add	r6, sp, #68	; 0x44
 800f870:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800f874:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800f878:	b160      	cbz	r0, 800f894 <_vfiprintf_r+0x4e8>
 800f87a:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 800f87e:	3201      	adds	r2, #1
 800f880:	6030      	str	r0, [r6, #0]
 800f882:	2001      	movs	r0, #1
 800f884:	4401      	add	r1, r0
 800f886:	2a07      	cmp	r2, #7
 800f888:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800f88c:	6070      	str	r0, [r6, #4]
 800f88e:	f300 8160 	bgt.w	800fb52 <_vfiprintf_r+0x7a6>
 800f892:	3608      	adds	r6, #8
 800f894:	9b08      	ldr	r3, [sp, #32]
 800f896:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800f89a:	b15b      	cbz	r3, 800f8b4 <_vfiprintf_r+0x508>
 800f89c:	a80d      	add	r0, sp, #52	; 0x34
 800f89e:	3201      	adds	r2, #1
 800f8a0:	6030      	str	r0, [r6, #0]
 800f8a2:	2002      	movs	r0, #2
 800f8a4:	4401      	add	r1, r0
 800f8a6:	2a07      	cmp	r2, #7
 800f8a8:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800f8ac:	6070      	str	r0, [r6, #4]
 800f8ae:	f300 8159 	bgt.w	800fb64 <_vfiprintf_r+0x7b8>
 800f8b2:	3608      	adds	r6, #8
 800f8b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8b6:	2b80      	cmp	r3, #128	; 0x80
 800f8b8:	d11f      	bne.n	800f8fa <_vfiprintf_r+0x54e>
 800f8ba:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f8be:	1a9c      	subs	r4, r3, r2
 800f8c0:	2c00      	cmp	r4, #0
 800f8c2:	dd1a      	ble.n	800f8fa <_vfiprintf_r+0x54e>
 800f8c4:	4b63      	ldr	r3, [pc, #396]	; (800fa54 <_vfiprintf_r+0x6a8>)
 800f8c6:	6033      	str	r3, [r6, #0]
 800f8c8:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 800f8cc:	2c10      	cmp	r4, #16
 800f8ce:	f102 0201 	add.w	r2, r2, #1
 800f8d2:	f106 0008 	add.w	r0, r6, #8
 800f8d6:	f300 814e 	bgt.w	800fb76 <_vfiprintf_r+0x7ca>
 800f8da:	6074      	str	r4, [r6, #4]
 800f8dc:	2a07      	cmp	r2, #7
 800f8de:	4464      	add	r4, ip
 800f8e0:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800f8e4:	f340 815a 	ble.w	800fb9c <_vfiprintf_r+0x7f0>
 800f8e8:	aa0e      	add	r2, sp, #56	; 0x38
 800f8ea:	4639      	mov	r1, r7
 800f8ec:	4648      	mov	r0, r9
 800f8ee:	f7ff fd2b 	bl	800f348 <__sprint_r>
 800f8f2:	2800      	cmp	r0, #0
 800f8f4:	f040 818d 	bne.w	800fc12 <_vfiprintf_r+0x866>
 800f8f8:	ae11      	add	r6, sp, #68	; 0x44
 800f8fa:	9b00      	ldr	r3, [sp, #0]
 800f8fc:	1aec      	subs	r4, r5, r3
 800f8fe:	2c00      	cmp	r4, #0
 800f900:	dd1b      	ble.n	800f93a <_vfiprintf_r+0x58e>
 800f902:	4d54      	ldr	r5, [pc, #336]	; (800fa54 <_vfiprintf_r+0x6a8>)
 800f904:	2310      	movs	r3, #16
 800f906:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800f90a:	2c10      	cmp	r4, #16
 800f90c:	f102 0201 	add.w	r2, r2, #1
 800f910:	f106 0008 	add.w	r0, r6, #8
 800f914:	6035      	str	r5, [r6, #0]
 800f916:	f300 8143 	bgt.w	800fba0 <_vfiprintf_r+0x7f4>
 800f91a:	6074      	str	r4, [r6, #4]
 800f91c:	2a07      	cmp	r2, #7
 800f91e:	440c      	add	r4, r1
 800f920:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800f924:	f340 814d 	ble.w	800fbc2 <_vfiprintf_r+0x816>
 800f928:	aa0e      	add	r2, sp, #56	; 0x38
 800f92a:	4639      	mov	r1, r7
 800f92c:	4648      	mov	r0, r9
 800f92e:	f7ff fd0b 	bl	800f348 <__sprint_r>
 800f932:	2800      	cmp	r0, #0
 800f934:	f040 816d 	bne.w	800fc12 <_vfiprintf_r+0x866>
 800f938:	ae11      	add	r6, sp, #68	; 0x44
 800f93a:	9b00      	ldr	r3, [sp, #0]
 800f93c:	9a00      	ldr	r2, [sp, #0]
 800f93e:	6073      	str	r3, [r6, #4]
 800f940:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f942:	f8c6 b000 	str.w	fp, [r6]
 800f946:	4413      	add	r3, r2
 800f948:	9310      	str	r3, [sp, #64]	; 0x40
 800f94a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f94c:	3301      	adds	r3, #1
 800f94e:	2b07      	cmp	r3, #7
 800f950:	930f      	str	r3, [sp, #60]	; 0x3c
 800f952:	f300 8138 	bgt.w	800fbc6 <_vfiprintf_r+0x81a>
 800f956:	f106 0308 	add.w	r3, r6, #8
 800f95a:	f01a 0f04 	tst.w	sl, #4
 800f95e:	f040 813a 	bne.w	800fbd6 <_vfiprintf_r+0x82a>
 800f962:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f966:	9904      	ldr	r1, [sp, #16]
 800f968:	428a      	cmp	r2, r1
 800f96a:	bfac      	ite	ge
 800f96c:	189b      	addge	r3, r3, r2
 800f96e:	185b      	addlt	r3, r3, r1
 800f970:	9302      	str	r3, [sp, #8]
 800f972:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f974:	b13b      	cbz	r3, 800f986 <_vfiprintf_r+0x5da>
 800f976:	aa0e      	add	r2, sp, #56	; 0x38
 800f978:	4639      	mov	r1, r7
 800f97a:	4648      	mov	r0, r9
 800f97c:	f7ff fce4 	bl	800f348 <__sprint_r>
 800f980:	2800      	cmp	r0, #0
 800f982:	f040 8146 	bne.w	800fc12 <_vfiprintf_r+0x866>
 800f986:	2300      	movs	r3, #0
 800f988:	930f      	str	r3, [sp, #60]	; 0x3c
 800f98a:	ae11      	add	r6, sp, #68	; 0x44
 800f98c:	e6ca      	b.n	800f724 <_vfiprintf_r+0x378>
 800f98e:	4658      	mov	r0, fp
 800f990:	f7f0 fcb0 	bl	80002f4 <strlen>
 800f994:	9000      	str	r0, [sp, #0]
 800f996:	e736      	b.n	800f806 <_vfiprintf_r+0x45a>
 800f998:	f04a 0a10 	orr.w	sl, sl, #16
 800f99c:	f01a 0320 	ands.w	r3, sl, #32
 800f9a0:	d008      	beq.n	800f9b4 <_vfiprintf_r+0x608>
 800f9a2:	3407      	adds	r4, #7
 800f9a4:	f024 0307 	bic.w	r3, r4, #7
 800f9a8:	4698      	mov	r8, r3
 800f9aa:	685d      	ldr	r5, [r3, #4]
 800f9ac:	f858 4b08 	ldr.w	r4, [r8], #8
 800f9b0:	2301      	movs	r3, #1
 800f9b2:	e6dd      	b.n	800f770 <_vfiprintf_r+0x3c4>
 800f9b4:	46a0      	mov	r8, r4
 800f9b6:	f01a 0510 	ands.w	r5, sl, #16
 800f9ba:	f858 4b04 	ldr.w	r4, [r8], #4
 800f9be:	d001      	beq.n	800f9c4 <_vfiprintf_r+0x618>
 800f9c0:	461d      	mov	r5, r3
 800f9c2:	e7f5      	b.n	800f9b0 <_vfiprintf_r+0x604>
 800f9c4:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800f9c8:	d001      	beq.n	800f9ce <_vfiprintf_r+0x622>
 800f9ca:	b2a4      	uxth	r4, r4
 800f9cc:	e7f0      	b.n	800f9b0 <_vfiprintf_r+0x604>
 800f9ce:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800f9d2:	d0ed      	beq.n	800f9b0 <_vfiprintf_r+0x604>
 800f9d4:	b2e4      	uxtb	r4, r4
 800f9d6:	e7f3      	b.n	800f9c0 <_vfiprintf_r+0x614>
 800f9d8:	4a1f      	ldr	r2, [pc, #124]	; (800fa58 <_vfiprintf_r+0x6ac>)
 800f9da:	9205      	str	r2, [sp, #20]
 800f9dc:	f01a 0220 	ands.w	r2, sl, #32
 800f9e0:	d018      	beq.n	800fa14 <_vfiprintf_r+0x668>
 800f9e2:	3407      	adds	r4, #7
 800f9e4:	f024 0207 	bic.w	r2, r4, #7
 800f9e8:	4690      	mov	r8, r2
 800f9ea:	6855      	ldr	r5, [r2, #4]
 800f9ec:	f858 4b08 	ldr.w	r4, [r8], #8
 800f9f0:	f01a 0f01 	tst.w	sl, #1
 800f9f4:	d009      	beq.n	800fa0a <_vfiprintf_r+0x65e>
 800f9f6:	ea54 0205 	orrs.w	r2, r4, r5
 800f9fa:	bf1f      	itttt	ne
 800f9fc:	2230      	movne	r2, #48	; 0x30
 800f9fe:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 800fa02:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 800fa06:	f04a 0a02 	orrne.w	sl, sl, #2
 800fa0a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800fa0e:	e6e3      	b.n	800f7d8 <_vfiprintf_r+0x42c>
 800fa10:	4a0e      	ldr	r2, [pc, #56]	; (800fa4c <_vfiprintf_r+0x6a0>)
 800fa12:	e7e2      	b.n	800f9da <_vfiprintf_r+0x62e>
 800fa14:	46a0      	mov	r8, r4
 800fa16:	f01a 0510 	ands.w	r5, sl, #16
 800fa1a:	f858 4b04 	ldr.w	r4, [r8], #4
 800fa1e:	d001      	beq.n	800fa24 <_vfiprintf_r+0x678>
 800fa20:	4615      	mov	r5, r2
 800fa22:	e7e5      	b.n	800f9f0 <_vfiprintf_r+0x644>
 800fa24:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800fa28:	d001      	beq.n	800fa2e <_vfiprintf_r+0x682>
 800fa2a:	b2a4      	uxth	r4, r4
 800fa2c:	e7e0      	b.n	800f9f0 <_vfiprintf_r+0x644>
 800fa2e:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800fa32:	d0dd      	beq.n	800f9f0 <_vfiprintf_r+0x644>
 800fa34:	b2e4      	uxtb	r4, r4
 800fa36:	e7f3      	b.n	800fa20 <_vfiprintf_r+0x674>
 800fa38:	2c0a      	cmp	r4, #10
 800fa3a:	f175 0300 	sbcs.w	r3, r5, #0
 800fa3e:	d20d      	bcs.n	800fa5c <_vfiprintf_r+0x6b0>
 800fa40:	3430      	adds	r4, #48	; 0x30
 800fa42:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 800fa46:	f10d 0be7 	add.w	fp, sp, #231	; 0xe7
 800fa4a:	e135      	b.n	800fcb8 <_vfiprintf_r+0x90c>
 800fa4c:	08011fd8 	.word	0x08011fd8
 800fa50:	0801201c 	.word	0x0801201c
 800fa54:	0801202c 	.word	0x0801202c
 800fa58:	08011fe9 	.word	0x08011fe9
 800fa5c:	ab3a      	add	r3, sp, #232	; 0xe8
 800fa5e:	9308      	str	r3, [sp, #32]
 800fa60:	9b04      	ldr	r3, [sp, #16]
 800fa62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fa66:	f04f 0a00 	mov.w	sl, #0
 800fa6a:	9309      	str	r3, [sp, #36]	; 0x24
 800fa6c:	220a      	movs	r2, #10
 800fa6e:	2300      	movs	r3, #0
 800fa70:	4620      	mov	r0, r4
 800fa72:	4629      	mov	r1, r5
 800fa74:	f7f0 fc9c 	bl	80003b0 <__aeabi_uldivmod>
 800fa78:	9b08      	ldr	r3, [sp, #32]
 800fa7a:	3230      	adds	r2, #48	; 0x30
 800fa7c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800fa80:	f803 2c01 	strb.w	r2, [r3, #-1]
 800fa84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa86:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800fa8a:	f10a 0a01 	add.w	sl, sl, #1
 800fa8e:	b1d3      	cbz	r3, 800fac6 <_vfiprintf_r+0x71a>
 800fa90:	9b06      	ldr	r3, [sp, #24]
 800fa92:	781a      	ldrb	r2, [r3, #0]
 800fa94:	4552      	cmp	r2, sl
 800fa96:	d116      	bne.n	800fac6 <_vfiprintf_r+0x71a>
 800fa98:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800fa9c:	d013      	beq.n	800fac6 <_vfiprintf_r+0x71a>
 800fa9e:	2c0a      	cmp	r4, #10
 800faa0:	f175 0200 	sbcs.w	r2, r5, #0
 800faa4:	d30f      	bcc.n	800fac6 <_vfiprintf_r+0x71a>
 800faa6:	9b07      	ldr	r3, [sp, #28]
 800faa8:	ebab 0b03 	sub.w	fp, fp, r3
 800faac:	461a      	mov	r2, r3
 800faae:	ee18 1a10 	vmov	r1, s16
 800fab2:	4658      	mov	r0, fp
 800fab4:	f000 fcfd 	bl	80104b2 <strncpy>
 800fab8:	9b06      	ldr	r3, [sp, #24]
 800faba:	785a      	ldrb	r2, [r3, #1]
 800fabc:	b16a      	cbz	r2, 800fada <_vfiprintf_r+0x72e>
 800fabe:	3301      	adds	r3, #1
 800fac0:	9306      	str	r3, [sp, #24]
 800fac2:	f04f 0a00 	mov.w	sl, #0
 800fac6:	2c0a      	cmp	r4, #10
 800fac8:	f175 0500 	sbcs.w	r5, r5, #0
 800facc:	f0c0 80f4 	bcc.w	800fcb8 <_vfiprintf_r+0x90c>
 800fad0:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 800fad4:	f8cd b020 	str.w	fp, [sp, #32]
 800fad8:	e7c8      	b.n	800fa6c <_vfiprintf_r+0x6c0>
 800fada:	4692      	mov	sl, r2
 800fadc:	e7f3      	b.n	800fac6 <_vfiprintf_r+0x71a>
 800fade:	f004 020f 	and.w	r2, r4, #15
 800fae2:	9b05      	ldr	r3, [sp, #20]
 800fae4:	0924      	lsrs	r4, r4, #4
 800fae6:	5c9a      	ldrb	r2, [r3, r2]
 800fae8:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800faec:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800faf0:	092d      	lsrs	r5, r5, #4
 800faf2:	ea54 0205 	orrs.w	r2, r4, r5
 800faf6:	d1f2      	bne.n	800fade <_vfiprintf_r+0x732>
 800faf8:	e0de      	b.n	800fcb8 <_vfiprintf_r+0x90c>
 800fafa:	b933      	cbnz	r3, 800fb0a <_vfiprintf_r+0x75e>
 800fafc:	f01a 0f01 	tst.w	sl, #1
 800fb00:	d003      	beq.n	800fb0a <_vfiprintf_r+0x75e>
 800fb02:	2330      	movs	r3, #48	; 0x30
 800fb04:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 800fb08:	e79d      	b.n	800fa46 <_vfiprintf_r+0x69a>
 800fb0a:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 800fb0e:	e0d3      	b.n	800fcb8 <_vfiprintf_r+0x90c>
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	f000 809f 	beq.w	800fc54 <_vfiprintf_r+0x8a8>
 800fb16:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800fb20:	46a0      	mov	r8, r4
 800fb22:	e5c0      	b.n	800f6a6 <_vfiprintf_r+0x2fa>
 800fb24:	4605      	mov	r5, r0
 800fb26:	e66e      	b.n	800f806 <_vfiprintf_r+0x45a>
 800fb28:	2110      	movs	r1, #16
 800fb2a:	6071      	str	r1, [r6, #4]
 800fb2c:	2a07      	cmp	r2, #7
 800fb2e:	4461      	add	r1, ip
 800fb30:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800fb34:	dd08      	ble.n	800fb48 <_vfiprintf_r+0x79c>
 800fb36:	aa0e      	add	r2, sp, #56	; 0x38
 800fb38:	4639      	mov	r1, r7
 800fb3a:	4648      	mov	r0, r9
 800fb3c:	f7ff fc04 	bl	800f348 <__sprint_r>
 800fb40:	2800      	cmp	r0, #0
 800fb42:	d166      	bne.n	800fc12 <_vfiprintf_r+0x866>
 800fb44:	4b60      	ldr	r3, [pc, #384]	; (800fcc8 <_vfiprintf_r+0x91c>)
 800fb46:	a811      	add	r0, sp, #68	; 0x44
 800fb48:	3c10      	subs	r4, #16
 800fb4a:	4606      	mov	r6, r0
 800fb4c:	e676      	b.n	800f83c <_vfiprintf_r+0x490>
 800fb4e:	4606      	mov	r6, r0
 800fb50:	e68e      	b.n	800f870 <_vfiprintf_r+0x4c4>
 800fb52:	aa0e      	add	r2, sp, #56	; 0x38
 800fb54:	4639      	mov	r1, r7
 800fb56:	4648      	mov	r0, r9
 800fb58:	f7ff fbf6 	bl	800f348 <__sprint_r>
 800fb5c:	2800      	cmp	r0, #0
 800fb5e:	d158      	bne.n	800fc12 <_vfiprintf_r+0x866>
 800fb60:	ae11      	add	r6, sp, #68	; 0x44
 800fb62:	e697      	b.n	800f894 <_vfiprintf_r+0x4e8>
 800fb64:	aa0e      	add	r2, sp, #56	; 0x38
 800fb66:	4639      	mov	r1, r7
 800fb68:	4648      	mov	r0, r9
 800fb6a:	f7ff fbed 	bl	800f348 <__sprint_r>
 800fb6e:	2800      	cmp	r0, #0
 800fb70:	d14f      	bne.n	800fc12 <_vfiprintf_r+0x866>
 800fb72:	ae11      	add	r6, sp, #68	; 0x44
 800fb74:	e69e      	b.n	800f8b4 <_vfiprintf_r+0x508>
 800fb76:	2110      	movs	r1, #16
 800fb78:	6071      	str	r1, [r6, #4]
 800fb7a:	2a07      	cmp	r2, #7
 800fb7c:	4461      	add	r1, ip
 800fb7e:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800fb82:	dd08      	ble.n	800fb96 <_vfiprintf_r+0x7ea>
 800fb84:	aa0e      	add	r2, sp, #56	; 0x38
 800fb86:	4639      	mov	r1, r7
 800fb88:	4648      	mov	r0, r9
 800fb8a:	f7ff fbdd 	bl	800f348 <__sprint_r>
 800fb8e:	2800      	cmp	r0, #0
 800fb90:	d13f      	bne.n	800fc12 <_vfiprintf_r+0x866>
 800fb92:	4b4e      	ldr	r3, [pc, #312]	; (800fccc <_vfiprintf_r+0x920>)
 800fb94:	a811      	add	r0, sp, #68	; 0x44
 800fb96:	3c10      	subs	r4, #16
 800fb98:	4606      	mov	r6, r0
 800fb9a:	e694      	b.n	800f8c6 <_vfiprintf_r+0x51a>
 800fb9c:	4606      	mov	r6, r0
 800fb9e:	e6ac      	b.n	800f8fa <_vfiprintf_r+0x54e>
 800fba0:	3110      	adds	r1, #16
 800fba2:	2a07      	cmp	r2, #7
 800fba4:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800fba8:	6073      	str	r3, [r6, #4]
 800fbaa:	dd07      	ble.n	800fbbc <_vfiprintf_r+0x810>
 800fbac:	aa0e      	add	r2, sp, #56	; 0x38
 800fbae:	4639      	mov	r1, r7
 800fbb0:	4648      	mov	r0, r9
 800fbb2:	f7ff fbc9 	bl	800f348 <__sprint_r>
 800fbb6:	bb60      	cbnz	r0, 800fc12 <_vfiprintf_r+0x866>
 800fbb8:	a811      	add	r0, sp, #68	; 0x44
 800fbba:	2310      	movs	r3, #16
 800fbbc:	3c10      	subs	r4, #16
 800fbbe:	4606      	mov	r6, r0
 800fbc0:	e6a1      	b.n	800f906 <_vfiprintf_r+0x55a>
 800fbc2:	4606      	mov	r6, r0
 800fbc4:	e6b9      	b.n	800f93a <_vfiprintf_r+0x58e>
 800fbc6:	aa0e      	add	r2, sp, #56	; 0x38
 800fbc8:	4639      	mov	r1, r7
 800fbca:	4648      	mov	r0, r9
 800fbcc:	f7ff fbbc 	bl	800f348 <__sprint_r>
 800fbd0:	b9f8      	cbnz	r0, 800fc12 <_vfiprintf_r+0x866>
 800fbd2:	ab11      	add	r3, sp, #68	; 0x44
 800fbd4:	e6c1      	b.n	800f95a <_vfiprintf_r+0x5ae>
 800fbd6:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800fbda:	1a54      	subs	r4, r2, r1
 800fbdc:	2c00      	cmp	r4, #0
 800fbde:	f77f aec0 	ble.w	800f962 <_vfiprintf_r+0x5b6>
 800fbe2:	4d39      	ldr	r5, [pc, #228]	; (800fcc8 <_vfiprintf_r+0x91c>)
 800fbe4:	2610      	movs	r6, #16
 800fbe6:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800fbea:	2c10      	cmp	r4, #16
 800fbec:	f102 0201 	add.w	r2, r2, #1
 800fbf0:	601d      	str	r5, [r3, #0]
 800fbf2:	dc1d      	bgt.n	800fc30 <_vfiprintf_r+0x884>
 800fbf4:	605c      	str	r4, [r3, #4]
 800fbf6:	2a07      	cmp	r2, #7
 800fbf8:	440c      	add	r4, r1
 800fbfa:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800fbfe:	f77f aeb0 	ble.w	800f962 <_vfiprintf_r+0x5b6>
 800fc02:	aa0e      	add	r2, sp, #56	; 0x38
 800fc04:	4639      	mov	r1, r7
 800fc06:	4648      	mov	r0, r9
 800fc08:	f7ff fb9e 	bl	800f348 <__sprint_r>
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	f43f aea8 	beq.w	800f962 <_vfiprintf_r+0x5b6>
 800fc12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc14:	07d9      	lsls	r1, r3, #31
 800fc16:	d405      	bmi.n	800fc24 <_vfiprintf_r+0x878>
 800fc18:	89bb      	ldrh	r3, [r7, #12]
 800fc1a:	059a      	lsls	r2, r3, #22
 800fc1c:	d402      	bmi.n	800fc24 <_vfiprintf_r+0x878>
 800fc1e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fc20:	f7fd fe0d 	bl	800d83e <__retarget_lock_release_recursive>
 800fc24:	89bb      	ldrh	r3, [r7, #12]
 800fc26:	065b      	lsls	r3, r3, #25
 800fc28:	f57f abf3 	bpl.w	800f412 <_vfiprintf_r+0x66>
 800fc2c:	f7ff bbee 	b.w	800f40c <_vfiprintf_r+0x60>
 800fc30:	3110      	adds	r1, #16
 800fc32:	2a07      	cmp	r2, #7
 800fc34:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800fc38:	605e      	str	r6, [r3, #4]
 800fc3a:	dc02      	bgt.n	800fc42 <_vfiprintf_r+0x896>
 800fc3c:	3308      	adds	r3, #8
 800fc3e:	3c10      	subs	r4, #16
 800fc40:	e7d1      	b.n	800fbe6 <_vfiprintf_r+0x83a>
 800fc42:	aa0e      	add	r2, sp, #56	; 0x38
 800fc44:	4639      	mov	r1, r7
 800fc46:	4648      	mov	r0, r9
 800fc48:	f7ff fb7e 	bl	800f348 <__sprint_r>
 800fc4c:	2800      	cmp	r0, #0
 800fc4e:	d1e0      	bne.n	800fc12 <_vfiprintf_r+0x866>
 800fc50:	ab11      	add	r3, sp, #68	; 0x44
 800fc52:	e7f4      	b.n	800fc3e <_vfiprintf_r+0x892>
 800fc54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fc56:	b913      	cbnz	r3, 800fc5e <_vfiprintf_r+0x8b2>
 800fc58:	2300      	movs	r3, #0
 800fc5a:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc5c:	e7d9      	b.n	800fc12 <_vfiprintf_r+0x866>
 800fc5e:	aa0e      	add	r2, sp, #56	; 0x38
 800fc60:	4639      	mov	r1, r7
 800fc62:	4648      	mov	r0, r9
 800fc64:	f7ff fb70 	bl	800f348 <__sprint_r>
 800fc68:	2800      	cmp	r0, #0
 800fc6a:	d0f5      	beq.n	800fc58 <_vfiprintf_r+0x8ac>
 800fc6c:	e7d1      	b.n	800fc12 <_vfiprintf_r+0x866>
 800fc6e:	ea54 0205 	orrs.w	r2, r4, r5
 800fc72:	f8cd a010 	str.w	sl, [sp, #16]
 800fc76:	f43f ad8d 	beq.w	800f794 <_vfiprintf_r+0x3e8>
 800fc7a:	2b01      	cmp	r3, #1
 800fc7c:	f43f aedc 	beq.w	800fa38 <_vfiprintf_r+0x68c>
 800fc80:	2b02      	cmp	r3, #2
 800fc82:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 800fc86:	f43f af2a 	beq.w	800fade <_vfiprintf_r+0x732>
 800fc8a:	f004 0207 	and.w	r2, r4, #7
 800fc8e:	08e4      	lsrs	r4, r4, #3
 800fc90:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800fc94:	08ed      	lsrs	r5, r5, #3
 800fc96:	3230      	adds	r2, #48	; 0x30
 800fc98:	ea54 0005 	orrs.w	r0, r4, r5
 800fc9c:	4659      	mov	r1, fp
 800fc9e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800fca2:	d1f2      	bne.n	800fc8a <_vfiprintf_r+0x8de>
 800fca4:	9b04      	ldr	r3, [sp, #16]
 800fca6:	07d8      	lsls	r0, r3, #31
 800fca8:	d506      	bpl.n	800fcb8 <_vfiprintf_r+0x90c>
 800fcaa:	2a30      	cmp	r2, #48	; 0x30
 800fcac:	d004      	beq.n	800fcb8 <_vfiprintf_r+0x90c>
 800fcae:	2230      	movs	r2, #48	; 0x30
 800fcb0:	f80b 2c01 	strb.w	r2, [fp, #-1]
 800fcb4:	f1a1 0b02 	sub.w	fp, r1, #2
 800fcb8:	ab3a      	add	r3, sp, #232	; 0xe8
 800fcba:	eba3 030b 	sub.w	r3, r3, fp
 800fcbe:	9d00      	ldr	r5, [sp, #0]
 800fcc0:	f8dd a010 	ldr.w	sl, [sp, #16]
 800fcc4:	9300      	str	r3, [sp, #0]
 800fcc6:	e59e      	b.n	800f806 <_vfiprintf_r+0x45a>
 800fcc8:	0801201c 	.word	0x0801201c
 800fccc:	0801202c 	.word	0x0801202c

0800fcd0 <__sbprintf>:
 800fcd0:	b570      	push	{r4, r5, r6, lr}
 800fcd2:	460c      	mov	r4, r1
 800fcd4:	8989      	ldrh	r1, [r1, #12]
 800fcd6:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800fcda:	f021 0102 	bic.w	r1, r1, #2
 800fcde:	f8ad 1014 	strh.w	r1, [sp, #20]
 800fce2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800fce4:	911b      	str	r1, [sp, #108]	; 0x6c
 800fce6:	89e1      	ldrh	r1, [r4, #14]
 800fce8:	f8ad 1016 	strh.w	r1, [sp, #22]
 800fcec:	69e1      	ldr	r1, [r4, #28]
 800fcee:	9109      	str	r1, [sp, #36]	; 0x24
 800fcf0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fcf2:	910b      	str	r1, [sp, #44]	; 0x2c
 800fcf4:	a91c      	add	r1, sp, #112	; 0x70
 800fcf6:	9102      	str	r1, [sp, #8]
 800fcf8:	9106      	str	r1, [sp, #24]
 800fcfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fcfe:	4606      	mov	r6, r0
 800fd00:	9104      	str	r1, [sp, #16]
 800fd02:	9107      	str	r1, [sp, #28]
 800fd04:	a818      	add	r0, sp, #96	; 0x60
 800fd06:	2100      	movs	r1, #0
 800fd08:	e9cd 3200 	strd	r3, r2, [sp]
 800fd0c:	9108      	str	r1, [sp, #32]
 800fd0e:	f7fd fd93 	bl	800d838 <__retarget_lock_init_recursive>
 800fd12:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fd16:	a902      	add	r1, sp, #8
 800fd18:	4630      	mov	r0, r6
 800fd1a:	f7ff fb47 	bl	800f3ac <_vfiprintf_r>
 800fd1e:	1e05      	subs	r5, r0, #0
 800fd20:	db07      	blt.n	800fd32 <__sbprintf+0x62>
 800fd22:	a902      	add	r1, sp, #8
 800fd24:	4630      	mov	r0, r6
 800fd26:	f000 f8f9 	bl	800ff1c <_fflush_r>
 800fd2a:	2800      	cmp	r0, #0
 800fd2c:	bf18      	it	ne
 800fd2e:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800fd32:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800fd36:	9818      	ldr	r0, [sp, #96]	; 0x60
 800fd38:	065b      	lsls	r3, r3, #25
 800fd3a:	bf42      	ittt	mi
 800fd3c:	89a3      	ldrhmi	r3, [r4, #12]
 800fd3e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800fd42:	81a3      	strhmi	r3, [r4, #12]
 800fd44:	f7fd fd79 	bl	800d83a <__retarget_lock_close_recursive>
 800fd48:	4628      	mov	r0, r5
 800fd4a:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800fd4e:	bd70      	pop	{r4, r5, r6, pc}

0800fd50 <_fclose_r>:
 800fd50:	b570      	push	{r4, r5, r6, lr}
 800fd52:	4606      	mov	r6, r0
 800fd54:	460c      	mov	r4, r1
 800fd56:	b911      	cbnz	r1, 800fd5e <_fclose_r+0xe>
 800fd58:	2500      	movs	r5, #0
 800fd5a:	4628      	mov	r0, r5
 800fd5c:	bd70      	pop	{r4, r5, r6, pc}
 800fd5e:	b118      	cbz	r0, 800fd68 <_fclose_r+0x18>
 800fd60:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fd62:	b90b      	cbnz	r3, 800fd68 <_fclose_r+0x18>
 800fd64:	f7fd fc04 	bl	800d570 <__sinit>
 800fd68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd6a:	07d8      	lsls	r0, r3, #31
 800fd6c:	d405      	bmi.n	800fd7a <_fclose_r+0x2a>
 800fd6e:	89a3      	ldrh	r3, [r4, #12]
 800fd70:	0599      	lsls	r1, r3, #22
 800fd72:	d402      	bmi.n	800fd7a <_fclose_r+0x2a>
 800fd74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd76:	f7fd fd61 	bl	800d83c <__retarget_lock_acquire_recursive>
 800fd7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd7e:	b93b      	cbnz	r3, 800fd90 <_fclose_r+0x40>
 800fd80:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800fd82:	f015 0501 	ands.w	r5, r5, #1
 800fd86:	d1e7      	bne.n	800fd58 <_fclose_r+0x8>
 800fd88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd8a:	f7fd fd58 	bl	800d83e <__retarget_lock_release_recursive>
 800fd8e:	e7e4      	b.n	800fd5a <_fclose_r+0xa>
 800fd90:	4621      	mov	r1, r4
 800fd92:	4630      	mov	r0, r6
 800fd94:	f000 f834 	bl	800fe00 <__sflush_r>
 800fd98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fd9a:	4605      	mov	r5, r0
 800fd9c:	b133      	cbz	r3, 800fdac <_fclose_r+0x5c>
 800fd9e:	69e1      	ldr	r1, [r4, #28]
 800fda0:	4630      	mov	r0, r6
 800fda2:	4798      	blx	r3
 800fda4:	2800      	cmp	r0, #0
 800fda6:	bfb8      	it	lt
 800fda8:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 800fdac:	89a3      	ldrh	r3, [r4, #12]
 800fdae:	061a      	lsls	r2, r3, #24
 800fdb0:	d503      	bpl.n	800fdba <_fclose_r+0x6a>
 800fdb2:	6921      	ldr	r1, [r4, #16]
 800fdb4:	4630      	mov	r0, r6
 800fdb6:	f7fd fda7 	bl	800d908 <_free_r>
 800fdba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fdbc:	b141      	cbz	r1, 800fdd0 <_fclose_r+0x80>
 800fdbe:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800fdc2:	4299      	cmp	r1, r3
 800fdc4:	d002      	beq.n	800fdcc <_fclose_r+0x7c>
 800fdc6:	4630      	mov	r0, r6
 800fdc8:	f7fd fd9e 	bl	800d908 <_free_r>
 800fdcc:	2300      	movs	r3, #0
 800fdce:	6323      	str	r3, [r4, #48]	; 0x30
 800fdd0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800fdd2:	b121      	cbz	r1, 800fdde <_fclose_r+0x8e>
 800fdd4:	4630      	mov	r0, r6
 800fdd6:	f7fd fd97 	bl	800d908 <_free_r>
 800fdda:	2300      	movs	r3, #0
 800fddc:	6463      	str	r3, [r4, #68]	; 0x44
 800fdde:	f7fd fbbb 	bl	800d558 <__sfp_lock_acquire>
 800fde2:	2300      	movs	r3, #0
 800fde4:	81a3      	strh	r3, [r4, #12]
 800fde6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fde8:	07db      	lsls	r3, r3, #31
 800fdea:	d402      	bmi.n	800fdf2 <_fclose_r+0xa2>
 800fdec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fdee:	f7fd fd26 	bl	800d83e <__retarget_lock_release_recursive>
 800fdf2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fdf4:	f7fd fd21 	bl	800d83a <__retarget_lock_close_recursive>
 800fdf8:	f7fd fbb4 	bl	800d564 <__sfp_lock_release>
 800fdfc:	e7ad      	b.n	800fd5a <_fclose_r+0xa>
	...

0800fe00 <__sflush_r>:
 800fe00:	898b      	ldrh	r3, [r1, #12]
 800fe02:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fe06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe0a:	4605      	mov	r5, r0
 800fe0c:	0718      	lsls	r0, r3, #28
 800fe0e:	460c      	mov	r4, r1
 800fe10:	d45f      	bmi.n	800fed2 <__sflush_r+0xd2>
 800fe12:	684b      	ldr	r3, [r1, #4]
 800fe14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	818a      	strh	r2, [r1, #12]
 800fe1c:	dc05      	bgt.n	800fe2a <__sflush_r+0x2a>
 800fe1e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	dc02      	bgt.n	800fe2a <__sflush_r+0x2a>
 800fe24:	2000      	movs	r0, #0
 800fe26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fe2c:	2e00      	cmp	r6, #0
 800fe2e:	d0f9      	beq.n	800fe24 <__sflush_r+0x24>
 800fe30:	2300      	movs	r3, #0
 800fe32:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fe36:	682f      	ldr	r7, [r5, #0]
 800fe38:	69e1      	ldr	r1, [r4, #28]
 800fe3a:	602b      	str	r3, [r5, #0]
 800fe3c:	d036      	beq.n	800feac <__sflush_r+0xac>
 800fe3e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800fe40:	89a3      	ldrh	r3, [r4, #12]
 800fe42:	075a      	lsls	r2, r3, #29
 800fe44:	d505      	bpl.n	800fe52 <__sflush_r+0x52>
 800fe46:	6863      	ldr	r3, [r4, #4]
 800fe48:	1ac0      	subs	r0, r0, r3
 800fe4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fe4c:	b10b      	cbz	r3, 800fe52 <__sflush_r+0x52>
 800fe4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fe50:	1ac0      	subs	r0, r0, r3
 800fe52:	2300      	movs	r3, #0
 800fe54:	4602      	mov	r2, r0
 800fe56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fe58:	69e1      	ldr	r1, [r4, #28]
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	47b0      	blx	r6
 800fe5e:	1c43      	adds	r3, r0, #1
 800fe60:	89a3      	ldrh	r3, [r4, #12]
 800fe62:	d106      	bne.n	800fe72 <__sflush_r+0x72>
 800fe64:	6829      	ldr	r1, [r5, #0]
 800fe66:	291d      	cmp	r1, #29
 800fe68:	d82f      	bhi.n	800feca <__sflush_r+0xca>
 800fe6a:	4a2b      	ldr	r2, [pc, #172]	; (800ff18 <__sflush_r+0x118>)
 800fe6c:	410a      	asrs	r2, r1
 800fe6e:	07d6      	lsls	r6, r2, #31
 800fe70:	d42b      	bmi.n	800feca <__sflush_r+0xca>
 800fe72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fe76:	b21b      	sxth	r3, r3
 800fe78:	2200      	movs	r2, #0
 800fe7a:	6062      	str	r2, [r4, #4]
 800fe7c:	04d9      	lsls	r1, r3, #19
 800fe7e:	6922      	ldr	r2, [r4, #16]
 800fe80:	81a3      	strh	r3, [r4, #12]
 800fe82:	6022      	str	r2, [r4, #0]
 800fe84:	d504      	bpl.n	800fe90 <__sflush_r+0x90>
 800fe86:	1c42      	adds	r2, r0, #1
 800fe88:	d101      	bne.n	800fe8e <__sflush_r+0x8e>
 800fe8a:	682b      	ldr	r3, [r5, #0]
 800fe8c:	b903      	cbnz	r3, 800fe90 <__sflush_r+0x90>
 800fe8e:	6520      	str	r0, [r4, #80]	; 0x50
 800fe90:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fe92:	602f      	str	r7, [r5, #0]
 800fe94:	2900      	cmp	r1, #0
 800fe96:	d0c5      	beq.n	800fe24 <__sflush_r+0x24>
 800fe98:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800fe9c:	4299      	cmp	r1, r3
 800fe9e:	d002      	beq.n	800fea6 <__sflush_r+0xa6>
 800fea0:	4628      	mov	r0, r5
 800fea2:	f7fd fd31 	bl	800d908 <_free_r>
 800fea6:	2000      	movs	r0, #0
 800fea8:	6320      	str	r0, [r4, #48]	; 0x30
 800feaa:	e7bc      	b.n	800fe26 <__sflush_r+0x26>
 800feac:	2301      	movs	r3, #1
 800feae:	4628      	mov	r0, r5
 800feb0:	47b0      	blx	r6
 800feb2:	1c41      	adds	r1, r0, #1
 800feb4:	d1c4      	bne.n	800fe40 <__sflush_r+0x40>
 800feb6:	682b      	ldr	r3, [r5, #0]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d0c1      	beq.n	800fe40 <__sflush_r+0x40>
 800febc:	2b1d      	cmp	r3, #29
 800febe:	d001      	beq.n	800fec4 <__sflush_r+0xc4>
 800fec0:	2b16      	cmp	r3, #22
 800fec2:	d101      	bne.n	800fec8 <__sflush_r+0xc8>
 800fec4:	602f      	str	r7, [r5, #0]
 800fec6:	e7ad      	b.n	800fe24 <__sflush_r+0x24>
 800fec8:	89a3      	ldrh	r3, [r4, #12]
 800feca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fece:	81a3      	strh	r3, [r4, #12]
 800fed0:	e7a9      	b.n	800fe26 <__sflush_r+0x26>
 800fed2:	690f      	ldr	r7, [r1, #16]
 800fed4:	2f00      	cmp	r7, #0
 800fed6:	d0a5      	beq.n	800fe24 <__sflush_r+0x24>
 800fed8:	079b      	lsls	r3, r3, #30
 800feda:	680e      	ldr	r6, [r1, #0]
 800fedc:	bf08      	it	eq
 800fede:	694b      	ldreq	r3, [r1, #20]
 800fee0:	600f      	str	r7, [r1, #0]
 800fee2:	bf18      	it	ne
 800fee4:	2300      	movne	r3, #0
 800fee6:	eba6 0807 	sub.w	r8, r6, r7
 800feea:	608b      	str	r3, [r1, #8]
 800feec:	f1b8 0f00 	cmp.w	r8, #0
 800fef0:	dd98      	ble.n	800fe24 <__sflush_r+0x24>
 800fef2:	69e1      	ldr	r1, [r4, #28]
 800fef4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fef6:	4643      	mov	r3, r8
 800fef8:	463a      	mov	r2, r7
 800fefa:	4628      	mov	r0, r5
 800fefc:	47b0      	blx	r6
 800fefe:	2800      	cmp	r0, #0
 800ff00:	dc06      	bgt.n	800ff10 <__sflush_r+0x110>
 800ff02:	89a3      	ldrh	r3, [r4, #12]
 800ff04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff08:	81a3      	strh	r3, [r4, #12]
 800ff0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff0e:	e78a      	b.n	800fe26 <__sflush_r+0x26>
 800ff10:	4407      	add	r7, r0
 800ff12:	eba8 0800 	sub.w	r8, r8, r0
 800ff16:	e7e9      	b.n	800feec <__sflush_r+0xec>
 800ff18:	dfbffffe 	.word	0xdfbffffe

0800ff1c <_fflush_r>:
 800ff1c:	b538      	push	{r3, r4, r5, lr}
 800ff1e:	460c      	mov	r4, r1
 800ff20:	4605      	mov	r5, r0
 800ff22:	b118      	cbz	r0, 800ff2c <_fflush_r+0x10>
 800ff24:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ff26:	b90b      	cbnz	r3, 800ff2c <_fflush_r+0x10>
 800ff28:	f7fd fb22 	bl	800d570 <__sinit>
 800ff2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff30:	b1bb      	cbz	r3, 800ff62 <_fflush_r+0x46>
 800ff32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ff34:	07d0      	lsls	r0, r2, #31
 800ff36:	d404      	bmi.n	800ff42 <_fflush_r+0x26>
 800ff38:	0599      	lsls	r1, r3, #22
 800ff3a:	d402      	bmi.n	800ff42 <_fflush_r+0x26>
 800ff3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff3e:	f7fd fc7d 	bl	800d83c <__retarget_lock_acquire_recursive>
 800ff42:	4628      	mov	r0, r5
 800ff44:	4621      	mov	r1, r4
 800ff46:	f7ff ff5b 	bl	800fe00 <__sflush_r>
 800ff4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff4c:	07da      	lsls	r2, r3, #31
 800ff4e:	4605      	mov	r5, r0
 800ff50:	d405      	bmi.n	800ff5e <_fflush_r+0x42>
 800ff52:	89a3      	ldrh	r3, [r4, #12]
 800ff54:	059b      	lsls	r3, r3, #22
 800ff56:	d402      	bmi.n	800ff5e <_fflush_r+0x42>
 800ff58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff5a:	f7fd fc70 	bl	800d83e <__retarget_lock_release_recursive>
 800ff5e:	4628      	mov	r0, r5
 800ff60:	bd38      	pop	{r3, r4, r5, pc}
 800ff62:	461d      	mov	r5, r3
 800ff64:	e7fb      	b.n	800ff5e <_fflush_r+0x42>
	...

0800ff68 <__sfvwrite_r>:
 800ff68:	6893      	ldr	r3, [r2, #8]
 800ff6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff6e:	4606      	mov	r6, r0
 800ff70:	460c      	mov	r4, r1
 800ff72:	4691      	mov	r9, r2
 800ff74:	b91b      	cbnz	r3, 800ff7e <__sfvwrite_r+0x16>
 800ff76:	2000      	movs	r0, #0
 800ff78:	b003      	add	sp, #12
 800ff7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff7e:	898b      	ldrh	r3, [r1, #12]
 800ff80:	0718      	lsls	r0, r3, #28
 800ff82:	d54f      	bpl.n	8010024 <__sfvwrite_r+0xbc>
 800ff84:	690b      	ldr	r3, [r1, #16]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d04c      	beq.n	8010024 <__sfvwrite_r+0xbc>
 800ff8a:	89a3      	ldrh	r3, [r4, #12]
 800ff8c:	f8d9 8000 	ldr.w	r8, [r9]
 800ff90:	f013 0702 	ands.w	r7, r3, #2
 800ff94:	d16b      	bne.n	801006e <__sfvwrite_r+0x106>
 800ff96:	f013 0301 	ands.w	r3, r3, #1
 800ff9a:	f000 809b 	beq.w	80100d4 <__sfvwrite_r+0x16c>
 800ff9e:	4638      	mov	r0, r7
 800ffa0:	46ba      	mov	sl, r7
 800ffa2:	46bb      	mov	fp, r7
 800ffa4:	f1bb 0f00 	cmp.w	fp, #0
 800ffa8:	f000 8102 	beq.w	80101b0 <__sfvwrite_r+0x248>
 800ffac:	b950      	cbnz	r0, 800ffc4 <__sfvwrite_r+0x5c>
 800ffae:	465a      	mov	r2, fp
 800ffb0:	210a      	movs	r1, #10
 800ffb2:	4650      	mov	r0, sl
 800ffb4:	f7f0 f9ac 	bl	8000310 <memchr>
 800ffb8:	2800      	cmp	r0, #0
 800ffba:	f000 80ff 	beq.w	80101bc <__sfvwrite_r+0x254>
 800ffbe:	3001      	adds	r0, #1
 800ffc0:	eba0 070a 	sub.w	r7, r0, sl
 800ffc4:	6820      	ldr	r0, [r4, #0]
 800ffc6:	6921      	ldr	r1, [r4, #16]
 800ffc8:	68a5      	ldr	r5, [r4, #8]
 800ffca:	6963      	ldr	r3, [r4, #20]
 800ffcc:	455f      	cmp	r7, fp
 800ffce:	463a      	mov	r2, r7
 800ffd0:	bf28      	it	cs
 800ffd2:	465a      	movcs	r2, fp
 800ffd4:	4288      	cmp	r0, r1
 800ffd6:	f240 80f4 	bls.w	80101c2 <__sfvwrite_r+0x25a>
 800ffda:	441d      	add	r5, r3
 800ffdc:	42aa      	cmp	r2, r5
 800ffde:	f340 80f0 	ble.w	80101c2 <__sfvwrite_r+0x25a>
 800ffe2:	4651      	mov	r1, sl
 800ffe4:	462a      	mov	r2, r5
 800ffe6:	f000 fa4a 	bl	801047e <memmove>
 800ffea:	6823      	ldr	r3, [r4, #0]
 800ffec:	442b      	add	r3, r5
 800ffee:	6023      	str	r3, [r4, #0]
 800fff0:	4621      	mov	r1, r4
 800fff2:	4630      	mov	r0, r6
 800fff4:	f7ff ff92 	bl	800ff1c <_fflush_r>
 800fff8:	2800      	cmp	r0, #0
 800fffa:	d166      	bne.n	80100ca <__sfvwrite_r+0x162>
 800fffc:	1b7f      	subs	r7, r7, r5
 800fffe:	f040 80f8 	bne.w	80101f2 <__sfvwrite_r+0x28a>
 8010002:	4621      	mov	r1, r4
 8010004:	4630      	mov	r0, r6
 8010006:	f7ff ff89 	bl	800ff1c <_fflush_r>
 801000a:	2800      	cmp	r0, #0
 801000c:	d15d      	bne.n	80100ca <__sfvwrite_r+0x162>
 801000e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010012:	1b5b      	subs	r3, r3, r5
 8010014:	44aa      	add	sl, r5
 8010016:	ebab 0b05 	sub.w	fp, fp, r5
 801001a:	f8c9 3008 	str.w	r3, [r9, #8]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d1c0      	bne.n	800ffa4 <__sfvwrite_r+0x3c>
 8010022:	e7a8      	b.n	800ff76 <__sfvwrite_r+0xe>
 8010024:	4621      	mov	r1, r4
 8010026:	4630      	mov	r0, r6
 8010028:	f000 f966 	bl	80102f8 <__swsetup_r>
 801002c:	2800      	cmp	r0, #0
 801002e:	d0ac      	beq.n	800ff8a <__sfvwrite_r+0x22>
 8010030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010034:	e7a0      	b.n	800ff78 <__sfvwrite_r+0x10>
 8010036:	e9d8 a500 	ldrd	sl, r5, [r8]
 801003a:	f108 0808 	add.w	r8, r8, #8
 801003e:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8010042:	69e1      	ldr	r1, [r4, #28]
 8010044:	2d00      	cmp	r5, #0
 8010046:	d0f6      	beq.n	8010036 <__sfvwrite_r+0xce>
 8010048:	42bd      	cmp	r5, r7
 801004a:	462b      	mov	r3, r5
 801004c:	4652      	mov	r2, sl
 801004e:	bf28      	it	cs
 8010050:	463b      	movcs	r3, r7
 8010052:	4630      	mov	r0, r6
 8010054:	47d8      	blx	fp
 8010056:	2800      	cmp	r0, #0
 8010058:	dd37      	ble.n	80100ca <__sfvwrite_r+0x162>
 801005a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801005e:	1a1b      	subs	r3, r3, r0
 8010060:	4482      	add	sl, r0
 8010062:	1a2d      	subs	r5, r5, r0
 8010064:	f8c9 3008 	str.w	r3, [r9, #8]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d1e8      	bne.n	801003e <__sfvwrite_r+0xd6>
 801006c:	e783      	b.n	800ff76 <__sfvwrite_r+0xe>
 801006e:	f04f 0a00 	mov.w	sl, #0
 8010072:	4f61      	ldr	r7, [pc, #388]	; (80101f8 <__sfvwrite_r+0x290>)
 8010074:	4655      	mov	r5, sl
 8010076:	e7e2      	b.n	801003e <__sfvwrite_r+0xd6>
 8010078:	e9d8 7a00 	ldrd	r7, sl, [r8]
 801007c:	f108 0808 	add.w	r8, r8, #8
 8010080:	6820      	ldr	r0, [r4, #0]
 8010082:	68a2      	ldr	r2, [r4, #8]
 8010084:	f1ba 0f00 	cmp.w	sl, #0
 8010088:	d0f6      	beq.n	8010078 <__sfvwrite_r+0x110>
 801008a:	89a3      	ldrh	r3, [r4, #12]
 801008c:	0599      	lsls	r1, r3, #22
 801008e:	d563      	bpl.n	8010158 <__sfvwrite_r+0x1f0>
 8010090:	4552      	cmp	r2, sl
 8010092:	d836      	bhi.n	8010102 <__sfvwrite_r+0x19a>
 8010094:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8010098:	d033      	beq.n	8010102 <__sfvwrite_r+0x19a>
 801009a:	6921      	ldr	r1, [r4, #16]
 801009c:	6965      	ldr	r5, [r4, #20]
 801009e:	eba0 0b01 	sub.w	fp, r0, r1
 80100a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80100a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80100aa:	f10b 0201 	add.w	r2, fp, #1
 80100ae:	106d      	asrs	r5, r5, #1
 80100b0:	4452      	add	r2, sl
 80100b2:	4295      	cmp	r5, r2
 80100b4:	bf38      	it	cc
 80100b6:	4615      	movcc	r5, r2
 80100b8:	055b      	lsls	r3, r3, #21
 80100ba:	d53d      	bpl.n	8010138 <__sfvwrite_r+0x1d0>
 80100bc:	4629      	mov	r1, r5
 80100be:	4630      	mov	r0, r6
 80100c0:	f7fd fce2 	bl	800da88 <_malloc_r>
 80100c4:	b948      	cbnz	r0, 80100da <__sfvwrite_r+0x172>
 80100c6:	230c      	movs	r3, #12
 80100c8:	6033      	str	r3, [r6, #0]
 80100ca:	89a3      	ldrh	r3, [r4, #12]
 80100cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100d0:	81a3      	strh	r3, [r4, #12]
 80100d2:	e7ad      	b.n	8010030 <__sfvwrite_r+0xc8>
 80100d4:	461f      	mov	r7, r3
 80100d6:	469a      	mov	sl, r3
 80100d8:	e7d2      	b.n	8010080 <__sfvwrite_r+0x118>
 80100da:	465a      	mov	r2, fp
 80100dc:	6921      	ldr	r1, [r4, #16]
 80100de:	9001      	str	r0, [sp, #4]
 80100e0:	f000 fa34 	bl	801054c <memcpy>
 80100e4:	89a2      	ldrh	r2, [r4, #12]
 80100e6:	9b01      	ldr	r3, [sp, #4]
 80100e8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80100ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80100f0:	81a2      	strh	r2, [r4, #12]
 80100f2:	6123      	str	r3, [r4, #16]
 80100f4:	6165      	str	r5, [r4, #20]
 80100f6:	445b      	add	r3, fp
 80100f8:	eba5 050b 	sub.w	r5, r5, fp
 80100fc:	6023      	str	r3, [r4, #0]
 80100fe:	4652      	mov	r2, sl
 8010100:	60a5      	str	r5, [r4, #8]
 8010102:	4552      	cmp	r2, sl
 8010104:	bf28      	it	cs
 8010106:	4652      	movcs	r2, sl
 8010108:	6820      	ldr	r0, [r4, #0]
 801010a:	9201      	str	r2, [sp, #4]
 801010c:	4639      	mov	r1, r7
 801010e:	f000 f9b6 	bl	801047e <memmove>
 8010112:	68a3      	ldr	r3, [r4, #8]
 8010114:	9a01      	ldr	r2, [sp, #4]
 8010116:	1a9b      	subs	r3, r3, r2
 8010118:	60a3      	str	r3, [r4, #8]
 801011a:	6823      	ldr	r3, [r4, #0]
 801011c:	4413      	add	r3, r2
 801011e:	4655      	mov	r5, sl
 8010120:	6023      	str	r3, [r4, #0]
 8010122:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010126:	1b5b      	subs	r3, r3, r5
 8010128:	442f      	add	r7, r5
 801012a:	ebaa 0a05 	sub.w	sl, sl, r5
 801012e:	f8c9 3008 	str.w	r3, [r9, #8]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d1a4      	bne.n	8010080 <__sfvwrite_r+0x118>
 8010136:	e71e      	b.n	800ff76 <__sfvwrite_r+0xe>
 8010138:	462a      	mov	r2, r5
 801013a:	4630      	mov	r0, r6
 801013c:	f001 fbac 	bl	8011898 <_realloc_r>
 8010140:	4603      	mov	r3, r0
 8010142:	2800      	cmp	r0, #0
 8010144:	d1d5      	bne.n	80100f2 <__sfvwrite_r+0x18a>
 8010146:	6921      	ldr	r1, [r4, #16]
 8010148:	4630      	mov	r0, r6
 801014a:	f7fd fbdd 	bl	800d908 <_free_r>
 801014e:	89a3      	ldrh	r3, [r4, #12]
 8010150:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010154:	81a3      	strh	r3, [r4, #12]
 8010156:	e7b6      	b.n	80100c6 <__sfvwrite_r+0x15e>
 8010158:	6923      	ldr	r3, [r4, #16]
 801015a:	4283      	cmp	r3, r0
 801015c:	d302      	bcc.n	8010164 <__sfvwrite_r+0x1fc>
 801015e:	6961      	ldr	r1, [r4, #20]
 8010160:	4551      	cmp	r1, sl
 8010162:	d915      	bls.n	8010190 <__sfvwrite_r+0x228>
 8010164:	4552      	cmp	r2, sl
 8010166:	bf28      	it	cs
 8010168:	4652      	movcs	r2, sl
 801016a:	4639      	mov	r1, r7
 801016c:	4615      	mov	r5, r2
 801016e:	f000 f986 	bl	801047e <memmove>
 8010172:	68a3      	ldr	r3, [r4, #8]
 8010174:	6822      	ldr	r2, [r4, #0]
 8010176:	1b5b      	subs	r3, r3, r5
 8010178:	442a      	add	r2, r5
 801017a:	60a3      	str	r3, [r4, #8]
 801017c:	6022      	str	r2, [r4, #0]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d1cf      	bne.n	8010122 <__sfvwrite_r+0x1ba>
 8010182:	4621      	mov	r1, r4
 8010184:	4630      	mov	r0, r6
 8010186:	f7ff fec9 	bl	800ff1c <_fflush_r>
 801018a:	2800      	cmp	r0, #0
 801018c:	d0c9      	beq.n	8010122 <__sfvwrite_r+0x1ba>
 801018e:	e79c      	b.n	80100ca <__sfvwrite_r+0x162>
 8010190:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010194:	459a      	cmp	sl, r3
 8010196:	bf38      	it	cc
 8010198:	4653      	movcc	r3, sl
 801019a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801019c:	fb93 f3f1 	sdiv	r3, r3, r1
 80101a0:	463a      	mov	r2, r7
 80101a2:	434b      	muls	r3, r1
 80101a4:	4630      	mov	r0, r6
 80101a6:	69e1      	ldr	r1, [r4, #28]
 80101a8:	47a8      	blx	r5
 80101aa:	1e05      	subs	r5, r0, #0
 80101ac:	dcb9      	bgt.n	8010122 <__sfvwrite_r+0x1ba>
 80101ae:	e78c      	b.n	80100ca <__sfvwrite_r+0x162>
 80101b0:	e9d8 ab00 	ldrd	sl, fp, [r8]
 80101b4:	2000      	movs	r0, #0
 80101b6:	f108 0808 	add.w	r8, r8, #8
 80101ba:	e6f3      	b.n	800ffa4 <__sfvwrite_r+0x3c>
 80101bc:	f10b 0701 	add.w	r7, fp, #1
 80101c0:	e700      	b.n	800ffc4 <__sfvwrite_r+0x5c>
 80101c2:	4293      	cmp	r3, r2
 80101c4:	dc08      	bgt.n	80101d8 <__sfvwrite_r+0x270>
 80101c6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80101c8:	69e1      	ldr	r1, [r4, #28]
 80101ca:	4652      	mov	r2, sl
 80101cc:	4630      	mov	r0, r6
 80101ce:	47a8      	blx	r5
 80101d0:	1e05      	subs	r5, r0, #0
 80101d2:	f73f af13 	bgt.w	800fffc <__sfvwrite_r+0x94>
 80101d6:	e778      	b.n	80100ca <__sfvwrite_r+0x162>
 80101d8:	4651      	mov	r1, sl
 80101da:	9201      	str	r2, [sp, #4]
 80101dc:	f000 f94f 	bl	801047e <memmove>
 80101e0:	9a01      	ldr	r2, [sp, #4]
 80101e2:	68a3      	ldr	r3, [r4, #8]
 80101e4:	1a9b      	subs	r3, r3, r2
 80101e6:	60a3      	str	r3, [r4, #8]
 80101e8:	6823      	ldr	r3, [r4, #0]
 80101ea:	4413      	add	r3, r2
 80101ec:	6023      	str	r3, [r4, #0]
 80101ee:	4615      	mov	r5, r2
 80101f0:	e704      	b.n	800fffc <__sfvwrite_r+0x94>
 80101f2:	2001      	movs	r0, #1
 80101f4:	e70b      	b.n	801000e <__sfvwrite_r+0xa6>
 80101f6:	bf00      	nop
 80101f8:	7ffffc00 	.word	0x7ffffc00

080101fc <_putc_r>:
 80101fc:	b570      	push	{r4, r5, r6, lr}
 80101fe:	460d      	mov	r5, r1
 8010200:	4614      	mov	r4, r2
 8010202:	4606      	mov	r6, r0
 8010204:	b118      	cbz	r0, 801020e <_putc_r+0x12>
 8010206:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010208:	b90b      	cbnz	r3, 801020e <_putc_r+0x12>
 801020a:	f7fd f9b1 	bl	800d570 <__sinit>
 801020e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010210:	07d8      	lsls	r0, r3, #31
 8010212:	d405      	bmi.n	8010220 <_putc_r+0x24>
 8010214:	89a3      	ldrh	r3, [r4, #12]
 8010216:	0599      	lsls	r1, r3, #22
 8010218:	d402      	bmi.n	8010220 <_putc_r+0x24>
 801021a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801021c:	f7fd fb0e 	bl	800d83c <__retarget_lock_acquire_recursive>
 8010220:	68a3      	ldr	r3, [r4, #8]
 8010222:	3b01      	subs	r3, #1
 8010224:	2b00      	cmp	r3, #0
 8010226:	60a3      	str	r3, [r4, #8]
 8010228:	da05      	bge.n	8010236 <_putc_r+0x3a>
 801022a:	69a2      	ldr	r2, [r4, #24]
 801022c:	4293      	cmp	r3, r2
 801022e:	db12      	blt.n	8010256 <_putc_r+0x5a>
 8010230:	b2eb      	uxtb	r3, r5
 8010232:	2b0a      	cmp	r3, #10
 8010234:	d00f      	beq.n	8010256 <_putc_r+0x5a>
 8010236:	6823      	ldr	r3, [r4, #0]
 8010238:	1c5a      	adds	r2, r3, #1
 801023a:	6022      	str	r2, [r4, #0]
 801023c:	701d      	strb	r5, [r3, #0]
 801023e:	b2ed      	uxtb	r5, r5
 8010240:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010242:	07da      	lsls	r2, r3, #31
 8010244:	d405      	bmi.n	8010252 <_putc_r+0x56>
 8010246:	89a3      	ldrh	r3, [r4, #12]
 8010248:	059b      	lsls	r3, r3, #22
 801024a:	d402      	bmi.n	8010252 <_putc_r+0x56>
 801024c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801024e:	f7fd faf6 	bl	800d83e <__retarget_lock_release_recursive>
 8010252:	4628      	mov	r0, r5
 8010254:	bd70      	pop	{r4, r5, r6, pc}
 8010256:	4629      	mov	r1, r5
 8010258:	4622      	mov	r2, r4
 801025a:	4630      	mov	r0, r6
 801025c:	f000 f802 	bl	8010264 <__swbuf_r>
 8010260:	4605      	mov	r5, r0
 8010262:	e7ed      	b.n	8010240 <_putc_r+0x44>

08010264 <__swbuf_r>:
 8010264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010266:	460e      	mov	r6, r1
 8010268:	4614      	mov	r4, r2
 801026a:	4605      	mov	r5, r0
 801026c:	b118      	cbz	r0, 8010276 <__swbuf_r+0x12>
 801026e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010270:	b90b      	cbnz	r3, 8010276 <__swbuf_r+0x12>
 8010272:	f7fd f97d 	bl	800d570 <__sinit>
 8010276:	69a3      	ldr	r3, [r4, #24]
 8010278:	60a3      	str	r3, [r4, #8]
 801027a:	89a3      	ldrh	r3, [r4, #12]
 801027c:	0719      	lsls	r1, r3, #28
 801027e:	d529      	bpl.n	80102d4 <__swbuf_r+0x70>
 8010280:	6923      	ldr	r3, [r4, #16]
 8010282:	b33b      	cbz	r3, 80102d4 <__swbuf_r+0x70>
 8010284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010288:	b2f6      	uxtb	r6, r6
 801028a:	049a      	lsls	r2, r3, #18
 801028c:	4637      	mov	r7, r6
 801028e:	d52a      	bpl.n	80102e6 <__swbuf_r+0x82>
 8010290:	6823      	ldr	r3, [r4, #0]
 8010292:	6922      	ldr	r2, [r4, #16]
 8010294:	1a98      	subs	r0, r3, r2
 8010296:	6963      	ldr	r3, [r4, #20]
 8010298:	4283      	cmp	r3, r0
 801029a:	dc04      	bgt.n	80102a6 <__swbuf_r+0x42>
 801029c:	4621      	mov	r1, r4
 801029e:	4628      	mov	r0, r5
 80102a0:	f7ff fe3c 	bl	800ff1c <_fflush_r>
 80102a4:	b9e0      	cbnz	r0, 80102e0 <__swbuf_r+0x7c>
 80102a6:	68a3      	ldr	r3, [r4, #8]
 80102a8:	3b01      	subs	r3, #1
 80102aa:	60a3      	str	r3, [r4, #8]
 80102ac:	6823      	ldr	r3, [r4, #0]
 80102ae:	1c5a      	adds	r2, r3, #1
 80102b0:	6022      	str	r2, [r4, #0]
 80102b2:	701e      	strb	r6, [r3, #0]
 80102b4:	6962      	ldr	r2, [r4, #20]
 80102b6:	1c43      	adds	r3, r0, #1
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d004      	beq.n	80102c6 <__swbuf_r+0x62>
 80102bc:	89a3      	ldrh	r3, [r4, #12]
 80102be:	07db      	lsls	r3, r3, #31
 80102c0:	d506      	bpl.n	80102d0 <__swbuf_r+0x6c>
 80102c2:	2e0a      	cmp	r6, #10
 80102c4:	d104      	bne.n	80102d0 <__swbuf_r+0x6c>
 80102c6:	4621      	mov	r1, r4
 80102c8:	4628      	mov	r0, r5
 80102ca:	f7ff fe27 	bl	800ff1c <_fflush_r>
 80102ce:	b938      	cbnz	r0, 80102e0 <__swbuf_r+0x7c>
 80102d0:	4638      	mov	r0, r7
 80102d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102d4:	4621      	mov	r1, r4
 80102d6:	4628      	mov	r0, r5
 80102d8:	f000 f80e 	bl	80102f8 <__swsetup_r>
 80102dc:	2800      	cmp	r0, #0
 80102de:	d0d1      	beq.n	8010284 <__swbuf_r+0x20>
 80102e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80102e4:	e7f4      	b.n	80102d0 <__swbuf_r+0x6c>
 80102e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80102ea:	81a3      	strh	r3, [r4, #12]
 80102ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80102ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80102f2:	6663      	str	r3, [r4, #100]	; 0x64
 80102f4:	e7cc      	b.n	8010290 <__swbuf_r+0x2c>
	...

080102f8 <__swsetup_r>:
 80102f8:	b538      	push	{r3, r4, r5, lr}
 80102fa:	4b2a      	ldr	r3, [pc, #168]	; (80103a4 <__swsetup_r+0xac>)
 80102fc:	4605      	mov	r5, r0
 80102fe:	6818      	ldr	r0, [r3, #0]
 8010300:	460c      	mov	r4, r1
 8010302:	b118      	cbz	r0, 801030c <__swsetup_r+0x14>
 8010304:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010306:	b90b      	cbnz	r3, 801030c <__swsetup_r+0x14>
 8010308:	f7fd f932 	bl	800d570 <__sinit>
 801030c:	89a3      	ldrh	r3, [r4, #12]
 801030e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010312:	0718      	lsls	r0, r3, #28
 8010314:	d422      	bmi.n	801035c <__swsetup_r+0x64>
 8010316:	06d9      	lsls	r1, r3, #27
 8010318:	d407      	bmi.n	801032a <__swsetup_r+0x32>
 801031a:	2309      	movs	r3, #9
 801031c:	602b      	str	r3, [r5, #0]
 801031e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010322:	81a3      	strh	r3, [r4, #12]
 8010324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010328:	e034      	b.n	8010394 <__swsetup_r+0x9c>
 801032a:	0758      	lsls	r0, r3, #29
 801032c:	d512      	bpl.n	8010354 <__swsetup_r+0x5c>
 801032e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010330:	b141      	cbz	r1, 8010344 <__swsetup_r+0x4c>
 8010332:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8010336:	4299      	cmp	r1, r3
 8010338:	d002      	beq.n	8010340 <__swsetup_r+0x48>
 801033a:	4628      	mov	r0, r5
 801033c:	f7fd fae4 	bl	800d908 <_free_r>
 8010340:	2300      	movs	r3, #0
 8010342:	6323      	str	r3, [r4, #48]	; 0x30
 8010344:	89a3      	ldrh	r3, [r4, #12]
 8010346:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801034a:	81a3      	strh	r3, [r4, #12]
 801034c:	2300      	movs	r3, #0
 801034e:	6063      	str	r3, [r4, #4]
 8010350:	6923      	ldr	r3, [r4, #16]
 8010352:	6023      	str	r3, [r4, #0]
 8010354:	89a3      	ldrh	r3, [r4, #12]
 8010356:	f043 0308 	orr.w	r3, r3, #8
 801035a:	81a3      	strh	r3, [r4, #12]
 801035c:	6923      	ldr	r3, [r4, #16]
 801035e:	b94b      	cbnz	r3, 8010374 <__swsetup_r+0x7c>
 8010360:	89a3      	ldrh	r3, [r4, #12]
 8010362:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801036a:	d003      	beq.n	8010374 <__swsetup_r+0x7c>
 801036c:	4621      	mov	r1, r4
 801036e:	4628      	mov	r0, r5
 8010370:	f001 fc86 	bl	8011c80 <__smakebuf_r>
 8010374:	89a0      	ldrh	r0, [r4, #12]
 8010376:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801037a:	f010 0301 	ands.w	r3, r0, #1
 801037e:	d00a      	beq.n	8010396 <__swsetup_r+0x9e>
 8010380:	2300      	movs	r3, #0
 8010382:	60a3      	str	r3, [r4, #8]
 8010384:	6963      	ldr	r3, [r4, #20]
 8010386:	425b      	negs	r3, r3
 8010388:	61a3      	str	r3, [r4, #24]
 801038a:	6923      	ldr	r3, [r4, #16]
 801038c:	b943      	cbnz	r3, 80103a0 <__swsetup_r+0xa8>
 801038e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010392:	d1c4      	bne.n	801031e <__swsetup_r+0x26>
 8010394:	bd38      	pop	{r3, r4, r5, pc}
 8010396:	0781      	lsls	r1, r0, #30
 8010398:	bf58      	it	pl
 801039a:	6963      	ldrpl	r3, [r4, #20]
 801039c:	60a3      	str	r3, [r4, #8]
 801039e:	e7f4      	b.n	801038a <__swsetup_r+0x92>
 80103a0:	2000      	movs	r0, #0
 80103a2:	e7f7      	b.n	8010394 <__swsetup_r+0x9c>
 80103a4:	24000238 	.word	0x24000238

080103a8 <__fputwc>:
 80103a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80103ac:	4680      	mov	r8, r0
 80103ae:	460e      	mov	r6, r1
 80103b0:	4615      	mov	r5, r2
 80103b2:	f000 f891 	bl	80104d8 <__locale_mb_cur_max>
 80103b6:	2801      	cmp	r0, #1
 80103b8:	d11c      	bne.n	80103f4 <__fputwc+0x4c>
 80103ba:	1e73      	subs	r3, r6, #1
 80103bc:	2bfe      	cmp	r3, #254	; 0xfe
 80103be:	d819      	bhi.n	80103f4 <__fputwc+0x4c>
 80103c0:	f88d 6004 	strb.w	r6, [sp, #4]
 80103c4:	4604      	mov	r4, r0
 80103c6:	2700      	movs	r7, #0
 80103c8:	f10d 0904 	add.w	r9, sp, #4
 80103cc:	42a7      	cmp	r7, r4
 80103ce:	d020      	beq.n	8010412 <__fputwc+0x6a>
 80103d0:	68ab      	ldr	r3, [r5, #8]
 80103d2:	f817 1009 	ldrb.w	r1, [r7, r9]
 80103d6:	3b01      	subs	r3, #1
 80103d8:	2b00      	cmp	r3, #0
 80103da:	60ab      	str	r3, [r5, #8]
 80103dc:	da04      	bge.n	80103e8 <__fputwc+0x40>
 80103de:	69aa      	ldr	r2, [r5, #24]
 80103e0:	4293      	cmp	r3, r2
 80103e2:	db1a      	blt.n	801041a <__fputwc+0x72>
 80103e4:	290a      	cmp	r1, #10
 80103e6:	d018      	beq.n	801041a <__fputwc+0x72>
 80103e8:	682b      	ldr	r3, [r5, #0]
 80103ea:	1c5a      	adds	r2, r3, #1
 80103ec:	602a      	str	r2, [r5, #0]
 80103ee:	7019      	strb	r1, [r3, #0]
 80103f0:	3701      	adds	r7, #1
 80103f2:	e7eb      	b.n	80103cc <__fputwc+0x24>
 80103f4:	a901      	add	r1, sp, #4
 80103f6:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 80103fa:	4632      	mov	r2, r6
 80103fc:	4640      	mov	r0, r8
 80103fe:	f001 fc01 	bl	8011c04 <_wcrtomb_r>
 8010402:	1c41      	adds	r1, r0, #1
 8010404:	4604      	mov	r4, r0
 8010406:	d1de      	bne.n	80103c6 <__fputwc+0x1e>
 8010408:	89ab      	ldrh	r3, [r5, #12]
 801040a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801040e:	81ab      	strh	r3, [r5, #12]
 8010410:	4606      	mov	r6, r0
 8010412:	4630      	mov	r0, r6
 8010414:	b003      	add	sp, #12
 8010416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801041a:	462a      	mov	r2, r5
 801041c:	4640      	mov	r0, r8
 801041e:	f7ff ff21 	bl	8010264 <__swbuf_r>
 8010422:	1c42      	adds	r2, r0, #1
 8010424:	d1e4      	bne.n	80103f0 <__fputwc+0x48>
 8010426:	4606      	mov	r6, r0
 8010428:	e7f3      	b.n	8010412 <__fputwc+0x6a>

0801042a <_fputwc_r>:
 801042a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801042c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801042e:	4614      	mov	r4, r2
 8010430:	07da      	lsls	r2, r3, #31
 8010432:	4605      	mov	r5, r0
 8010434:	d407      	bmi.n	8010446 <_fputwc_r+0x1c>
 8010436:	89a3      	ldrh	r3, [r4, #12]
 8010438:	059b      	lsls	r3, r3, #22
 801043a:	d404      	bmi.n	8010446 <_fputwc_r+0x1c>
 801043c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801043e:	9101      	str	r1, [sp, #4]
 8010440:	f7fd f9fc 	bl	800d83c <__retarget_lock_acquire_recursive>
 8010444:	9901      	ldr	r1, [sp, #4]
 8010446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801044a:	0498      	lsls	r0, r3, #18
 801044c:	d406      	bmi.n	801045c <_fputwc_r+0x32>
 801044e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010452:	81a3      	strh	r3, [r4, #12]
 8010454:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010456:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801045a:	6663      	str	r3, [r4, #100]	; 0x64
 801045c:	4622      	mov	r2, r4
 801045e:	4628      	mov	r0, r5
 8010460:	f7ff ffa2 	bl	80103a8 <__fputwc>
 8010464:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010466:	07da      	lsls	r2, r3, #31
 8010468:	4605      	mov	r5, r0
 801046a:	d405      	bmi.n	8010478 <_fputwc_r+0x4e>
 801046c:	89a3      	ldrh	r3, [r4, #12]
 801046e:	059b      	lsls	r3, r3, #22
 8010470:	d402      	bmi.n	8010478 <_fputwc_r+0x4e>
 8010472:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010474:	f7fd f9e3 	bl	800d83e <__retarget_lock_release_recursive>
 8010478:	4628      	mov	r0, r5
 801047a:	b003      	add	sp, #12
 801047c:	bd30      	pop	{r4, r5, pc}

0801047e <memmove>:
 801047e:	4288      	cmp	r0, r1
 8010480:	b510      	push	{r4, lr}
 8010482:	eb01 0402 	add.w	r4, r1, r2
 8010486:	d902      	bls.n	801048e <memmove+0x10>
 8010488:	4284      	cmp	r4, r0
 801048a:	4623      	mov	r3, r4
 801048c:	d807      	bhi.n	801049e <memmove+0x20>
 801048e:	1e43      	subs	r3, r0, #1
 8010490:	42a1      	cmp	r1, r4
 8010492:	d008      	beq.n	80104a6 <memmove+0x28>
 8010494:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010498:	f803 2f01 	strb.w	r2, [r3, #1]!
 801049c:	e7f8      	b.n	8010490 <memmove+0x12>
 801049e:	4402      	add	r2, r0
 80104a0:	4601      	mov	r1, r0
 80104a2:	428a      	cmp	r2, r1
 80104a4:	d100      	bne.n	80104a8 <memmove+0x2a>
 80104a6:	bd10      	pop	{r4, pc}
 80104a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80104ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80104b0:	e7f7      	b.n	80104a2 <memmove+0x24>

080104b2 <strncpy>:
 80104b2:	b510      	push	{r4, lr}
 80104b4:	3901      	subs	r1, #1
 80104b6:	4603      	mov	r3, r0
 80104b8:	b132      	cbz	r2, 80104c8 <strncpy+0x16>
 80104ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80104be:	f803 4b01 	strb.w	r4, [r3], #1
 80104c2:	3a01      	subs	r2, #1
 80104c4:	2c00      	cmp	r4, #0
 80104c6:	d1f7      	bne.n	80104b8 <strncpy+0x6>
 80104c8:	441a      	add	r2, r3
 80104ca:	2100      	movs	r1, #0
 80104cc:	4293      	cmp	r3, r2
 80104ce:	d100      	bne.n	80104d2 <strncpy+0x20>
 80104d0:	bd10      	pop	{r4, pc}
 80104d2:	f803 1b01 	strb.w	r1, [r3], #1
 80104d6:	e7f9      	b.n	80104cc <strncpy+0x1a>

080104d8 <__locale_mb_cur_max>:
 80104d8:	4b01      	ldr	r3, [pc, #4]	; (80104e0 <__locale_mb_cur_max+0x8>)
 80104da:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80104de:	4770      	bx	lr
 80104e0:	24000650 	.word	0x24000650

080104e4 <_localeconv_r>:
 80104e4:	4800      	ldr	r0, [pc, #0]	; (80104e8 <_localeconv_r+0x4>)
 80104e6:	4770      	bx	lr
 80104e8:	24000740 	.word	0x24000740

080104ec <_sbrk_r>:
 80104ec:	b538      	push	{r3, r4, r5, lr}
 80104ee:	4d06      	ldr	r5, [pc, #24]	; (8010508 <_sbrk_r+0x1c>)
 80104f0:	2300      	movs	r3, #0
 80104f2:	4604      	mov	r4, r0
 80104f4:	4608      	mov	r0, r1
 80104f6:	602b      	str	r3, [r5, #0]
 80104f8:	f7f0 fed0 	bl	800129c <_sbrk>
 80104fc:	1c43      	adds	r3, r0, #1
 80104fe:	d102      	bne.n	8010506 <_sbrk_r+0x1a>
 8010500:	682b      	ldr	r3, [r5, #0]
 8010502:	b103      	cbz	r3, 8010506 <_sbrk_r+0x1a>
 8010504:	6023      	str	r3, [r4, #0]
 8010506:	bd38      	pop	{r3, r4, r5, pc}
 8010508:	24002f5c 	.word	0x24002f5c

0801050c <__libc_fini_array>:
 801050c:	b538      	push	{r3, r4, r5, lr}
 801050e:	4d07      	ldr	r5, [pc, #28]	; (801052c <__libc_fini_array+0x20>)
 8010510:	4c07      	ldr	r4, [pc, #28]	; (8010530 <__libc_fini_array+0x24>)
 8010512:	1b64      	subs	r4, r4, r5
 8010514:	10a4      	asrs	r4, r4, #2
 8010516:	b91c      	cbnz	r4, 8010520 <__libc_fini_array+0x14>
 8010518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801051c:	f001 bcc6 	b.w	8011eac <_fini>
 8010520:	3c01      	subs	r4, #1
 8010522:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8010526:	4798      	blx	r3
 8010528:	e7f5      	b.n	8010516 <__libc_fini_array+0xa>
 801052a:	bf00      	nop
 801052c:	08012364 	.word	0x08012364
 8010530:	08012368 	.word	0x08012368

08010534 <sysconf>:
 8010534:	2808      	cmp	r0, #8
 8010536:	b508      	push	{r3, lr}
 8010538:	d006      	beq.n	8010548 <sysconf+0x14>
 801053a:	f7fd f953 	bl	800d7e4 <__errno>
 801053e:	2316      	movs	r3, #22
 8010540:	6003      	str	r3, [r0, #0]
 8010542:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010546:	bd08      	pop	{r3, pc}
 8010548:	2080      	movs	r0, #128	; 0x80
 801054a:	e7fc      	b.n	8010546 <sysconf+0x12>

0801054c <memcpy>:
 801054c:	440a      	add	r2, r1
 801054e:	4291      	cmp	r1, r2
 8010550:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010554:	d100      	bne.n	8010558 <memcpy+0xc>
 8010556:	4770      	bx	lr
 8010558:	b510      	push	{r4, lr}
 801055a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801055e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010562:	4291      	cmp	r1, r2
 8010564:	d1f9      	bne.n	801055a <memcpy+0xe>
 8010566:	bd10      	pop	{r4, pc}

08010568 <frexp>:
 8010568:	2200      	movs	r2, #0
 801056a:	ee10 1a90 	vmov	r1, s1
 801056e:	6002      	str	r2, [r0, #0]
 8010570:	4a17      	ldr	r2, [pc, #92]	; (80105d0 <frexp+0x68>)
 8010572:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010576:	4293      	cmp	r3, r2
 8010578:	dc23      	bgt.n	80105c2 <frexp+0x5a>
 801057a:	ee10 2a10 	vmov	r2, s0
 801057e:	431a      	orrs	r2, r3
 8010580:	d01f      	beq.n	80105c2 <frexp+0x5a>
 8010582:	4a14      	ldr	r2, [pc, #80]	; (80105d4 <frexp+0x6c>)
 8010584:	400a      	ands	r2, r1
 8010586:	b952      	cbnz	r2, 801059e <frexp+0x36>
 8010588:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80105c8 <frexp+0x60>
 801058c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010590:	ee10 1a90 	vmov	r1, s1
 8010594:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8010598:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801059c:	6002      	str	r2, [r0, #0]
 801059e:	6802      	ldr	r2, [r0, #0]
 80105a0:	151b      	asrs	r3, r3, #20
 80105a2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80105a6:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80105aa:	441a      	add	r2, r3
 80105ac:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80105b0:	6002      	str	r2, [r0, #0]
 80105b2:	ec53 2b10 	vmov	r2, r3, d0
 80105b6:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 80105ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80105be:	ec43 2b10 	vmov	d0, r2, r3
 80105c2:	4770      	bx	lr
 80105c4:	f3af 8000 	nop.w
 80105c8:	00000000 	.word	0x00000000
 80105cc:	43500000 	.word	0x43500000
 80105d0:	7fefffff 	.word	0x7fefffff
 80105d4:	7ff00000 	.word	0x7ff00000

080105d8 <__register_exitproc>:
 80105d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105dc:	f8df a074 	ldr.w	sl, [pc, #116]	; 8010654 <__register_exitproc+0x7c>
 80105e0:	4606      	mov	r6, r0
 80105e2:	f8da 0000 	ldr.w	r0, [sl]
 80105e6:	4698      	mov	r8, r3
 80105e8:	460f      	mov	r7, r1
 80105ea:	4691      	mov	r9, r2
 80105ec:	f7fd f926 	bl	800d83c <__retarget_lock_acquire_recursive>
 80105f0:	4b16      	ldr	r3, [pc, #88]	; (801064c <__register_exitproc+0x74>)
 80105f2:	681c      	ldr	r4, [r3, #0]
 80105f4:	b90c      	cbnz	r4, 80105fa <__register_exitproc+0x22>
 80105f6:	4c16      	ldr	r4, [pc, #88]	; (8010650 <__register_exitproc+0x78>)
 80105f8:	601c      	str	r4, [r3, #0]
 80105fa:	6865      	ldr	r5, [r4, #4]
 80105fc:	f8da 0000 	ldr.w	r0, [sl]
 8010600:	2d1f      	cmp	r5, #31
 8010602:	dd05      	ble.n	8010610 <__register_exitproc+0x38>
 8010604:	f7fd f91b 	bl	800d83e <__retarget_lock_release_recursive>
 8010608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801060c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010610:	b19e      	cbz	r6, 801063a <__register_exitproc+0x62>
 8010612:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8010616:	2201      	movs	r2, #1
 8010618:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801061c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8010620:	40aa      	lsls	r2, r5
 8010622:	4313      	orrs	r3, r2
 8010624:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8010628:	2e02      	cmp	r6, #2
 801062a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801062e:	bf02      	ittt	eq
 8010630:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8010634:	4313      	orreq	r3, r2
 8010636:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801063a:	1c6b      	adds	r3, r5, #1
 801063c:	3502      	adds	r5, #2
 801063e:	6063      	str	r3, [r4, #4]
 8010640:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8010644:	f7fd f8fb 	bl	800d83e <__retarget_lock_release_recursive>
 8010648:	2000      	movs	r0, #0
 801064a:	e7df      	b.n	801060c <__register_exitproc+0x34>
 801064c:	24002f64 	.word	0x24002f64
 8010650:	24002f9c 	.word	0x24002f9c
 8010654:	2400023c 	.word	0x2400023c

08010658 <quorem>:
 8010658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801065c:	6903      	ldr	r3, [r0, #16]
 801065e:	690c      	ldr	r4, [r1, #16]
 8010660:	42a3      	cmp	r3, r4
 8010662:	4607      	mov	r7, r0
 8010664:	db7e      	blt.n	8010764 <quorem+0x10c>
 8010666:	3c01      	subs	r4, #1
 8010668:	f101 0814 	add.w	r8, r1, #20
 801066c:	f100 0514 	add.w	r5, r0, #20
 8010670:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010674:	9301      	str	r3, [sp, #4]
 8010676:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801067a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801067e:	3301      	adds	r3, #1
 8010680:	429a      	cmp	r2, r3
 8010682:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010686:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801068a:	fbb2 f6f3 	udiv	r6, r2, r3
 801068e:	d331      	bcc.n	80106f4 <quorem+0x9c>
 8010690:	f04f 0e00 	mov.w	lr, #0
 8010694:	4640      	mov	r0, r8
 8010696:	46ac      	mov	ip, r5
 8010698:	46f2      	mov	sl, lr
 801069a:	f850 2b04 	ldr.w	r2, [r0], #4
 801069e:	b293      	uxth	r3, r2
 80106a0:	fb06 e303 	mla	r3, r6, r3, lr
 80106a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80106a8:	0c1a      	lsrs	r2, r3, #16
 80106aa:	b29b      	uxth	r3, r3
 80106ac:	ebaa 0303 	sub.w	r3, sl, r3
 80106b0:	f8dc a000 	ldr.w	sl, [ip]
 80106b4:	fa13 f38a 	uxtah	r3, r3, sl
 80106b8:	fb06 220e 	mla	r2, r6, lr, r2
 80106bc:	9300      	str	r3, [sp, #0]
 80106be:	9b00      	ldr	r3, [sp, #0]
 80106c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80106c4:	b292      	uxth	r2, r2
 80106c6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80106ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80106ce:	f8bd 3000 	ldrh.w	r3, [sp]
 80106d2:	4581      	cmp	r9, r0
 80106d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80106d8:	f84c 3b04 	str.w	r3, [ip], #4
 80106dc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80106e0:	d2db      	bcs.n	801069a <quorem+0x42>
 80106e2:	f855 300b 	ldr.w	r3, [r5, fp]
 80106e6:	b92b      	cbnz	r3, 80106f4 <quorem+0x9c>
 80106e8:	9b01      	ldr	r3, [sp, #4]
 80106ea:	3b04      	subs	r3, #4
 80106ec:	429d      	cmp	r5, r3
 80106ee:	461a      	mov	r2, r3
 80106f0:	d32c      	bcc.n	801074c <quorem+0xf4>
 80106f2:	613c      	str	r4, [r7, #16]
 80106f4:	4638      	mov	r0, r7
 80106f6:	f000 ffcf 	bl	8011698 <__mcmp>
 80106fa:	2800      	cmp	r0, #0
 80106fc:	db22      	blt.n	8010744 <quorem+0xec>
 80106fe:	3601      	adds	r6, #1
 8010700:	4629      	mov	r1, r5
 8010702:	2000      	movs	r0, #0
 8010704:	f858 2b04 	ldr.w	r2, [r8], #4
 8010708:	f8d1 c000 	ldr.w	ip, [r1]
 801070c:	b293      	uxth	r3, r2
 801070e:	1ac3      	subs	r3, r0, r3
 8010710:	0c12      	lsrs	r2, r2, #16
 8010712:	fa13 f38c 	uxtah	r3, r3, ip
 8010716:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801071a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801071e:	b29b      	uxth	r3, r3
 8010720:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010724:	45c1      	cmp	r9, r8
 8010726:	f841 3b04 	str.w	r3, [r1], #4
 801072a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801072e:	d2e9      	bcs.n	8010704 <quorem+0xac>
 8010730:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010734:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010738:	b922      	cbnz	r2, 8010744 <quorem+0xec>
 801073a:	3b04      	subs	r3, #4
 801073c:	429d      	cmp	r5, r3
 801073e:	461a      	mov	r2, r3
 8010740:	d30a      	bcc.n	8010758 <quorem+0x100>
 8010742:	613c      	str	r4, [r7, #16]
 8010744:	4630      	mov	r0, r6
 8010746:	b003      	add	sp, #12
 8010748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801074c:	6812      	ldr	r2, [r2, #0]
 801074e:	3b04      	subs	r3, #4
 8010750:	2a00      	cmp	r2, #0
 8010752:	d1ce      	bne.n	80106f2 <quorem+0x9a>
 8010754:	3c01      	subs	r4, #1
 8010756:	e7c9      	b.n	80106ec <quorem+0x94>
 8010758:	6812      	ldr	r2, [r2, #0]
 801075a:	3b04      	subs	r3, #4
 801075c:	2a00      	cmp	r2, #0
 801075e:	d1f0      	bne.n	8010742 <quorem+0xea>
 8010760:	3c01      	subs	r4, #1
 8010762:	e7eb      	b.n	801073c <quorem+0xe4>
 8010764:	2000      	movs	r0, #0
 8010766:	e7ee      	b.n	8010746 <quorem+0xee>

08010768 <_dtoa_r>:
 8010768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801076c:	ed2d 8b02 	vpush	{d8}
 8010770:	b091      	sub	sp, #68	; 0x44
 8010772:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010776:	9106      	str	r1, [sp, #24]
 8010778:	6b81      	ldr	r1, [r0, #56]	; 0x38
 801077a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801077c:	9208      	str	r2, [sp, #32]
 801077e:	ec59 8b10 	vmov	r8, r9, d0
 8010782:	4606      	mov	r6, r0
 8010784:	930c      	str	r3, [sp, #48]	; 0x30
 8010786:	b141      	cbz	r1, 801079a <_dtoa_r+0x32>
 8010788:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801078a:	604a      	str	r2, [r1, #4]
 801078c:	2301      	movs	r3, #1
 801078e:	4093      	lsls	r3, r2
 8010790:	608b      	str	r3, [r1, #8]
 8010792:	f000 fd78 	bl	8011286 <_Bfree>
 8010796:	2300      	movs	r3, #0
 8010798:	63b3      	str	r3, [r6, #56]	; 0x38
 801079a:	f1b9 0300 	subs.w	r3, r9, #0
 801079e:	bfbb      	ittet	lt
 80107a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80107a4:	9303      	strlt	r3, [sp, #12]
 80107a6:	2300      	movge	r3, #0
 80107a8:	2201      	movlt	r2, #1
 80107aa:	bfac      	ite	ge
 80107ac:	6023      	strge	r3, [r4, #0]
 80107ae:	6022      	strlt	r2, [r4, #0]
 80107b0:	4b97      	ldr	r3, [pc, #604]	; (8010a10 <_dtoa_r+0x2a8>)
 80107b2:	9c03      	ldr	r4, [sp, #12]
 80107b4:	43a3      	bics	r3, r4
 80107b6:	d11c      	bne.n	80107f2 <_dtoa_r+0x8a>
 80107b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80107ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80107be:	6013      	str	r3, [r2, #0]
 80107c0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80107c4:	ea53 0308 	orrs.w	r3, r3, r8
 80107c8:	f000 84fa 	beq.w	80111c0 <_dtoa_r+0xa58>
 80107cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80107ce:	b90b      	cbnz	r3, 80107d4 <_dtoa_r+0x6c>
 80107d0:	4b90      	ldr	r3, [pc, #576]	; (8010a14 <_dtoa_r+0x2ac>)
 80107d2:	e020      	b.n	8010816 <_dtoa_r+0xae>
 80107d4:	4b8f      	ldr	r3, [pc, #572]	; (8010a14 <_dtoa_r+0x2ac>)
 80107d6:	9301      	str	r3, [sp, #4]
 80107d8:	3303      	adds	r3, #3
 80107da:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80107dc:	6013      	str	r3, [r2, #0]
 80107de:	9801      	ldr	r0, [sp, #4]
 80107e0:	b011      	add	sp, #68	; 0x44
 80107e2:	ecbd 8b02 	vpop	{d8}
 80107e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ea:	4b8b      	ldr	r3, [pc, #556]	; (8010a18 <_dtoa_r+0x2b0>)
 80107ec:	9301      	str	r3, [sp, #4]
 80107ee:	3308      	adds	r3, #8
 80107f0:	e7f3      	b.n	80107da <_dtoa_r+0x72>
 80107f2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80107f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80107fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107fe:	d10c      	bne.n	801081a <_dtoa_r+0xb2>
 8010800:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010802:	2301      	movs	r3, #1
 8010804:	6013      	str	r3, [r2, #0]
 8010806:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010808:	2b00      	cmp	r3, #0
 801080a:	f000 84d6 	beq.w	80111ba <_dtoa_r+0xa52>
 801080e:	4b83      	ldr	r3, [pc, #524]	; (8010a1c <_dtoa_r+0x2b4>)
 8010810:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010812:	6013      	str	r3, [r2, #0]
 8010814:	3b01      	subs	r3, #1
 8010816:	9301      	str	r3, [sp, #4]
 8010818:	e7e1      	b.n	80107de <_dtoa_r+0x76>
 801081a:	aa0e      	add	r2, sp, #56	; 0x38
 801081c:	a90f      	add	r1, sp, #60	; 0x3c
 801081e:	4630      	mov	r0, r6
 8010820:	eeb0 0b48 	vmov.f64	d0, d8
 8010824:	f000 ffde 	bl	80117e4 <__d2b>
 8010828:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801082c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801082e:	4605      	mov	r5, r0
 8010830:	2b00      	cmp	r3, #0
 8010832:	d046      	beq.n	80108c2 <_dtoa_r+0x15a>
 8010834:	eeb0 7b48 	vmov.f64	d7, d8
 8010838:	ee18 1a90 	vmov	r1, s17
 801083c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010840:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8010844:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8010848:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801084c:	2000      	movs	r0, #0
 801084e:	ee07 1a90 	vmov	s15, r1
 8010852:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8010856:	ed9f 5b68 	vldr	d5, [pc, #416]	; 80109f8 <_dtoa_r+0x290>
 801085a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801085e:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8010a00 <_dtoa_r+0x298>
 8010862:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010866:	ed9f 5b68 	vldr	d5, [pc, #416]	; 8010a08 <_dtoa_r+0x2a0>
 801086a:	ee07 3a90 	vmov	s15, r3
 801086e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8010872:	eeb0 7b46 	vmov.f64	d7, d6
 8010876:	eea4 7b05 	vfma.f64	d7, d4, d5
 801087a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801087e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010886:	ee16 ba90 	vmov	fp, s13
 801088a:	9009      	str	r0, [sp, #36]	; 0x24
 801088c:	d508      	bpl.n	80108a0 <_dtoa_r+0x138>
 801088e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010892:	eeb4 6b47 	vcmp.f64	d6, d7
 8010896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801089a:	bf18      	it	ne
 801089c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 80108a0:	f1bb 0f16 	cmp.w	fp, #22
 80108a4:	d82b      	bhi.n	80108fe <_dtoa_r+0x196>
 80108a6:	495e      	ldr	r1, [pc, #376]	; (8010a20 <_dtoa_r+0x2b8>)
 80108a8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80108ac:	ed91 7b00 	vldr	d7, [r1]
 80108b0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80108b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108b8:	d501      	bpl.n	80108be <_dtoa_r+0x156>
 80108ba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80108be:	2100      	movs	r1, #0
 80108c0:	e01e      	b.n	8010900 <_dtoa_r+0x198>
 80108c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80108c4:	4413      	add	r3, r2
 80108c6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80108ca:	2920      	cmp	r1, #32
 80108cc:	bfc1      	itttt	gt
 80108ce:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80108d2:	408c      	lslgt	r4, r1
 80108d4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80108d8:	fa28 f101 	lsrgt.w	r1, r8, r1
 80108dc:	bfd6      	itet	le
 80108de:	f1c1 0120 	rsble	r1, r1, #32
 80108e2:	4321      	orrgt	r1, r4
 80108e4:	fa08 f101 	lslle.w	r1, r8, r1
 80108e8:	ee07 1a90 	vmov	s15, r1
 80108ec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80108f0:	3b01      	subs	r3, #1
 80108f2:	ee17 1a90 	vmov	r1, s15
 80108f6:	2001      	movs	r0, #1
 80108f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80108fc:	e7a7      	b.n	801084e <_dtoa_r+0xe6>
 80108fe:	2101      	movs	r1, #1
 8010900:	1ad2      	subs	r2, r2, r3
 8010902:	1e53      	subs	r3, r2, #1
 8010904:	9305      	str	r3, [sp, #20]
 8010906:	bf45      	ittet	mi
 8010908:	f1c2 0301 	rsbmi	r3, r2, #1
 801090c:	9304      	strmi	r3, [sp, #16]
 801090e:	2300      	movpl	r3, #0
 8010910:	2300      	movmi	r3, #0
 8010912:	bf4c      	ite	mi
 8010914:	9305      	strmi	r3, [sp, #20]
 8010916:	9304      	strpl	r3, [sp, #16]
 8010918:	f1bb 0f00 	cmp.w	fp, #0
 801091c:	910b      	str	r1, [sp, #44]	; 0x2c
 801091e:	db18      	blt.n	8010952 <_dtoa_r+0x1ea>
 8010920:	9b05      	ldr	r3, [sp, #20]
 8010922:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8010926:	445b      	add	r3, fp
 8010928:	9305      	str	r3, [sp, #20]
 801092a:	2300      	movs	r3, #0
 801092c:	9a06      	ldr	r2, [sp, #24]
 801092e:	2a09      	cmp	r2, #9
 8010930:	d849      	bhi.n	80109c6 <_dtoa_r+0x25e>
 8010932:	2a05      	cmp	r2, #5
 8010934:	bfc4      	itt	gt
 8010936:	3a04      	subgt	r2, #4
 8010938:	9206      	strgt	r2, [sp, #24]
 801093a:	9a06      	ldr	r2, [sp, #24]
 801093c:	f1a2 0202 	sub.w	r2, r2, #2
 8010940:	bfcc      	ite	gt
 8010942:	2400      	movgt	r4, #0
 8010944:	2401      	movle	r4, #1
 8010946:	2a03      	cmp	r2, #3
 8010948:	d848      	bhi.n	80109dc <_dtoa_r+0x274>
 801094a:	e8df f002 	tbb	[pc, r2]
 801094e:	2e0b      	.short	0x2e0b
 8010950:	3a2c      	.short	0x3a2c
 8010952:	9b04      	ldr	r3, [sp, #16]
 8010954:	2200      	movs	r2, #0
 8010956:	eba3 030b 	sub.w	r3, r3, fp
 801095a:	9304      	str	r3, [sp, #16]
 801095c:	920a      	str	r2, [sp, #40]	; 0x28
 801095e:	f1cb 0300 	rsb	r3, fp, #0
 8010962:	e7e3      	b.n	801092c <_dtoa_r+0x1c4>
 8010964:	2200      	movs	r2, #0
 8010966:	9207      	str	r2, [sp, #28]
 8010968:	9a08      	ldr	r2, [sp, #32]
 801096a:	2a00      	cmp	r2, #0
 801096c:	dc39      	bgt.n	80109e2 <_dtoa_r+0x27a>
 801096e:	f04f 0a01 	mov.w	sl, #1
 8010972:	46d1      	mov	r9, sl
 8010974:	4652      	mov	r2, sl
 8010976:	f8cd a020 	str.w	sl, [sp, #32]
 801097a:	2100      	movs	r1, #0
 801097c:	2004      	movs	r0, #4
 801097e:	f100 0714 	add.w	r7, r0, #20
 8010982:	4297      	cmp	r7, r2
 8010984:	d932      	bls.n	80109ec <_dtoa_r+0x284>
 8010986:	63f1      	str	r1, [r6, #60]	; 0x3c
 8010988:	4630      	mov	r0, r6
 801098a:	930d      	str	r3, [sp, #52]	; 0x34
 801098c:	f000 fc56 	bl	801123c <_Balloc>
 8010990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010992:	9001      	str	r0, [sp, #4]
 8010994:	4602      	mov	r2, r0
 8010996:	2800      	cmp	r0, #0
 8010998:	d148      	bne.n	8010a2c <_dtoa_r+0x2c4>
 801099a:	4b22      	ldr	r3, [pc, #136]	; (8010a24 <_dtoa_r+0x2bc>)
 801099c:	f240 11af 	movw	r1, #431	; 0x1af
 80109a0:	4821      	ldr	r0, [pc, #132]	; (8010a28 <_dtoa_r+0x2c0>)
 80109a2:	f001 f9cb 	bl	8011d3c <__assert_func>
 80109a6:	2201      	movs	r2, #1
 80109a8:	e7dd      	b.n	8010966 <_dtoa_r+0x1fe>
 80109aa:	2200      	movs	r2, #0
 80109ac:	9207      	str	r2, [sp, #28]
 80109ae:	9a08      	ldr	r2, [sp, #32]
 80109b0:	eb0b 0a02 	add.w	sl, fp, r2
 80109b4:	f10a 0901 	add.w	r9, sl, #1
 80109b8:	464a      	mov	r2, r9
 80109ba:	2a01      	cmp	r2, #1
 80109bc:	bfb8      	it	lt
 80109be:	2201      	movlt	r2, #1
 80109c0:	e7db      	b.n	801097a <_dtoa_r+0x212>
 80109c2:	2201      	movs	r2, #1
 80109c4:	e7f2      	b.n	80109ac <_dtoa_r+0x244>
 80109c6:	2401      	movs	r4, #1
 80109c8:	2200      	movs	r2, #0
 80109ca:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80109ce:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80109d2:	2100      	movs	r1, #0
 80109d4:	46d1      	mov	r9, sl
 80109d6:	2212      	movs	r2, #18
 80109d8:	9108      	str	r1, [sp, #32]
 80109da:	e7ce      	b.n	801097a <_dtoa_r+0x212>
 80109dc:	2201      	movs	r2, #1
 80109de:	9207      	str	r2, [sp, #28]
 80109e0:	e7f5      	b.n	80109ce <_dtoa_r+0x266>
 80109e2:	f8dd a020 	ldr.w	sl, [sp, #32]
 80109e6:	46d1      	mov	r9, sl
 80109e8:	4652      	mov	r2, sl
 80109ea:	e7c6      	b.n	801097a <_dtoa_r+0x212>
 80109ec:	3101      	adds	r1, #1
 80109ee:	0040      	lsls	r0, r0, #1
 80109f0:	e7c5      	b.n	801097e <_dtoa_r+0x216>
 80109f2:	bf00      	nop
 80109f4:	f3af 8000 	nop.w
 80109f8:	636f4361 	.word	0x636f4361
 80109fc:	3fd287a7 	.word	0x3fd287a7
 8010a00:	8b60c8b3 	.word	0x8b60c8b3
 8010a04:	3fc68a28 	.word	0x3fc68a28
 8010a08:	509f79fb 	.word	0x509f79fb
 8010a0c:	3fd34413 	.word	0x3fd34413
 8010a10:	7ff00000 	.word	0x7ff00000
 8010a14:	0801204f 	.word	0x0801204f
 8010a18:	08012046 	.word	0x08012046
 8010a1c:	08011ffb 	.word	0x08011ffb
 8010a20:	08012140 	.word	0x08012140
 8010a24:	08012053 	.word	0x08012053
 8010a28:	08012064 	.word	0x08012064
 8010a2c:	9a01      	ldr	r2, [sp, #4]
 8010a2e:	63b2      	str	r2, [r6, #56]	; 0x38
 8010a30:	f1b9 0f0e 	cmp.w	r9, #14
 8010a34:	d86c      	bhi.n	8010b10 <_dtoa_r+0x3a8>
 8010a36:	2c00      	cmp	r4, #0
 8010a38:	d06a      	beq.n	8010b10 <_dtoa_r+0x3a8>
 8010a3a:	f1bb 0f00 	cmp.w	fp, #0
 8010a3e:	f340 80a0 	ble.w	8010b82 <_dtoa_r+0x41a>
 8010a42:	4ac1      	ldr	r2, [pc, #772]	; (8010d48 <_dtoa_r+0x5e0>)
 8010a44:	f00b 010f 	and.w	r1, fp, #15
 8010a48:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010a4c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010a50:	ed92 7b00 	vldr	d7, [r2]
 8010a54:	ea4f 122b 	mov.w	r2, fp, asr #4
 8010a58:	f000 8087 	beq.w	8010b6a <_dtoa_r+0x402>
 8010a5c:	49bb      	ldr	r1, [pc, #748]	; (8010d4c <_dtoa_r+0x5e4>)
 8010a5e:	ed91 6b08 	vldr	d6, [r1, #32]
 8010a62:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010a66:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010a6a:	f002 020f 	and.w	r2, r2, #15
 8010a6e:	2103      	movs	r1, #3
 8010a70:	48b6      	ldr	r0, [pc, #728]	; (8010d4c <_dtoa_r+0x5e4>)
 8010a72:	2a00      	cmp	r2, #0
 8010a74:	d17b      	bne.n	8010b6e <_dtoa_r+0x406>
 8010a76:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010a7a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010a7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010a82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010a84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010a88:	2a00      	cmp	r2, #0
 8010a8a:	f000 80a0 	beq.w	8010bce <_dtoa_r+0x466>
 8010a8e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010a92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a9a:	f140 8098 	bpl.w	8010bce <_dtoa_r+0x466>
 8010a9e:	f1b9 0f00 	cmp.w	r9, #0
 8010aa2:	f000 8094 	beq.w	8010bce <_dtoa_r+0x466>
 8010aa6:	f1ba 0f00 	cmp.w	sl, #0
 8010aaa:	dd2f      	ble.n	8010b0c <_dtoa_r+0x3a4>
 8010aac:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010ab0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010ab4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010ab8:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8010abc:	3101      	adds	r1, #1
 8010abe:	4654      	mov	r4, sl
 8010ac0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010ac4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010ac8:	ee07 1a90 	vmov	s15, r1
 8010acc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010ad0:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010ad4:	ee15 7a90 	vmov	r7, s11
 8010ad8:	ec51 0b15 	vmov	r0, r1, d5
 8010adc:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8010ae0:	2c00      	cmp	r4, #0
 8010ae2:	d177      	bne.n	8010bd4 <_dtoa_r+0x46c>
 8010ae4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010ae8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010aec:	ec41 0b17 	vmov	d7, r0, r1
 8010af0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010af8:	f300 8269 	bgt.w	8010fce <_dtoa_r+0x866>
 8010afc:	eeb1 7b47 	vneg.f64	d7, d7
 8010b00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b08:	f100 825f 	bmi.w	8010fca <_dtoa_r+0x862>
 8010b0c:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010b10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010b12:	2a00      	cmp	r2, #0
 8010b14:	f2c0 811c 	blt.w	8010d50 <_dtoa_r+0x5e8>
 8010b18:	f1bb 0f0e 	cmp.w	fp, #14
 8010b1c:	f300 8118 	bgt.w	8010d50 <_dtoa_r+0x5e8>
 8010b20:	4b89      	ldr	r3, [pc, #548]	; (8010d48 <_dtoa_r+0x5e0>)
 8010b22:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010b26:	ed93 6b00 	vldr	d6, [r3]
 8010b2a:	9b08      	ldr	r3, [sp, #32]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	f280 80b7 	bge.w	8010ca0 <_dtoa_r+0x538>
 8010b32:	f1b9 0f00 	cmp.w	r9, #0
 8010b36:	f300 80b3 	bgt.w	8010ca0 <_dtoa_r+0x538>
 8010b3a:	f040 8245 	bne.w	8010fc8 <_dtoa_r+0x860>
 8010b3e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010b42:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010b46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010b4a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b52:	464c      	mov	r4, r9
 8010b54:	464f      	mov	r7, r9
 8010b56:	f280 821b 	bge.w	8010f90 <_dtoa_r+0x828>
 8010b5a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010b5e:	2331      	movs	r3, #49	; 0x31
 8010b60:	f808 3b01 	strb.w	r3, [r8], #1
 8010b64:	f10b 0b01 	add.w	fp, fp, #1
 8010b68:	e217      	b.n	8010f9a <_dtoa_r+0x832>
 8010b6a:	2102      	movs	r1, #2
 8010b6c:	e780      	b.n	8010a70 <_dtoa_r+0x308>
 8010b6e:	07d4      	lsls	r4, r2, #31
 8010b70:	d504      	bpl.n	8010b7c <_dtoa_r+0x414>
 8010b72:	ed90 6b00 	vldr	d6, [r0]
 8010b76:	3101      	adds	r1, #1
 8010b78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010b7c:	1052      	asrs	r2, r2, #1
 8010b7e:	3008      	adds	r0, #8
 8010b80:	e777      	b.n	8010a72 <_dtoa_r+0x30a>
 8010b82:	d022      	beq.n	8010bca <_dtoa_r+0x462>
 8010b84:	f1cb 0200 	rsb	r2, fp, #0
 8010b88:	496f      	ldr	r1, [pc, #444]	; (8010d48 <_dtoa_r+0x5e0>)
 8010b8a:	f002 000f 	and.w	r0, r2, #15
 8010b8e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010b92:	ed91 7b00 	vldr	d7, [r1]
 8010b96:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010b9a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010b9e:	486b      	ldr	r0, [pc, #428]	; (8010d4c <_dtoa_r+0x5e4>)
 8010ba0:	1112      	asrs	r2, r2, #4
 8010ba2:	2400      	movs	r4, #0
 8010ba4:	2102      	movs	r1, #2
 8010ba6:	b92a      	cbnz	r2, 8010bb4 <_dtoa_r+0x44c>
 8010ba8:	2c00      	cmp	r4, #0
 8010baa:	f43f af6a 	beq.w	8010a82 <_dtoa_r+0x31a>
 8010bae:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010bb2:	e766      	b.n	8010a82 <_dtoa_r+0x31a>
 8010bb4:	07d7      	lsls	r7, r2, #31
 8010bb6:	d505      	bpl.n	8010bc4 <_dtoa_r+0x45c>
 8010bb8:	ed90 6b00 	vldr	d6, [r0]
 8010bbc:	3101      	adds	r1, #1
 8010bbe:	2401      	movs	r4, #1
 8010bc0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010bc4:	1052      	asrs	r2, r2, #1
 8010bc6:	3008      	adds	r0, #8
 8010bc8:	e7ed      	b.n	8010ba6 <_dtoa_r+0x43e>
 8010bca:	2102      	movs	r1, #2
 8010bcc:	e759      	b.n	8010a82 <_dtoa_r+0x31a>
 8010bce:	465a      	mov	r2, fp
 8010bd0:	464c      	mov	r4, r9
 8010bd2:	e775      	b.n	8010ac0 <_dtoa_r+0x358>
 8010bd4:	ec41 0b17 	vmov	d7, r0, r1
 8010bd8:	495b      	ldr	r1, [pc, #364]	; (8010d48 <_dtoa_r+0x5e0>)
 8010bda:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8010bde:	ed11 4b02 	vldr	d4, [r1, #-8]
 8010be2:	9901      	ldr	r1, [sp, #4]
 8010be4:	440c      	add	r4, r1
 8010be6:	9907      	ldr	r1, [sp, #28]
 8010be8:	b351      	cbz	r1, 8010c40 <_dtoa_r+0x4d8>
 8010bea:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010bee:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010bf2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010bf6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010bfa:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010bfe:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010c02:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010c06:	ee14 1a90 	vmov	r1, s9
 8010c0a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010c0e:	3130      	adds	r1, #48	; 0x30
 8010c10:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010c14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c1c:	f808 1b01 	strb.w	r1, [r8], #1
 8010c20:	d439      	bmi.n	8010c96 <_dtoa_r+0x52e>
 8010c22:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010c26:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c2e:	d472      	bmi.n	8010d16 <_dtoa_r+0x5ae>
 8010c30:	45a0      	cmp	r8, r4
 8010c32:	f43f af6b 	beq.w	8010b0c <_dtoa_r+0x3a4>
 8010c36:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010c3a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010c3e:	e7e0      	b.n	8010c02 <_dtoa_r+0x49a>
 8010c40:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010c44:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010c48:	4620      	mov	r0, r4
 8010c4a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010c4e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010c52:	ee14 1a90 	vmov	r1, s9
 8010c56:	3130      	adds	r1, #48	; 0x30
 8010c58:	f808 1b01 	strb.w	r1, [r8], #1
 8010c5c:	45a0      	cmp	r8, r4
 8010c5e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010c62:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010c66:	d118      	bne.n	8010c9a <_dtoa_r+0x532>
 8010c68:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010c6c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010c70:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c78:	dc4d      	bgt.n	8010d16 <_dtoa_r+0x5ae>
 8010c7a:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010c7e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c86:	f57f af41 	bpl.w	8010b0c <_dtoa_r+0x3a4>
 8010c8a:	4680      	mov	r8, r0
 8010c8c:	3801      	subs	r0, #1
 8010c8e:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8010c92:	2b30      	cmp	r3, #48	; 0x30
 8010c94:	d0f9      	beq.n	8010c8a <_dtoa_r+0x522>
 8010c96:	4693      	mov	fp, r2
 8010c98:	e02a      	b.n	8010cf0 <_dtoa_r+0x588>
 8010c9a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010c9e:	e7d6      	b.n	8010c4e <_dtoa_r+0x4e6>
 8010ca0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010ca4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8010ca8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010cac:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010cb0:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010cb4:	ee15 3a10 	vmov	r3, s10
 8010cb8:	3330      	adds	r3, #48	; 0x30
 8010cba:	f808 3b01 	strb.w	r3, [r8], #1
 8010cbe:	9b01      	ldr	r3, [sp, #4]
 8010cc0:	eba8 0303 	sub.w	r3, r8, r3
 8010cc4:	4599      	cmp	r9, r3
 8010cc6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010cca:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010cce:	d133      	bne.n	8010d38 <_dtoa_r+0x5d0>
 8010cd0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010cd4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cdc:	dc1a      	bgt.n	8010d14 <_dtoa_r+0x5ac>
 8010cde:	eeb4 7b46 	vcmp.f64	d7, d6
 8010ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ce6:	d103      	bne.n	8010cf0 <_dtoa_r+0x588>
 8010ce8:	ee15 3a10 	vmov	r3, s10
 8010cec:	07d9      	lsls	r1, r3, #31
 8010cee:	d411      	bmi.n	8010d14 <_dtoa_r+0x5ac>
 8010cf0:	4629      	mov	r1, r5
 8010cf2:	4630      	mov	r0, r6
 8010cf4:	f000 fac7 	bl	8011286 <_Bfree>
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010cfc:	f888 3000 	strb.w	r3, [r8]
 8010d00:	f10b 0301 	add.w	r3, fp, #1
 8010d04:	6013      	str	r3, [r2, #0]
 8010d06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	f43f ad68 	beq.w	80107de <_dtoa_r+0x76>
 8010d0e:	f8c3 8000 	str.w	r8, [r3]
 8010d12:	e564      	b.n	80107de <_dtoa_r+0x76>
 8010d14:	465a      	mov	r2, fp
 8010d16:	4643      	mov	r3, r8
 8010d18:	4698      	mov	r8, r3
 8010d1a:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8010d1e:	2939      	cmp	r1, #57	; 0x39
 8010d20:	d106      	bne.n	8010d30 <_dtoa_r+0x5c8>
 8010d22:	9901      	ldr	r1, [sp, #4]
 8010d24:	4299      	cmp	r1, r3
 8010d26:	d1f7      	bne.n	8010d18 <_dtoa_r+0x5b0>
 8010d28:	9801      	ldr	r0, [sp, #4]
 8010d2a:	2130      	movs	r1, #48	; 0x30
 8010d2c:	3201      	adds	r2, #1
 8010d2e:	7001      	strb	r1, [r0, #0]
 8010d30:	7819      	ldrb	r1, [r3, #0]
 8010d32:	3101      	adds	r1, #1
 8010d34:	7019      	strb	r1, [r3, #0]
 8010d36:	e7ae      	b.n	8010c96 <_dtoa_r+0x52e>
 8010d38:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010d3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d44:	d1b2      	bne.n	8010cac <_dtoa_r+0x544>
 8010d46:	e7d3      	b.n	8010cf0 <_dtoa_r+0x588>
 8010d48:	08012140 	.word	0x08012140
 8010d4c:	08012118 	.word	0x08012118
 8010d50:	9907      	ldr	r1, [sp, #28]
 8010d52:	2900      	cmp	r1, #0
 8010d54:	f000 80d0 	beq.w	8010ef8 <_dtoa_r+0x790>
 8010d58:	9906      	ldr	r1, [sp, #24]
 8010d5a:	2901      	cmp	r1, #1
 8010d5c:	f300 80b4 	bgt.w	8010ec8 <_dtoa_r+0x760>
 8010d60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d62:	2900      	cmp	r1, #0
 8010d64:	f000 80ac 	beq.w	8010ec0 <_dtoa_r+0x758>
 8010d68:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010d6c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010d70:	461c      	mov	r4, r3
 8010d72:	9309      	str	r3, [sp, #36]	; 0x24
 8010d74:	9b04      	ldr	r3, [sp, #16]
 8010d76:	4413      	add	r3, r2
 8010d78:	9304      	str	r3, [sp, #16]
 8010d7a:	9b05      	ldr	r3, [sp, #20]
 8010d7c:	2101      	movs	r1, #1
 8010d7e:	4413      	add	r3, r2
 8010d80:	4630      	mov	r0, r6
 8010d82:	9305      	str	r3, [sp, #20]
 8010d84:	f000 fb1c 	bl	80113c0 <__i2b>
 8010d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d8a:	4607      	mov	r7, r0
 8010d8c:	f1b8 0f00 	cmp.w	r8, #0
 8010d90:	d00d      	beq.n	8010dae <_dtoa_r+0x646>
 8010d92:	9a05      	ldr	r2, [sp, #20]
 8010d94:	2a00      	cmp	r2, #0
 8010d96:	dd0a      	ble.n	8010dae <_dtoa_r+0x646>
 8010d98:	4542      	cmp	r2, r8
 8010d9a:	9904      	ldr	r1, [sp, #16]
 8010d9c:	bfa8      	it	ge
 8010d9e:	4642      	movge	r2, r8
 8010da0:	1a89      	subs	r1, r1, r2
 8010da2:	9104      	str	r1, [sp, #16]
 8010da4:	9905      	ldr	r1, [sp, #20]
 8010da6:	eba8 0802 	sub.w	r8, r8, r2
 8010daa:	1a8a      	subs	r2, r1, r2
 8010dac:	9205      	str	r2, [sp, #20]
 8010dae:	b303      	cbz	r3, 8010df2 <_dtoa_r+0x68a>
 8010db0:	9a07      	ldr	r2, [sp, #28]
 8010db2:	2a00      	cmp	r2, #0
 8010db4:	f000 80a5 	beq.w	8010f02 <_dtoa_r+0x79a>
 8010db8:	2c00      	cmp	r4, #0
 8010dba:	dd13      	ble.n	8010de4 <_dtoa_r+0x67c>
 8010dbc:	4639      	mov	r1, r7
 8010dbe:	4622      	mov	r2, r4
 8010dc0:	4630      	mov	r0, r6
 8010dc2:	930d      	str	r3, [sp, #52]	; 0x34
 8010dc4:	f000 fbbc 	bl	8011540 <__pow5mult>
 8010dc8:	462a      	mov	r2, r5
 8010dca:	4601      	mov	r1, r0
 8010dcc:	4607      	mov	r7, r0
 8010dce:	4630      	mov	r0, r6
 8010dd0:	f000 fb0c 	bl	80113ec <__multiply>
 8010dd4:	4629      	mov	r1, r5
 8010dd6:	9009      	str	r0, [sp, #36]	; 0x24
 8010dd8:	4630      	mov	r0, r6
 8010dda:	f000 fa54 	bl	8011286 <_Bfree>
 8010dde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010de0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010de2:	4615      	mov	r5, r2
 8010de4:	1b1a      	subs	r2, r3, r4
 8010de6:	d004      	beq.n	8010df2 <_dtoa_r+0x68a>
 8010de8:	4629      	mov	r1, r5
 8010dea:	4630      	mov	r0, r6
 8010dec:	f000 fba8 	bl	8011540 <__pow5mult>
 8010df0:	4605      	mov	r5, r0
 8010df2:	2101      	movs	r1, #1
 8010df4:	4630      	mov	r0, r6
 8010df6:	f000 fae3 	bl	80113c0 <__i2b>
 8010dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	4604      	mov	r4, r0
 8010e00:	f340 8081 	ble.w	8010f06 <_dtoa_r+0x79e>
 8010e04:	461a      	mov	r2, r3
 8010e06:	4601      	mov	r1, r0
 8010e08:	4630      	mov	r0, r6
 8010e0a:	f000 fb99 	bl	8011540 <__pow5mult>
 8010e0e:	9b06      	ldr	r3, [sp, #24]
 8010e10:	2b01      	cmp	r3, #1
 8010e12:	4604      	mov	r4, r0
 8010e14:	dd7a      	ble.n	8010f0c <_dtoa_r+0x7a4>
 8010e16:	2300      	movs	r3, #0
 8010e18:	9309      	str	r3, [sp, #36]	; 0x24
 8010e1a:	6922      	ldr	r2, [r4, #16]
 8010e1c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010e20:	6910      	ldr	r0, [r2, #16]
 8010e22:	f000 fa7f 	bl	8011324 <__hi0bits>
 8010e26:	f1c0 0020 	rsb	r0, r0, #32
 8010e2a:	9b05      	ldr	r3, [sp, #20]
 8010e2c:	4418      	add	r0, r3
 8010e2e:	f010 001f 	ands.w	r0, r0, #31
 8010e32:	f000 8093 	beq.w	8010f5c <_dtoa_r+0x7f4>
 8010e36:	f1c0 0220 	rsb	r2, r0, #32
 8010e3a:	2a04      	cmp	r2, #4
 8010e3c:	f340 8085 	ble.w	8010f4a <_dtoa_r+0x7e2>
 8010e40:	9b04      	ldr	r3, [sp, #16]
 8010e42:	f1c0 001c 	rsb	r0, r0, #28
 8010e46:	4403      	add	r3, r0
 8010e48:	9304      	str	r3, [sp, #16]
 8010e4a:	9b05      	ldr	r3, [sp, #20]
 8010e4c:	4480      	add	r8, r0
 8010e4e:	4403      	add	r3, r0
 8010e50:	9305      	str	r3, [sp, #20]
 8010e52:	9b04      	ldr	r3, [sp, #16]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	dd05      	ble.n	8010e64 <_dtoa_r+0x6fc>
 8010e58:	4629      	mov	r1, r5
 8010e5a:	461a      	mov	r2, r3
 8010e5c:	4630      	mov	r0, r6
 8010e5e:	f000 fbaf 	bl	80115c0 <__lshift>
 8010e62:	4605      	mov	r5, r0
 8010e64:	9b05      	ldr	r3, [sp, #20]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	dd05      	ble.n	8010e76 <_dtoa_r+0x70e>
 8010e6a:	4621      	mov	r1, r4
 8010e6c:	461a      	mov	r2, r3
 8010e6e:	4630      	mov	r0, r6
 8010e70:	f000 fba6 	bl	80115c0 <__lshift>
 8010e74:	4604      	mov	r4, r0
 8010e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d071      	beq.n	8010f60 <_dtoa_r+0x7f8>
 8010e7c:	4621      	mov	r1, r4
 8010e7e:	4628      	mov	r0, r5
 8010e80:	f000 fc0a 	bl	8011698 <__mcmp>
 8010e84:	2800      	cmp	r0, #0
 8010e86:	da6b      	bge.n	8010f60 <_dtoa_r+0x7f8>
 8010e88:	2300      	movs	r3, #0
 8010e8a:	4629      	mov	r1, r5
 8010e8c:	220a      	movs	r2, #10
 8010e8e:	4630      	mov	r0, r6
 8010e90:	f000 fa02 	bl	8011298 <__multadd>
 8010e94:	9b07      	ldr	r3, [sp, #28]
 8010e96:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010e9a:	4605      	mov	r5, r0
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	f000 8196 	beq.w	80111ce <_dtoa_r+0xa66>
 8010ea2:	4639      	mov	r1, r7
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	220a      	movs	r2, #10
 8010ea8:	4630      	mov	r0, r6
 8010eaa:	f000 f9f5 	bl	8011298 <__multadd>
 8010eae:	f1ba 0f00 	cmp.w	sl, #0
 8010eb2:	4607      	mov	r7, r0
 8010eb4:	f300 8093 	bgt.w	8010fde <_dtoa_r+0x876>
 8010eb8:	9b06      	ldr	r3, [sp, #24]
 8010eba:	2b02      	cmp	r3, #2
 8010ebc:	dc57      	bgt.n	8010f6e <_dtoa_r+0x806>
 8010ebe:	e08e      	b.n	8010fde <_dtoa_r+0x876>
 8010ec0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010ec2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010ec6:	e751      	b.n	8010d6c <_dtoa_r+0x604>
 8010ec8:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8010ecc:	42a3      	cmp	r3, r4
 8010ece:	bfbf      	itttt	lt
 8010ed0:	1ae2      	sublt	r2, r4, r3
 8010ed2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010ed4:	189b      	addlt	r3, r3, r2
 8010ed6:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010ed8:	bfae      	itee	ge
 8010eda:	1b1c      	subge	r4, r3, r4
 8010edc:	4623      	movlt	r3, r4
 8010ede:	2400      	movlt	r4, #0
 8010ee0:	f1b9 0f00 	cmp.w	r9, #0
 8010ee4:	bfb5      	itete	lt
 8010ee6:	9a04      	ldrlt	r2, [sp, #16]
 8010ee8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8010eec:	eba2 0809 	sublt.w	r8, r2, r9
 8010ef0:	464a      	movge	r2, r9
 8010ef2:	bfb8      	it	lt
 8010ef4:	2200      	movlt	r2, #0
 8010ef6:	e73c      	b.n	8010d72 <_dtoa_r+0x60a>
 8010ef8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010efc:	9f07      	ldr	r7, [sp, #28]
 8010efe:	461c      	mov	r4, r3
 8010f00:	e744      	b.n	8010d8c <_dtoa_r+0x624>
 8010f02:	461a      	mov	r2, r3
 8010f04:	e770      	b.n	8010de8 <_dtoa_r+0x680>
 8010f06:	9b06      	ldr	r3, [sp, #24]
 8010f08:	2b01      	cmp	r3, #1
 8010f0a:	dc18      	bgt.n	8010f3e <_dtoa_r+0x7d6>
 8010f0c:	9b02      	ldr	r3, [sp, #8]
 8010f0e:	b9b3      	cbnz	r3, 8010f3e <_dtoa_r+0x7d6>
 8010f10:	9b03      	ldr	r3, [sp, #12]
 8010f12:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8010f16:	b9a2      	cbnz	r2, 8010f42 <_dtoa_r+0x7da>
 8010f18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010f1c:	0d12      	lsrs	r2, r2, #20
 8010f1e:	0512      	lsls	r2, r2, #20
 8010f20:	b18a      	cbz	r2, 8010f46 <_dtoa_r+0x7de>
 8010f22:	9b04      	ldr	r3, [sp, #16]
 8010f24:	3301      	adds	r3, #1
 8010f26:	9304      	str	r3, [sp, #16]
 8010f28:	9b05      	ldr	r3, [sp, #20]
 8010f2a:	3301      	adds	r3, #1
 8010f2c:	9305      	str	r3, [sp, #20]
 8010f2e:	2301      	movs	r3, #1
 8010f30:	9309      	str	r3, [sp, #36]	; 0x24
 8010f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	f47f af70 	bne.w	8010e1a <_dtoa_r+0x6b2>
 8010f3a:	2001      	movs	r0, #1
 8010f3c:	e775      	b.n	8010e2a <_dtoa_r+0x6c2>
 8010f3e:	2300      	movs	r3, #0
 8010f40:	e7f6      	b.n	8010f30 <_dtoa_r+0x7c8>
 8010f42:	9b02      	ldr	r3, [sp, #8]
 8010f44:	e7f4      	b.n	8010f30 <_dtoa_r+0x7c8>
 8010f46:	9209      	str	r2, [sp, #36]	; 0x24
 8010f48:	e7f3      	b.n	8010f32 <_dtoa_r+0x7ca>
 8010f4a:	d082      	beq.n	8010e52 <_dtoa_r+0x6ea>
 8010f4c:	9b04      	ldr	r3, [sp, #16]
 8010f4e:	321c      	adds	r2, #28
 8010f50:	4413      	add	r3, r2
 8010f52:	9304      	str	r3, [sp, #16]
 8010f54:	9b05      	ldr	r3, [sp, #20]
 8010f56:	4490      	add	r8, r2
 8010f58:	4413      	add	r3, r2
 8010f5a:	e779      	b.n	8010e50 <_dtoa_r+0x6e8>
 8010f5c:	4602      	mov	r2, r0
 8010f5e:	e7f5      	b.n	8010f4c <_dtoa_r+0x7e4>
 8010f60:	f1b9 0f00 	cmp.w	r9, #0
 8010f64:	dc36      	bgt.n	8010fd4 <_dtoa_r+0x86c>
 8010f66:	9b06      	ldr	r3, [sp, #24]
 8010f68:	2b02      	cmp	r3, #2
 8010f6a:	dd33      	ble.n	8010fd4 <_dtoa_r+0x86c>
 8010f6c:	46ca      	mov	sl, r9
 8010f6e:	f1ba 0f00 	cmp.w	sl, #0
 8010f72:	d10d      	bne.n	8010f90 <_dtoa_r+0x828>
 8010f74:	4621      	mov	r1, r4
 8010f76:	4653      	mov	r3, sl
 8010f78:	2205      	movs	r2, #5
 8010f7a:	4630      	mov	r0, r6
 8010f7c:	f000 f98c 	bl	8011298 <__multadd>
 8010f80:	4601      	mov	r1, r0
 8010f82:	4604      	mov	r4, r0
 8010f84:	4628      	mov	r0, r5
 8010f86:	f000 fb87 	bl	8011698 <__mcmp>
 8010f8a:	2800      	cmp	r0, #0
 8010f8c:	f73f ade5 	bgt.w	8010b5a <_dtoa_r+0x3f2>
 8010f90:	9b08      	ldr	r3, [sp, #32]
 8010f92:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010f96:	ea6f 0b03 	mvn.w	fp, r3
 8010f9a:	f04f 0900 	mov.w	r9, #0
 8010f9e:	4621      	mov	r1, r4
 8010fa0:	4630      	mov	r0, r6
 8010fa2:	f000 f970 	bl	8011286 <_Bfree>
 8010fa6:	2f00      	cmp	r7, #0
 8010fa8:	f43f aea2 	beq.w	8010cf0 <_dtoa_r+0x588>
 8010fac:	f1b9 0f00 	cmp.w	r9, #0
 8010fb0:	d005      	beq.n	8010fbe <_dtoa_r+0x856>
 8010fb2:	45b9      	cmp	r9, r7
 8010fb4:	d003      	beq.n	8010fbe <_dtoa_r+0x856>
 8010fb6:	4649      	mov	r1, r9
 8010fb8:	4630      	mov	r0, r6
 8010fba:	f000 f964 	bl	8011286 <_Bfree>
 8010fbe:	4639      	mov	r1, r7
 8010fc0:	4630      	mov	r0, r6
 8010fc2:	f000 f960 	bl	8011286 <_Bfree>
 8010fc6:	e693      	b.n	8010cf0 <_dtoa_r+0x588>
 8010fc8:	2400      	movs	r4, #0
 8010fca:	4627      	mov	r7, r4
 8010fcc:	e7e0      	b.n	8010f90 <_dtoa_r+0x828>
 8010fce:	4693      	mov	fp, r2
 8010fd0:	4627      	mov	r7, r4
 8010fd2:	e5c2      	b.n	8010b5a <_dtoa_r+0x3f2>
 8010fd4:	9b07      	ldr	r3, [sp, #28]
 8010fd6:	46ca      	mov	sl, r9
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	f000 80ff 	beq.w	80111dc <_dtoa_r+0xa74>
 8010fde:	f1b8 0f00 	cmp.w	r8, #0
 8010fe2:	dd05      	ble.n	8010ff0 <_dtoa_r+0x888>
 8010fe4:	4639      	mov	r1, r7
 8010fe6:	4642      	mov	r2, r8
 8010fe8:	4630      	mov	r0, r6
 8010fea:	f000 fae9 	bl	80115c0 <__lshift>
 8010fee:	4607      	mov	r7, r0
 8010ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d05c      	beq.n	80110b0 <_dtoa_r+0x948>
 8010ff6:	6879      	ldr	r1, [r7, #4]
 8010ff8:	4630      	mov	r0, r6
 8010ffa:	f000 f91f 	bl	801123c <_Balloc>
 8010ffe:	4680      	mov	r8, r0
 8011000:	b920      	cbnz	r0, 801100c <_dtoa_r+0x8a4>
 8011002:	4b82      	ldr	r3, [pc, #520]	; (801120c <_dtoa_r+0xaa4>)
 8011004:	4602      	mov	r2, r0
 8011006:	f240 21ef 	movw	r1, #751	; 0x2ef
 801100a:	e4c9      	b.n	80109a0 <_dtoa_r+0x238>
 801100c:	693a      	ldr	r2, [r7, #16]
 801100e:	3202      	adds	r2, #2
 8011010:	0092      	lsls	r2, r2, #2
 8011012:	f107 010c 	add.w	r1, r7, #12
 8011016:	300c      	adds	r0, #12
 8011018:	f7ff fa98 	bl	801054c <memcpy>
 801101c:	2201      	movs	r2, #1
 801101e:	4641      	mov	r1, r8
 8011020:	4630      	mov	r0, r6
 8011022:	f000 facd 	bl	80115c0 <__lshift>
 8011026:	9b01      	ldr	r3, [sp, #4]
 8011028:	3301      	adds	r3, #1
 801102a:	9304      	str	r3, [sp, #16]
 801102c:	9b01      	ldr	r3, [sp, #4]
 801102e:	4453      	add	r3, sl
 8011030:	9308      	str	r3, [sp, #32]
 8011032:	9b02      	ldr	r3, [sp, #8]
 8011034:	f003 0301 	and.w	r3, r3, #1
 8011038:	46b9      	mov	r9, r7
 801103a:	9307      	str	r3, [sp, #28]
 801103c:	4607      	mov	r7, r0
 801103e:	9b04      	ldr	r3, [sp, #16]
 8011040:	4621      	mov	r1, r4
 8011042:	3b01      	subs	r3, #1
 8011044:	4628      	mov	r0, r5
 8011046:	9302      	str	r3, [sp, #8]
 8011048:	f7ff fb06 	bl	8010658 <quorem>
 801104c:	4603      	mov	r3, r0
 801104e:	3330      	adds	r3, #48	; 0x30
 8011050:	9005      	str	r0, [sp, #20]
 8011052:	4649      	mov	r1, r9
 8011054:	4628      	mov	r0, r5
 8011056:	9309      	str	r3, [sp, #36]	; 0x24
 8011058:	f000 fb1e 	bl	8011698 <__mcmp>
 801105c:	463a      	mov	r2, r7
 801105e:	4682      	mov	sl, r0
 8011060:	4621      	mov	r1, r4
 8011062:	4630      	mov	r0, r6
 8011064:	f000 fb34 	bl	80116d0 <__mdiff>
 8011068:	68c2      	ldr	r2, [r0, #12]
 801106a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801106c:	4680      	mov	r8, r0
 801106e:	bb0a      	cbnz	r2, 80110b4 <_dtoa_r+0x94c>
 8011070:	4601      	mov	r1, r0
 8011072:	4628      	mov	r0, r5
 8011074:	f000 fb10 	bl	8011698 <__mcmp>
 8011078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801107a:	4602      	mov	r2, r0
 801107c:	4641      	mov	r1, r8
 801107e:	4630      	mov	r0, r6
 8011080:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8011084:	f000 f8ff 	bl	8011286 <_Bfree>
 8011088:	9b06      	ldr	r3, [sp, #24]
 801108a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801108c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011090:	ea43 0102 	orr.w	r1, r3, r2
 8011094:	9b07      	ldr	r3, [sp, #28]
 8011096:	4319      	orrs	r1, r3
 8011098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801109a:	d10d      	bne.n	80110b8 <_dtoa_r+0x950>
 801109c:	2b39      	cmp	r3, #57	; 0x39
 801109e:	d029      	beq.n	80110f4 <_dtoa_r+0x98c>
 80110a0:	f1ba 0f00 	cmp.w	sl, #0
 80110a4:	dd01      	ble.n	80110aa <_dtoa_r+0x942>
 80110a6:	9b05      	ldr	r3, [sp, #20]
 80110a8:	3331      	adds	r3, #49	; 0x31
 80110aa:	9a02      	ldr	r2, [sp, #8]
 80110ac:	7013      	strb	r3, [r2, #0]
 80110ae:	e776      	b.n	8010f9e <_dtoa_r+0x836>
 80110b0:	4638      	mov	r0, r7
 80110b2:	e7b8      	b.n	8011026 <_dtoa_r+0x8be>
 80110b4:	2201      	movs	r2, #1
 80110b6:	e7e1      	b.n	801107c <_dtoa_r+0x914>
 80110b8:	f1ba 0f00 	cmp.w	sl, #0
 80110bc:	db06      	blt.n	80110cc <_dtoa_r+0x964>
 80110be:	9906      	ldr	r1, [sp, #24]
 80110c0:	ea41 0a0a 	orr.w	sl, r1, sl
 80110c4:	9907      	ldr	r1, [sp, #28]
 80110c6:	ea5a 0a01 	orrs.w	sl, sl, r1
 80110ca:	d120      	bne.n	801110e <_dtoa_r+0x9a6>
 80110cc:	2a00      	cmp	r2, #0
 80110ce:	ddec      	ble.n	80110aa <_dtoa_r+0x942>
 80110d0:	4629      	mov	r1, r5
 80110d2:	2201      	movs	r2, #1
 80110d4:	4630      	mov	r0, r6
 80110d6:	9304      	str	r3, [sp, #16]
 80110d8:	f000 fa72 	bl	80115c0 <__lshift>
 80110dc:	4621      	mov	r1, r4
 80110de:	4605      	mov	r5, r0
 80110e0:	f000 fada 	bl	8011698 <__mcmp>
 80110e4:	2800      	cmp	r0, #0
 80110e6:	9b04      	ldr	r3, [sp, #16]
 80110e8:	dc02      	bgt.n	80110f0 <_dtoa_r+0x988>
 80110ea:	d1de      	bne.n	80110aa <_dtoa_r+0x942>
 80110ec:	07da      	lsls	r2, r3, #31
 80110ee:	d5dc      	bpl.n	80110aa <_dtoa_r+0x942>
 80110f0:	2b39      	cmp	r3, #57	; 0x39
 80110f2:	d1d8      	bne.n	80110a6 <_dtoa_r+0x93e>
 80110f4:	9a02      	ldr	r2, [sp, #8]
 80110f6:	2339      	movs	r3, #57	; 0x39
 80110f8:	7013      	strb	r3, [r2, #0]
 80110fa:	4643      	mov	r3, r8
 80110fc:	4698      	mov	r8, r3
 80110fe:	3b01      	subs	r3, #1
 8011100:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8011104:	2a39      	cmp	r2, #57	; 0x39
 8011106:	d051      	beq.n	80111ac <_dtoa_r+0xa44>
 8011108:	3201      	adds	r2, #1
 801110a:	701a      	strb	r2, [r3, #0]
 801110c:	e747      	b.n	8010f9e <_dtoa_r+0x836>
 801110e:	2a00      	cmp	r2, #0
 8011110:	dd03      	ble.n	801111a <_dtoa_r+0x9b2>
 8011112:	2b39      	cmp	r3, #57	; 0x39
 8011114:	d0ee      	beq.n	80110f4 <_dtoa_r+0x98c>
 8011116:	3301      	adds	r3, #1
 8011118:	e7c7      	b.n	80110aa <_dtoa_r+0x942>
 801111a:	9a04      	ldr	r2, [sp, #16]
 801111c:	9908      	ldr	r1, [sp, #32]
 801111e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011122:	428a      	cmp	r2, r1
 8011124:	d02b      	beq.n	801117e <_dtoa_r+0xa16>
 8011126:	4629      	mov	r1, r5
 8011128:	2300      	movs	r3, #0
 801112a:	220a      	movs	r2, #10
 801112c:	4630      	mov	r0, r6
 801112e:	f000 f8b3 	bl	8011298 <__multadd>
 8011132:	45b9      	cmp	r9, r7
 8011134:	4605      	mov	r5, r0
 8011136:	f04f 0300 	mov.w	r3, #0
 801113a:	f04f 020a 	mov.w	r2, #10
 801113e:	4649      	mov	r1, r9
 8011140:	4630      	mov	r0, r6
 8011142:	d107      	bne.n	8011154 <_dtoa_r+0x9ec>
 8011144:	f000 f8a8 	bl	8011298 <__multadd>
 8011148:	4681      	mov	r9, r0
 801114a:	4607      	mov	r7, r0
 801114c:	9b04      	ldr	r3, [sp, #16]
 801114e:	3301      	adds	r3, #1
 8011150:	9304      	str	r3, [sp, #16]
 8011152:	e774      	b.n	801103e <_dtoa_r+0x8d6>
 8011154:	f000 f8a0 	bl	8011298 <__multadd>
 8011158:	4639      	mov	r1, r7
 801115a:	4681      	mov	r9, r0
 801115c:	2300      	movs	r3, #0
 801115e:	220a      	movs	r2, #10
 8011160:	4630      	mov	r0, r6
 8011162:	f000 f899 	bl	8011298 <__multadd>
 8011166:	4607      	mov	r7, r0
 8011168:	e7f0      	b.n	801114c <_dtoa_r+0x9e4>
 801116a:	f1ba 0f00 	cmp.w	sl, #0
 801116e:	9a01      	ldr	r2, [sp, #4]
 8011170:	bfcc      	ite	gt
 8011172:	46d0      	movgt	r8, sl
 8011174:	f04f 0801 	movle.w	r8, #1
 8011178:	4490      	add	r8, r2
 801117a:	f04f 0900 	mov.w	r9, #0
 801117e:	4629      	mov	r1, r5
 8011180:	2201      	movs	r2, #1
 8011182:	4630      	mov	r0, r6
 8011184:	9302      	str	r3, [sp, #8]
 8011186:	f000 fa1b 	bl	80115c0 <__lshift>
 801118a:	4621      	mov	r1, r4
 801118c:	4605      	mov	r5, r0
 801118e:	f000 fa83 	bl	8011698 <__mcmp>
 8011192:	2800      	cmp	r0, #0
 8011194:	dcb1      	bgt.n	80110fa <_dtoa_r+0x992>
 8011196:	d102      	bne.n	801119e <_dtoa_r+0xa36>
 8011198:	9b02      	ldr	r3, [sp, #8]
 801119a:	07db      	lsls	r3, r3, #31
 801119c:	d4ad      	bmi.n	80110fa <_dtoa_r+0x992>
 801119e:	4643      	mov	r3, r8
 80111a0:	4698      	mov	r8, r3
 80111a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80111a6:	2a30      	cmp	r2, #48	; 0x30
 80111a8:	d0fa      	beq.n	80111a0 <_dtoa_r+0xa38>
 80111aa:	e6f8      	b.n	8010f9e <_dtoa_r+0x836>
 80111ac:	9a01      	ldr	r2, [sp, #4]
 80111ae:	429a      	cmp	r2, r3
 80111b0:	d1a4      	bne.n	80110fc <_dtoa_r+0x994>
 80111b2:	f10b 0b01 	add.w	fp, fp, #1
 80111b6:	2331      	movs	r3, #49	; 0x31
 80111b8:	e778      	b.n	80110ac <_dtoa_r+0x944>
 80111ba:	4b15      	ldr	r3, [pc, #84]	; (8011210 <_dtoa_r+0xaa8>)
 80111bc:	f7ff bb2b 	b.w	8010816 <_dtoa_r+0xae>
 80111c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	f47f ab11 	bne.w	80107ea <_dtoa_r+0x82>
 80111c8:	4b12      	ldr	r3, [pc, #72]	; (8011214 <_dtoa_r+0xaac>)
 80111ca:	f7ff bb24 	b.w	8010816 <_dtoa_r+0xae>
 80111ce:	f1ba 0f00 	cmp.w	sl, #0
 80111d2:	dc03      	bgt.n	80111dc <_dtoa_r+0xa74>
 80111d4:	9b06      	ldr	r3, [sp, #24]
 80111d6:	2b02      	cmp	r3, #2
 80111d8:	f73f aec9 	bgt.w	8010f6e <_dtoa_r+0x806>
 80111dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80111e0:	4621      	mov	r1, r4
 80111e2:	4628      	mov	r0, r5
 80111e4:	f7ff fa38 	bl	8010658 <quorem>
 80111e8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80111ec:	f808 3b01 	strb.w	r3, [r8], #1
 80111f0:	9a01      	ldr	r2, [sp, #4]
 80111f2:	eba8 0202 	sub.w	r2, r8, r2
 80111f6:	4592      	cmp	sl, r2
 80111f8:	ddb7      	ble.n	801116a <_dtoa_r+0xa02>
 80111fa:	4629      	mov	r1, r5
 80111fc:	2300      	movs	r3, #0
 80111fe:	220a      	movs	r2, #10
 8011200:	4630      	mov	r0, r6
 8011202:	f000 f849 	bl	8011298 <__multadd>
 8011206:	4605      	mov	r5, r0
 8011208:	e7ea      	b.n	80111e0 <_dtoa_r+0xa78>
 801120a:	bf00      	nop
 801120c:	08012053 	.word	0x08012053
 8011210:	08011ffa 	.word	0x08011ffa
 8011214:	08012046 	.word	0x08012046

08011218 <__ascii_mbtowc>:
 8011218:	b082      	sub	sp, #8
 801121a:	b901      	cbnz	r1, 801121e <__ascii_mbtowc+0x6>
 801121c:	a901      	add	r1, sp, #4
 801121e:	b142      	cbz	r2, 8011232 <__ascii_mbtowc+0x1a>
 8011220:	b14b      	cbz	r3, 8011236 <__ascii_mbtowc+0x1e>
 8011222:	7813      	ldrb	r3, [r2, #0]
 8011224:	600b      	str	r3, [r1, #0]
 8011226:	7812      	ldrb	r2, [r2, #0]
 8011228:	1e10      	subs	r0, r2, #0
 801122a:	bf18      	it	ne
 801122c:	2001      	movne	r0, #1
 801122e:	b002      	add	sp, #8
 8011230:	4770      	bx	lr
 8011232:	4610      	mov	r0, r2
 8011234:	e7fb      	b.n	801122e <__ascii_mbtowc+0x16>
 8011236:	f06f 0001 	mvn.w	r0, #1
 801123a:	e7f8      	b.n	801122e <__ascii_mbtowc+0x16>

0801123c <_Balloc>:
 801123c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801123e:	b570      	push	{r4, r5, r6, lr}
 8011240:	4605      	mov	r5, r0
 8011242:	460c      	mov	r4, r1
 8011244:	b17b      	cbz	r3, 8011266 <_Balloc+0x2a>
 8011246:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8011248:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801124c:	b9a0      	cbnz	r0, 8011278 <_Balloc+0x3c>
 801124e:	2101      	movs	r1, #1
 8011250:	fa01 f604 	lsl.w	r6, r1, r4
 8011254:	1d72      	adds	r2, r6, #5
 8011256:	0092      	lsls	r2, r2, #2
 8011258:	4628      	mov	r0, r5
 801125a:	f000 fd8d 	bl	8011d78 <_calloc_r>
 801125e:	b148      	cbz	r0, 8011274 <_Balloc+0x38>
 8011260:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8011264:	e00b      	b.n	801127e <_Balloc+0x42>
 8011266:	2221      	movs	r2, #33	; 0x21
 8011268:	2104      	movs	r1, #4
 801126a:	f000 fd85 	bl	8011d78 <_calloc_r>
 801126e:	6468      	str	r0, [r5, #68]	; 0x44
 8011270:	2800      	cmp	r0, #0
 8011272:	d1e8      	bne.n	8011246 <_Balloc+0xa>
 8011274:	2000      	movs	r0, #0
 8011276:	bd70      	pop	{r4, r5, r6, pc}
 8011278:	6802      	ldr	r2, [r0, #0]
 801127a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801127e:	2300      	movs	r3, #0
 8011280:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011284:	e7f7      	b.n	8011276 <_Balloc+0x3a>

08011286 <_Bfree>:
 8011286:	b131      	cbz	r1, 8011296 <_Bfree+0x10>
 8011288:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801128a:	684a      	ldr	r2, [r1, #4]
 801128c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011290:	6008      	str	r0, [r1, #0]
 8011292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011296:	4770      	bx	lr

08011298 <__multadd>:
 8011298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801129c:	690d      	ldr	r5, [r1, #16]
 801129e:	4607      	mov	r7, r0
 80112a0:	460c      	mov	r4, r1
 80112a2:	461e      	mov	r6, r3
 80112a4:	f101 0c14 	add.w	ip, r1, #20
 80112a8:	2000      	movs	r0, #0
 80112aa:	f8dc 3000 	ldr.w	r3, [ip]
 80112ae:	b299      	uxth	r1, r3
 80112b0:	fb02 6101 	mla	r1, r2, r1, r6
 80112b4:	0c1e      	lsrs	r6, r3, #16
 80112b6:	0c0b      	lsrs	r3, r1, #16
 80112b8:	fb02 3306 	mla	r3, r2, r6, r3
 80112bc:	b289      	uxth	r1, r1
 80112be:	3001      	adds	r0, #1
 80112c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80112c4:	4285      	cmp	r5, r0
 80112c6:	f84c 1b04 	str.w	r1, [ip], #4
 80112ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80112ce:	dcec      	bgt.n	80112aa <__multadd+0x12>
 80112d0:	b30e      	cbz	r6, 8011316 <__multadd+0x7e>
 80112d2:	68a3      	ldr	r3, [r4, #8]
 80112d4:	42ab      	cmp	r3, r5
 80112d6:	dc19      	bgt.n	801130c <__multadd+0x74>
 80112d8:	6861      	ldr	r1, [r4, #4]
 80112da:	4638      	mov	r0, r7
 80112dc:	3101      	adds	r1, #1
 80112de:	f7ff ffad 	bl	801123c <_Balloc>
 80112e2:	4680      	mov	r8, r0
 80112e4:	b928      	cbnz	r0, 80112f2 <__multadd+0x5a>
 80112e6:	4602      	mov	r2, r0
 80112e8:	4b0c      	ldr	r3, [pc, #48]	; (801131c <__multadd+0x84>)
 80112ea:	480d      	ldr	r0, [pc, #52]	; (8011320 <__multadd+0x88>)
 80112ec:	21ba      	movs	r1, #186	; 0xba
 80112ee:	f000 fd25 	bl	8011d3c <__assert_func>
 80112f2:	6922      	ldr	r2, [r4, #16]
 80112f4:	3202      	adds	r2, #2
 80112f6:	f104 010c 	add.w	r1, r4, #12
 80112fa:	0092      	lsls	r2, r2, #2
 80112fc:	300c      	adds	r0, #12
 80112fe:	f7ff f925 	bl	801054c <memcpy>
 8011302:	4621      	mov	r1, r4
 8011304:	4638      	mov	r0, r7
 8011306:	f7ff ffbe 	bl	8011286 <_Bfree>
 801130a:	4644      	mov	r4, r8
 801130c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011310:	3501      	adds	r5, #1
 8011312:	615e      	str	r6, [r3, #20]
 8011314:	6125      	str	r5, [r4, #16]
 8011316:	4620      	mov	r0, r4
 8011318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801131c:	08012053 	.word	0x08012053
 8011320:	080120bc 	.word	0x080120bc

08011324 <__hi0bits>:
 8011324:	0c03      	lsrs	r3, r0, #16
 8011326:	041b      	lsls	r3, r3, #16
 8011328:	b9d3      	cbnz	r3, 8011360 <__hi0bits+0x3c>
 801132a:	0400      	lsls	r0, r0, #16
 801132c:	2310      	movs	r3, #16
 801132e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011332:	bf04      	itt	eq
 8011334:	0200      	lsleq	r0, r0, #8
 8011336:	3308      	addeq	r3, #8
 8011338:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801133c:	bf04      	itt	eq
 801133e:	0100      	lsleq	r0, r0, #4
 8011340:	3304      	addeq	r3, #4
 8011342:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011346:	bf04      	itt	eq
 8011348:	0080      	lsleq	r0, r0, #2
 801134a:	3302      	addeq	r3, #2
 801134c:	2800      	cmp	r0, #0
 801134e:	db05      	blt.n	801135c <__hi0bits+0x38>
 8011350:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011354:	f103 0301 	add.w	r3, r3, #1
 8011358:	bf08      	it	eq
 801135a:	2320      	moveq	r3, #32
 801135c:	4618      	mov	r0, r3
 801135e:	4770      	bx	lr
 8011360:	2300      	movs	r3, #0
 8011362:	e7e4      	b.n	801132e <__hi0bits+0xa>

08011364 <__lo0bits>:
 8011364:	6803      	ldr	r3, [r0, #0]
 8011366:	f013 0207 	ands.w	r2, r3, #7
 801136a:	d00c      	beq.n	8011386 <__lo0bits+0x22>
 801136c:	07d9      	lsls	r1, r3, #31
 801136e:	d422      	bmi.n	80113b6 <__lo0bits+0x52>
 8011370:	079a      	lsls	r2, r3, #30
 8011372:	bf49      	itett	mi
 8011374:	085b      	lsrmi	r3, r3, #1
 8011376:	089b      	lsrpl	r3, r3, #2
 8011378:	6003      	strmi	r3, [r0, #0]
 801137a:	2201      	movmi	r2, #1
 801137c:	bf5c      	itt	pl
 801137e:	6003      	strpl	r3, [r0, #0]
 8011380:	2202      	movpl	r2, #2
 8011382:	4610      	mov	r0, r2
 8011384:	4770      	bx	lr
 8011386:	b299      	uxth	r1, r3
 8011388:	b909      	cbnz	r1, 801138e <__lo0bits+0x2a>
 801138a:	0c1b      	lsrs	r3, r3, #16
 801138c:	2210      	movs	r2, #16
 801138e:	b2d9      	uxtb	r1, r3
 8011390:	b909      	cbnz	r1, 8011396 <__lo0bits+0x32>
 8011392:	3208      	adds	r2, #8
 8011394:	0a1b      	lsrs	r3, r3, #8
 8011396:	0719      	lsls	r1, r3, #28
 8011398:	bf04      	itt	eq
 801139a:	091b      	lsreq	r3, r3, #4
 801139c:	3204      	addeq	r2, #4
 801139e:	0799      	lsls	r1, r3, #30
 80113a0:	bf04      	itt	eq
 80113a2:	089b      	lsreq	r3, r3, #2
 80113a4:	3202      	addeq	r2, #2
 80113a6:	07d9      	lsls	r1, r3, #31
 80113a8:	d403      	bmi.n	80113b2 <__lo0bits+0x4e>
 80113aa:	085b      	lsrs	r3, r3, #1
 80113ac:	f102 0201 	add.w	r2, r2, #1
 80113b0:	d003      	beq.n	80113ba <__lo0bits+0x56>
 80113b2:	6003      	str	r3, [r0, #0]
 80113b4:	e7e5      	b.n	8011382 <__lo0bits+0x1e>
 80113b6:	2200      	movs	r2, #0
 80113b8:	e7e3      	b.n	8011382 <__lo0bits+0x1e>
 80113ba:	2220      	movs	r2, #32
 80113bc:	e7e1      	b.n	8011382 <__lo0bits+0x1e>
	...

080113c0 <__i2b>:
 80113c0:	b510      	push	{r4, lr}
 80113c2:	460c      	mov	r4, r1
 80113c4:	2101      	movs	r1, #1
 80113c6:	f7ff ff39 	bl	801123c <_Balloc>
 80113ca:	4602      	mov	r2, r0
 80113cc:	b928      	cbnz	r0, 80113da <__i2b+0x1a>
 80113ce:	4b05      	ldr	r3, [pc, #20]	; (80113e4 <__i2b+0x24>)
 80113d0:	4805      	ldr	r0, [pc, #20]	; (80113e8 <__i2b+0x28>)
 80113d2:	f240 1145 	movw	r1, #325	; 0x145
 80113d6:	f000 fcb1 	bl	8011d3c <__assert_func>
 80113da:	2301      	movs	r3, #1
 80113dc:	6144      	str	r4, [r0, #20]
 80113de:	6103      	str	r3, [r0, #16]
 80113e0:	bd10      	pop	{r4, pc}
 80113e2:	bf00      	nop
 80113e4:	08012053 	.word	0x08012053
 80113e8:	080120bc 	.word	0x080120bc

080113ec <__multiply>:
 80113ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113f0:	4691      	mov	r9, r2
 80113f2:	690a      	ldr	r2, [r1, #16]
 80113f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80113f8:	429a      	cmp	r2, r3
 80113fa:	bfb8      	it	lt
 80113fc:	460b      	movlt	r3, r1
 80113fe:	460c      	mov	r4, r1
 8011400:	bfbc      	itt	lt
 8011402:	464c      	movlt	r4, r9
 8011404:	4699      	movlt	r9, r3
 8011406:	6927      	ldr	r7, [r4, #16]
 8011408:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801140c:	68a3      	ldr	r3, [r4, #8]
 801140e:	6861      	ldr	r1, [r4, #4]
 8011410:	eb07 060a 	add.w	r6, r7, sl
 8011414:	42b3      	cmp	r3, r6
 8011416:	b085      	sub	sp, #20
 8011418:	bfb8      	it	lt
 801141a:	3101      	addlt	r1, #1
 801141c:	f7ff ff0e 	bl	801123c <_Balloc>
 8011420:	b930      	cbnz	r0, 8011430 <__multiply+0x44>
 8011422:	4602      	mov	r2, r0
 8011424:	4b44      	ldr	r3, [pc, #272]	; (8011538 <__multiply+0x14c>)
 8011426:	4845      	ldr	r0, [pc, #276]	; (801153c <__multiply+0x150>)
 8011428:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801142c:	f000 fc86 	bl	8011d3c <__assert_func>
 8011430:	f100 0514 	add.w	r5, r0, #20
 8011434:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011438:	462b      	mov	r3, r5
 801143a:	2200      	movs	r2, #0
 801143c:	4543      	cmp	r3, r8
 801143e:	d321      	bcc.n	8011484 <__multiply+0x98>
 8011440:	f104 0314 	add.w	r3, r4, #20
 8011444:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011448:	f109 0314 	add.w	r3, r9, #20
 801144c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011450:	9202      	str	r2, [sp, #8]
 8011452:	1b3a      	subs	r2, r7, r4
 8011454:	3a15      	subs	r2, #21
 8011456:	f022 0203 	bic.w	r2, r2, #3
 801145a:	3204      	adds	r2, #4
 801145c:	f104 0115 	add.w	r1, r4, #21
 8011460:	428f      	cmp	r7, r1
 8011462:	bf38      	it	cc
 8011464:	2204      	movcc	r2, #4
 8011466:	9201      	str	r2, [sp, #4]
 8011468:	9a02      	ldr	r2, [sp, #8]
 801146a:	9303      	str	r3, [sp, #12]
 801146c:	429a      	cmp	r2, r3
 801146e:	d80c      	bhi.n	801148a <__multiply+0x9e>
 8011470:	2e00      	cmp	r6, #0
 8011472:	dd03      	ble.n	801147c <__multiply+0x90>
 8011474:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011478:	2b00      	cmp	r3, #0
 801147a:	d05b      	beq.n	8011534 <__multiply+0x148>
 801147c:	6106      	str	r6, [r0, #16]
 801147e:	b005      	add	sp, #20
 8011480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011484:	f843 2b04 	str.w	r2, [r3], #4
 8011488:	e7d8      	b.n	801143c <__multiply+0x50>
 801148a:	f8b3 a000 	ldrh.w	sl, [r3]
 801148e:	f1ba 0f00 	cmp.w	sl, #0
 8011492:	d024      	beq.n	80114de <__multiply+0xf2>
 8011494:	f104 0e14 	add.w	lr, r4, #20
 8011498:	46a9      	mov	r9, r5
 801149a:	f04f 0c00 	mov.w	ip, #0
 801149e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80114a2:	f8d9 1000 	ldr.w	r1, [r9]
 80114a6:	fa1f fb82 	uxth.w	fp, r2
 80114aa:	b289      	uxth	r1, r1
 80114ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80114b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80114b4:	f8d9 2000 	ldr.w	r2, [r9]
 80114b8:	4461      	add	r1, ip
 80114ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80114be:	fb0a c20b 	mla	r2, sl, fp, ip
 80114c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80114c6:	b289      	uxth	r1, r1
 80114c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80114cc:	4577      	cmp	r7, lr
 80114ce:	f849 1b04 	str.w	r1, [r9], #4
 80114d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80114d6:	d8e2      	bhi.n	801149e <__multiply+0xb2>
 80114d8:	9a01      	ldr	r2, [sp, #4]
 80114da:	f845 c002 	str.w	ip, [r5, r2]
 80114de:	9a03      	ldr	r2, [sp, #12]
 80114e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80114e4:	3304      	adds	r3, #4
 80114e6:	f1b9 0f00 	cmp.w	r9, #0
 80114ea:	d021      	beq.n	8011530 <__multiply+0x144>
 80114ec:	6829      	ldr	r1, [r5, #0]
 80114ee:	f104 0c14 	add.w	ip, r4, #20
 80114f2:	46ae      	mov	lr, r5
 80114f4:	f04f 0a00 	mov.w	sl, #0
 80114f8:	f8bc b000 	ldrh.w	fp, [ip]
 80114fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011500:	fb09 220b 	mla	r2, r9, fp, r2
 8011504:	4452      	add	r2, sl
 8011506:	b289      	uxth	r1, r1
 8011508:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801150c:	f84e 1b04 	str.w	r1, [lr], #4
 8011510:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011514:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011518:	f8be 1000 	ldrh.w	r1, [lr]
 801151c:	fb09 110a 	mla	r1, r9, sl, r1
 8011520:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011524:	4567      	cmp	r7, ip
 8011526:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801152a:	d8e5      	bhi.n	80114f8 <__multiply+0x10c>
 801152c:	9a01      	ldr	r2, [sp, #4]
 801152e:	50a9      	str	r1, [r5, r2]
 8011530:	3504      	adds	r5, #4
 8011532:	e799      	b.n	8011468 <__multiply+0x7c>
 8011534:	3e01      	subs	r6, #1
 8011536:	e79b      	b.n	8011470 <__multiply+0x84>
 8011538:	08012053 	.word	0x08012053
 801153c:	080120bc 	.word	0x080120bc

08011540 <__pow5mult>:
 8011540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011544:	4615      	mov	r5, r2
 8011546:	f012 0203 	ands.w	r2, r2, #3
 801154a:	4606      	mov	r6, r0
 801154c:	460f      	mov	r7, r1
 801154e:	d007      	beq.n	8011560 <__pow5mult+0x20>
 8011550:	4c1a      	ldr	r4, [pc, #104]	; (80115bc <__pow5mult+0x7c>)
 8011552:	3a01      	subs	r2, #1
 8011554:	2300      	movs	r3, #0
 8011556:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801155a:	f7ff fe9d 	bl	8011298 <__multadd>
 801155e:	4607      	mov	r7, r0
 8011560:	10ad      	asrs	r5, r5, #2
 8011562:	d027      	beq.n	80115b4 <__pow5mult+0x74>
 8011564:	6c34      	ldr	r4, [r6, #64]	; 0x40
 8011566:	b944      	cbnz	r4, 801157a <__pow5mult+0x3a>
 8011568:	f240 2171 	movw	r1, #625	; 0x271
 801156c:	4630      	mov	r0, r6
 801156e:	f7ff ff27 	bl	80113c0 <__i2b>
 8011572:	2300      	movs	r3, #0
 8011574:	6430      	str	r0, [r6, #64]	; 0x40
 8011576:	4604      	mov	r4, r0
 8011578:	6003      	str	r3, [r0, #0]
 801157a:	f04f 0900 	mov.w	r9, #0
 801157e:	07eb      	lsls	r3, r5, #31
 8011580:	d50a      	bpl.n	8011598 <__pow5mult+0x58>
 8011582:	4639      	mov	r1, r7
 8011584:	4622      	mov	r2, r4
 8011586:	4630      	mov	r0, r6
 8011588:	f7ff ff30 	bl	80113ec <__multiply>
 801158c:	4639      	mov	r1, r7
 801158e:	4680      	mov	r8, r0
 8011590:	4630      	mov	r0, r6
 8011592:	f7ff fe78 	bl	8011286 <_Bfree>
 8011596:	4647      	mov	r7, r8
 8011598:	106d      	asrs	r5, r5, #1
 801159a:	d00b      	beq.n	80115b4 <__pow5mult+0x74>
 801159c:	6820      	ldr	r0, [r4, #0]
 801159e:	b938      	cbnz	r0, 80115b0 <__pow5mult+0x70>
 80115a0:	4622      	mov	r2, r4
 80115a2:	4621      	mov	r1, r4
 80115a4:	4630      	mov	r0, r6
 80115a6:	f7ff ff21 	bl	80113ec <__multiply>
 80115aa:	6020      	str	r0, [r4, #0]
 80115ac:	f8c0 9000 	str.w	r9, [r0]
 80115b0:	4604      	mov	r4, r0
 80115b2:	e7e4      	b.n	801157e <__pow5mult+0x3e>
 80115b4:	4638      	mov	r0, r7
 80115b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115ba:	bf00      	nop
 80115bc:	08012208 	.word	0x08012208

080115c0 <__lshift>:
 80115c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115c4:	460c      	mov	r4, r1
 80115c6:	6849      	ldr	r1, [r1, #4]
 80115c8:	6923      	ldr	r3, [r4, #16]
 80115ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80115ce:	68a3      	ldr	r3, [r4, #8]
 80115d0:	4607      	mov	r7, r0
 80115d2:	4691      	mov	r9, r2
 80115d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80115d8:	f108 0601 	add.w	r6, r8, #1
 80115dc:	42b3      	cmp	r3, r6
 80115de:	db0b      	blt.n	80115f8 <__lshift+0x38>
 80115e0:	4638      	mov	r0, r7
 80115e2:	f7ff fe2b 	bl	801123c <_Balloc>
 80115e6:	4605      	mov	r5, r0
 80115e8:	b948      	cbnz	r0, 80115fe <__lshift+0x3e>
 80115ea:	4602      	mov	r2, r0
 80115ec:	4b28      	ldr	r3, [pc, #160]	; (8011690 <__lshift+0xd0>)
 80115ee:	4829      	ldr	r0, [pc, #164]	; (8011694 <__lshift+0xd4>)
 80115f0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80115f4:	f000 fba2 	bl	8011d3c <__assert_func>
 80115f8:	3101      	adds	r1, #1
 80115fa:	005b      	lsls	r3, r3, #1
 80115fc:	e7ee      	b.n	80115dc <__lshift+0x1c>
 80115fe:	2300      	movs	r3, #0
 8011600:	f100 0114 	add.w	r1, r0, #20
 8011604:	f100 0210 	add.w	r2, r0, #16
 8011608:	4618      	mov	r0, r3
 801160a:	4553      	cmp	r3, sl
 801160c:	db33      	blt.n	8011676 <__lshift+0xb6>
 801160e:	6920      	ldr	r0, [r4, #16]
 8011610:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011614:	f104 0314 	add.w	r3, r4, #20
 8011618:	f019 091f 	ands.w	r9, r9, #31
 801161c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011620:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011624:	d02b      	beq.n	801167e <__lshift+0xbe>
 8011626:	f1c9 0e20 	rsb	lr, r9, #32
 801162a:	468a      	mov	sl, r1
 801162c:	2200      	movs	r2, #0
 801162e:	6818      	ldr	r0, [r3, #0]
 8011630:	fa00 f009 	lsl.w	r0, r0, r9
 8011634:	4310      	orrs	r0, r2
 8011636:	f84a 0b04 	str.w	r0, [sl], #4
 801163a:	f853 2b04 	ldr.w	r2, [r3], #4
 801163e:	459c      	cmp	ip, r3
 8011640:	fa22 f20e 	lsr.w	r2, r2, lr
 8011644:	d8f3      	bhi.n	801162e <__lshift+0x6e>
 8011646:	ebac 0304 	sub.w	r3, ip, r4
 801164a:	3b15      	subs	r3, #21
 801164c:	f023 0303 	bic.w	r3, r3, #3
 8011650:	3304      	adds	r3, #4
 8011652:	f104 0015 	add.w	r0, r4, #21
 8011656:	4584      	cmp	ip, r0
 8011658:	bf38      	it	cc
 801165a:	2304      	movcc	r3, #4
 801165c:	50ca      	str	r2, [r1, r3]
 801165e:	b10a      	cbz	r2, 8011664 <__lshift+0xa4>
 8011660:	f108 0602 	add.w	r6, r8, #2
 8011664:	3e01      	subs	r6, #1
 8011666:	4638      	mov	r0, r7
 8011668:	612e      	str	r6, [r5, #16]
 801166a:	4621      	mov	r1, r4
 801166c:	f7ff fe0b 	bl	8011286 <_Bfree>
 8011670:	4628      	mov	r0, r5
 8011672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011676:	f842 0f04 	str.w	r0, [r2, #4]!
 801167a:	3301      	adds	r3, #1
 801167c:	e7c5      	b.n	801160a <__lshift+0x4a>
 801167e:	3904      	subs	r1, #4
 8011680:	f853 2b04 	ldr.w	r2, [r3], #4
 8011684:	f841 2f04 	str.w	r2, [r1, #4]!
 8011688:	459c      	cmp	ip, r3
 801168a:	d8f9      	bhi.n	8011680 <__lshift+0xc0>
 801168c:	e7ea      	b.n	8011664 <__lshift+0xa4>
 801168e:	bf00      	nop
 8011690:	08012053 	.word	0x08012053
 8011694:	080120bc 	.word	0x080120bc

08011698 <__mcmp>:
 8011698:	b530      	push	{r4, r5, lr}
 801169a:	6902      	ldr	r2, [r0, #16]
 801169c:	690c      	ldr	r4, [r1, #16]
 801169e:	1b12      	subs	r2, r2, r4
 80116a0:	d10e      	bne.n	80116c0 <__mcmp+0x28>
 80116a2:	f100 0314 	add.w	r3, r0, #20
 80116a6:	3114      	adds	r1, #20
 80116a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80116ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80116b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80116b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80116b8:	42a5      	cmp	r5, r4
 80116ba:	d003      	beq.n	80116c4 <__mcmp+0x2c>
 80116bc:	d305      	bcc.n	80116ca <__mcmp+0x32>
 80116be:	2201      	movs	r2, #1
 80116c0:	4610      	mov	r0, r2
 80116c2:	bd30      	pop	{r4, r5, pc}
 80116c4:	4283      	cmp	r3, r0
 80116c6:	d3f3      	bcc.n	80116b0 <__mcmp+0x18>
 80116c8:	e7fa      	b.n	80116c0 <__mcmp+0x28>
 80116ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80116ce:	e7f7      	b.n	80116c0 <__mcmp+0x28>

080116d0 <__mdiff>:
 80116d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116d4:	460c      	mov	r4, r1
 80116d6:	4606      	mov	r6, r0
 80116d8:	4611      	mov	r1, r2
 80116da:	4620      	mov	r0, r4
 80116dc:	4690      	mov	r8, r2
 80116de:	f7ff ffdb 	bl	8011698 <__mcmp>
 80116e2:	1e05      	subs	r5, r0, #0
 80116e4:	d110      	bne.n	8011708 <__mdiff+0x38>
 80116e6:	4629      	mov	r1, r5
 80116e8:	4630      	mov	r0, r6
 80116ea:	f7ff fda7 	bl	801123c <_Balloc>
 80116ee:	b930      	cbnz	r0, 80116fe <__mdiff+0x2e>
 80116f0:	4b3a      	ldr	r3, [pc, #232]	; (80117dc <__mdiff+0x10c>)
 80116f2:	4602      	mov	r2, r0
 80116f4:	f240 2137 	movw	r1, #567	; 0x237
 80116f8:	4839      	ldr	r0, [pc, #228]	; (80117e0 <__mdiff+0x110>)
 80116fa:	f000 fb1f 	bl	8011d3c <__assert_func>
 80116fe:	2301      	movs	r3, #1
 8011700:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011704:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011708:	bfa4      	itt	ge
 801170a:	4643      	movge	r3, r8
 801170c:	46a0      	movge	r8, r4
 801170e:	4630      	mov	r0, r6
 8011710:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011714:	bfa6      	itte	ge
 8011716:	461c      	movge	r4, r3
 8011718:	2500      	movge	r5, #0
 801171a:	2501      	movlt	r5, #1
 801171c:	f7ff fd8e 	bl	801123c <_Balloc>
 8011720:	b920      	cbnz	r0, 801172c <__mdiff+0x5c>
 8011722:	4b2e      	ldr	r3, [pc, #184]	; (80117dc <__mdiff+0x10c>)
 8011724:	4602      	mov	r2, r0
 8011726:	f240 2145 	movw	r1, #581	; 0x245
 801172a:	e7e5      	b.n	80116f8 <__mdiff+0x28>
 801172c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011730:	6926      	ldr	r6, [r4, #16]
 8011732:	60c5      	str	r5, [r0, #12]
 8011734:	f104 0914 	add.w	r9, r4, #20
 8011738:	f108 0514 	add.w	r5, r8, #20
 801173c:	f100 0e14 	add.w	lr, r0, #20
 8011740:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011744:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011748:	f108 0210 	add.w	r2, r8, #16
 801174c:	46f2      	mov	sl, lr
 801174e:	2100      	movs	r1, #0
 8011750:	f859 3b04 	ldr.w	r3, [r9], #4
 8011754:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011758:	fa11 f88b 	uxtah	r8, r1, fp
 801175c:	b299      	uxth	r1, r3
 801175e:	0c1b      	lsrs	r3, r3, #16
 8011760:	eba8 0801 	sub.w	r8, r8, r1
 8011764:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011768:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801176c:	fa1f f888 	uxth.w	r8, r8
 8011770:	1419      	asrs	r1, r3, #16
 8011772:	454e      	cmp	r6, r9
 8011774:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011778:	f84a 3b04 	str.w	r3, [sl], #4
 801177c:	d8e8      	bhi.n	8011750 <__mdiff+0x80>
 801177e:	1b33      	subs	r3, r6, r4
 8011780:	3b15      	subs	r3, #21
 8011782:	f023 0303 	bic.w	r3, r3, #3
 8011786:	3304      	adds	r3, #4
 8011788:	3415      	adds	r4, #21
 801178a:	42a6      	cmp	r6, r4
 801178c:	bf38      	it	cc
 801178e:	2304      	movcc	r3, #4
 8011790:	441d      	add	r5, r3
 8011792:	4473      	add	r3, lr
 8011794:	469e      	mov	lr, r3
 8011796:	462e      	mov	r6, r5
 8011798:	4566      	cmp	r6, ip
 801179a:	d30e      	bcc.n	80117ba <__mdiff+0xea>
 801179c:	f10c 0203 	add.w	r2, ip, #3
 80117a0:	1b52      	subs	r2, r2, r5
 80117a2:	f022 0203 	bic.w	r2, r2, #3
 80117a6:	3d03      	subs	r5, #3
 80117a8:	45ac      	cmp	ip, r5
 80117aa:	bf38      	it	cc
 80117ac:	2200      	movcc	r2, #0
 80117ae:	4413      	add	r3, r2
 80117b0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80117b4:	b17a      	cbz	r2, 80117d6 <__mdiff+0x106>
 80117b6:	6107      	str	r7, [r0, #16]
 80117b8:	e7a4      	b.n	8011704 <__mdiff+0x34>
 80117ba:	f856 8b04 	ldr.w	r8, [r6], #4
 80117be:	fa11 f288 	uxtah	r2, r1, r8
 80117c2:	1414      	asrs	r4, r2, #16
 80117c4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80117c8:	b292      	uxth	r2, r2
 80117ca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80117ce:	f84e 2b04 	str.w	r2, [lr], #4
 80117d2:	1421      	asrs	r1, r4, #16
 80117d4:	e7e0      	b.n	8011798 <__mdiff+0xc8>
 80117d6:	3f01      	subs	r7, #1
 80117d8:	e7ea      	b.n	80117b0 <__mdiff+0xe0>
 80117da:	bf00      	nop
 80117dc:	08012053 	.word	0x08012053
 80117e0:	080120bc 	.word	0x080120bc

080117e4 <__d2b>:
 80117e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80117e8:	460f      	mov	r7, r1
 80117ea:	2101      	movs	r1, #1
 80117ec:	ec59 8b10 	vmov	r8, r9, d0
 80117f0:	4616      	mov	r6, r2
 80117f2:	f7ff fd23 	bl	801123c <_Balloc>
 80117f6:	4604      	mov	r4, r0
 80117f8:	b930      	cbnz	r0, 8011808 <__d2b+0x24>
 80117fa:	4602      	mov	r2, r0
 80117fc:	4b24      	ldr	r3, [pc, #144]	; (8011890 <__d2b+0xac>)
 80117fe:	4825      	ldr	r0, [pc, #148]	; (8011894 <__d2b+0xb0>)
 8011800:	f240 310f 	movw	r1, #783	; 0x30f
 8011804:	f000 fa9a 	bl	8011d3c <__assert_func>
 8011808:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801180c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011810:	bb2d      	cbnz	r5, 801185e <__d2b+0x7a>
 8011812:	9301      	str	r3, [sp, #4]
 8011814:	f1b8 0300 	subs.w	r3, r8, #0
 8011818:	d026      	beq.n	8011868 <__d2b+0x84>
 801181a:	4668      	mov	r0, sp
 801181c:	9300      	str	r3, [sp, #0]
 801181e:	f7ff fda1 	bl	8011364 <__lo0bits>
 8011822:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011826:	b1e8      	cbz	r0, 8011864 <__d2b+0x80>
 8011828:	f1c0 0320 	rsb	r3, r0, #32
 801182c:	fa02 f303 	lsl.w	r3, r2, r3
 8011830:	430b      	orrs	r3, r1
 8011832:	40c2      	lsrs	r2, r0
 8011834:	6163      	str	r3, [r4, #20]
 8011836:	9201      	str	r2, [sp, #4]
 8011838:	9b01      	ldr	r3, [sp, #4]
 801183a:	61a3      	str	r3, [r4, #24]
 801183c:	2b00      	cmp	r3, #0
 801183e:	bf14      	ite	ne
 8011840:	2202      	movne	r2, #2
 8011842:	2201      	moveq	r2, #1
 8011844:	6122      	str	r2, [r4, #16]
 8011846:	b1bd      	cbz	r5, 8011878 <__d2b+0x94>
 8011848:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801184c:	4405      	add	r5, r0
 801184e:	603d      	str	r5, [r7, #0]
 8011850:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011854:	6030      	str	r0, [r6, #0]
 8011856:	4620      	mov	r0, r4
 8011858:	b003      	add	sp, #12
 801185a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801185e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011862:	e7d6      	b.n	8011812 <__d2b+0x2e>
 8011864:	6161      	str	r1, [r4, #20]
 8011866:	e7e7      	b.n	8011838 <__d2b+0x54>
 8011868:	a801      	add	r0, sp, #4
 801186a:	f7ff fd7b 	bl	8011364 <__lo0bits>
 801186e:	9b01      	ldr	r3, [sp, #4]
 8011870:	6163      	str	r3, [r4, #20]
 8011872:	3020      	adds	r0, #32
 8011874:	2201      	movs	r2, #1
 8011876:	e7e5      	b.n	8011844 <__d2b+0x60>
 8011878:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801187c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011880:	6038      	str	r0, [r7, #0]
 8011882:	6918      	ldr	r0, [r3, #16]
 8011884:	f7ff fd4e 	bl	8011324 <__hi0bits>
 8011888:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801188c:	e7e2      	b.n	8011854 <__d2b+0x70>
 801188e:	bf00      	nop
 8011890:	08012053 	.word	0x08012053
 8011894:	080120bc 	.word	0x080120bc

08011898 <_realloc_r>:
 8011898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801189c:	4682      	mov	sl, r0
 801189e:	460c      	mov	r4, r1
 80118a0:	b929      	cbnz	r1, 80118ae <_realloc_r+0x16>
 80118a2:	4611      	mov	r1, r2
 80118a4:	b003      	add	sp, #12
 80118a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118aa:	f7fc b8ed 	b.w	800da88 <_malloc_r>
 80118ae:	9201      	str	r2, [sp, #4]
 80118b0:	f7fc fb24 	bl	800defc <__malloc_lock>
 80118b4:	9a01      	ldr	r2, [sp, #4]
 80118b6:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80118ba:	f102 080b 	add.w	r8, r2, #11
 80118be:	f1b8 0f16 	cmp.w	r8, #22
 80118c2:	d90b      	bls.n	80118dc <_realloc_r+0x44>
 80118c4:	f038 0807 	bics.w	r8, r8, #7
 80118c8:	d50a      	bpl.n	80118e0 <_realloc_r+0x48>
 80118ca:	230c      	movs	r3, #12
 80118cc:	f8ca 3000 	str.w	r3, [sl]
 80118d0:	f04f 0b00 	mov.w	fp, #0
 80118d4:	4658      	mov	r0, fp
 80118d6:	b003      	add	sp, #12
 80118d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118dc:	f04f 0810 	mov.w	r8, #16
 80118e0:	4590      	cmp	r8, r2
 80118e2:	d3f2      	bcc.n	80118ca <_realloc_r+0x32>
 80118e4:	f025 0603 	bic.w	r6, r5, #3
 80118e8:	45b0      	cmp	r8, r6
 80118ea:	f1a4 0908 	sub.w	r9, r4, #8
 80118ee:	f340 8170 	ble.w	8011bd2 <_realloc_r+0x33a>
 80118f2:	499c      	ldr	r1, [pc, #624]	; (8011b64 <_realloc_r+0x2cc>)
 80118f4:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80118f8:	eb09 0306 	add.w	r3, r9, r6
 80118fc:	459c      	cmp	ip, r3
 80118fe:	6859      	ldr	r1, [r3, #4]
 8011900:	d005      	beq.n	801190e <_realloc_r+0x76>
 8011902:	f021 0001 	bic.w	r0, r1, #1
 8011906:	4418      	add	r0, r3
 8011908:	6840      	ldr	r0, [r0, #4]
 801190a:	07c7      	lsls	r7, r0, #31
 801190c:	d447      	bmi.n	801199e <_realloc_r+0x106>
 801190e:	f021 0103 	bic.w	r1, r1, #3
 8011912:	459c      	cmp	ip, r3
 8011914:	eb06 0701 	add.w	r7, r6, r1
 8011918:	d119      	bne.n	801194e <_realloc_r+0xb6>
 801191a:	f108 0010 	add.w	r0, r8, #16
 801191e:	42b8      	cmp	r0, r7
 8011920:	dc3f      	bgt.n	80119a2 <_realloc_r+0x10a>
 8011922:	eb09 0308 	add.w	r3, r9, r8
 8011926:	4a8f      	ldr	r2, [pc, #572]	; (8011b64 <_realloc_r+0x2cc>)
 8011928:	eba7 0708 	sub.w	r7, r7, r8
 801192c:	f047 0701 	orr.w	r7, r7, #1
 8011930:	6093      	str	r3, [r2, #8]
 8011932:	605f      	str	r7, [r3, #4]
 8011934:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011938:	f003 0301 	and.w	r3, r3, #1
 801193c:	ea43 0308 	orr.w	r3, r3, r8
 8011940:	f844 3c04 	str.w	r3, [r4, #-4]
 8011944:	4650      	mov	r0, sl
 8011946:	f7fc fadf 	bl	800df08 <__malloc_unlock>
 801194a:	46a3      	mov	fp, r4
 801194c:	e7c2      	b.n	80118d4 <_realloc_r+0x3c>
 801194e:	45b8      	cmp	r8, r7
 8011950:	dc27      	bgt.n	80119a2 <_realloc_r+0x10a>
 8011952:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8011956:	60da      	str	r2, [r3, #12]
 8011958:	6093      	str	r3, [r2, #8]
 801195a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801195e:	eba7 0008 	sub.w	r0, r7, r8
 8011962:	280f      	cmp	r0, #15
 8011964:	f003 0301 	and.w	r3, r3, #1
 8011968:	eb09 0207 	add.w	r2, r9, r7
 801196c:	f240 8133 	bls.w	8011bd6 <_realloc_r+0x33e>
 8011970:	eb09 0108 	add.w	r1, r9, r8
 8011974:	ea48 0303 	orr.w	r3, r8, r3
 8011978:	f040 0001 	orr.w	r0, r0, #1
 801197c:	f8c9 3004 	str.w	r3, [r9, #4]
 8011980:	6048      	str	r0, [r1, #4]
 8011982:	6853      	ldr	r3, [r2, #4]
 8011984:	f043 0301 	orr.w	r3, r3, #1
 8011988:	6053      	str	r3, [r2, #4]
 801198a:	3108      	adds	r1, #8
 801198c:	4650      	mov	r0, sl
 801198e:	f7fb ffbb 	bl	800d908 <_free_r>
 8011992:	4650      	mov	r0, sl
 8011994:	f7fc fab8 	bl	800df08 <__malloc_unlock>
 8011998:	f109 0b08 	add.w	fp, r9, #8
 801199c:	e79a      	b.n	80118d4 <_realloc_r+0x3c>
 801199e:	2100      	movs	r1, #0
 80119a0:	460b      	mov	r3, r1
 80119a2:	07e8      	lsls	r0, r5, #31
 80119a4:	f100 80c6 	bmi.w	8011b34 <_realloc_r+0x29c>
 80119a8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80119ac:	eba9 0505 	sub.w	r5, r9, r5
 80119b0:	6868      	ldr	r0, [r5, #4]
 80119b2:	f020 0003 	bic.w	r0, r0, #3
 80119b6:	eb00 0b06 	add.w	fp, r0, r6
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	f000 8086 	beq.w	8011acc <_realloc_r+0x234>
 80119c0:	459c      	cmp	ip, r3
 80119c2:	eb01 070b 	add.w	r7, r1, fp
 80119c6:	d149      	bne.n	8011a5c <_realloc_r+0x1c4>
 80119c8:	f108 0310 	add.w	r3, r8, #16
 80119cc:	42bb      	cmp	r3, r7
 80119ce:	dc7d      	bgt.n	8011acc <_realloc_r+0x234>
 80119d0:	46ab      	mov	fp, r5
 80119d2:	68eb      	ldr	r3, [r5, #12]
 80119d4:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 80119d8:	60d3      	str	r3, [r2, #12]
 80119da:	609a      	str	r2, [r3, #8]
 80119dc:	1f32      	subs	r2, r6, #4
 80119de:	2a24      	cmp	r2, #36	; 0x24
 80119e0:	d837      	bhi.n	8011a52 <_realloc_r+0x1ba>
 80119e2:	2a13      	cmp	r2, #19
 80119e4:	d933      	bls.n	8011a4e <_realloc_r+0x1b6>
 80119e6:	6823      	ldr	r3, [r4, #0]
 80119e8:	60ab      	str	r3, [r5, #8]
 80119ea:	6863      	ldr	r3, [r4, #4]
 80119ec:	60eb      	str	r3, [r5, #12]
 80119ee:	2a1b      	cmp	r2, #27
 80119f0:	d81b      	bhi.n	8011a2a <_realloc_r+0x192>
 80119f2:	3408      	adds	r4, #8
 80119f4:	f105 0310 	add.w	r3, r5, #16
 80119f8:	6822      	ldr	r2, [r4, #0]
 80119fa:	601a      	str	r2, [r3, #0]
 80119fc:	6862      	ldr	r2, [r4, #4]
 80119fe:	605a      	str	r2, [r3, #4]
 8011a00:	68a2      	ldr	r2, [r4, #8]
 8011a02:	609a      	str	r2, [r3, #8]
 8011a04:	eb05 0308 	add.w	r3, r5, r8
 8011a08:	4a56      	ldr	r2, [pc, #344]	; (8011b64 <_realloc_r+0x2cc>)
 8011a0a:	eba7 0708 	sub.w	r7, r7, r8
 8011a0e:	f047 0701 	orr.w	r7, r7, #1
 8011a12:	6093      	str	r3, [r2, #8]
 8011a14:	605f      	str	r7, [r3, #4]
 8011a16:	686b      	ldr	r3, [r5, #4]
 8011a18:	f003 0301 	and.w	r3, r3, #1
 8011a1c:	ea43 0308 	orr.w	r3, r3, r8
 8011a20:	606b      	str	r3, [r5, #4]
 8011a22:	4650      	mov	r0, sl
 8011a24:	f7fc fa70 	bl	800df08 <__malloc_unlock>
 8011a28:	e754      	b.n	80118d4 <_realloc_r+0x3c>
 8011a2a:	68a3      	ldr	r3, [r4, #8]
 8011a2c:	612b      	str	r3, [r5, #16]
 8011a2e:	68e3      	ldr	r3, [r4, #12]
 8011a30:	616b      	str	r3, [r5, #20]
 8011a32:	2a24      	cmp	r2, #36	; 0x24
 8011a34:	bf01      	itttt	eq
 8011a36:	6923      	ldreq	r3, [r4, #16]
 8011a38:	61ab      	streq	r3, [r5, #24]
 8011a3a:	6962      	ldreq	r2, [r4, #20]
 8011a3c:	61ea      	streq	r2, [r5, #28]
 8011a3e:	bf19      	ittee	ne
 8011a40:	3410      	addne	r4, #16
 8011a42:	f105 0318 	addne.w	r3, r5, #24
 8011a46:	f105 0320 	addeq.w	r3, r5, #32
 8011a4a:	3418      	addeq	r4, #24
 8011a4c:	e7d4      	b.n	80119f8 <_realloc_r+0x160>
 8011a4e:	465b      	mov	r3, fp
 8011a50:	e7d2      	b.n	80119f8 <_realloc_r+0x160>
 8011a52:	4621      	mov	r1, r4
 8011a54:	4658      	mov	r0, fp
 8011a56:	f7fe fd12 	bl	801047e <memmove>
 8011a5a:	e7d3      	b.n	8011a04 <_realloc_r+0x16c>
 8011a5c:	45b8      	cmp	r8, r7
 8011a5e:	dc35      	bgt.n	8011acc <_realloc_r+0x234>
 8011a60:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8011a64:	4628      	mov	r0, r5
 8011a66:	60da      	str	r2, [r3, #12]
 8011a68:	6093      	str	r3, [r2, #8]
 8011a6a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8011a6e:	68eb      	ldr	r3, [r5, #12]
 8011a70:	60d3      	str	r3, [r2, #12]
 8011a72:	609a      	str	r2, [r3, #8]
 8011a74:	1f32      	subs	r2, r6, #4
 8011a76:	2a24      	cmp	r2, #36	; 0x24
 8011a78:	d824      	bhi.n	8011ac4 <_realloc_r+0x22c>
 8011a7a:	2a13      	cmp	r2, #19
 8011a7c:	d908      	bls.n	8011a90 <_realloc_r+0x1f8>
 8011a7e:	6823      	ldr	r3, [r4, #0]
 8011a80:	60ab      	str	r3, [r5, #8]
 8011a82:	6863      	ldr	r3, [r4, #4]
 8011a84:	60eb      	str	r3, [r5, #12]
 8011a86:	2a1b      	cmp	r2, #27
 8011a88:	d80a      	bhi.n	8011aa0 <_realloc_r+0x208>
 8011a8a:	3408      	adds	r4, #8
 8011a8c:	f105 0010 	add.w	r0, r5, #16
 8011a90:	6823      	ldr	r3, [r4, #0]
 8011a92:	6003      	str	r3, [r0, #0]
 8011a94:	6863      	ldr	r3, [r4, #4]
 8011a96:	6043      	str	r3, [r0, #4]
 8011a98:	68a3      	ldr	r3, [r4, #8]
 8011a9a:	6083      	str	r3, [r0, #8]
 8011a9c:	46a9      	mov	r9, r5
 8011a9e:	e75c      	b.n	801195a <_realloc_r+0xc2>
 8011aa0:	68a3      	ldr	r3, [r4, #8]
 8011aa2:	612b      	str	r3, [r5, #16]
 8011aa4:	68e3      	ldr	r3, [r4, #12]
 8011aa6:	616b      	str	r3, [r5, #20]
 8011aa8:	2a24      	cmp	r2, #36	; 0x24
 8011aaa:	bf01      	itttt	eq
 8011aac:	6923      	ldreq	r3, [r4, #16]
 8011aae:	61ab      	streq	r3, [r5, #24]
 8011ab0:	6963      	ldreq	r3, [r4, #20]
 8011ab2:	61eb      	streq	r3, [r5, #28]
 8011ab4:	bf19      	ittee	ne
 8011ab6:	3410      	addne	r4, #16
 8011ab8:	f105 0018 	addne.w	r0, r5, #24
 8011abc:	f105 0020 	addeq.w	r0, r5, #32
 8011ac0:	3418      	addeq	r4, #24
 8011ac2:	e7e5      	b.n	8011a90 <_realloc_r+0x1f8>
 8011ac4:	4621      	mov	r1, r4
 8011ac6:	f7fe fcda 	bl	801047e <memmove>
 8011aca:	e7e7      	b.n	8011a9c <_realloc_r+0x204>
 8011acc:	45d8      	cmp	r8, fp
 8011ace:	dc31      	bgt.n	8011b34 <_realloc_r+0x29c>
 8011ad0:	4628      	mov	r0, r5
 8011ad2:	68eb      	ldr	r3, [r5, #12]
 8011ad4:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8011ad8:	60d3      	str	r3, [r2, #12]
 8011ada:	609a      	str	r2, [r3, #8]
 8011adc:	1f32      	subs	r2, r6, #4
 8011ade:	2a24      	cmp	r2, #36	; 0x24
 8011ae0:	d824      	bhi.n	8011b2c <_realloc_r+0x294>
 8011ae2:	2a13      	cmp	r2, #19
 8011ae4:	d908      	bls.n	8011af8 <_realloc_r+0x260>
 8011ae6:	6823      	ldr	r3, [r4, #0]
 8011ae8:	60ab      	str	r3, [r5, #8]
 8011aea:	6863      	ldr	r3, [r4, #4]
 8011aec:	60eb      	str	r3, [r5, #12]
 8011aee:	2a1b      	cmp	r2, #27
 8011af0:	d80a      	bhi.n	8011b08 <_realloc_r+0x270>
 8011af2:	3408      	adds	r4, #8
 8011af4:	f105 0010 	add.w	r0, r5, #16
 8011af8:	6823      	ldr	r3, [r4, #0]
 8011afa:	6003      	str	r3, [r0, #0]
 8011afc:	6863      	ldr	r3, [r4, #4]
 8011afe:	6043      	str	r3, [r0, #4]
 8011b00:	68a3      	ldr	r3, [r4, #8]
 8011b02:	6083      	str	r3, [r0, #8]
 8011b04:	465f      	mov	r7, fp
 8011b06:	e7c9      	b.n	8011a9c <_realloc_r+0x204>
 8011b08:	68a3      	ldr	r3, [r4, #8]
 8011b0a:	612b      	str	r3, [r5, #16]
 8011b0c:	68e3      	ldr	r3, [r4, #12]
 8011b0e:	616b      	str	r3, [r5, #20]
 8011b10:	2a24      	cmp	r2, #36	; 0x24
 8011b12:	bf01      	itttt	eq
 8011b14:	6923      	ldreq	r3, [r4, #16]
 8011b16:	61ab      	streq	r3, [r5, #24]
 8011b18:	6963      	ldreq	r3, [r4, #20]
 8011b1a:	61eb      	streq	r3, [r5, #28]
 8011b1c:	bf19      	ittee	ne
 8011b1e:	3410      	addne	r4, #16
 8011b20:	f105 0018 	addne.w	r0, r5, #24
 8011b24:	f105 0020 	addeq.w	r0, r5, #32
 8011b28:	3418      	addeq	r4, #24
 8011b2a:	e7e5      	b.n	8011af8 <_realloc_r+0x260>
 8011b2c:	4621      	mov	r1, r4
 8011b2e:	f7fe fca6 	bl	801047e <memmove>
 8011b32:	e7e7      	b.n	8011b04 <_realloc_r+0x26c>
 8011b34:	4611      	mov	r1, r2
 8011b36:	4650      	mov	r0, sl
 8011b38:	f7fb ffa6 	bl	800da88 <_malloc_r>
 8011b3c:	4683      	mov	fp, r0
 8011b3e:	2800      	cmp	r0, #0
 8011b40:	f43f af6f 	beq.w	8011a22 <_realloc_r+0x18a>
 8011b44:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011b48:	f023 0301 	bic.w	r3, r3, #1
 8011b4c:	444b      	add	r3, r9
 8011b4e:	f1a0 0208 	sub.w	r2, r0, #8
 8011b52:	4293      	cmp	r3, r2
 8011b54:	d108      	bne.n	8011b68 <_realloc_r+0x2d0>
 8011b56:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8011b5a:	f027 0703 	bic.w	r7, r7, #3
 8011b5e:	4437      	add	r7, r6
 8011b60:	e6fb      	b.n	801195a <_realloc_r+0xc2>
 8011b62:	bf00      	nop
 8011b64:	24000240 	.word	0x24000240
 8011b68:	1f32      	subs	r2, r6, #4
 8011b6a:	2a24      	cmp	r2, #36	; 0x24
 8011b6c:	d82d      	bhi.n	8011bca <_realloc_r+0x332>
 8011b6e:	2a13      	cmp	r2, #19
 8011b70:	d928      	bls.n	8011bc4 <_realloc_r+0x32c>
 8011b72:	6823      	ldr	r3, [r4, #0]
 8011b74:	6003      	str	r3, [r0, #0]
 8011b76:	6863      	ldr	r3, [r4, #4]
 8011b78:	6043      	str	r3, [r0, #4]
 8011b7a:	2a1b      	cmp	r2, #27
 8011b7c:	d80e      	bhi.n	8011b9c <_realloc_r+0x304>
 8011b7e:	f104 0208 	add.w	r2, r4, #8
 8011b82:	f100 0308 	add.w	r3, r0, #8
 8011b86:	6811      	ldr	r1, [r2, #0]
 8011b88:	6019      	str	r1, [r3, #0]
 8011b8a:	6851      	ldr	r1, [r2, #4]
 8011b8c:	6059      	str	r1, [r3, #4]
 8011b8e:	6892      	ldr	r2, [r2, #8]
 8011b90:	609a      	str	r2, [r3, #8]
 8011b92:	4621      	mov	r1, r4
 8011b94:	4650      	mov	r0, sl
 8011b96:	f7fb feb7 	bl	800d908 <_free_r>
 8011b9a:	e742      	b.n	8011a22 <_realloc_r+0x18a>
 8011b9c:	68a3      	ldr	r3, [r4, #8]
 8011b9e:	6083      	str	r3, [r0, #8]
 8011ba0:	68e3      	ldr	r3, [r4, #12]
 8011ba2:	60c3      	str	r3, [r0, #12]
 8011ba4:	2a24      	cmp	r2, #36	; 0x24
 8011ba6:	bf01      	itttt	eq
 8011ba8:	6923      	ldreq	r3, [r4, #16]
 8011baa:	6103      	streq	r3, [r0, #16]
 8011bac:	6961      	ldreq	r1, [r4, #20]
 8011bae:	6141      	streq	r1, [r0, #20]
 8011bb0:	bf19      	ittee	ne
 8011bb2:	f104 0210 	addne.w	r2, r4, #16
 8011bb6:	f100 0310 	addne.w	r3, r0, #16
 8011bba:	f104 0218 	addeq.w	r2, r4, #24
 8011bbe:	f100 0318 	addeq.w	r3, r0, #24
 8011bc2:	e7e0      	b.n	8011b86 <_realloc_r+0x2ee>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	4622      	mov	r2, r4
 8011bc8:	e7dd      	b.n	8011b86 <_realloc_r+0x2ee>
 8011bca:	4621      	mov	r1, r4
 8011bcc:	f7fe fc57 	bl	801047e <memmove>
 8011bd0:	e7df      	b.n	8011b92 <_realloc_r+0x2fa>
 8011bd2:	4637      	mov	r7, r6
 8011bd4:	e6c1      	b.n	801195a <_realloc_r+0xc2>
 8011bd6:	431f      	orrs	r7, r3
 8011bd8:	f8c9 7004 	str.w	r7, [r9, #4]
 8011bdc:	6853      	ldr	r3, [r2, #4]
 8011bde:	f043 0301 	orr.w	r3, r3, #1
 8011be2:	6053      	str	r3, [r2, #4]
 8011be4:	e6d5      	b.n	8011992 <_realloc_r+0xfa>
 8011be6:	bf00      	nop

08011be8 <__ascii_wctomb>:
 8011be8:	b149      	cbz	r1, 8011bfe <__ascii_wctomb+0x16>
 8011bea:	2aff      	cmp	r2, #255	; 0xff
 8011bec:	bf85      	ittet	hi
 8011bee:	238a      	movhi	r3, #138	; 0x8a
 8011bf0:	6003      	strhi	r3, [r0, #0]
 8011bf2:	700a      	strbls	r2, [r1, #0]
 8011bf4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011bf8:	bf98      	it	ls
 8011bfa:	2001      	movls	r0, #1
 8011bfc:	4770      	bx	lr
 8011bfe:	4608      	mov	r0, r1
 8011c00:	4770      	bx	lr
	...

08011c04 <_wcrtomb_r>:
 8011c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c06:	4c09      	ldr	r4, [pc, #36]	; (8011c2c <_wcrtomb_r+0x28>)
 8011c08:	b085      	sub	sp, #20
 8011c0a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8011c0e:	4605      	mov	r5, r0
 8011c10:	461e      	mov	r6, r3
 8011c12:	b909      	cbnz	r1, 8011c18 <_wcrtomb_r+0x14>
 8011c14:	460a      	mov	r2, r1
 8011c16:	a901      	add	r1, sp, #4
 8011c18:	47b8      	blx	r7
 8011c1a:	1c43      	adds	r3, r0, #1
 8011c1c:	bf01      	itttt	eq
 8011c1e:	2300      	moveq	r3, #0
 8011c20:	6033      	streq	r3, [r6, #0]
 8011c22:	238a      	moveq	r3, #138	; 0x8a
 8011c24:	602b      	streq	r3, [r5, #0]
 8011c26:	b005      	add	sp, #20
 8011c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c2a:	bf00      	nop
 8011c2c:	24000650 	.word	0x24000650

08011c30 <__swhatbuf_r>:
 8011c30:	b570      	push	{r4, r5, r6, lr}
 8011c32:	460c      	mov	r4, r1
 8011c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c38:	2900      	cmp	r1, #0
 8011c3a:	b096      	sub	sp, #88	; 0x58
 8011c3c:	4615      	mov	r5, r2
 8011c3e:	461e      	mov	r6, r3
 8011c40:	da07      	bge.n	8011c52 <__swhatbuf_r+0x22>
 8011c42:	89a1      	ldrh	r1, [r4, #12]
 8011c44:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8011c48:	d017      	beq.n	8011c7a <__swhatbuf_r+0x4a>
 8011c4a:	2100      	movs	r1, #0
 8011c4c:	2340      	movs	r3, #64	; 0x40
 8011c4e:	4608      	mov	r0, r1
 8011c50:	e00f      	b.n	8011c72 <__swhatbuf_r+0x42>
 8011c52:	466a      	mov	r2, sp
 8011c54:	f000 f850 	bl	8011cf8 <_fstat_r>
 8011c58:	2800      	cmp	r0, #0
 8011c5a:	dbf2      	blt.n	8011c42 <__swhatbuf_r+0x12>
 8011c5c:	9901      	ldr	r1, [sp, #4]
 8011c5e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011c62:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011c66:	4259      	negs	r1, r3
 8011c68:	4159      	adcs	r1, r3
 8011c6a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c72:	6031      	str	r1, [r6, #0]
 8011c74:	602b      	str	r3, [r5, #0]
 8011c76:	b016      	add	sp, #88	; 0x58
 8011c78:	bd70      	pop	{r4, r5, r6, pc}
 8011c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c7e:	e7e6      	b.n	8011c4e <__swhatbuf_r+0x1e>

08011c80 <__smakebuf_r>:
 8011c80:	898b      	ldrh	r3, [r1, #12]
 8011c82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011c84:	079d      	lsls	r5, r3, #30
 8011c86:	4606      	mov	r6, r0
 8011c88:	460c      	mov	r4, r1
 8011c8a:	d507      	bpl.n	8011c9c <__smakebuf_r+0x1c>
 8011c8c:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8011c90:	6023      	str	r3, [r4, #0]
 8011c92:	6123      	str	r3, [r4, #16]
 8011c94:	2301      	movs	r3, #1
 8011c96:	6163      	str	r3, [r4, #20]
 8011c98:	b002      	add	sp, #8
 8011c9a:	bd70      	pop	{r4, r5, r6, pc}
 8011c9c:	ab01      	add	r3, sp, #4
 8011c9e:	466a      	mov	r2, sp
 8011ca0:	f7ff ffc6 	bl	8011c30 <__swhatbuf_r>
 8011ca4:	9900      	ldr	r1, [sp, #0]
 8011ca6:	4605      	mov	r5, r0
 8011ca8:	4630      	mov	r0, r6
 8011caa:	f7fb feed 	bl	800da88 <_malloc_r>
 8011cae:	b948      	cbnz	r0, 8011cc4 <__smakebuf_r+0x44>
 8011cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cb4:	059a      	lsls	r2, r3, #22
 8011cb6:	d4ef      	bmi.n	8011c98 <__smakebuf_r+0x18>
 8011cb8:	f023 0303 	bic.w	r3, r3, #3
 8011cbc:	f043 0302 	orr.w	r3, r3, #2
 8011cc0:	81a3      	strh	r3, [r4, #12]
 8011cc2:	e7e3      	b.n	8011c8c <__smakebuf_r+0xc>
 8011cc4:	89a3      	ldrh	r3, [r4, #12]
 8011cc6:	6020      	str	r0, [r4, #0]
 8011cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ccc:	81a3      	strh	r3, [r4, #12]
 8011cce:	9b00      	ldr	r3, [sp, #0]
 8011cd0:	6163      	str	r3, [r4, #20]
 8011cd2:	9b01      	ldr	r3, [sp, #4]
 8011cd4:	6120      	str	r0, [r4, #16]
 8011cd6:	b15b      	cbz	r3, 8011cf0 <__smakebuf_r+0x70>
 8011cd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011cdc:	4630      	mov	r0, r6
 8011cde:	f000 f81d 	bl	8011d1c <_isatty_r>
 8011ce2:	b128      	cbz	r0, 8011cf0 <__smakebuf_r+0x70>
 8011ce4:	89a3      	ldrh	r3, [r4, #12]
 8011ce6:	f023 0303 	bic.w	r3, r3, #3
 8011cea:	f043 0301 	orr.w	r3, r3, #1
 8011cee:	81a3      	strh	r3, [r4, #12]
 8011cf0:	89a3      	ldrh	r3, [r4, #12]
 8011cf2:	431d      	orrs	r5, r3
 8011cf4:	81a5      	strh	r5, [r4, #12]
 8011cf6:	e7cf      	b.n	8011c98 <__smakebuf_r+0x18>

08011cf8 <_fstat_r>:
 8011cf8:	b538      	push	{r3, r4, r5, lr}
 8011cfa:	4d07      	ldr	r5, [pc, #28]	; (8011d18 <_fstat_r+0x20>)
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	4604      	mov	r4, r0
 8011d00:	4608      	mov	r0, r1
 8011d02:	4611      	mov	r1, r2
 8011d04:	602b      	str	r3, [r5, #0]
 8011d06:	f7ef faa0 	bl	800124a <_fstat>
 8011d0a:	1c43      	adds	r3, r0, #1
 8011d0c:	d102      	bne.n	8011d14 <_fstat_r+0x1c>
 8011d0e:	682b      	ldr	r3, [r5, #0]
 8011d10:	b103      	cbz	r3, 8011d14 <_fstat_r+0x1c>
 8011d12:	6023      	str	r3, [r4, #0]
 8011d14:	bd38      	pop	{r3, r4, r5, pc}
 8011d16:	bf00      	nop
 8011d18:	24002f5c 	.word	0x24002f5c

08011d1c <_isatty_r>:
 8011d1c:	b538      	push	{r3, r4, r5, lr}
 8011d1e:	4d06      	ldr	r5, [pc, #24]	; (8011d38 <_isatty_r+0x1c>)
 8011d20:	2300      	movs	r3, #0
 8011d22:	4604      	mov	r4, r0
 8011d24:	4608      	mov	r0, r1
 8011d26:	602b      	str	r3, [r5, #0]
 8011d28:	f7ef fa9f 	bl	800126a <_isatty>
 8011d2c:	1c43      	adds	r3, r0, #1
 8011d2e:	d102      	bne.n	8011d36 <_isatty_r+0x1a>
 8011d30:	682b      	ldr	r3, [r5, #0]
 8011d32:	b103      	cbz	r3, 8011d36 <_isatty_r+0x1a>
 8011d34:	6023      	str	r3, [r4, #0]
 8011d36:	bd38      	pop	{r3, r4, r5, pc}
 8011d38:	24002f5c 	.word	0x24002f5c

08011d3c <__assert_func>:
 8011d3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d3e:	4614      	mov	r4, r2
 8011d40:	461a      	mov	r2, r3
 8011d42:	4b09      	ldr	r3, [pc, #36]	; (8011d68 <__assert_func+0x2c>)
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	4605      	mov	r5, r0
 8011d48:	68d8      	ldr	r0, [r3, #12]
 8011d4a:	b14c      	cbz	r4, 8011d60 <__assert_func+0x24>
 8011d4c:	4b07      	ldr	r3, [pc, #28]	; (8011d6c <__assert_func+0x30>)
 8011d4e:	9100      	str	r1, [sp, #0]
 8011d50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011d54:	4906      	ldr	r1, [pc, #24]	; (8011d70 <__assert_func+0x34>)
 8011d56:	462b      	mov	r3, r5
 8011d58:	f000 f844 	bl	8011de4 <fiprintf>
 8011d5c:	f000 f854 	bl	8011e08 <abort>
 8011d60:	4b04      	ldr	r3, [pc, #16]	; (8011d74 <__assert_func+0x38>)
 8011d62:	461c      	mov	r4, r3
 8011d64:	e7f3      	b.n	8011d4e <__assert_func+0x12>
 8011d66:	bf00      	nop
 8011d68:	24000238 	.word	0x24000238
 8011d6c:	08012315 	.word	0x08012315
 8011d70:	08012322 	.word	0x08012322
 8011d74:	08012350 	.word	0x08012350

08011d78 <_calloc_r>:
 8011d78:	b538      	push	{r3, r4, r5, lr}
 8011d7a:	fba1 1502 	umull	r1, r5, r1, r2
 8011d7e:	b92d      	cbnz	r5, 8011d8c <_calloc_r+0x14>
 8011d80:	f7fb fe82 	bl	800da88 <_malloc_r>
 8011d84:	4604      	mov	r4, r0
 8011d86:	b938      	cbnz	r0, 8011d98 <_calloc_r+0x20>
 8011d88:	4620      	mov	r0, r4
 8011d8a:	bd38      	pop	{r3, r4, r5, pc}
 8011d8c:	f7fb fd2a 	bl	800d7e4 <__errno>
 8011d90:	230c      	movs	r3, #12
 8011d92:	6003      	str	r3, [r0, #0]
 8011d94:	2400      	movs	r4, #0
 8011d96:	e7f7      	b.n	8011d88 <_calloc_r+0x10>
 8011d98:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8011d9c:	f022 0203 	bic.w	r2, r2, #3
 8011da0:	3a04      	subs	r2, #4
 8011da2:	2a24      	cmp	r2, #36	; 0x24
 8011da4:	d819      	bhi.n	8011dda <_calloc_r+0x62>
 8011da6:	2a13      	cmp	r2, #19
 8011da8:	d915      	bls.n	8011dd6 <_calloc_r+0x5e>
 8011daa:	2a1b      	cmp	r2, #27
 8011dac:	e9c0 5500 	strd	r5, r5, [r0]
 8011db0:	d806      	bhi.n	8011dc0 <_calloc_r+0x48>
 8011db2:	f100 0308 	add.w	r3, r0, #8
 8011db6:	2200      	movs	r2, #0
 8011db8:	e9c3 2200 	strd	r2, r2, [r3]
 8011dbc:	609a      	str	r2, [r3, #8]
 8011dbe:	e7e3      	b.n	8011d88 <_calloc_r+0x10>
 8011dc0:	2a24      	cmp	r2, #36	; 0x24
 8011dc2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8011dc6:	bf11      	iteee	ne
 8011dc8:	f100 0310 	addne.w	r3, r0, #16
 8011dcc:	6105      	streq	r5, [r0, #16]
 8011dce:	f100 0318 	addeq.w	r3, r0, #24
 8011dd2:	6145      	streq	r5, [r0, #20]
 8011dd4:	e7ef      	b.n	8011db6 <_calloc_r+0x3e>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	e7ed      	b.n	8011db6 <_calloc_r+0x3e>
 8011dda:	4629      	mov	r1, r5
 8011ddc:	f7fb fcb4 	bl	800d748 <memset>
 8011de0:	e7d2      	b.n	8011d88 <_calloc_r+0x10>
	...

08011de4 <fiprintf>:
 8011de4:	b40e      	push	{r1, r2, r3}
 8011de6:	b503      	push	{r0, r1, lr}
 8011de8:	4601      	mov	r1, r0
 8011dea:	ab03      	add	r3, sp, #12
 8011dec:	4805      	ldr	r0, [pc, #20]	; (8011e04 <fiprintf+0x20>)
 8011dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8011df2:	6800      	ldr	r0, [r0, #0]
 8011df4:	9301      	str	r3, [sp, #4]
 8011df6:	f7fd fad9 	bl	800f3ac <_vfiprintf_r>
 8011dfa:	b002      	add	sp, #8
 8011dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e00:	b003      	add	sp, #12
 8011e02:	4770      	bx	lr
 8011e04:	24000238 	.word	0x24000238

08011e08 <abort>:
 8011e08:	b508      	push	{r3, lr}
 8011e0a:	2006      	movs	r0, #6
 8011e0c:	f000 f82c 	bl	8011e68 <raise>
 8011e10:	2001      	movs	r0, #1
 8011e12:	f7ef f9c5 	bl	80011a0 <_exit>

08011e16 <_raise_r>:
 8011e16:	291f      	cmp	r1, #31
 8011e18:	b538      	push	{r3, r4, r5, lr}
 8011e1a:	4604      	mov	r4, r0
 8011e1c:	460d      	mov	r5, r1
 8011e1e:	d904      	bls.n	8011e2a <_raise_r+0x14>
 8011e20:	2316      	movs	r3, #22
 8011e22:	6003      	str	r3, [r0, #0]
 8011e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e28:	bd38      	pop	{r3, r4, r5, pc}
 8011e2a:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 8011e2e:	b112      	cbz	r2, 8011e36 <_raise_r+0x20>
 8011e30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e34:	b94b      	cbnz	r3, 8011e4a <_raise_r+0x34>
 8011e36:	4620      	mov	r0, r4
 8011e38:	f000 f830 	bl	8011e9c <_getpid_r>
 8011e3c:	462a      	mov	r2, r5
 8011e3e:	4601      	mov	r1, r0
 8011e40:	4620      	mov	r0, r4
 8011e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e46:	f000 b817 	b.w	8011e78 <_kill_r>
 8011e4a:	2b01      	cmp	r3, #1
 8011e4c:	d00a      	beq.n	8011e64 <_raise_r+0x4e>
 8011e4e:	1c59      	adds	r1, r3, #1
 8011e50:	d103      	bne.n	8011e5a <_raise_r+0x44>
 8011e52:	2316      	movs	r3, #22
 8011e54:	6003      	str	r3, [r0, #0]
 8011e56:	2001      	movs	r0, #1
 8011e58:	e7e6      	b.n	8011e28 <_raise_r+0x12>
 8011e5a:	2400      	movs	r4, #0
 8011e5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011e60:	4628      	mov	r0, r5
 8011e62:	4798      	blx	r3
 8011e64:	2000      	movs	r0, #0
 8011e66:	e7df      	b.n	8011e28 <_raise_r+0x12>

08011e68 <raise>:
 8011e68:	4b02      	ldr	r3, [pc, #8]	; (8011e74 <raise+0xc>)
 8011e6a:	4601      	mov	r1, r0
 8011e6c:	6818      	ldr	r0, [r3, #0]
 8011e6e:	f7ff bfd2 	b.w	8011e16 <_raise_r>
 8011e72:	bf00      	nop
 8011e74:	24000238 	.word	0x24000238

08011e78 <_kill_r>:
 8011e78:	b538      	push	{r3, r4, r5, lr}
 8011e7a:	4d07      	ldr	r5, [pc, #28]	; (8011e98 <_kill_r+0x20>)
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	4604      	mov	r4, r0
 8011e80:	4608      	mov	r0, r1
 8011e82:	4611      	mov	r1, r2
 8011e84:	602b      	str	r3, [r5, #0]
 8011e86:	f7ef f97b 	bl	8001180 <_kill>
 8011e8a:	1c43      	adds	r3, r0, #1
 8011e8c:	d102      	bne.n	8011e94 <_kill_r+0x1c>
 8011e8e:	682b      	ldr	r3, [r5, #0]
 8011e90:	b103      	cbz	r3, 8011e94 <_kill_r+0x1c>
 8011e92:	6023      	str	r3, [r4, #0]
 8011e94:	bd38      	pop	{r3, r4, r5, pc}
 8011e96:	bf00      	nop
 8011e98:	24002f5c 	.word	0x24002f5c

08011e9c <_getpid_r>:
 8011e9c:	f7ef b968 	b.w	8001170 <_getpid>

08011ea0 <_init>:
 8011ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ea2:	bf00      	nop
 8011ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ea6:	bc08      	pop	{r3}
 8011ea8:	469e      	mov	lr, r3
 8011eaa:	4770      	bx	lr

08011eac <_fini>:
 8011eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eae:	bf00      	nop
 8011eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011eb2:	bc08      	pop	{r3}
 8011eb4:	469e      	mov	lr, r3
 8011eb6:	4770      	bx	lr
