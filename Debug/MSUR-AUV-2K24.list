
MSUR-AUV-2K24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af4c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800b1ec  0800b1ec  0001b1ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b3dc  0800b3dc  0001b3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b3e0  0800b3e0  0001b3e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000160  24000000  0800b3e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000025e4  24000160  0800b544  00020160  2**2
                  ALLOC
  7 ._user_heap_stack 00000804  24002744  0800b544  00022744  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002018e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a272  00000000  00000000  000201d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c37  00000000  00000000  0003a443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014e0  00000000  00000000  0003e080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000fdd  00000000  00000000  0003f560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039598  00000000  00000000  0004053d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001aace  00000000  00000000  00079ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00161067  00000000  00000000  000945a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00005f14  00000000  00000000  001f560c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000066  00000000  00000000  001fb520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000160 	.word	0x24000160
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b1d4 	.word	0x0800b1d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000164 	.word	0x24000164
 80002dc:	0800b1d4 	.word	0x0800b1d4

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <LOG_CDC_FS>:
#include "config.h"
#include <string.h>
#include <stdio.h>
#include <stdarg.h>

void LOG_CDC_FS(Severity severity, const char *fmt, ...){
 80003a0:	b40e      	push	{r1, r2, r3}
 80003a2:	b580      	push	{r7, lr}
 80003a4:	b085      	sub	sp, #20
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	4603      	mov	r3, r0
 80003aa:	71fb      	strb	r3, [r7, #7]
	va_list args;
    va_start(args, fmt);
 80003ac:	f107 0320 	add.w	r3, r7, #32
 80003b0:	60fb      	str	r3, [r7, #12]
//	if(severity < CONF_GLOBAL_SEVERITY)
//	    	return;
	printf("[%f]:", ((float)HAL_GetTick())/1000);
 80003b2:	f000 fd59 	bl	8000e68 <HAL_GetTick>
 80003b6:	ee07 0a90 	vmov	s15, r0
 80003ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80003be:	eddf 6a21 	vldr	s13, [pc, #132]	; 8000444 <LOG_CDC_FS+0xa4>
 80003c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80003c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80003ca:	ec53 2b17 	vmov	r2, r3, d7
 80003ce:	481e      	ldr	r0, [pc, #120]	; (8000448 <LOG_CDC_FS+0xa8>)
 80003d0:	f009 ffe8 	bl	800a3a4 <iprintf>
    switch(severity){
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	2b05      	cmp	r3, #5
 80003d8:	d826      	bhi.n	8000428 <LOG_CDC_FS+0x88>
 80003da:	a201      	add	r2, pc, #4	; (adr r2, 80003e0 <LOG_CDC_FS+0x40>)
 80003dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e0:	080003f9 	.word	0x080003f9
 80003e4:	08000401 	.word	0x08000401
 80003e8:	08000409 	.word	0x08000409
 80003ec:	08000411 	.word	0x08000411
 80003f0:	08000419 	.word	0x08000419
 80003f4:	08000421 	.word	0x08000421
	case TRACE:
		printf(" trace: ");
 80003f8:	4814      	ldr	r0, [pc, #80]	; (800044c <LOG_CDC_FS+0xac>)
 80003fa:	f009 ffd3 	bl	800a3a4 <iprintf>
		break;
 80003fe:	e013      	b.n	8000428 <LOG_CDC_FS+0x88>
	case DEBUG:
		printf("\033[37m debug: ");
 8000400:	4813      	ldr	r0, [pc, #76]	; (8000450 <LOG_CDC_FS+0xb0>)
 8000402:	f009 ffcf 	bl	800a3a4 <iprintf>
		break;
 8000406:	e00f      	b.n	8000428 <LOG_CDC_FS+0x88>
	case INFO:
		printf("\033[36m info: ");
 8000408:	4812      	ldr	r0, [pc, #72]	; (8000454 <LOG_CDC_FS+0xb4>)
 800040a:	f009 ffcb 	bl	800a3a4 <iprintf>
		break;
 800040e:	e00b      	b.n	8000428 <LOG_CDC_FS+0x88>
	case NOTICE:
		printf("\033[36m notice: ");
 8000410:	4811      	ldr	r0, [pc, #68]	; (8000458 <LOG_CDC_FS+0xb8>)
 8000412:	f009 ffc7 	bl	800a3a4 <iprintf>
		break;
 8000416:	e007      	b.n	8000428 <LOG_CDC_FS+0x88>
	case WARN:
		printf("\033[33m warn: ");
 8000418:	4810      	ldr	r0, [pc, #64]	; (800045c <LOG_CDC_FS+0xbc>)
 800041a:	f009 ffc3 	bl	800a3a4 <iprintf>
		break;
 800041e:	e003      	b.n	8000428 <LOG_CDC_FS+0x88>
	case ERR:
		printf("\033[31;1m err: ");
 8000420:	480f      	ldr	r0, [pc, #60]	; (8000460 <LOG_CDC_FS+0xc0>)
 8000422:	f009 ffbf 	bl	800a3a4 <iprintf>
		break;
 8000426:	bf00      	nop
	}

    vprintf(fmt, args);
 8000428:	68f9      	ldr	r1, [r7, #12]
 800042a:	69f8      	ldr	r0, [r7, #28]
 800042c:	f00a f874 	bl	800a518 <viprintf>
    printf("\033[0m\r\n");
 8000430:	480c      	ldr	r0, [pc, #48]	; (8000464 <LOG_CDC_FS+0xc4>)
 8000432:	f00a f825 	bl	800a480 <puts>
    va_end(args);
}
 8000436:	bf00      	nop
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000440:	b003      	add	sp, #12
 8000442:	4770      	bx	lr
 8000444:	447a0000 	.word	0x447a0000
 8000448:	0800b1ec 	.word	0x0800b1ec
 800044c:	0800b1f4 	.word	0x0800b1f4
 8000450:	0800b200 	.word	0x0800b200
 8000454:	0800b210 	.word	0x0800b210
 8000458:	0800b220 	.word	0x0800b220
 800045c:	0800b230 	.word	0x0800b230
 8000460:	0800b240 	.word	0x0800b240
 8000464:	0800b250 	.word	0x0800b250

08000468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000468:	b590      	push	{r4, r7, lr}
 800046a:	b08b      	sub	sp, #44	; 0x2c
 800046c:	af04      	add	r7, sp, #16
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800046e:	4b78      	ldr	r3, [pc, #480]	; (8000650 <main+0x1e8>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000476:	2b00      	cmp	r3, #0
 8000478:	d11b      	bne.n	80004b2 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800047a:	f3bf 8f4f 	dsb	sy
}
 800047e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000480:	f3bf 8f6f 	isb	sy
}
 8000484:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000486:	4b72      	ldr	r3, [pc, #456]	; (8000650 <main+0x1e8>)
 8000488:	2200      	movs	r2, #0
 800048a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800048e:	f3bf 8f4f 	dsb	sy
}
 8000492:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000494:	f3bf 8f6f 	isb	sy
}
 8000498:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800049a:	4b6d      	ldr	r3, [pc, #436]	; (8000650 <main+0x1e8>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4a6c      	ldr	r2, [pc, #432]	; (8000650 <main+0x1e8>)
 80004a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004a4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004a6:	f3bf 8f4f 	dsb	sy
}
 80004aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004ac:	f3bf 8f6f 	isb	sy
}
 80004b0:	e000      	b.n	80004b4 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004b2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004b4:	4b66      	ldr	r3, [pc, #408]	; (8000650 <main+0x1e8>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d138      	bne.n	8000532 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80004c0:	4b63      	ldr	r3, [pc, #396]	; (8000650 <main+0x1e8>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004c8:	f3bf 8f4f 	dsb	sy
}
 80004cc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004ce:	4b60      	ldr	r3, [pc, #384]	; (8000650 <main+0x1e8>)
 80004d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004d4:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	0b5b      	lsrs	r3, r3, #13
 80004da:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004de:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	08db      	lsrs	r3, r3, #3
 80004e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80004e8:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	015a      	lsls	r2, r3, #5
 80004ee:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80004f2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80004f4:	683a      	ldr	r2, [r7, #0]
 80004f6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004f8:	4955      	ldr	r1, [pc, #340]	; (8000650 <main+0x1e8>)
 80004fa:	4313      	orrs	r3, r2
 80004fc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	1e5a      	subs	r2, r3, #1
 8000504:	603a      	str	r2, [r7, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d1ef      	bne.n	80004ea <main+0x82>
    } while(sets-- != 0U);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	1e5a      	subs	r2, r3, #1
 800050e:	607a      	str	r2, [r7, #4]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d1e5      	bne.n	80004e0 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000514:	f3bf 8f4f 	dsb	sy
}
 8000518:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800051a:	4b4d      	ldr	r3, [pc, #308]	; (8000650 <main+0x1e8>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a4c      	ldr	r2, [pc, #304]	; (8000650 <main+0x1e8>)
 8000520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000524:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000526:	f3bf 8f4f 	dsb	sy
}
 800052a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800052c:	f3bf 8f6f 	isb	sy
}
 8000530:	e000      	b.n	8000534 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000532:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fc12 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f8a8 	bl	800068c <SystemClock_Config>
  /* Use the PLLx2 clock for HRTIM */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f99a 	bl	8000874 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000540:	f009 f900 	bl	8009744 <MX_USB_DEVICE_Init>
  MX_TIM16_Init();
 8000544:	f000 f920 	bl	8000788 <MX_TIM16_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t oldtick = HAL_GetTick();
 8000548:	f000 fc8e 	bl	8000e68 <HAL_GetTick>
 800054c:	6178      	str	r0, [r7, #20]
  uint32_t newtick = HAL_GetTick();
 800054e:	f000 fc8b 	bl	8000e68 <HAL_GetTick>
 8000552:	60f8      	str	r0, [r7, #12]
  int thing1 = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	613b      	str	r3, [r7, #16]
  while (1)
  {
	  memset(CDCRxBufferFS, '\0', 2048);
 8000558:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800055c:	2100      	movs	r1, #0
 800055e:	483d      	ldr	r0, [pc, #244]	; (8000654 <main+0x1ec>)
 8000560:	f00a f87a 	bl	800a658 <memset>

	  CDC_OTG_Recv(CDCRxBufferFS);
 8000564:	483b      	ldr	r0, [pc, #236]	; (8000654 <main+0x1ec>)
 8000566:	f009 f8db 	bl	8009720 <CDC_OTG_Recv>
	  if(strlen(CDCRxBufferFS) > 0){
 800056a:	4b3a      	ldr	r3, [pc, #232]	; (8000654 <main+0x1ec>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d025      	beq.n	80005be <main+0x156>
		  LOG_CDC_FS(TRACE, CDCRxBufferFS);
 8000572:	4938      	ldr	r1, [pc, #224]	; (8000654 <main+0x1ec>)
 8000574:	2000      	movs	r0, #0
 8000576:	f7ff ff13 	bl	80003a0 <LOG_CDC_FS>
		  if(strcmp(CDCRxBufferFS, "a")==0)
 800057a:	4937      	ldr	r1, [pc, #220]	; (8000658 <main+0x1f0>)
 800057c:	4835      	ldr	r0, [pc, #212]	; (8000654 <main+0x1ec>)
 800057e:	f7ff feaf 	bl	80002e0 <strcmp>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d103      	bne.n	8000590 <main+0x128>
		  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000588:	2101      	movs	r1, #1
 800058a:	4834      	ldr	r0, [pc, #208]	; (800065c <main+0x1f4>)
 800058c:	f000 ff81 	bl	8001492 <HAL_GPIO_TogglePin>
		  if(strcmp(CDCRxBufferFS, "s")==0)
 8000590:	4933      	ldr	r1, [pc, #204]	; (8000660 <main+0x1f8>)
 8000592:	4830      	ldr	r0, [pc, #192]	; (8000654 <main+0x1ec>)
 8000594:	f7ff fea4 	bl	80002e0 <strcmp>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d103      	bne.n	80005a6 <main+0x13e>
		    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	482e      	ldr	r0, [pc, #184]	; (800065c <main+0x1f4>)
 80005a2:	f000 ff76 	bl	8001492 <HAL_GPIO_TogglePin>
		  if(strcmp(CDCRxBufferFS, "d")==0)
 80005a6:	492f      	ldr	r1, [pc, #188]	; (8000664 <main+0x1fc>)
 80005a8:	482a      	ldr	r0, [pc, #168]	; (8000654 <main+0x1ec>)
 80005aa:	f7ff fe99 	bl	80002e0 <strcmp>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d104      	bne.n	80005be <main+0x156>
		  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80005b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b8:	4828      	ldr	r0, [pc, #160]	; (800065c <main+0x1f4>)
 80005ba:	f000 ff6a 	bl	8001492 <HAL_GPIO_TogglePin>

	  }

	  newtick = HAL_GetTick();
 80005be:	f000 fc53 	bl	8000e68 <HAL_GetTick>
 80005c2:	60f8      	str	r0, [r7, #12]
	  if(oldtick + 50 < newtick){
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	3332      	adds	r3, #50	; 0x32
 80005c8:	68fa      	ldr	r2, [r7, #12]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d9c4      	bls.n	8000558 <main+0xf0>
		  LOG_CDC_FS(INFO, "Interrupts from last %d ms: %d from TimM, %d from TimA, %d from TimB, %d from TIM16", newtick - oldtick, TimMInterrupts, TimAInterrupts, TimBInterrupts, Tim16Interrupts);
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	1ad2      	subs	r2, r2, r3
 80005d4:	4b24      	ldr	r3, [pc, #144]	; (8000668 <main+0x200>)
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	461c      	mov	r4, r3
 80005da:	4b24      	ldr	r3, [pc, #144]	; (800066c <main+0x204>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	4619      	mov	r1, r3
 80005e0:	4b23      	ldr	r3, [pc, #140]	; (8000670 <main+0x208>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	4b23      	ldr	r3, [pc, #140]	; (8000674 <main+0x20c>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	9302      	str	r3, [sp, #8]
 80005ec:	9001      	str	r0, [sp, #4]
 80005ee:	9100      	str	r1, [sp, #0]
 80005f0:	4623      	mov	r3, r4
 80005f2:	4921      	ldr	r1, [pc, #132]	; (8000678 <main+0x210>)
 80005f4:	2002      	movs	r0, #2
 80005f6:	f7ff fed3 	bl	80003a0 <LOG_CDC_FS>
		  LOG_CDC_FS(INFO, "status: %3d   Timers' CNTs: %d from TimM, %d from TimA, %d from TimB, %d from TIM16", 0, HRTIM1->sMasterRegs.MCNTR, HRTIM1->sTimerxRegs[3].CNTxR, HRTIM1->sTimerxRegs[4].CNTxR, TIM16->CNT);
 80005fa:	4b20      	ldr	r3, [pc, #128]	; (800067c <main+0x214>)
 80005fc:	6918      	ldr	r0, [r3, #16]
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <main+0x214>)
 8000600:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8000604:	4a1d      	ldr	r2, [pc, #116]	; (800067c <main+0x214>)
 8000606:	f8d2 2290 	ldr.w	r2, [r2, #656]	; 0x290
 800060a:	491d      	ldr	r1, [pc, #116]	; (8000680 <main+0x218>)
 800060c:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800060e:	9102      	str	r1, [sp, #8]
 8000610:	9201      	str	r2, [sp, #4]
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	4603      	mov	r3, r0
 8000616:	2200      	movs	r2, #0
 8000618:	491a      	ldr	r1, [pc, #104]	; (8000684 <main+0x21c>)
 800061a:	2002      	movs	r0, #2
 800061c:	f7ff fec0 	bl	80003a0 <LOG_CDC_FS>
		  LOG_CDC_FS(INFO, "whatever: ", HRTIM1->sMasterRegs.MCMP1R);
 8000620:	4b16      	ldr	r3, [pc, #88]	; (800067c <main+0x214>)
 8000622:	69db      	ldr	r3, [r3, #28]
 8000624:	461a      	mov	r2, r3
 8000626:	4918      	ldr	r1, [pc, #96]	; (8000688 <main+0x220>)
 8000628:	2002      	movs	r0, #2
 800062a:	f7ff feb9 	bl	80003a0 <LOG_CDC_FS>
		  oldtick = newtick;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	617b      	str	r3, [r7, #20]
		  GPIOB->BSRR = ((1 << 7) << (16 * thing1));
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	011b      	lsls	r3, r3, #4
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	409a      	lsls	r2, r3
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <main+0x1f4>)
 800063c:	619a      	str	r2, [r3, #24]
		  thing1 = !thing1;
 800063e:	693b      	ldr	r3, [r7, #16]
 8000640:	2b00      	cmp	r3, #0
 8000642:	bf0c      	ite	eq
 8000644:	2301      	moveq	r3, #1
 8000646:	2300      	movne	r3, #0
 8000648:	b2db      	uxtb	r3, r3
 800064a:	613b      	str	r3, [r7, #16]
  {
 800064c:	e784      	b.n	8000558 <main+0xf0>
 800064e:	bf00      	nop
 8000650:	e000ed00 	.word	0xe000ed00
 8000654:	240001c8 	.word	0x240001c8
 8000658:	0800b258 	.word	0x0800b258
 800065c:	58020400 	.word	0x58020400
 8000660:	0800b25c 	.word	0x0800b25c
 8000664:	0800b260 	.word	0x0800b260
 8000668:	240009cc 	.word	0x240009cc
 800066c:	240009c8 	.word	0x240009c8
 8000670:	240009ca 	.word	0x240009ca
 8000674:	240009ce 	.word	0x240009ce
 8000678:	0800b264 	.word	0x0800b264
 800067c:	40017400 	.word	0x40017400
 8000680:	40014400 	.word	0x40014400
 8000684:	0800b2b8 	.word	0x0800b2b8
 8000688:	0800b30c 	.word	0x0800b30c

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b09c      	sub	sp, #112	; 0x70
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000696:	224c      	movs	r2, #76	; 0x4c
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f009 ffdc 	bl	800a658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2220      	movs	r2, #32
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f009 ffd6 	bl	800a658 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006ac:	2002      	movs	r0, #2
 80006ae:	f002 f9c3 	bl	8002a38 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	4b32      	ldr	r3, [pc, #200]	; (8000780 <SystemClock_Config+0xf4>)
 80006b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ba:	4a31      	ldr	r2, [pc, #196]	; (8000780 <SystemClock_Config+0xf4>)
 80006bc:	f023 0301 	bic.w	r3, r3, #1
 80006c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006c2:	4b2f      	ldr	r3, [pc, #188]	; (8000780 <SystemClock_Config+0xf4>)
 80006c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <SystemClock_Config+0xf8>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a2c      	ldr	r2, [pc, #176]	; (8000784 <SystemClock_Config+0xf8>)
 80006d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <SystemClock_Config+0xf8>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006e4:	bf00      	nop
 80006e6:	4b27      	ldr	r3, [pc, #156]	; (8000784 <SystemClock_Config+0xf8>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006f2:	d1f8      	bne.n	80006e6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80006f4:	2322      	movs	r3, #34	; 0x22
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2340      	movs	r3, #64	; 0x40
 80006fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800070c:	2304      	movs	r3, #4
 800070e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000710:	2332      	movs	r3, #50	; 0x32
 8000712:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000718:	2302      	movs	r3, #2
 800071a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071c:	2302      	movs	r3, #2
 800071e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000720:	230c      	movs	r3, #12
 8000722:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000724:	2300      	movs	r3, #0
 8000726:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000730:	4618      	mov	r0, r3
 8000732:	f002 f9cb 	bl	8002acc <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800073c:	f000 f904 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	233f      	movs	r3, #63	; 0x3f
 8000742:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000744:	2303      	movs	r3, #3
 8000746:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800074c:	2308      	movs	r3, #8
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000750:	2340      	movs	r3, #64	; 0x40
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000754:	2340      	movs	r3, #64	; 0x40
 8000756:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800075c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800075e:	2340      	movs	r3, #64	; 0x40
 8000760:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2102      	movs	r1, #2
 8000766:	4618      	mov	r0, r3
 8000768:	f002 fe0a 	bl	8003380 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000772:	f000 f8e9 	bl	8000948 <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3770      	adds	r7, #112	; 0x70
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	58000400 	.word	0x58000400
 8000784:	58024800 	.word	0x58024800

08000788 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b092      	sub	sp, #72	; 0x48
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800078e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
 800079e:	615a      	str	r2, [r3, #20]
 80007a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007a2:	463b      	mov	r3, r7
 80007a4:	222c      	movs	r2, #44	; 0x2c
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f009 ff55 	bl	800a658 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007ae:	4b2f      	ldr	r3, [pc, #188]	; (800086c <MX_TIM16_Init+0xe4>)
 80007b0:	4a2f      	ldr	r2, [pc, #188]	; (8000870 <MX_TIM16_Init+0xe8>)
 80007b2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 120;
 80007b4:	4b2d      	ldr	r3, [pc, #180]	; (800086c <MX_TIM16_Init+0xe4>)
 80007b6:	2278      	movs	r2, #120	; 0x78
 80007b8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ba:	4b2c      	ldr	r3, [pc, #176]	; (800086c <MX_TIM16_Init+0xe4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 15;
 80007c0:	4b2a      	ldr	r3, [pc, #168]	; (800086c <MX_TIM16_Init+0xe4>)
 80007c2:	220f      	movs	r2, #15
 80007c4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c6:	4b29      	ldr	r3, [pc, #164]	; (800086c <MX_TIM16_Init+0xe4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 255;
 80007cc:	4b27      	ldr	r3, [pc, #156]	; (800086c <MX_TIM16_Init+0xe4>)
 80007ce:	22ff      	movs	r2, #255	; 0xff
 80007d0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <MX_TIM16_Init+0xe4>)
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007d8:	4824      	ldr	r0, [pc, #144]	; (800086c <MX_TIM16_Init+0xe4>)
 80007da:	f004 fc9f 	bl	800511c <HAL_TIM_Base_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 80007e4:	f000 f8b0 	bl	8000948 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80007e8:	4820      	ldr	r0, [pc, #128]	; (800086c <MX_TIM16_Init+0xe4>)
 80007ea:	f004 fcee 	bl	80051ca <HAL_TIM_PWM_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 80007f4:	f000 f8a8 	bl	8000948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f8:	2360      	movs	r3, #96	; 0x60
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000800:	2300      	movs	r3, #0
 8000802:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000804:	2300      	movs	r3, #0
 8000806:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800080c:	2300      	movs	r3, #0
 800080e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000818:	2200      	movs	r2, #0
 800081a:	4619      	mov	r1, r3
 800081c:	4813      	ldr	r0, [pc, #76]	; (800086c <MX_TIM16_Init+0xe4>)
 800081e:	f004 fe55 	bl	80054cc <HAL_TIM_PWM_ConfigChannel>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8000828:	f000 f88e 	bl	8000948 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800082c:	2300      	movs	r3, #0
 800082e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000844:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800084e:	463b      	mov	r3, r7
 8000850:	4619      	mov	r1, r3
 8000852:	4806      	ldr	r0, [pc, #24]	; (800086c <MX_TIM16_Init+0xe4>)
 8000854:	f005 faf0 	bl	8005e38 <HAL_TIMEx_ConfigBreakDeadTime>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 800085e:	f000 f873 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	3748      	adds	r7, #72	; 0x48
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	2400017c 	.word	0x2400017c
 8000870:	40014400 	.word	0x40014400

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800088a:	4b2c      	ldr	r3, [pc, #176]	; (800093c <MX_GPIO_Init+0xc8>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000890:	4a2a      	ldr	r2, [pc, #168]	; (800093c <MX_GPIO_Init+0xc8>)
 8000892:	f043 0320 	orr.w	r3, r3, #32
 8000896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800089a:	4b28      	ldr	r3, [pc, #160]	; (800093c <MX_GPIO_Init+0xc8>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a0:	f003 0320 	and.w	r3, r3, #32
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a8:	4b24      	ldr	r3, [pc, #144]	; (800093c <MX_GPIO_Init+0xc8>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ae:	4a23      	ldr	r2, [pc, #140]	; (800093c <MX_GPIO_Init+0xc8>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b8:	4b20      	ldr	r3, [pc, #128]	; (800093c <MX_GPIO_Init+0xc8>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_GPIO_Init+0xc8>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	4a1b      	ldr	r2, [pc, #108]	; (800093c <MX_GPIO_Init+0xc8>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_GPIO_Init+0xc8>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008e4:	2200      	movs	r2, #0
 80008e6:	21ff      	movs	r1, #255	; 0xff
 80008e8:	4815      	ldr	r0, [pc, #84]	; (8000940 <MX_GPIO_Init+0xcc>)
 80008ea:	f000 fdb9 	bl	8001460 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80008f4:	4813      	ldr	r0, [pc, #76]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008f6:	f000 fdb3 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008fa:	23ff      	movs	r3, #255	; 0xff
 80008fc:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	4619      	mov	r1, r3
 8000910:	480b      	ldr	r0, [pc, #44]	; (8000940 <MX_GPIO_Init+0xcc>)
 8000912:	f000 fbf5 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000916:	f244 0381 	movw	r3, #16513	; 0x4081
 800091a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4619      	mov	r1, r3
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_GPIO_Init+0xd0>)
 8000930:	f000 fbe6 	bl	8001100 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000934:	bf00      	nop
 8000936:	3720      	adds	r7, #32
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	58024400 	.word	0x58024400
 8000940:	58021400 	.word	0x58021400
 8000944:	58020400 	.word	0x58020400

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000950:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000954:	4803      	ldr	r0, [pc, #12]	; (8000964 <Error_Handler+0x1c>)
 8000956:	f000 fd9c 	bl	8001492 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800095a:	2064      	movs	r0, #100	; 0x64
 800095c:	f000 fa90 	bl	8000e80 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000960:	e7f6      	b.n	8000950 <Error_Handler+0x8>
 8000962:	bf00      	nop
 8000964:	58020400 	.word	0x58020400

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_MspInit+0x30>)
 8000970:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000974:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_MspInit+0x30>)
 8000976:	f043 0302 	orr.w	r3, r3, #2
 800097a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_MspInit+0x30>)
 8000980:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000984:	f003 0302 	and.w	r3, r3, #2
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	58024400 	.word	0x58024400

0800099c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <HAL_TIM_Base_MspInit+0x48>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d116      	bne.n	80009dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <HAL_TIM_Base_MspInit+0x4c>)
 80009b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009b4:	4a0c      	ldr	r2, [pc, #48]	; (80009e8 <HAL_TIM_Base_MspInit+0x4c>)
 80009b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <HAL_TIM_Base_MspInit+0x4c>)
 80009c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2100      	movs	r1, #0
 80009d0:	2075      	movs	r0, #117	; 0x75
 80009d2:	f000 fb60 	bl	8001096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80009d6:	2075      	movs	r0, #117	; 0x75
 80009d8:	f000 fb77 	bl	80010ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80009dc:	bf00      	nop
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40014400 	.word	0x40014400
 80009e8:	58024400 	.word	0x58024400

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
	  GPIOB->BSRR = 1;
 80009f0:	4b01      	ldr	r3, [pc, #4]	; (80009f8 <NMI_Handler+0xc>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	619a      	str	r2, [r3, #24]
 80009f6:	e7fb      	b.n	80009f0 <NMI_Handler+0x4>
 80009f8:	58020400 	.word	0x58020400

080009fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <HardFault_Handler+0x4>
	...

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  GPIOB->BSRR = 1;
 8000a08:	4b01      	ldr	r3, [pc, #4]	; (8000a10 <MemManage_Handler+0xc>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	619a      	str	r2, [r3, #24]
 8000a0e:	e7fb      	b.n	8000a08 <MemManage_Handler+0x4>
 8000a10:	58020400 	.word	0x58020400

08000a14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  GPIOB->BSRR = 1;
 8000a18:	4b01      	ldr	r3, [pc, #4]	; (8000a20 <BusFault_Handler+0xc>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	619a      	str	r2, [r3, #24]
 8000a1e:	e7fb      	b.n	8000a18 <BusFault_Handler+0x4>
 8000a20:	58020400 	.word	0x58020400

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  GPIOB->BSRR = 1;
 8000a28:	4b01      	ldr	r3, [pc, #4]	; (8000a30 <UsageFault_Handler+0xc>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	619a      	str	r2, [r3, #24]
 8000a2e:	e7fb      	b.n	8000a28 <UsageFault_Handler+0x4>
 8000a30:	58020400 	.word	0x58020400

08000a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a62:	f000 f9ed 	bl	8000e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <OTG_FS_IRQHandler+0x10>)
 8000a72:	f000 fe81 	bl	8001778 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	24001ecc 	.word	0x24001ecc

08000a80 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <TIM16_IRQHandler+0x1c>)
 8000a86:	f004 fc01 	bl	800528c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  Tim16Interrupts++;
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <TIM16_IRQHandler+0x20>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <TIM16_IRQHandler+0x20>)
 8000a94:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM16_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2400017c 	.word	0x2400017c
 8000aa0:	240009ce 	.word	0x240009ce

08000aa4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	e00a      	b.n	8000acc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ab6:	f3af 8000 	nop.w
 8000aba:	4601      	mov	r1, r0
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	60ba      	str	r2, [r7, #8]
 8000ac2:	b2ca      	uxtb	r2, r1
 8000ac4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	dbf0      	blt.n	8000ab6 <_read+0x12>
  }

  return len;
 8000ad4:	687b      	ldr	r3, [r7, #4]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <_write>:

int _write(int file, char *ptr, int len)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b084      	sub	sp, #16
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	60f8      	str	r0, [r7, #12]
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d00a      	beq.n	8000b06 <_write+0x28>
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d007      	beq.n	8000b06 <_write+0x28>
    {
	   errno = EBADF;
 8000af6:	f009 fdfd 	bl	800a6f4 <__errno>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2209      	movs	r2, #9
 8000afe:	601a      	str	r2, [r3, #0]
	   return -1;
 8000b00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b04:	e009      	b.n	8000b1a <_write+0x3c>
	}

	return CDC_OTG_Send(ptr, len) == 0 ? len : 0;
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	68b8      	ldr	r0, [r7, #8]
 8000b0a:	f008 fd95 	bl	8009638 <CDC_OTG_Send>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d101      	bne.n	8000b18 <_write+0x3a>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	e000      	b.n	8000b1a <_write+0x3c>
 8000b18:	2300      	movs	r3, #0

}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <_close>:

int _close(int file)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b4a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <_isatty>:

int _isatty(int file)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b62:	2301      	movs	r3, #1
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <_sbrk+0x5c>)
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <_sbrk+0x60>)
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <_sbrk+0x64>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <_sbrk+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d207      	bcs.n	8000bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bbc:	f009 fd9a 	bl	800a6f4 <__errno>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bca:	e009      	b.n	8000be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <_sbrk+0x64>)
 8000bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	24080000 	.word	0x24080000
 8000bec:	00000400 	.word	0x00000400
 8000bf0:	240009d0 	.word	0x240009d0
 8000bf4:	24002748 	.word	0x24002748

08000bf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bfc:	4b37      	ldr	r3, [pc, #220]	; (8000cdc <SystemInit+0xe4>)
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c02:	4a36      	ldr	r2, [pc, #216]	; (8000cdc <SystemInit+0xe4>)
 8000c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c0c:	4b34      	ldr	r3, [pc, #208]	; (8000ce0 <SystemInit+0xe8>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f003 030f 	and.w	r3, r3, #15
 8000c14:	2b06      	cmp	r3, #6
 8000c16:	d807      	bhi.n	8000c28 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c18:	4b31      	ldr	r3, [pc, #196]	; (8000ce0 <SystemInit+0xe8>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f023 030f 	bic.w	r3, r3, #15
 8000c20:	4a2f      	ldr	r2, [pc, #188]	; (8000ce0 <SystemInit+0xe8>)
 8000c22:	f043 0307 	orr.w	r3, r3, #7
 8000c26:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c28:	4b2e      	ldr	r3, [pc, #184]	; (8000ce4 <SystemInit+0xec>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a2d      	ldr	r2, [pc, #180]	; (8000ce4 <SystemInit+0xec>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c34:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <SystemInit+0xec>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <SystemInit+0xec>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4929      	ldr	r1, [pc, #164]	; (8000ce4 <SystemInit+0xec>)
 8000c40:	4b29      	ldr	r3, [pc, #164]	; (8000ce8 <SystemInit+0xf0>)
 8000c42:	4013      	ands	r3, r2
 8000c44:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c46:	4b26      	ldr	r3, [pc, #152]	; (8000ce0 <SystemInit+0xe8>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0308 	and.w	r3, r3, #8
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d007      	beq.n	8000c62 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c52:	4b23      	ldr	r3, [pc, #140]	; (8000ce0 <SystemInit+0xe8>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f023 030f 	bic.w	r3, r3, #15
 8000c5a:	4a21      	ldr	r2, [pc, #132]	; (8000ce0 <SystemInit+0xe8>)
 8000c5c:	f043 0307 	orr.w	r3, r3, #7
 8000c60:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c62:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <SystemInit+0xec>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c68:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <SystemInit+0xec>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <SystemInit+0xec>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <SystemInit+0xec>)
 8000c76:	4a1d      	ldr	r2, [pc, #116]	; (8000cec <SystemInit+0xf4>)
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <SystemInit+0xec>)
 8000c7c:	4a1c      	ldr	r2, [pc, #112]	; (8000cf0 <SystemInit+0xf8>)
 8000c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <SystemInit+0xec>)
 8000c82:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <SystemInit+0xfc>)
 8000c84:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <SystemInit+0xec>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <SystemInit+0xec>)
 8000c8e:	4a19      	ldr	r2, [pc, #100]	; (8000cf4 <SystemInit+0xfc>)
 8000c90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <SystemInit+0xec>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <SystemInit+0xec>)
 8000c9a:	4a16      	ldr	r2, [pc, #88]	; (8000cf4 <SystemInit+0xfc>)
 8000c9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <SystemInit+0xec>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <SystemInit+0xec>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <SystemInit+0xec>)
 8000caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <SystemInit+0xec>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <SystemInit+0x100>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <SystemInit+0x104>)
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cc2:	d202      	bcs.n	8000cca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <SystemInit+0x108>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <SystemInit+0x10c>)
 8000ccc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000cd0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00
 8000ce0:	52002000 	.word	0x52002000
 8000ce4:	58024400 	.word	0x58024400
 8000ce8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cec:	02020200 	.word	0x02020200
 8000cf0:	01ff0000 	.word	0x01ff0000
 8000cf4:	01010280 	.word	0x01010280
 8000cf8:	5c001000 	.word	0x5c001000
 8000cfc:	ffff0000 	.word	0xffff0000
 8000d00:	51008108 	.word	0x51008108
 8000d04:	52004000 	.word	0x52004000

08000d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d0c:	f7ff ff74 	bl	8000bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d12:	490d      	ldr	r1, [pc, #52]	; (8000d48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d28:	4c0a      	ldr	r4, [pc, #40]	; (8000d54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d36:	f009 fce3 	bl	800a700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3a:	f7ff fb95 	bl	8000468 <main>
  bx  lr
 8000d3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d40:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d48:	24000160 	.word	0x24000160
  ldr r2, =_sidata
 8000d4c:	0800b3e4 	.word	0x0800b3e4
  ldr r2, =_sbss
 8000d50:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 8000d54:	24002744 	.word	0x24002744

08000d58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC3_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d62:	2003      	movs	r0, #3
 8000d64:	f000 f98c 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d68:	f002 fcc0 	bl	80036ec <HAL_RCC_GetSysClockFreq>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_Init+0x68>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	0a1b      	lsrs	r3, r3, #8
 8000d74:	f003 030f 	and.w	r3, r3, #15
 8000d78:	4913      	ldr	r1, [pc, #76]	; (8000dc8 <HAL_Init+0x6c>)
 8000d7a:	5ccb      	ldrb	r3, [r1, r3]
 8000d7c:	f003 031f 	and.w	r3, r3, #31
 8000d80:	fa22 f303 	lsr.w	r3, r2, r3
 8000d84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <HAL_Init+0x68>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <HAL_Init+0x6c>)
 8000d90:	5cd3      	ldrb	r3, [r2, r3]
 8000d92:	f003 031f 	and.w	r3, r3, #31
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	fa22 f303 	lsr.w	r3, r2, r3
 8000d9c:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <HAL_Init+0x70>)
 8000d9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000da0:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <HAL_Init+0x74>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000da6:	200f      	movs	r0, #15
 8000da8:	f000 f814 	bl	8000dd4 <HAL_InitTick>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e002      	b.n	8000dbc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000db6:	f7ff fdd7 	bl	8000968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	58024400 	.word	0x58024400
 8000dc8:	0800b398 	.word	0x0800b398
 8000dcc:	24000004 	.word	0x24000004
 8000dd0:	24000000 	.word	0x24000000

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <HAL_InitTick+0x60>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d101      	bne.n	8000de8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e021      	b.n	8000e2c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <HAL_InitTick+0x64>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_InitTick+0x60>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4619      	mov	r1, r3
 8000df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f971 	bl	80010e6 <HAL_SYSTICK_Config>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00e      	b.n	8000e2c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b0f      	cmp	r3, #15
 8000e12:	d80a      	bhi.n	8000e2a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e14:	2200      	movs	r2, #0
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e1c:	f000 f93b 	bl	8001096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e20:	4a06      	ldr	r2, [pc, #24]	; (8000e3c <HAL_InitTick+0x68>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e000      	b.n	8000e2c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2400000c 	.word	0x2400000c
 8000e38:	24000000 	.word	0x24000000
 8000e3c:	24000008 	.word	0x24000008

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_IncTick+0x20>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x24>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_IncTick+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	2400000c 	.word	0x2400000c
 8000e64:	240009d4 	.word	0x240009d4

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	240009d4 	.word	0x240009d4

08000e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e88:	f7ff ffee 	bl	8000e68 <HAL_GetTick>
 8000e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e98:	d005      	beq.n	8000ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_Delay+0x44>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ea6:	bf00      	nop
 8000ea8:	f7ff ffde 	bl	8000e68 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d8f7      	bhi.n	8000ea8 <HAL_Delay+0x28>
  {
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2400000c 	.word	0x2400000c

08000ec8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <HAL_GetREVID+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	0c1b      	lsrs	r3, r3, #16
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	5c001000 	.word	0x5c001000

08000ee0 <__NVIC_SetPriorityGrouping>:
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <__NVIC_SetPriorityGrouping+0x40>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <__NVIC_SetPriorityGrouping+0x40>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00
 8000f24:	05fa0000 	.word	0x05fa0000

08000f28 <__NVIC_GetPriorityGrouping>:
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_EnableIRQ>:
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db0b      	blt.n	8000f6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	f003 021f 	and.w	r2, r3, #31
 8000f5c:	4907      	ldr	r1, [pc, #28]	; (8000f7c <__NVIC_EnableIRQ+0x38>)
 8000f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	2001      	movs	r0, #1
 8000f66:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000e100 	.word	0xe000e100

08000f80 <__NVIC_SetPriority>:
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	; (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <NVIC_EncodePriority>:
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f1c3 0307 	rsb	r3, r3, #7
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf28      	it	cs
 8000ff2:	2304      	movcs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d902      	bls.n	8001004 <NVIC_EncodePriority+0x30>
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3b03      	subs	r3, #3
 8001002:	e000      	b.n	8001006 <NVIC_EncodePriority+0x32>
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43d9      	mvns	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	; 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800104c:	d301      	bcc.n	8001052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104e:	2301      	movs	r3, #1
 8001050:	e00f      	b.n	8001072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <SysTick_Config+0x40>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105a:	210f      	movs	r1, #15
 800105c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001060:	f7ff ff8e 	bl	8000f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <SysTick_Config+0x40>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <SysTick_Config+0x40>)
 800106c:	2207      	movs	r2, #7
 800106e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	e000e010 	.word	0xe000e010

08001080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff29 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010a4:	f7ff ff40 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 80010a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff ff90 	bl	8000fd4 <NVIC_EncodePriority>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff5f 	bl	8000f80 <__NVIC_SetPriority>
}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff33 	bl	8000f44 <__NVIC_EnableIRQ>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffa4 	bl	800103c <SysTick_Config>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800110e:	4b89      	ldr	r3, [pc, #548]	; (8001334 <HAL_GPIO_Init+0x234>)
 8001110:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001112:	e194      	b.n	800143e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	2101      	movs	r1, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa01 f303 	lsl.w	r3, r1, r3
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8186 	beq.w	8001438 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b01      	cmp	r3, #1
 8001136:	d005      	beq.n	8001144 <HAL_GPIO_Init+0x44>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d130      	bne.n	80011a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	68da      	ldr	r2, [r3, #12]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800117a:	2201      	movs	r2, #1
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	091b      	lsrs	r3, r3, #4
 8001190:	f003 0201 	and.w	r2, r3, #1
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d017      	beq.n	80011e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	2203      	movs	r2, #3
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d123      	bne.n	8001236 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	08da      	lsrs	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3208      	adds	r2, #8
 80011f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	691a      	ldr	r2, [r3, #16]
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	08da      	lsrs	r2, r3, #3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3208      	adds	r2, #8
 8001230:	69b9      	ldr	r1, [r7, #24]
 8001232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0203 	and.w	r2, r3, #3
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 80e0 	beq.w	8001438 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001278:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <HAL_GPIO_Init+0x238>)
 800127a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800127e:	4a2e      	ldr	r2, [pc, #184]	; (8001338 <HAL_GPIO_Init+0x238>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001288:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <HAL_GPIO_Init+0x238>)
 800128a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001296:	4a29      	ldr	r2, [pc, #164]	; (800133c <HAL_GPIO_Init+0x23c>)
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	220f      	movs	r2, #15
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a20      	ldr	r2, [pc, #128]	; (8001340 <HAL_GPIO_Init+0x240>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d052      	beq.n	8001368 <HAL_GPIO_Init+0x268>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a1f      	ldr	r2, [pc, #124]	; (8001344 <HAL_GPIO_Init+0x244>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d031      	beq.n	800132e <HAL_GPIO_Init+0x22e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a1e      	ldr	r2, [pc, #120]	; (8001348 <HAL_GPIO_Init+0x248>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d02b      	beq.n	800132a <HAL_GPIO_Init+0x22a>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a1d      	ldr	r2, [pc, #116]	; (800134c <HAL_GPIO_Init+0x24c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d025      	beq.n	8001326 <HAL_GPIO_Init+0x226>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a1c      	ldr	r2, [pc, #112]	; (8001350 <HAL_GPIO_Init+0x250>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d01f      	beq.n	8001322 <HAL_GPIO_Init+0x222>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a1b      	ldr	r2, [pc, #108]	; (8001354 <HAL_GPIO_Init+0x254>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d019      	beq.n	800131e <HAL_GPIO_Init+0x21e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a1a      	ldr	r2, [pc, #104]	; (8001358 <HAL_GPIO_Init+0x258>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0x21a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a19      	ldr	r2, [pc, #100]	; (800135c <HAL_GPIO_Init+0x25c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00d      	beq.n	8001316 <HAL_GPIO_Init+0x216>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a18      	ldr	r2, [pc, #96]	; (8001360 <HAL_GPIO_Init+0x260>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d007      	beq.n	8001312 <HAL_GPIO_Init+0x212>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a17      	ldr	r2, [pc, #92]	; (8001364 <HAL_GPIO_Init+0x264>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_GPIO_Init+0x20e>
 800130a:	2309      	movs	r3, #9
 800130c:	e02d      	b.n	800136a <HAL_GPIO_Init+0x26a>
 800130e:	230a      	movs	r3, #10
 8001310:	e02b      	b.n	800136a <HAL_GPIO_Init+0x26a>
 8001312:	2308      	movs	r3, #8
 8001314:	e029      	b.n	800136a <HAL_GPIO_Init+0x26a>
 8001316:	2307      	movs	r3, #7
 8001318:	e027      	b.n	800136a <HAL_GPIO_Init+0x26a>
 800131a:	2306      	movs	r3, #6
 800131c:	e025      	b.n	800136a <HAL_GPIO_Init+0x26a>
 800131e:	2305      	movs	r3, #5
 8001320:	e023      	b.n	800136a <HAL_GPIO_Init+0x26a>
 8001322:	2304      	movs	r3, #4
 8001324:	e021      	b.n	800136a <HAL_GPIO_Init+0x26a>
 8001326:	2303      	movs	r3, #3
 8001328:	e01f      	b.n	800136a <HAL_GPIO_Init+0x26a>
 800132a:	2302      	movs	r3, #2
 800132c:	e01d      	b.n	800136a <HAL_GPIO_Init+0x26a>
 800132e:	2301      	movs	r3, #1
 8001330:	e01b      	b.n	800136a <HAL_GPIO_Init+0x26a>
 8001332:	bf00      	nop
 8001334:	58000080 	.word	0x58000080
 8001338:	58024400 	.word	0x58024400
 800133c:	58000400 	.word	0x58000400
 8001340:	58020000 	.word	0x58020000
 8001344:	58020400 	.word	0x58020400
 8001348:	58020800 	.word	0x58020800
 800134c:	58020c00 	.word	0x58020c00
 8001350:	58021000 	.word	0x58021000
 8001354:	58021400 	.word	0x58021400
 8001358:	58021800 	.word	0x58021800
 800135c:	58021c00 	.word	0x58021c00
 8001360:	58022000 	.word	0x58022000
 8001364:	58022400 	.word	0x58022400
 8001368:	2300      	movs	r3, #0
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	f002 0203 	and.w	r2, r2, #3
 8001370:	0092      	lsls	r2, r2, #2
 8001372:	4093      	lsls	r3, r2
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800137a:	4938      	ldr	r1, [pc, #224]	; (800145c <HAL_GPIO_Init+0x35c>)
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	3302      	adds	r3, #2
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80013ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80013dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	3301      	adds	r3, #1
 800143c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa22 f303 	lsr.w	r3, r2, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	f47f ae63 	bne.w	8001114 <HAL_GPIO_Init+0x14>
  }
}
 800144e:	bf00      	nop
 8001450:	bf00      	nop
 8001452:	3724      	adds	r7, #36	; 0x24
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	58000400 	.word	0x58000400

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800147c:	e003      	b.n	8001486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	041a      	lsls	r2, r3, #16
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	619a      	str	r2, [r3, #24]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001492:	b480      	push	{r7}
 8001494:	b085      	sub	sp, #20
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014a4:	887a      	ldrh	r2, [r7, #2]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4013      	ands	r3, r2
 80014aa:	041a      	lsls	r2, r3, #16
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	887b      	ldrh	r3, [r7, #2]
 80014b2:	400b      	ands	r3, r1
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	619a      	str	r2, [r3, #24]
}
 80014ba:	bf00      	nop
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c8:	b08f      	sub	sp, #60	; 0x3c
 80014ca:	af0a      	add	r7, sp, #40	; 0x28
 80014cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e116      	b.n	8001706 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d106      	bne.n	80014f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f008 fb4a 	bl	8009b8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2203      	movs	r2, #3
 80014fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f004 fe4b 	bl	80061b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	687e      	ldr	r6, [r7, #4]
 8001524:	466d      	mov	r5, sp
 8001526:	f106 0410 	add.w	r4, r6, #16
 800152a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800152c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001532:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001536:	e885 0003 	stmia.w	r5, {r0, r1}
 800153a:	1d33      	adds	r3, r6, #4
 800153c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800153e:	6838      	ldr	r0, [r7, #0]
 8001540:	f004 fd16 	bl	8005f70 <USB_CoreInit>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2202      	movs	r2, #2
 800154e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e0d7      	b.n	8001706 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f004 fe39 	bl	80061d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001562:	2300      	movs	r3, #0
 8001564:	73fb      	strb	r3, [r7, #15]
 8001566:	e04a      	b.n	80015fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	333d      	adds	r3, #61	; 0x3d
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800157c:	7bfa      	ldrb	r2, [r7, #15]
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	333c      	adds	r3, #60	; 0x3c
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	b298      	uxth	r0, r3
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	3356      	adds	r3, #86	; 0x56
 80015a4:	4602      	mov	r2, r0
 80015a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015a8:	7bfa      	ldrb	r2, [r7, #15]
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	3340      	adds	r3, #64	; 0x40
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	4413      	add	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	3344      	adds	r3, #68	; 0x44
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015d0:	7bfa      	ldrb	r2, [r7, #15]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	3348      	adds	r3, #72	; 0x48
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	334c      	adds	r3, #76	; 0x4c
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	3301      	adds	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	7bfa      	ldrb	r2, [r7, #15]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	429a      	cmp	r2, r3
 8001606:	d3af      	bcc.n	8001568 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001608:	2300      	movs	r3, #0
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	e044      	b.n	8001698 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	4413      	add	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	440b      	add	r3, r1
 800161c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4413      	add	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001636:	7bfa      	ldrb	r2, [r7, #15]
 8001638:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	4413      	add	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	440b      	add	r3, r1
 8001648:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4413      	add	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800167c:	7bfa      	ldrb	r2, [r7, #15]
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4413      	add	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	3301      	adds	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d3b5      	bcc.n	800160e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	687e      	ldr	r6, [r7, #4]
 80016aa:	466d      	mov	r5, sp
 80016ac:	f106 0410 	add.w	r4, r6, #16
 80016b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80016c0:	1d33      	adds	r3, r6, #4
 80016c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016c4:	6838      	ldr	r0, [r7, #0]
 80016c6:	f004 fdd1 	bl	800626c <USB_DevInit>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2202      	movs	r2, #2
 80016d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e014      	b.n	8001706 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d102      	bne.n	80016fa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f001 f96f 	bl	80029d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f005 fe13 	bl	800732a <USB_DevDisconnect>

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800170e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_PCD_Start+0x1c>
 8001726:	2302      	movs	r3, #2
 8001728:	e022      	b.n	8001770 <HAL_PCD_Start+0x62>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173a:	2b00      	cmp	r3, #0
 800173c:	d109      	bne.n	8001752 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8001742:	2b01      	cmp	r3, #1
 8001744:	d105      	bne.n	8001752 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f004 fd1a 	bl	8006190 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f005 fdc1 	bl	80072e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b08d      	sub	sp, #52	; 0x34
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f005 fe7f 	bl	8007492 <USB_GetMode>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	f040 84b7 	bne.w	800210a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f005 fde3 	bl	800736c <USB_ReadInterrupts>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 84ad 	beq.w	8002108 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	0a1b      	lsrs	r3, r3, #8
 80017b8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f005 fdd0 	bl	800736c <USB_ReadInterrupts>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d107      	bne.n	80017e6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	695a      	ldr	r2, [r3, #20]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f002 0202 	and.w	r2, r2, #2
 80017e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f005 fdbe 	bl	800736c <USB_ReadInterrupts>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	2b10      	cmp	r3, #16
 80017f8:	d161      	bne.n	80018be <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	699a      	ldr	r2, [r3, #24]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 0210 	bic.w	r2, r2, #16
 8001808:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	f003 020f 	and.w	r2, r3, #15
 8001816:	4613      	mov	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	4413      	add	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	3304      	adds	r3, #4
 8001828:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	0c5b      	lsrs	r3, r3, #17
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	2b02      	cmp	r3, #2
 8001834:	d124      	bne.n	8001880 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800183c:	4013      	ands	r3, r2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d035      	beq.n	80018ae <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	091b      	lsrs	r3, r3, #4
 800184a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800184c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001850:	b29b      	uxth	r3, r3
 8001852:	461a      	mov	r2, r3
 8001854:	6a38      	ldr	r0, [r7, #32]
 8001856:	f005 fbf5 	bl	8007044 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001866:	441a      	add	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	695a      	ldr	r2, [r3, #20]
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001878:	441a      	add	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	615a      	str	r2, [r3, #20]
 800187e:	e016      	b.n	80018ae <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	0c5b      	lsrs	r3, r3, #17
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	2b06      	cmp	r3, #6
 800188a:	d110      	bne.n	80018ae <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001892:	2208      	movs	r2, #8
 8001894:	4619      	mov	r1, r3
 8001896:	6a38      	ldr	r0, [r7, #32]
 8001898:	f005 fbd4 	bl	8007044 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	695a      	ldr	r2, [r3, #20]
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	091b      	lsrs	r3, r3, #4
 80018a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018a8:	441a      	add	r2, r3
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	699a      	ldr	r2, [r3, #24]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f042 0210 	orr.w	r2, r2, #16
 80018bc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f005 fd52 	bl	800736c <USB_ReadInterrupts>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80018d2:	f040 80a7 	bne.w	8001a24 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f005 fd57 	bl	8007392 <USB_ReadDevAllOutEpInterrupt>
 80018e4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80018e6:	e099      	b.n	8001a1c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80018e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 808e 	beq.w	8001a10 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f005 fd7b 	bl	80073fa <USB_ReadDevOutEPInterrupt>
 8001904:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00c      	beq.n	800192a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	015a      	lsls	r2, r3, #5
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	4413      	add	r3, r2
 8001918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800191c:	461a      	mov	r2, r3
 800191e:	2301      	movs	r3, #1
 8001920:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001922:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 fed1 	bl	80026cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00c      	beq.n	800194e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	015a      	lsls	r2, r3, #5
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	4413      	add	r3, r2
 800193c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001940:	461a      	mov	r2, r3
 8001942:	2308      	movs	r3, #8
 8001944:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001946:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 ffa7 	bl	800289c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	f003 0310 	and.w	r3, r3, #16
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	015a      	lsls	r2, r3, #5
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	4413      	add	r3, r2
 8001960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001964:	461a      	mov	r2, r3
 8001966:	2310      	movs	r3, #16
 8001968:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d030      	beq.n	80019d6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001974:	6a3b      	ldr	r3, [r7, #32]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197c:	2b80      	cmp	r3, #128	; 0x80
 800197e:	d109      	bne.n	8001994 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800198e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001992:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001996:	4613      	mov	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	4413      	add	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	3304      	adds	r3, #4
 80019a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	78db      	ldrb	r3, [r3, #3]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d108      	bne.n	80019c4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2200      	movs	r2, #0
 80019b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	4619      	mov	r1, r3
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f008 fa1a 	bl	8009df8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	015a      	lsls	r2, r3, #5
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	4413      	add	r3, r2
 80019cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019d0:	461a      	mov	r2, r3
 80019d2:	2302      	movs	r3, #2
 80019d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	015a      	lsls	r2, r3, #5
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	4413      	add	r3, r2
 80019e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ec:	461a      	mov	r2, r3
 80019ee:	2320      	movs	r3, #32
 80019f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d009      	beq.n	8001a10 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	015a      	lsls	r2, r3, #5
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	4413      	add	r3, r2
 8001a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a08:	461a      	mov	r2, r3
 8001a0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a0e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	3301      	adds	r3, #1
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a18:	085b      	lsrs	r3, r3, #1
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f47f af62 	bne.w	80018e8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f005 fc9f 	bl	800736c <USB_ReadInterrupts>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a38:	f040 80db 	bne.w	8001bf2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f005 fcc0 	bl	80073c6 <USB_ReadDevAllInEpInterrupt>
 8001a46:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001a4c:	e0cd      	b.n	8001bea <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 80c2 	beq.w	8001bde <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f005 fce6 	bl	8007436 <USB_ReadDevInEPInterrupt>
 8001a6a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d057      	beq.n	8001b26 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	f003 030f 	and.w	r3, r3, #15
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69f9      	ldr	r1, [r7, #28]
 8001a92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001a96:	4013      	ands	r3, r2
 8001a98:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	015a      	lsls	r2, r3, #5
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d132      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab8:	4613      	mov	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	3348      	adds	r3, #72	; 0x48
 8001ac4:	6819      	ldr	r1, [r3, #0]
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aca:	4613      	mov	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4413      	add	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4403      	add	r3, r0
 8001ad4:	3344      	adds	r3, #68	; 0x44
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4419      	add	r1, r3
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ade:	4613      	mov	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4403      	add	r3, r0
 8001ae8:	3348      	adds	r3, #72	; 0x48
 8001aea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d113      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x3a2>
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	334c      	adds	r3, #76	; 0x4c
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d108      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001b12:	461a      	mov	r2, r3
 8001b14:	2101      	movs	r1, #1
 8001b16:	f005 fcef 	bl	80074f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	4619      	mov	r1, r3
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f008 f8e4 	bl	8009cee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	015a      	lsls	r2, r3, #5
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	4413      	add	r3, r2
 8001b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	2308      	movs	r3, #8
 8001b40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	015a      	lsls	r2, r3, #5
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	4413      	add	r3, r2
 8001b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b58:	461a      	mov	r2, r3
 8001b5a:	2310      	movs	r3, #16
 8001b5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d008      	beq.n	8001b7a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	015a      	lsls	r2, r3, #5
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b74:	461a      	mov	r2, r3
 8001b76:	2340      	movs	r3, #64	; 0x40
 8001b78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d023      	beq.n	8001bcc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001b84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b86:	6a38      	ldr	r0, [r7, #32]
 8001b88:	f004 fcce 	bl	8006528 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b8e:	4613      	mov	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	3338      	adds	r3, #56	; 0x38
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	78db      	ldrb	r3, [r3, #3]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d108      	bne.n	8001bba <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	2200      	movs	r2, #0
 8001bac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f008 f931 	bl	8009e1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	015a      	lsls	r2, r3, #5
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	2302      	movs	r3, #2
 8001bca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001bd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 fcea 	bl	80025b2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	3301      	adds	r3, #1
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be6:	085b      	lsrs	r3, r3, #1
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f47f af2e 	bne.w	8001a4e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f005 fbb8 	bl	800736c <USB_ReadInterrupts>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c06:	d122      	bne.n	8001c4e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	69fa      	ldr	r2, [r7, #28]
 8001c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c16:	f023 0301 	bic.w	r3, r3, #1
 8001c1a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d108      	bne.n	8001c38 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c2e:	2100      	movs	r1, #0
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 fef5 	bl	8002a20 <HAL_PCDEx_LPM_Callback>
 8001c36:	e002      	b.n	8001c3e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f008 f8cf 	bl	8009ddc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001c4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f005 fb8a 	bl	800736c <USB_ReadInterrupts>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c62:	d112      	bne.n	8001c8a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d102      	bne.n	8001c7a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f008 f88b 	bl	8009d90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	695a      	ldr	r2, [r3, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f005 fb6c 	bl	800736c <USB_ReadInterrupts>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c9e:	d121      	bne.n	8001ce4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	695a      	ldr	r2, [r3, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001cae:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d111      	bne.n	8001cde <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	f003 020f 	and.w	r2, r3, #15
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 fea2 	bl	8002a20 <HAL_PCDEx_LPM_Callback>
 8001cdc:	e002      	b.n	8001ce4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f008 f856 	bl	8009d90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f005 fb3f 	bl	800736c <USB_ReadInterrupts>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cf8:	f040 80b7 	bne.w	8001e6a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d0a:	f023 0301 	bic.w	r3, r3, #1
 8001d0e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2110      	movs	r1, #16
 8001d16:	4618      	mov	r0, r3
 8001d18:	f004 fc06 	bl	8006528 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d20:	e046      	b.n	8001db0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d24:	015a      	lsls	r2, r3, #5
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	4413      	add	r3, r2
 8001d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d34:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d38:	015a      	lsls	r2, r3, #5
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d46:	0151      	lsls	r1, r2, #5
 8001d48:	69fa      	ldr	r2, [r7, #28]
 8001d4a:	440a      	add	r2, r1
 8001d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001d50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d58:	015a      	lsls	r2, r3, #5
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d62:	461a      	mov	r2, r3
 8001d64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d68:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d7a:	0151      	lsls	r1, r2, #5
 8001d7c:	69fa      	ldr	r2, [r7, #28]
 8001d7e:	440a      	add	r2, r1
 8001d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d88:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8c:	015a      	lsls	r2, r3, #5
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	4413      	add	r3, r2
 8001d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d9a:	0151      	lsls	r1, r2, #5
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	440a      	add	r2, r1
 8001da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001da4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001da8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dac:	3301      	adds	r3, #1
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d3b3      	bcc.n	8001d22 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dc8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001dcc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d016      	beq.n	8001e04 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001de0:	69fa      	ldr	r2, [r7, #28]
 8001de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001de6:	f043 030b 	orr.w	r3, r3, #11
 8001dea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dfc:	f043 030b 	orr.w	r3, r3, #11
 8001e00:	6453      	str	r3, [r2, #68]	; 0x44
 8001e02:	e015      	b.n	8001e30 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e0a:	695a      	ldr	r2, [r3, #20]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e12:	4619      	mov	r1, r3
 8001e14:	f242 032b 	movw	r3, #8235	; 0x202b
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	69fa      	ldr	r2, [r7, #28]
 8001e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e2a:	f043 030b 	orr.w	r3, r3, #11
 8001e2e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e3e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001e42:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e54:	461a      	mov	r2, r3
 8001e56:	f005 fb4f 	bl	80074f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695a      	ldr	r2, [r3, #20]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001e68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f005 fa7c 	bl	800736c <USB_ReadInterrupts>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e7e:	d124      	bne.n	8001eca <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f005 fb13 	bl	80074b0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f004 fbc7 	bl	8006622 <USB_GetDevSpeed>
 8001e94:	4603      	mov	r3, r0
 8001e96:	461a      	mov	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681c      	ldr	r4, [r3, #0]
 8001ea0:	f001 fd9e 	bl	80039e0 <HAL_RCC_GetHCLKFreq>
 8001ea4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f004 f8cc 	bl	800604c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f007 ff42 	bl	8009d3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f005 fa4c 	bl	800736c <USB_ReadInterrupts>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d10a      	bne.n	8001ef4 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f007 ff1f 	bl	8009d22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695a      	ldr	r2, [r3, #20]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f002 0208 	and.w	r2, r2, #8
 8001ef2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f005 fa37 	bl	800736c <USB_ReadInterrupts>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f04:	2b80      	cmp	r3, #128	; 0x80
 8001f06:	d122      	bne.n	8001f4e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f14:	2301      	movs	r3, #1
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
 8001f18:	e014      	b.n	8001f44 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1e:	4613      	mov	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d105      	bne.n	8001f3e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	4619      	mov	r1, r3
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 fb09 	bl	8002550 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	3301      	adds	r3, #1
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d3e5      	bcc.n	8001f1a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f005 fa0a 	bl	800736c <USB_ReadInterrupts>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f62:	d13b      	bne.n	8001fdc <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f64:	2301      	movs	r3, #1
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
 8001f68:	e02b      	b.n	8001fc2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	015a      	lsls	r2, r3, #5
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7e:	4613      	mov	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	4413      	add	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	440b      	add	r3, r1
 8001f88:	3340      	adds	r3, #64	; 0x40
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d115      	bne.n	8001fbc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001f90:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	da12      	bge.n	8001fbc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	333f      	adds	r3, #63	; 0x3f
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 faca 	bl	8002550 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d3ce      	bcc.n	8001f6a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001fda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f005 f9c3 	bl	800736c <USB_ReadInterrupts>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ff0:	d155      	bne.n	800209e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff6:	e045      	b.n	8002084 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	015a      	lsls	r2, r3, #5
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d12e      	bne.n	800207e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002020:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002022:	2b00      	cmp	r3, #0
 8002024:	da2b      	bge.n	800207e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002032:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002036:	429a      	cmp	r2, r3
 8002038:	d121      	bne.n	800207e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800204c:	2201      	movs	r2, #1
 800204e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10a      	bne.n	800207e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800207a:	6053      	str	r3, [r2, #4]
            break;
 800207c:	e007      	b.n	800208e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	3301      	adds	r3, #1
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208a:	429a      	cmp	r2, r3
 800208c:	d3b4      	bcc.n	8001ff8 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695a      	ldr	r2, [r3, #20]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800209c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f005 f962 	bl	800736c <USB_ReadInterrupts>
 80020a8:	4603      	mov	r3, r0
 80020aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b2:	d10a      	bne.n	80020ca <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f007 fec3 	bl	8009e40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	695a      	ldr	r2, [r3, #20]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80020c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f005 f94c 	bl	800736c <USB_ReadInterrupts>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d115      	bne.n	800210a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d002      	beq.n	80020f6 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f007 feb3 	bl	8009e5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	430a      	orrs	r2, r1
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	e000      	b.n	800210a <HAL_PCD_IRQHandler+0x992>
      return;
 8002108:	bf00      	nop
    }
  }
}
 800210a:	3734      	adds	r7, #52	; 0x34
 800210c:	46bd      	mov	sp, r7
 800210e:	bd90      	pop	{r4, r7, pc}

08002110 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_PCD_SetAddress+0x1a>
 8002126:	2302      	movs	r3, #2
 8002128:	e013      	b.n	8002152 <HAL_PCD_SetAddress+0x42>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	78fa      	ldrb	r2, [r7, #3]
 8002136:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	78fa      	ldrb	r2, [r7, #3]
 8002140:	4611      	mov	r1, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f005 f8aa 	bl	800729c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	4608      	mov	r0, r1
 8002164:	4611      	mov	r1, r2
 8002166:	461a      	mov	r2, r3
 8002168:	4603      	mov	r3, r0
 800216a:	70fb      	strb	r3, [r7, #3]
 800216c:	460b      	mov	r3, r1
 800216e:	803b      	strh	r3, [r7, #0]
 8002170:	4613      	mov	r3, r2
 8002172:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800217c:	2b00      	cmp	r3, #0
 800217e:	da0f      	bge.n	80021a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	f003 020f 	and.w	r2, r3, #15
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4413      	add	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	3338      	adds	r3, #56	; 0x38
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	4413      	add	r3, r2
 8002194:	3304      	adds	r3, #4
 8002196:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2201      	movs	r2, #1
 800219c:	705a      	strb	r2, [r3, #1]
 800219e:	e00f      	b.n	80021c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	f003 020f 	and.w	r2, r3, #15
 80021a6:	4613      	mov	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	3304      	adds	r3, #4
 80021b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021cc:	883a      	ldrh	r2, [r7, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	78ba      	ldrb	r2, [r7, #2]
 80021d6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	785b      	ldrb	r3, [r3, #1]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d004      	beq.n	80021ea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021ea:	78bb      	ldrb	r3, [r7, #2]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d102      	bne.n	80021f6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_PCD_EP_Open+0xaa>
 8002200:	2302      	movs	r3, #2
 8002202:	e00e      	b.n	8002222 <HAL_PCD_EP_Open+0xc8>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68f9      	ldr	r1, [r7, #12]
 8002212:	4618      	mov	r0, r3
 8002214:	f004 fa2a 	bl	800666c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002220:	7afb      	ldrb	r3, [r7, #11]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	460b      	mov	r3, r1
 8002234:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800223a:	2b00      	cmp	r3, #0
 800223c:	da0f      	bge.n	800225e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	f003 020f 	and.w	r2, r3, #15
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	3338      	adds	r3, #56	; 0x38
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	3304      	adds	r3, #4
 8002254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	705a      	strb	r2, [r3, #1]
 800225c:	e00f      	b.n	800227e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	f003 020f 	and.w	r2, r3, #15
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4413      	add	r3, r2
 8002274:	3304      	adds	r3, #4
 8002276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	f003 030f 	and.w	r3, r3, #15
 8002284:	b2da      	uxtb	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_PCD_EP_Close+0x6e>
 8002294:	2302      	movs	r3, #2
 8002296:	e00e      	b.n	80022b6 <HAL_PCD_EP_Close+0x8c>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68f9      	ldr	r1, [r7, #12]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f004 fa68 	bl	800677c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	603b      	str	r3, [r7, #0]
 80022ca:	460b      	mov	r3, r1
 80022cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ce:	7afb      	ldrb	r3, [r7, #11]
 80022d0:	f003 020f 	and.w	r2, r3, #15
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4413      	add	r3, r2
 80022e4:	3304      	adds	r3, #4
 80022e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2200      	movs	r2, #0
 80022f8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2200      	movs	r2, #0
 80022fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002300:	7afb      	ldrb	r3, [r7, #11]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	b2da      	uxtb	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d102      	bne.n	800231a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	461a      	mov	r2, r3
 8002326:	6979      	ldr	r1, [r7, #20]
 8002328:	f004 fb04 	bl	8006934 <USB_EPStartXfer>

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	460b      	mov	r3, r1
 8002340:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	f003 020f 	and.w	r2, r3, #15
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8002358:	681b      	ldr	r3, [r3, #0]
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	603b      	str	r3, [r7, #0]
 8002372:	460b      	mov	r3, r1
 8002374:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002376:	7afb      	ldrb	r3, [r7, #11]
 8002378:	f003 020f 	and.w	r2, r3, #15
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	3338      	adds	r3, #56	; 0x38
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	4413      	add	r3, r2
 800238a:	3304      	adds	r3, #4
 800238c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2200      	movs	r2, #0
 800239e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2201      	movs	r2, #1
 80023a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023a6:	7afb      	ldrb	r3, [r7, #11]
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d102      	bne.n	80023c0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	461a      	mov	r2, r3
 80023cc:	6979      	ldr	r1, [r7, #20]
 80023ce:	f004 fab1 	bl	8006934 <USB_EPStartXfer>

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	f003 020f 	and.w	r2, r3, #15
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d901      	bls.n	80023fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e050      	b.n	800249c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	da0f      	bge.n	8002422 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	f003 020f 	and.w	r2, r3, #15
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	3338      	adds	r3, #56	; 0x38
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	3304      	adds	r3, #4
 8002418:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2201      	movs	r2, #1
 800241e:	705a      	strb	r2, [r3, #1]
 8002420:	e00d      	b.n	800243e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	4613      	mov	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	4413      	add	r3, r2
 8002434:	3304      	adds	r3, #4
 8002436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2201      	movs	r2, #1
 8002442:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	b2da      	uxtb	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_PCD_EP_SetStall+0x82>
 800245a:	2302      	movs	r3, #2
 800245c:	e01e      	b.n	800249c <HAL_PCD_EP_SetStall+0xc0>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68f9      	ldr	r1, [r7, #12]
 800246c:	4618      	mov	r0, r3
 800246e:	f004 fe41 	bl	80070f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10a      	bne.n	8002492 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6818      	ldr	r0, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	b2d9      	uxtb	r1, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800248c:	461a      	mov	r2, r3
 800248e:	f005 f833 	bl	80074f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024b0:	78fb      	ldrb	r3, [r7, #3]
 80024b2:	f003 020f 	and.w	r2, r3, #15
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d901      	bls.n	80024c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e042      	b.n	8002548 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	da0f      	bge.n	80024ea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	f003 020f 	and.w	r2, r3, #15
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	3338      	adds	r3, #56	; 0x38
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	3304      	adds	r3, #4
 80024e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	705a      	strb	r2, [r3, #1]
 80024e8:	e00f      	b.n	800250a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	f003 020f 	and.w	r2, r3, #15
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	4413      	add	r3, r2
 8002500:	3304      	adds	r3, #4
 8002502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	b2da      	uxtb	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_PCD_EP_ClrStall+0x86>
 8002526:	2302      	movs	r3, #2
 8002528:	e00e      	b.n	8002548 <HAL_PCD_EP_ClrStall+0xa4>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68f9      	ldr	r1, [r7, #12]
 8002538:	4618      	mov	r0, r3
 800253a:	f004 fe49 	bl	80071d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800255c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002560:	2b00      	cmp	r3, #0
 8002562:	da0c      	bge.n	800257e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	f003 020f 	and.w	r2, r3, #15
 800256a:	4613      	mov	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	3338      	adds	r3, #56	; 0x38
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	4413      	add	r3, r2
 8002578:	3304      	adds	r3, #4
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	e00c      	b.n	8002598 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	f003 020f 	and.w	r2, r3, #15
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	4413      	add	r3, r2
 8002594:	3304      	adds	r3, #4
 8002596:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68f9      	ldr	r1, [r7, #12]
 800259e:	4618      	mov	r0, r3
 80025a0:	f004 fc68 	bl	8006e74 <USB_EPStopXfer>
 80025a4:	4603      	mov	r3, r0
 80025a6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80025a8:	7afb      	ldrb	r3, [r7, #11]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b08a      	sub	sp, #40	; 0x28
 80025b6:	af02      	add	r7, sp, #8
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	3338      	adds	r3, #56	; 0x38
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	3304      	adds	r3, #4
 80025d8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d901      	bls.n	80025ea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e06c      	b.n	80026c4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d902      	bls.n	8002606 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3303      	adds	r3, #3
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800260e:	e02b      	b.n	8002668 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	429a      	cmp	r2, r3
 8002624:	d902      	bls.n	800262c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	3303      	adds	r3, #3
 8002630:	089b      	lsrs	r3, r3, #2
 8002632:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	68d9      	ldr	r1, [r3, #12]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	b2da      	uxtb	r2, r3
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002644:	b2db      	uxtb	r3, r3
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	4603      	mov	r3, r0
 800264a:	6978      	ldr	r0, [r7, #20]
 800264c:	f004 fcbc 	bl	8006fc8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	441a      	add	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	695a      	ldr	r2, [r3, #20]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	441a      	add	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4413      	add	r3, r2
 8002670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	429a      	cmp	r2, r3
 800267c:	d809      	bhi.n	8002692 <PCD_WriteEmptyTxFifo+0xe0>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002686:	429a      	cmp	r2, r3
 8002688:	d203      	bcs.n	8002692 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1be      	bne.n	8002610 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	691a      	ldr	r2, [r3, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	429a      	cmp	r2, r3
 800269c:	d811      	bhi.n	80026c2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	2201      	movs	r2, #1
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	6939      	ldr	r1, [r7, #16]
 80026ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026be:	4013      	ands	r3, r2
 80026c0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3720      	adds	r7, #32
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	333c      	adds	r3, #60	; 0x3c
 80026e4:	3304      	adds	r3, #4
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d17b      	bne.n	80027fa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	2b00      	cmp	r3, #0
 800270a:	d015      	beq.n	8002738 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	4a61      	ldr	r2, [pc, #388]	; (8002894 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	f240 80b9 	bls.w	8002888 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 80b3 	beq.w	8002888 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	4413      	add	r3, r2
 800272a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800272e:	461a      	mov	r2, r3
 8002730:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002734:	6093      	str	r3, [r2, #8]
 8002736:	e0a7      	b.n	8002888 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	2b00      	cmp	r3, #0
 8002740:	d009      	beq.n	8002756 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	4413      	add	r3, r2
 800274a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800274e:	461a      	mov	r2, r3
 8002750:	2320      	movs	r3, #32
 8002752:	6093      	str	r3, [r2, #8]
 8002754:	e098      	b.n	8002888 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800275c:	2b00      	cmp	r3, #0
 800275e:	f040 8093 	bne.w	8002888 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	4a4b      	ldr	r2, [pc, #300]	; (8002894 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d90f      	bls.n	800278a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00a      	beq.n	800278a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	4413      	add	r3, r2
 800277c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002780:	461a      	mov	r2, r3
 8002782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002786:	6093      	str	r3, [r2, #8]
 8002788:	e07e      	b.n	8002888 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	4613      	mov	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	4413      	add	r3, r2
 800279c:	3304      	adds	r3, #4
 800279e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a1a      	ldr	r2, [r3, #32]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	0159      	lsls	r1, r3, #5
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	440b      	add	r3, r1
 80027ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b6:	1ad2      	subs	r2, r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d114      	bne.n	80027ec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027d4:	461a      	mov	r2, r3
 80027d6:	2101      	movs	r1, #1
 80027d8:	f004 fe8e 	bl	80074f8 <USB_EP0_OutStart>
 80027dc:	e006      	b.n	80027ec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	441a      	add	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	4619      	mov	r1, r3
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f007 fa60 	bl	8009cb8 <HAL_PCD_DataOutStageCallback>
 80027f8:	e046      	b.n	8002888 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	4a26      	ldr	r2, [pc, #152]	; (8002898 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d124      	bne.n	800284c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	4413      	add	r3, r2
 8002814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002818:	461a      	mov	r2, r3
 800281a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800281e:	6093      	str	r3, [r2, #8]
 8002820:	e032      	b.n	8002888 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	4413      	add	r3, r2
 8002834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002838:	461a      	mov	r2, r3
 800283a:	2320      	movs	r3, #32
 800283c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	4619      	mov	r1, r3
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f007 fa37 	bl	8009cb8 <HAL_PCD_DataOutStageCallback>
 800284a:	e01d      	b.n	8002888 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d114      	bne.n	800287c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d108      	bne.n	800287c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002874:	461a      	mov	r2, r3
 8002876:	2100      	movs	r1, #0
 8002878:	f004 fe3e 	bl	80074f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	4619      	mov	r1, r3
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f007 fa18 	bl	8009cb8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3720      	adds	r7, #32
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	4f54300a 	.word	0x4f54300a
 8002898:	4f54310a 	.word	0x4f54310a

0800289c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	333c      	adds	r3, #60	; 0x3c
 80028b4:	3304      	adds	r3, #4
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4a15      	ldr	r2, [pc, #84]	; (8002924 <PCD_EP_OutSetupPacket_int+0x88>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d90e      	bls.n	80028f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d009      	beq.n	80028f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e8:	461a      	mov	r2, r3
 80028ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f007 f9cf 	bl	8009c94 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <PCD_EP_OutSetupPacket_int+0x88>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d90c      	bls.n	8002918 <PCD_EP_OutSetupPacket_int+0x7c>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d108      	bne.n	8002918 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002910:	461a      	mov	r2, r3
 8002912:	2101      	movs	r1, #1
 8002914:	f004 fdf0 	bl	80074f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	4f54300a 	.word	0x4f54300a

08002928 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	70fb      	strb	r3, [r7, #3]
 8002934:	4613      	mov	r3, r2
 8002936:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d107      	bne.n	8002956 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002946:	883b      	ldrh	r3, [r7, #0]
 8002948:	0419      	lsls	r1, r3, #16
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	430a      	orrs	r2, r1
 8002952:	629a      	str	r2, [r3, #40]	; 0x28
 8002954:	e028      	b.n	80029a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	0c1b      	lsrs	r3, r3, #16
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	4413      	add	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002964:	2300      	movs	r3, #0
 8002966:	73fb      	strb	r3, [r7, #15]
 8002968:	e00d      	b.n	8002986 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	3340      	adds	r3, #64	; 0x40
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	0c1b      	lsrs	r3, r3, #16
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	4413      	add	r3, r2
 800297e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	3301      	adds	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
 8002986:	7bfa      	ldrb	r2, [r7, #15]
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	3b01      	subs	r3, #1
 800298c:	429a      	cmp	r2, r3
 800298e:	d3ec      	bcc.n	800296a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002990:	883b      	ldrh	r3, [r7, #0]
 8002992:	0418      	lsls	r0, r3, #16
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6819      	ldr	r1, [r3, #0]
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	3b01      	subs	r3, #1
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	4302      	orrs	r2, r0
 80029a0:	3340      	adds	r3, #64	; 0x40
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	887a      	ldrh	r2, [r7, #2]
 80029c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a06:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <HAL_PCDEx_ActivateLPM+0x44>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	10000003 	.word	0x10000003

08002a20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002a40:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d00a      	beq.n	8002a62 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a4c:	4b16      	ldr	r3, [pc, #88]	; (8002aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d001      	beq.n	8002a5e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e01f      	b.n	8002a9e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e01d      	b.n	8002a9e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f023 0207 	bic.w	r2, r3, #7
 8002a6a:	490f      	ldr	r1, [pc, #60]	; (8002aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002a72:	f7fe f9f9 	bl	8000e68 <HAL_GetTick>
 8002a76:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a78:	e009      	b.n	8002a8e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a7a:	f7fe f9f5 	bl	8000e68 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a88:	d901      	bls.n	8002a8e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e007      	b.n	8002a9e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a9a:	d1ee      	bne.n	8002a7a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	58024800 	.word	0x58024800

08002aac <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aba:	60d3      	str	r3, [r2, #12]
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	58024800 	.word	0x58024800

08002acc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08c      	sub	sp, #48	; 0x30
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d102      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	f000 bc48 	b.w	8003370 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 8088 	beq.w	8002bfe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aee:	4b99      	ldr	r3, [pc, #612]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002af8:	4b96      	ldr	r3, [pc, #600]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b00:	2b10      	cmp	r3, #16
 8002b02:	d007      	beq.n	8002b14 <HAL_RCC_OscConfig+0x48>
 8002b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b06:	2b18      	cmp	r3, #24
 8002b08:	d111      	bne.n	8002b2e <HAL_RCC_OscConfig+0x62>
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d10c      	bne.n	8002b2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b14:	4b8f      	ldr	r3, [pc, #572]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d06d      	beq.n	8002bfc <HAL_RCC_OscConfig+0x130>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d169      	bne.n	8002bfc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	f000 bc21 	b.w	8003370 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b36:	d106      	bne.n	8002b46 <HAL_RCC_OscConfig+0x7a>
 8002b38:	4b86      	ldr	r3, [pc, #536]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a85      	ldr	r2, [pc, #532]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	e02e      	b.n	8002ba4 <HAL_RCC_OscConfig+0xd8>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x9c>
 8002b4e:	4b81      	ldr	r3, [pc, #516]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a80      	ldr	r2, [pc, #512]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	4b7e      	ldr	r3, [pc, #504]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a7d      	ldr	r2, [pc, #500]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002b60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e01d      	b.n	8002ba4 <HAL_RCC_OscConfig+0xd8>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCC_OscConfig+0xc0>
 8002b72:	4b78      	ldr	r3, [pc, #480]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a77      	ldr	r2, [pc, #476]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	4b75      	ldr	r3, [pc, #468]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a74      	ldr	r2, [pc, #464]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	e00b      	b.n	8002ba4 <HAL_RCC_OscConfig+0xd8>
 8002b8c:	4b71      	ldr	r3, [pc, #452]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a70      	ldr	r2, [pc, #448]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	4b6e      	ldr	r3, [pc, #440]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a6d      	ldr	r2, [pc, #436]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d013      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7fe f95c 	bl	8000e68 <HAL_GetTick>
 8002bb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7fe f958 	bl	8000e68 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	; 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e3d4      	b.n	8003370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bc6:	4b63      	ldr	r3, [pc, #396]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0xe8>
 8002bd2:	e014      	b.n	8002bfe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7fe f948 	bl	8000e68 <HAL_GetTick>
 8002bd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bdc:	f7fe f944 	bl	8000e68 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	; 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e3c0      	b.n	8003370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bee:	4b59      	ldr	r3, [pc, #356]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x110>
 8002bfa:	e000      	b.n	8002bfe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 80ca 	beq.w	8002da0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c0c:	4b51      	ldr	r3, [pc, #324]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c16:	4b4f      	ldr	r3, [pc, #316]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d007      	beq.n	8002c32 <HAL_RCC_OscConfig+0x166>
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	2b18      	cmp	r3, #24
 8002c26:	d156      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x20a>
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d151      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c32:	4b48      	ldr	r3, [pc, #288]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_RCC_OscConfig+0x17e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e392      	b.n	8003370 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c4a:	4b42      	ldr	r3, [pc, #264]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 0219 	bic.w	r2, r3, #25
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	493f      	ldr	r1, [pc, #252]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5c:	f7fe f904 	bl	8000e68 <HAL_GetTick>
 8002c60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c64:	f7fe f900 	bl	8000e68 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e37c      	b.n	8003370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c76:	4b37      	ldr	r3, [pc, #220]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c82:	f7fe f921 	bl	8000ec8 <HAL_GetREVID>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d817      	bhi.n	8002cc0 <HAL_RCC_OscConfig+0x1f4>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2b40      	cmp	r3, #64	; 0x40
 8002c96:	d108      	bne.n	8002caa <HAL_RCC_OscConfig+0x1de>
 8002c98:	4b2e      	ldr	r3, [pc, #184]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ca0:	4a2c      	ldr	r2, [pc, #176]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ca8:	e07a      	b.n	8002da0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002caa:	4b2a      	ldr	r3, [pc, #168]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	031b      	lsls	r3, r3, #12
 8002cb8:	4926      	ldr	r1, [pc, #152]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cbe:	e06f      	b.n	8002da0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc0:	4b24      	ldr	r3, [pc, #144]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	061b      	lsls	r3, r3, #24
 8002cce:	4921      	ldr	r1, [pc, #132]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cd4:	e064      	b.n	8002da0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d047      	beq.n	8002d6e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cde:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 0219 	bic.w	r2, r3, #25
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	491a      	ldr	r1, [pc, #104]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7fe f8ba 	bl	8000e68 <HAL_GetTick>
 8002cf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf8:	f7fe f8b6 	bl	8000e68 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e332      	b.n	8003370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d0a:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d16:	f7fe f8d7 	bl	8000ec8 <HAL_GetREVID>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d819      	bhi.n	8002d58 <HAL_RCC_OscConfig+0x28c>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2b40      	cmp	r3, #64	; 0x40
 8002d2a:	d108      	bne.n	8002d3e <HAL_RCC_OscConfig+0x272>
 8002d2c:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d34:	4a07      	ldr	r2, [pc, #28]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d3a:	6053      	str	r3, [r2, #4]
 8002d3c:	e030      	b.n	8002da0 <HAL_RCC_OscConfig+0x2d4>
 8002d3e:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	031b      	lsls	r3, r3, #12
 8002d4c:	4901      	ldr	r1, [pc, #4]	; (8002d54 <HAL_RCC_OscConfig+0x288>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]
 8002d52:	e025      	b.n	8002da0 <HAL_RCC_OscConfig+0x2d4>
 8002d54:	58024400 	.word	0x58024400
 8002d58:	4b9a      	ldr	r3, [pc, #616]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	061b      	lsls	r3, r3, #24
 8002d66:	4997      	ldr	r1, [pc, #604]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
 8002d6c:	e018      	b.n	8002da0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d6e:	4b95      	ldr	r3, [pc, #596]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a94      	ldr	r2, [pc, #592]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7a:	f7fe f875 	bl	8000e68 <HAL_GetTick>
 8002d7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d82:	f7fe f871 	bl	8000e68 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e2ed      	b.n	8003370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d94:	4b8b      	ldr	r3, [pc, #556]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f0      	bne.n	8002d82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 80a9 	beq.w	8002f00 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dae:	4b85      	ldr	r3, [pc, #532]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002db6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002db8:	4b82      	ldr	r3, [pc, #520]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d007      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x308>
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2b18      	cmp	r3, #24
 8002dc8:	d13a      	bne.n	8002e40 <HAL_RCC_OscConfig+0x374>
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d135      	bne.n	8002e40 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dd4:	4b7b      	ldr	r3, [pc, #492]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <HAL_RCC_OscConfig+0x320>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	2b80      	cmp	r3, #128	; 0x80
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e2c1      	b.n	8003370 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dec:	f7fe f86c 	bl	8000ec8 <HAL_GetREVID>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f241 0203 	movw	r2, #4099	; 0x1003
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d817      	bhi.n	8002e2a <HAL_RCC_OscConfig+0x35e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	2b20      	cmp	r3, #32
 8002e00:	d108      	bne.n	8002e14 <HAL_RCC_OscConfig+0x348>
 8002e02:	4b70      	ldr	r3, [pc, #448]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002e0a:	4a6e      	ldr	r2, [pc, #440]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002e0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e10:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e12:	e075      	b.n	8002f00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e14:	4b6b      	ldr	r3, [pc, #428]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	069b      	lsls	r3, r3, #26
 8002e22:	4968      	ldr	r1, [pc, #416]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e28:	e06a      	b.n	8002f00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e2a:	4b66      	ldr	r3, [pc, #408]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	061b      	lsls	r3, r3, #24
 8002e38:	4962      	ldr	r1, [pc, #392]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e3e:	e05f      	b.n	8002f00 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d042      	beq.n	8002ece <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e48:	4b5e      	ldr	r3, [pc, #376]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a5d      	ldr	r2, [pc, #372]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7fe f808 	bl	8000e68 <HAL_GetTick>
 8002e58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e5c:	f7fe f804 	bl	8000e68 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e280      	b.n	8003370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e6e:	4b55      	ldr	r3, [pc, #340]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e7a:	f7fe f825 	bl	8000ec8 <HAL_GetREVID>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d817      	bhi.n	8002eb8 <HAL_RCC_OscConfig+0x3ec>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d108      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x3d6>
 8002e90:	4b4c      	ldr	r3, [pc, #304]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002e98:	4a4a      	ldr	r2, [pc, #296]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002e9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e9e:	6053      	str	r3, [r2, #4]
 8002ea0:	e02e      	b.n	8002f00 <HAL_RCC_OscConfig+0x434>
 8002ea2:	4b48      	ldr	r3, [pc, #288]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	069b      	lsls	r3, r3, #26
 8002eb0:	4944      	ldr	r1, [pc, #272]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	604b      	str	r3, [r1, #4]
 8002eb6:	e023      	b.n	8002f00 <HAL_RCC_OscConfig+0x434>
 8002eb8:	4b42      	ldr	r3, [pc, #264]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	061b      	lsls	r3, r3, #24
 8002ec6:	493f      	ldr	r1, [pc, #252]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	60cb      	str	r3, [r1, #12]
 8002ecc:	e018      	b.n	8002f00 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002ece:	4b3d      	ldr	r3, [pc, #244]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a3c      	ldr	r2, [pc, #240]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002ed4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eda:	f7fd ffc5 	bl	8000e68 <HAL_GetTick>
 8002ede:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ee2:	f7fd ffc1 	bl	8000e68 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e23d      	b.n	8003370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ef4:	4b33      	ldr	r3, [pc, #204]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1f0      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d036      	beq.n	8002f7a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d019      	beq.n	8002f48 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f14:	4b2b      	ldr	r3, [pc, #172]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f18:	4a2a      	ldr	r2, [pc, #168]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f20:	f7fd ffa2 	bl	8000e68 <HAL_GetTick>
 8002f24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f28:	f7fd ff9e 	bl	8000e68 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e21a      	b.n	8003370 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f3a:	4b22      	ldr	r3, [pc, #136]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0x45c>
 8002f46:	e018      	b.n	8002f7a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f48:	4b1e      	ldr	r3, [pc, #120]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4c:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002f4e:	f023 0301 	bic.w	r3, r3, #1
 8002f52:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7fd ff88 	bl	8000e68 <HAL_GetTick>
 8002f58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f5c:	f7fd ff84 	bl	8000e68 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e200      	b.n	8003370 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f6e:	4b15      	ldr	r3, [pc, #84]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d039      	beq.n	8002ffa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d01c      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f8e:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a0c      	ldr	r2, [pc, #48]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002f94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f9a:	f7fd ff65 	bl	8000e68 <HAL_GetTick>
 8002f9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fa2:	f7fd ff61 	bl	8000e68 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e1dd      	b.n	8003370 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fb4:	4b03      	ldr	r3, [pc, #12]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x4d6>
 8002fc0:	e01b      	b.n	8002ffa <HAL_RCC_OscConfig+0x52e>
 8002fc2:	bf00      	nop
 8002fc4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fc8:	4b9b      	ldr	r3, [pc, #620]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a9a      	ldr	r2, [pc, #616]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 8002fce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fd2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fd4:	f7fd ff48 	bl	8000e68 <HAL_GetTick>
 8002fd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fdc:	f7fd ff44 	bl	8000e68 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e1c0      	b.n	8003370 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fee:	4b92      	ldr	r3, [pc, #584]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 8081 	beq.w	800310a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003008:	4b8c      	ldr	r3, [pc, #560]	; (800323c <HAL_RCC_OscConfig+0x770>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a8b      	ldr	r2, [pc, #556]	; (800323c <HAL_RCC_OscConfig+0x770>)
 800300e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003012:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003014:	f7fd ff28 	bl	8000e68 <HAL_GetTick>
 8003018:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301c:	f7fd ff24 	bl	8000e68 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b64      	cmp	r3, #100	; 0x64
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e1a0      	b.n	8003370 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800302e:	4b83      	ldr	r3, [pc, #524]	; (800323c <HAL_RCC_OscConfig+0x770>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d106      	bne.n	8003050 <HAL_RCC_OscConfig+0x584>
 8003042:	4b7d      	ldr	r3, [pc, #500]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 8003044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003046:	4a7c      	ldr	r2, [pc, #496]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6713      	str	r3, [r2, #112]	; 0x70
 800304e:	e02d      	b.n	80030ac <HAL_RCC_OscConfig+0x5e0>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10c      	bne.n	8003072 <HAL_RCC_OscConfig+0x5a6>
 8003058:	4b77      	ldr	r3, [pc, #476]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 800305a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305c:	4a76      	ldr	r2, [pc, #472]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 800305e:	f023 0301 	bic.w	r3, r3, #1
 8003062:	6713      	str	r3, [r2, #112]	; 0x70
 8003064:	4b74      	ldr	r3, [pc, #464]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 8003066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003068:	4a73      	ldr	r2, [pc, #460]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 800306a:	f023 0304 	bic.w	r3, r3, #4
 800306e:	6713      	str	r3, [r2, #112]	; 0x70
 8003070:	e01c      	b.n	80030ac <HAL_RCC_OscConfig+0x5e0>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b05      	cmp	r3, #5
 8003078:	d10c      	bne.n	8003094 <HAL_RCC_OscConfig+0x5c8>
 800307a:	4b6f      	ldr	r3, [pc, #444]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	4a6e      	ldr	r2, [pc, #440]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 8003080:	f043 0304 	orr.w	r3, r3, #4
 8003084:	6713      	str	r3, [r2, #112]	; 0x70
 8003086:	4b6c      	ldr	r3, [pc, #432]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308a:	4a6b      	ldr	r2, [pc, #428]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	6713      	str	r3, [r2, #112]	; 0x70
 8003092:	e00b      	b.n	80030ac <HAL_RCC_OscConfig+0x5e0>
 8003094:	4b68      	ldr	r3, [pc, #416]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003098:	4a67      	ldr	r2, [pc, #412]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	6713      	str	r3, [r2, #112]	; 0x70
 80030a0:	4b65      	ldr	r3, [pc, #404]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	4a64      	ldr	r2, [pc, #400]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 80030a6:	f023 0304 	bic.w	r3, r3, #4
 80030aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d015      	beq.n	80030e0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b4:	f7fd fed8 	bl	8000e68 <HAL_GetTick>
 80030b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030bc:	f7fd fed4 	bl	8000e68 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e14e      	b.n	8003370 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030d2:	4b59      	ldr	r3, [pc, #356]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0ee      	beq.n	80030bc <HAL_RCC_OscConfig+0x5f0>
 80030de:	e014      	b.n	800310a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e0:	f7fd fec2 	bl	8000e68 <HAL_GetTick>
 80030e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030e6:	e00a      	b.n	80030fe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e8:	f7fd febe 	bl	8000e68 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e138      	b.n	8003370 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030fe:	4b4e      	ldr	r3, [pc, #312]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 8003100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1ee      	bne.n	80030e8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 812d 	beq.w	800336e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003114:	4b48      	ldr	r3, [pc, #288]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800311c:	2b18      	cmp	r3, #24
 800311e:	f000 80bd 	beq.w	800329c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	2b02      	cmp	r3, #2
 8003128:	f040 809e 	bne.w	8003268 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800312c:	4b42      	ldr	r3, [pc, #264]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a41      	ldr	r2, [pc, #260]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 8003132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fd fe96 	bl	8000e68 <HAL_GetTick>
 800313c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003140:	f7fd fe92 	bl	8000e68 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e10e      	b.n	8003370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003152:	4b39      	ldr	r3, [pc, #228]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800315e:	4b36      	ldr	r3, [pc, #216]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 8003160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003162:	4b37      	ldr	r3, [pc, #220]	; (8003240 <HAL_RCC_OscConfig+0x774>)
 8003164:	4013      	ands	r3, r2
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800316e:	0112      	lsls	r2, r2, #4
 8003170:	430a      	orrs	r2, r1
 8003172:	4931      	ldr	r1, [pc, #196]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 8003174:	4313      	orrs	r3, r2
 8003176:	628b      	str	r3, [r1, #40]	; 0x28
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	3b01      	subs	r3, #1
 800317e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003186:	3b01      	subs	r3, #1
 8003188:	025b      	lsls	r3, r3, #9
 800318a:	b29b      	uxth	r3, r3
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003192:	3b01      	subs	r3, #1
 8003194:	041b      	lsls	r3, r3, #16
 8003196:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a0:	3b01      	subs	r3, #1
 80031a2:	061b      	lsls	r3, r3, #24
 80031a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80031a8:	4923      	ldr	r1, [pc, #140]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80031ae:	4b22      	ldr	r3, [pc, #136]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	4a21      	ldr	r2, [pc, #132]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 80031b4:	f023 0301 	bic.w	r3, r3, #1
 80031b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80031ba:	4b1f      	ldr	r3, [pc, #124]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 80031bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031be:	4b21      	ldr	r3, [pc, #132]	; (8003244 <HAL_RCC_OscConfig+0x778>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031c6:	00d2      	lsls	r2, r2, #3
 80031c8:	491b      	ldr	r1, [pc, #108]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80031ce:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	f023 020c 	bic.w	r2, r3, #12
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	4917      	ldr	r1, [pc, #92]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80031e0:	4b15      	ldr	r3, [pc, #84]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	f023 0202 	bic.w	r2, r3, #2
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ec:	4912      	ldr	r1, [pc, #72]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	4a10      	ldr	r2, [pc, #64]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 80031f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031fe:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	4a0d      	ldr	r2, [pc, #52]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 8003204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003208:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800320a:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 8003210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003214:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321a:	4a07      	ldr	r2, [pc, #28]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003222:	4b05      	ldr	r3, [pc, #20]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a04      	ldr	r2, [pc, #16]	; (8003238 <HAL_RCC_OscConfig+0x76c>)
 8003228:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800322c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322e:	f7fd fe1b 	bl	8000e68 <HAL_GetTick>
 8003232:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003234:	e011      	b.n	800325a <HAL_RCC_OscConfig+0x78e>
 8003236:	bf00      	nop
 8003238:	58024400 	.word	0x58024400
 800323c:	58024800 	.word	0x58024800
 8003240:	fffffc0c 	.word	0xfffffc0c
 8003244:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003248:	f7fd fe0e 	bl	8000e68 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e08a      	b.n	8003370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800325a:	4b47      	ldr	r3, [pc, #284]	; (8003378 <HAL_RCC_OscConfig+0x8ac>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x77c>
 8003266:	e082      	b.n	800336e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003268:	4b43      	ldr	r3, [pc, #268]	; (8003378 <HAL_RCC_OscConfig+0x8ac>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a42      	ldr	r2, [pc, #264]	; (8003378 <HAL_RCC_OscConfig+0x8ac>)
 800326e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fd fdf8 	bl	8000e68 <HAL_GetTick>
 8003278:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327c:	f7fd fdf4 	bl	8000e68 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e070      	b.n	8003370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800328e:	4b3a      	ldr	r3, [pc, #232]	; (8003378 <HAL_RCC_OscConfig+0x8ac>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x7b0>
 800329a:	e068      	b.n	800336e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800329c:	4b36      	ldr	r3, [pc, #216]	; (8003378 <HAL_RCC_OscConfig+0x8ac>)
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80032a2:	4b35      	ldr	r3, [pc, #212]	; (8003378 <HAL_RCC_OscConfig+0x8ac>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d031      	beq.n	8003314 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	f003 0203 	and.w	r2, r3, #3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d12a      	bne.n	8003314 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d122      	bne.n	8003314 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032da:	429a      	cmp	r2, r3
 80032dc:	d11a      	bne.n	8003314 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	0a5b      	lsrs	r3, r3, #9
 80032e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d111      	bne.n	8003314 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	0c1b      	lsrs	r3, r3, #16
 80032f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032fe:	429a      	cmp	r2, r3
 8003300:	d108      	bne.n	8003314 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	0e1b      	lsrs	r3, r3, #24
 8003306:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e02b      	b.n	8003370 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003318:	4b17      	ldr	r3, [pc, #92]	; (8003378 <HAL_RCC_OscConfig+0x8ac>)
 800331a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331c:	08db      	lsrs	r3, r3, #3
 800331e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003322:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	429a      	cmp	r2, r3
 800332c:	d01f      	beq.n	800336e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800332e:	4b12      	ldr	r3, [pc, #72]	; (8003378 <HAL_RCC_OscConfig+0x8ac>)
 8003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003332:	4a11      	ldr	r2, [pc, #68]	; (8003378 <HAL_RCC_OscConfig+0x8ac>)
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800333a:	f7fd fd95 	bl	8000e68 <HAL_GetTick>
 800333e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003340:	bf00      	nop
 8003342:	f7fd fd91 	bl	8000e68 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	4293      	cmp	r3, r2
 800334c:	d0f9      	beq.n	8003342 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800334e:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <HAL_RCC_OscConfig+0x8ac>)
 8003350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003352:	4b0a      	ldr	r3, [pc, #40]	; (800337c <HAL_RCC_OscConfig+0x8b0>)
 8003354:	4013      	ands	r3, r2
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800335a:	00d2      	lsls	r2, r2, #3
 800335c:	4906      	ldr	r1, [pc, #24]	; (8003378 <HAL_RCC_OscConfig+0x8ac>)
 800335e:	4313      	orrs	r3, r2
 8003360:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_RCC_OscConfig+0x8ac>)
 8003364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003366:	4a04      	ldr	r2, [pc, #16]	; (8003378 <HAL_RCC_OscConfig+0x8ac>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3730      	adds	r7, #48	; 0x30
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	58024400 	.word	0x58024400
 800337c:	ffff0007 	.word	0xffff0007

08003380 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e19c      	b.n	80036ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003394:	4b8a      	ldr	r3, [pc, #552]	; (80035c0 <HAL_RCC_ClockConfig+0x240>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d910      	bls.n	80033c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a2:	4b87      	ldr	r3, [pc, #540]	; (80035c0 <HAL_RCC_ClockConfig+0x240>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 020f 	bic.w	r2, r3, #15
 80033aa:	4985      	ldr	r1, [pc, #532]	; (80035c0 <HAL_RCC_ClockConfig+0x240>)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b2:	4b83      	ldr	r3, [pc, #524]	; (80035c0 <HAL_RCC_ClockConfig+0x240>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e184      	b.n	80036ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d010      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	4b7b      	ldr	r3, [pc, #492]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033dc:	429a      	cmp	r2, r3
 80033de:	d908      	bls.n	80033f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033e0:	4b78      	ldr	r3, [pc, #480]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	4975      	ldr	r1, [pc, #468]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d010      	beq.n	8003420 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695a      	ldr	r2, [r3, #20]
 8003402:	4b70      	ldr	r3, [pc, #448]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800340a:	429a      	cmp	r2, r3
 800340c:	d908      	bls.n	8003420 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800340e:	4b6d      	ldr	r3, [pc, #436]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	496a      	ldr	r1, [pc, #424]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 800341c:	4313      	orrs	r3, r2
 800341e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b00      	cmp	r3, #0
 800342a:	d010      	beq.n	800344e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699a      	ldr	r2, [r3, #24]
 8003430:	4b64      	ldr	r3, [pc, #400]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003438:	429a      	cmp	r2, r3
 800343a:	d908      	bls.n	800344e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800343c:	4b61      	ldr	r3, [pc, #388]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	495e      	ldr	r1, [pc, #376]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 800344a:	4313      	orrs	r3, r2
 800344c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b00      	cmp	r3, #0
 8003458:	d010      	beq.n	800347c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69da      	ldr	r2, [r3, #28]
 800345e:	4b59      	ldr	r3, [pc, #356]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003466:	429a      	cmp	r2, r3
 8003468:	d908      	bls.n	800347c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800346a:	4b56      	ldr	r3, [pc, #344]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	4953      	ldr	r1, [pc, #332]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 8003478:	4313      	orrs	r3, r2
 800347a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d010      	beq.n	80034aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	4b4d      	ldr	r3, [pc, #308]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	429a      	cmp	r2, r3
 8003496:	d908      	bls.n	80034aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003498:	4b4a      	ldr	r3, [pc, #296]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	f023 020f 	bic.w	r2, r3, #15
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4947      	ldr	r1, [pc, #284]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d055      	beq.n	8003562 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80034b6:	4b43      	ldr	r3, [pc, #268]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	4940      	ldr	r1, [pc, #256]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d107      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034d0:	4b3c      	ldr	r3, [pc, #240]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d121      	bne.n	8003520 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0f6      	b.n	80036ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d107      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034e8:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d115      	bne.n	8003520 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0ea      	b.n	80036ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d107      	bne.n	8003510 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003500:	4b30      	ldr	r3, [pc, #192]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d109      	bne.n	8003520 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0de      	b.n	80036ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003510:	4b2c      	ldr	r3, [pc, #176]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0d6      	b.n	80036ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003520:	4b28      	ldr	r3, [pc, #160]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f023 0207 	bic.w	r2, r3, #7
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4925      	ldr	r1, [pc, #148]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 800352e:	4313      	orrs	r3, r2
 8003530:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003532:	f7fd fc99 	bl	8000e68 <HAL_GetTick>
 8003536:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003538:	e00a      	b.n	8003550 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800353a:	f7fd fc95 	bl	8000e68 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	f241 3288 	movw	r2, #5000	; 0x1388
 8003548:	4293      	cmp	r3, r2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e0be      	b.n	80036ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003550:	4b1c      	ldr	r3, [pc, #112]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	429a      	cmp	r2, r3
 8003560:	d1eb      	bne.n	800353a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d010      	beq.n	8003590 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	4b14      	ldr	r3, [pc, #80]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	429a      	cmp	r2, r3
 800357c:	d208      	bcs.n	8003590 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800357e:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	f023 020f 	bic.w	r2, r3, #15
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	490e      	ldr	r1, [pc, #56]	; (80035c4 <HAL_RCC_ClockConfig+0x244>)
 800358c:	4313      	orrs	r3, r2
 800358e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003590:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_RCC_ClockConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d214      	bcs.n	80035c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359e:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <HAL_RCC_ClockConfig+0x240>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 020f 	bic.w	r2, r3, #15
 80035a6:	4906      	ldr	r1, [pc, #24]	; (80035c0 <HAL_RCC_ClockConfig+0x240>)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ae:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <HAL_RCC_ClockConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d005      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e086      	b.n	80036ce <HAL_RCC_ClockConfig+0x34e>
 80035c0:	52002000 	.word	0x52002000
 80035c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d010      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	4b3f      	ldr	r3, [pc, #252]	; (80036d8 <HAL_RCC_ClockConfig+0x358>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d208      	bcs.n	80035f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035e4:	4b3c      	ldr	r3, [pc, #240]	; (80036d8 <HAL_RCC_ClockConfig+0x358>)
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	4939      	ldr	r1, [pc, #228]	; (80036d8 <HAL_RCC_ClockConfig+0x358>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d010      	beq.n	8003624 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695a      	ldr	r2, [r3, #20]
 8003606:	4b34      	ldr	r3, [pc, #208]	; (80036d8 <HAL_RCC_ClockConfig+0x358>)
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800360e:	429a      	cmp	r2, r3
 8003610:	d208      	bcs.n	8003624 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003612:	4b31      	ldr	r3, [pc, #196]	; (80036d8 <HAL_RCC_ClockConfig+0x358>)
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	492e      	ldr	r1, [pc, #184]	; (80036d8 <HAL_RCC_ClockConfig+0x358>)
 8003620:	4313      	orrs	r3, r2
 8003622:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	2b00      	cmp	r3, #0
 800362e:	d010      	beq.n	8003652 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699a      	ldr	r2, [r3, #24]
 8003634:	4b28      	ldr	r3, [pc, #160]	; (80036d8 <HAL_RCC_ClockConfig+0x358>)
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800363c:	429a      	cmp	r2, r3
 800363e:	d208      	bcs.n	8003652 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003640:	4b25      	ldr	r3, [pc, #148]	; (80036d8 <HAL_RCC_ClockConfig+0x358>)
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	4922      	ldr	r1, [pc, #136]	; (80036d8 <HAL_RCC_ClockConfig+0x358>)
 800364e:	4313      	orrs	r3, r2
 8003650:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b00      	cmp	r3, #0
 800365c:	d010      	beq.n	8003680 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69da      	ldr	r2, [r3, #28]
 8003662:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <HAL_RCC_ClockConfig+0x358>)
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800366a:	429a      	cmp	r2, r3
 800366c:	d208      	bcs.n	8003680 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800366e:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <HAL_RCC_ClockConfig+0x358>)
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	4917      	ldr	r1, [pc, #92]	; (80036d8 <HAL_RCC_ClockConfig+0x358>)
 800367c:	4313      	orrs	r3, r2
 800367e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003680:	f000 f834 	bl	80036ec <HAL_RCC_GetSysClockFreq>
 8003684:	4602      	mov	r2, r0
 8003686:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <HAL_RCC_ClockConfig+0x358>)
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	0a1b      	lsrs	r3, r3, #8
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	4912      	ldr	r1, [pc, #72]	; (80036dc <HAL_RCC_ClockConfig+0x35c>)
 8003692:	5ccb      	ldrb	r3, [r1, r3]
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	fa22 f303 	lsr.w	r3, r2, r3
 800369c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800369e:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <HAL_RCC_ClockConfig+0x358>)
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	4a0d      	ldr	r2, [pc, #52]	; (80036dc <HAL_RCC_ClockConfig+0x35c>)
 80036a8:	5cd3      	ldrb	r3, [r2, r3]
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
 80036b4:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <HAL_RCC_ClockConfig+0x360>)
 80036b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036b8:	4a0a      	ldr	r2, [pc, #40]	; (80036e4 <HAL_RCC_ClockConfig+0x364>)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <HAL_RCC_ClockConfig+0x368>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fd fb86 	bl	8000dd4 <HAL_InitTick>
 80036c8:	4603      	mov	r3, r0
 80036ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	58024400 	.word	0x58024400
 80036dc:	0800b398 	.word	0x0800b398
 80036e0:	24000004 	.word	0x24000004
 80036e4:	24000000 	.word	0x24000000
 80036e8:	24000008 	.word	0x24000008

080036ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b089      	sub	sp, #36	; 0x24
 80036f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036f2:	4bb3      	ldr	r3, [pc, #716]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036fa:	2b18      	cmp	r3, #24
 80036fc:	f200 8155 	bhi.w	80039aa <HAL_RCC_GetSysClockFreq+0x2be>
 8003700:	a201      	add	r2, pc, #4	; (adr r2, 8003708 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003706:	bf00      	nop
 8003708:	0800376d 	.word	0x0800376d
 800370c:	080039ab 	.word	0x080039ab
 8003710:	080039ab 	.word	0x080039ab
 8003714:	080039ab 	.word	0x080039ab
 8003718:	080039ab 	.word	0x080039ab
 800371c:	080039ab 	.word	0x080039ab
 8003720:	080039ab 	.word	0x080039ab
 8003724:	080039ab 	.word	0x080039ab
 8003728:	08003793 	.word	0x08003793
 800372c:	080039ab 	.word	0x080039ab
 8003730:	080039ab 	.word	0x080039ab
 8003734:	080039ab 	.word	0x080039ab
 8003738:	080039ab 	.word	0x080039ab
 800373c:	080039ab 	.word	0x080039ab
 8003740:	080039ab 	.word	0x080039ab
 8003744:	080039ab 	.word	0x080039ab
 8003748:	08003799 	.word	0x08003799
 800374c:	080039ab 	.word	0x080039ab
 8003750:	080039ab 	.word	0x080039ab
 8003754:	080039ab 	.word	0x080039ab
 8003758:	080039ab 	.word	0x080039ab
 800375c:	080039ab 	.word	0x080039ab
 8003760:	080039ab 	.word	0x080039ab
 8003764:	080039ab 	.word	0x080039ab
 8003768:	0800379f 	.word	0x0800379f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800376c:	4b94      	ldr	r3, [pc, #592]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d009      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003778:	4b91      	ldr	r3, [pc, #580]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	08db      	lsrs	r3, r3, #3
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	4a90      	ldr	r2, [pc, #576]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
 8003788:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800378a:	e111      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800378c:	4b8d      	ldr	r3, [pc, #564]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800378e:	61bb      	str	r3, [r7, #24]
      break;
 8003790:	e10e      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003792:	4b8d      	ldr	r3, [pc, #564]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003794:	61bb      	str	r3, [r7, #24]
      break;
 8003796:	e10b      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003798:	4b8c      	ldr	r3, [pc, #560]	; (80039cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800379a:	61bb      	str	r3, [r7, #24]
      break;
 800379c:	e108      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800379e:	4b88      	ldr	r3, [pc, #544]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80037a8:	4b85      	ldr	r3, [pc, #532]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ac:	091b      	lsrs	r3, r3, #4
 80037ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037b2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80037b4:	4b82      	ldr	r3, [pc, #520]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80037be:	4b80      	ldr	r3, [pc, #512]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c2:	08db      	lsrs	r3, r3, #3
 80037c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	fb02 f303 	mul.w	r3, r2, r3
 80037ce:	ee07 3a90 	vmov	s15, r3
 80037d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 80e1 	beq.w	80039a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	f000 8083 	beq.w	80038f0 <HAL_RCC_GetSysClockFreq+0x204>
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	f200 80a1 	bhi.w	8003934 <HAL_RCC_GetSysClockFreq+0x248>
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_RCC_GetSysClockFreq+0x114>
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d056      	beq.n	80038ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80037fe:	e099      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003800:	4b6f      	ldr	r3, [pc, #444]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	2b00      	cmp	r3, #0
 800380a:	d02d      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800380c:	4b6c      	ldr	r3, [pc, #432]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	08db      	lsrs	r3, r3, #3
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	4a6b      	ldr	r2, [pc, #428]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003818:	fa22 f303 	lsr.w	r3, r2, r3
 800381c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	ee07 3a90 	vmov	s15, r3
 8003824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	ee07 3a90 	vmov	s15, r3
 800382e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003836:	4b62      	ldr	r3, [pc, #392]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003846:	ed97 6a02 	vldr	s12, [r7, #8]
 800384a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80039d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800384e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800385a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800385e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003862:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003866:	e087      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	ee07 3a90 	vmov	s15, r3
 800386e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003872:	eddf 6a58 	vldr	s13, [pc, #352]	; 80039d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800387a:	4b51      	ldr	r3, [pc, #324]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003882:	ee07 3a90 	vmov	s15, r3
 8003886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800388a:	ed97 6a02 	vldr	s12, [r7, #8]
 800388e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80039d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800389a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800389e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038aa:	e065      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	ee07 3a90 	vmov	s15, r3
 80038b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80039d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80038ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038be:	4b40      	ldr	r3, [pc, #256]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c6:	ee07 3a90 	vmov	s15, r3
 80038ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80038d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80039d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038ee:	e043      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80039dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80038fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003902:	4b2f      	ldr	r3, [pc, #188]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800390a:	ee07 3a90 	vmov	s15, r3
 800390e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003912:	ed97 6a02 	vldr	s12, [r7, #8]
 8003916:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80039d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800391a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800391e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800392a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003932:	e021      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	ee07 3a90 	vmov	s15, r3
 800393a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80039d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003946:	4b1e      	ldr	r3, [pc, #120]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003956:	ed97 6a02 	vldr	s12, [r7, #8]
 800395a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80039d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800395e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800396a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800396e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003972:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003976:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003978:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	0a5b      	lsrs	r3, r3, #9
 800397e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003982:	3301      	adds	r3, #1
 8003984:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	ee07 3a90 	vmov	s15, r3
 800398c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003990:	edd7 6a07 	vldr	s13, [r7, #28]
 8003994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800399c:	ee17 3a90 	vmov	r3, s15
 80039a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80039a2:	e005      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61bb      	str	r3, [r7, #24]
      break;
 80039a8:	e002      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80039aa:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039ac:	61bb      	str	r3, [r7, #24]
      break;
 80039ae:	bf00      	nop
  }

  return sysclockfreq;
 80039b0:	69bb      	ldr	r3, [r7, #24]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3724      	adds	r7, #36	; 0x24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	58024400 	.word	0x58024400
 80039c4:	03d09000 	.word	0x03d09000
 80039c8:	003d0900 	.word	0x003d0900
 80039cc:	017d7840 	.word	0x017d7840
 80039d0:	46000000 	.word	0x46000000
 80039d4:	4c742400 	.word	0x4c742400
 80039d8:	4a742400 	.word	0x4a742400
 80039dc:	4bbebc20 	.word	0x4bbebc20

080039e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80039e6:	f7ff fe81 	bl	80036ec <HAL_RCC_GetSysClockFreq>
 80039ea:	4602      	mov	r2, r0
 80039ec:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <HAL_RCC_GetHCLKFreq+0x50>)
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	0a1b      	lsrs	r3, r3, #8
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	490f      	ldr	r1, [pc, #60]	; (8003a34 <HAL_RCC_GetHCLKFreq+0x54>)
 80039f8:	5ccb      	ldrb	r3, [r1, r3]
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003a02:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a04:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	4a09      	ldr	r2, [pc, #36]	; (8003a34 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a0e:	5cd3      	ldrb	r3, [r2, r3]
 8003a10:	f003 031f 	and.w	r3, r3, #31
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1a:	4a07      	ldr	r2, [pc, #28]	; (8003a38 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a1c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a1e:	4a07      	ldr	r2, [pc, #28]	; (8003a3c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003a24:	4b04      	ldr	r3, [pc, #16]	; (8003a38 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a26:	681b      	ldr	r3, [r3, #0]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	58024400 	.word	0x58024400
 8003a34:	0800b398 	.word	0x0800b398
 8003a38:	24000004 	.word	0x24000004
 8003a3c:	24000000 	.word	0x24000000

08003a40 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a44:	b0ca      	sub	sp, #296	; 0x128
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a52:	2300      	movs	r3, #0
 8003a54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a60:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003a64:	2500      	movs	r5, #0
 8003a66:	ea54 0305 	orrs.w	r3, r4, r5
 8003a6a:	d049      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a76:	d02f      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003a78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a7c:	d828      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a82:	d01a      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a88:	d822      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a92:	d007      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a94:	e01c      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a96:	4bb8      	ldr	r3, [pc, #736]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	4ab7      	ldr	r2, [pc, #732]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003aa2:	e01a      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aa8:	3308      	adds	r3, #8
 8003aaa:	2102      	movs	r1, #2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f001 f9d1 	bl	8004e54 <RCCEx_PLL2_Config>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003ab8:	e00f      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003abe:	3328      	adds	r3, #40	; 0x28
 8003ac0:	2102      	movs	r1, #2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f001 fa78 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003ace:	e004      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ad6:	e000      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ada:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10a      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ae2:	4ba5      	ldr	r3, [pc, #660]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003af0:	4aa1      	ldr	r2, [pc, #644]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003af2:	430b      	orrs	r3, r1
 8003af4:	6513      	str	r3, [r2, #80]	; 0x50
 8003af6:	e003      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003afc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b08:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003b0c:	f04f 0900 	mov.w	r9, #0
 8003b10:	ea58 0309 	orrs.w	r3, r8, r9
 8003b14:	d047      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d82a      	bhi.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003b20:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003b3d 	.word	0x08003b3d
 8003b2c:	08003b4b 	.word	0x08003b4b
 8003b30:	08003b61 	.word	0x08003b61
 8003b34:	08003b7f 	.word	0x08003b7f
 8003b38:	08003b7f 	.word	0x08003b7f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b3c:	4b8e      	ldr	r3, [pc, #568]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	4a8d      	ldr	r2, [pc, #564]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b48:	e01a      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b4e:	3308      	adds	r3, #8
 8003b50:	2100      	movs	r1, #0
 8003b52:	4618      	mov	r0, r3
 8003b54:	f001 f97e 	bl	8004e54 <RCCEx_PLL2_Config>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b5e:	e00f      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b64:	3328      	adds	r3, #40	; 0x28
 8003b66:	2100      	movs	r1, #0
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f001 fa25 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b74:	e004      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b7c:	e000      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10a      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b88:	4b7b      	ldr	r3, [pc, #492]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8c:	f023 0107 	bic.w	r1, r3, #7
 8003b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b96:	4a78      	ldr	r2, [pc, #480]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	6513      	str	r3, [r2, #80]	; 0x50
 8003b9c:	e003      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ba2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bae:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003bb2:	f04f 0b00 	mov.w	fp, #0
 8003bb6:	ea5a 030b 	orrs.w	r3, sl, fp
 8003bba:	d04c      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc6:	d030      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bcc:	d829      	bhi.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003bce:	2bc0      	cmp	r3, #192	; 0xc0
 8003bd0:	d02d      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003bd2:	2bc0      	cmp	r3, #192	; 0xc0
 8003bd4:	d825      	bhi.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003bd6:	2b80      	cmp	r3, #128	; 0x80
 8003bd8:	d018      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003bda:	2b80      	cmp	r3, #128	; 0x80
 8003bdc:	d821      	bhi.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003be2:	2b40      	cmp	r3, #64	; 0x40
 8003be4:	d007      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003be6:	e01c      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be8:	4b63      	ldr	r3, [pc, #396]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	4a62      	ldr	r2, [pc, #392]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003bf4:	e01c      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bfa:	3308      	adds	r3, #8
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f001 f928 	bl	8004e54 <RCCEx_PLL2_Config>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c0a:	e011      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c10:	3328      	adds	r3, #40	; 0x28
 8003c12:	2100      	movs	r1, #0
 8003c14:	4618      	mov	r0, r3
 8003c16:	f001 f9cf 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c20:	e006      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c28:	e002      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c2a:	bf00      	nop
 8003c2c:	e000      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10a      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003c38:	4b4f      	ldr	r3, [pc, #316]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c3c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c46:	4a4c      	ldr	r2, [pc, #304]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6513      	str	r3, [r2, #80]	; 0x50
 8003c4c:	e003      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003c62:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003c66:	2300      	movs	r3, #0
 8003c68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003c6c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003c70:	460b      	mov	r3, r1
 8003c72:	4313      	orrs	r3, r2
 8003c74:	d053      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c82:	d035      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003c84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c88:	d82e      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c8a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c8e:	d031      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003c90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c94:	d828      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c9a:	d01a      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003c9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca0:	d822      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003ca6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003caa:	d007      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003cac:	e01c      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cae:	4b32      	ldr	r3, [pc, #200]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	4a31      	ldr	r2, [pc, #196]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cba:	e01c      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f001 f8c5 	bl	8004e54 <RCCEx_PLL2_Config>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003cd0:	e011      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd6:	3328      	adds	r3, #40	; 0x28
 8003cd8:	2100      	movs	r1, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f001 f96c 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ce6:	e006      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cee:	e002      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003cf0:	bf00      	nop
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10b      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003cfe:	4b1e      	ldr	r3, [pc, #120]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d02:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d0e:	4a1a      	ldr	r2, [pc, #104]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d10:	430b      	orrs	r3, r1
 8003d12:	6593      	str	r3, [r2, #88]	; 0x58
 8003d14:	e003      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d26:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003d2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003d34:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	d056      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d4a:	d038      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003d4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d50:	d831      	bhi.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d56:	d034      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003d58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d5c:	d82b      	bhi.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d62:	d01d      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003d64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d68:	d825      	bhi.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d006      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003d6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d72:	d00a      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003d74:	e01f      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d76:	bf00      	nop
 8003d78:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d7c:	4ba2      	ldr	r3, [pc, #648]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	4aa1      	ldr	r2, [pc, #644]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d88:	e01c      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d8e:	3308      	adds	r3, #8
 8003d90:	2100      	movs	r1, #0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f001 f85e 	bl	8004e54 <RCCEx_PLL2_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d9e:	e011      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003da4:	3328      	adds	r3, #40	; 0x28
 8003da6:	2100      	movs	r1, #0
 8003da8:	4618      	mov	r0, r3
 8003daa:	f001 f905 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003db4:	e006      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003dbc:	e002      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003dbe:	bf00      	nop
 8003dc0:	e000      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003dc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10b      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003dcc:	4b8e      	ldr	r3, [pc, #568]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dd8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ddc:	4a8a      	ldr	r2, [pc, #552]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dde:	430b      	orrs	r3, r1
 8003de0:	6593      	str	r3, [r2, #88]	; 0x58
 8003de2:	e003      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003de8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003df8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003e02:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003e06:	460b      	mov	r3, r1
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	d03a      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e12:	2b30      	cmp	r3, #48	; 0x30
 8003e14:	d01f      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003e16:	2b30      	cmp	r3, #48	; 0x30
 8003e18:	d819      	bhi.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	d00c      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003e1e:	2b20      	cmp	r3, #32
 8003e20:	d815      	bhi.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d019      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	d111      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e2a:	4b77      	ldr	r3, [pc, #476]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	4a76      	ldr	r2, [pc, #472]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003e36:	e011      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	2102      	movs	r1, #2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f001 f807 	bl	8004e54 <RCCEx_PLL2_Config>
 8003e46:	4603      	mov	r3, r0
 8003e48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003e4c:	e006      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e54:	e002      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003e56:	bf00      	nop
 8003e58:	e000      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e64:	4b68      	ldr	r3, [pc, #416]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e68:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e72:	4a65      	ldr	r2, [pc, #404]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e74:	430b      	orrs	r3, r1
 8003e76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e78:	e003      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003e8e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003e92:	2300      	movs	r3, #0
 8003e94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003e98:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	d051      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eac:	d035      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003eae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eb2:	d82e      	bhi.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003eb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003eb8:	d031      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003eba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ebe:	d828      	bhi.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ec4:	d01a      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eca:	d822      	bhi.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed4:	d007      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003ed6:	e01c      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ed8:	4b4b      	ldr	r3, [pc, #300]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	4a4a      	ldr	r2, [pc, #296]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ee2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ee4:	e01c      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eea:	3308      	adds	r3, #8
 8003eec:	2100      	movs	r1, #0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 ffb0 	bl	8004e54 <RCCEx_PLL2_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003efa:	e011      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f00:	3328      	adds	r3, #40	; 0x28
 8003f02:	2100      	movs	r1, #0
 8003f04:	4618      	mov	r0, r3
 8003f06:	f001 f857 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f10:	e006      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f18:	e002      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003f1a:	bf00      	nop
 8003f1c:	e000      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f28:	4b37      	ldr	r3, [pc, #220]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f36:	4a34      	ldr	r2, [pc, #208]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	6513      	str	r3, [r2, #80]	; 0x50
 8003f3c:	e003      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003f52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f56:	2300      	movs	r3, #0
 8003f58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003f5c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003f60:	460b      	mov	r3, r1
 8003f62:	4313      	orrs	r3, r2
 8003f64:	d056      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f70:	d033      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003f72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f76:	d82c      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f7c:	d02f      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003f7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f82:	d826      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f88:	d02b      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003f8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f8e:	d820      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f94:	d012      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003f96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f9a:	d81a      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d022      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa4:	d115      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003faa:	3308      	adds	r3, #8
 8003fac:	2101      	movs	r1, #1
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 ff50 	bl	8004e54 <RCCEx_PLL2_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003fba:	e015      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc0:	3328      	adds	r3, #40	; 0x28
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 fff7 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003fd0:	e00a      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fd8:	e006      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003fda:	bf00      	nop
 8003fdc:	e004      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003fde:	bf00      	nop
 8003fe0:	e002      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003fe2:	bf00      	nop
 8003fe4:	e000      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10d      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ff0:	4b05      	ldr	r3, [pc, #20]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ffe:	4a02      	ldr	r2, [pc, #8]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004000:	430b      	orrs	r3, r1
 8004002:	6513      	str	r3, [r2, #80]	; 0x50
 8004004:	e006      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004006:	bf00      	nop
 8004008:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004010:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004020:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004024:	2300      	movs	r3, #0
 8004026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800402a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800402e:	460b      	mov	r3, r1
 8004030:	4313      	orrs	r3, r2
 8004032:	d055      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004038:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800403c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004040:	d033      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004042:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004046:	d82c      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800404c:	d02f      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800404e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004052:	d826      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004054:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004058:	d02b      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800405a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800405e:	d820      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004064:	d012      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800406a:	d81a      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d022      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004070:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004074:	d115      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800407a:	3308      	adds	r3, #8
 800407c:	2101      	movs	r1, #1
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fee8 	bl	8004e54 <RCCEx_PLL2_Config>
 8004084:	4603      	mov	r3, r0
 8004086:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800408a:	e015      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800408c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004090:	3328      	adds	r3, #40	; 0x28
 8004092:	2101      	movs	r1, #1
 8004094:	4618      	mov	r0, r3
 8004096:	f000 ff8f 	bl	8004fb8 <RCCEx_PLL3_Config>
 800409a:	4603      	mov	r3, r0
 800409c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80040a0:	e00a      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040a8:	e006      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040aa:	bf00      	nop
 80040ac:	e004      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040ae:	bf00      	nop
 80040b0:	e002      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040b2:	bf00      	nop
 80040b4:	e000      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10b      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80040c0:	4ba3      	ldr	r3, [pc, #652]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80040c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040d0:	4a9f      	ldr	r2, [pc, #636]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040d2:	430b      	orrs	r3, r1
 80040d4:	6593      	str	r3, [r2, #88]	; 0x58
 80040d6:	e003      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80040ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040f0:	2300      	movs	r3, #0
 80040f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80040f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040fa:	460b      	mov	r3, r1
 80040fc:	4313      	orrs	r3, r2
 80040fe:	d037      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004106:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800410a:	d00e      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800410c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004110:	d816      	bhi.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004112:	2b00      	cmp	r3, #0
 8004114:	d018      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004116:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800411a:	d111      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800411c:	4b8c      	ldr	r3, [pc, #560]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	4a8b      	ldr	r2, [pc, #556]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004126:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004128:	e00f      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800412a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800412e:	3308      	adds	r3, #8
 8004130:	2101      	movs	r1, #1
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fe8e 	bl	8004e54 <RCCEx_PLL2_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800413e:	e004      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004146:	e000      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800414a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10a      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004152:	4b7f      	ldr	r3, [pc, #508]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004156:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800415a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004160:	4a7b      	ldr	r2, [pc, #492]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004162:	430b      	orrs	r3, r1
 8004164:	6513      	str	r3, [r2, #80]	; 0x50
 8004166:	e003      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004168:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800416c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004178:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800417c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004180:	2300      	movs	r3, #0
 8004182:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004186:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800418a:	460b      	mov	r3, r1
 800418c:	4313      	orrs	r3, r2
 800418e:	d039      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004196:	2b03      	cmp	r3, #3
 8004198:	d81c      	bhi.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800419a:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	080041dd 	.word	0x080041dd
 80041a4:	080041b1 	.word	0x080041b1
 80041a8:	080041bf 	.word	0x080041bf
 80041ac:	080041dd 	.word	0x080041dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b0:	4b67      	ldr	r3, [pc, #412]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b4:	4a66      	ldr	r2, [pc, #408]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80041bc:	e00f      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c2:	3308      	adds	r3, #8
 80041c4:	2102      	movs	r1, #2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fe44 	bl	8004e54 <RCCEx_PLL2_Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80041d2:	e004      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041da:	e000      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80041dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10a      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80041e6:	4b5a      	ldr	r3, [pc, #360]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ea:	f023 0103 	bic.w	r1, r3, #3
 80041ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f4:	4a56      	ldr	r2, [pc, #344]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041f6:	430b      	orrs	r3, r1
 80041f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041fa:	e003      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004200:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004210:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004214:	2300      	movs	r3, #0
 8004216:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800421a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800421e:	460b      	mov	r3, r1
 8004220:	4313      	orrs	r3, r2
 8004222:	f000 809f 	beq.w	8004364 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004226:	4b4b      	ldr	r3, [pc, #300]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a4a      	ldr	r2, [pc, #296]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800422c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004230:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004232:	f7fc fe19 	bl	8000e68 <HAL_GetTick>
 8004236:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800423a:	e00b      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423c:	f7fc fe14 	bl	8000e68 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b64      	cmp	r3, #100	; 0x64
 800424a:	d903      	bls.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004252:	e005      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004254:	4b3f      	ldr	r3, [pc, #252]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0ed      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004260:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004264:	2b00      	cmp	r3, #0
 8004266:	d179      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004268:	4b39      	ldr	r3, [pc, #228]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800426a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800426c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004270:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004274:	4053      	eors	r3, r2
 8004276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427a:	2b00      	cmp	r3, #0
 800427c:	d015      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800427e:	4b34      	ldr	r3, [pc, #208]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004286:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800428a:	4b31      	ldr	r3, [pc, #196]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	4a30      	ldr	r2, [pc, #192]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004294:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004296:	4b2e      	ldr	r3, [pc, #184]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	4a2d      	ldr	r2, [pc, #180]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800429c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80042a2:	4a2b      	ldr	r2, [pc, #172]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042a8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80042aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b6:	d118      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b8:	f7fc fdd6 	bl	8000e68 <HAL_GetTick>
 80042bc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042c0:	e00d      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c2:	f7fc fdd1 	bl	8000e68 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80042cc:	1ad2      	subs	r2, r2, r3
 80042ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d903      	bls.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80042dc:	e005      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042de:	4b1c      	ldr	r3, [pc, #112]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0eb      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80042ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d129      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004302:	d10e      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004304:	4b12      	ldr	r3, [pc, #72]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800430c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004310:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004314:	091a      	lsrs	r2, r3, #4
 8004316:	4b10      	ldr	r3, [pc, #64]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004318:	4013      	ands	r3, r2
 800431a:	4a0d      	ldr	r2, [pc, #52]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800431c:	430b      	orrs	r3, r1
 800431e:	6113      	str	r3, [r2, #16]
 8004320:	e005      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004322:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	4a0a      	ldr	r2, [pc, #40]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004328:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800432c:	6113      	str	r3, [r2, #16]
 800432e:	4b08      	ldr	r3, [pc, #32]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004330:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004336:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800433a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800433e:	4a04      	ldr	r2, [pc, #16]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004340:	430b      	orrs	r3, r1
 8004342:	6713      	str	r3, [r2, #112]	; 0x70
 8004344:	e00e      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800434a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800434e:	e009      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004350:	58024400 	.word	0x58024400
 8004354:	58024800 	.word	0x58024800
 8004358:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004360:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436c:	f002 0301 	and.w	r3, r2, #1
 8004370:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004374:	2300      	movs	r3, #0
 8004376:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800437a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800437e:	460b      	mov	r3, r1
 8004380:	4313      	orrs	r3, r2
 8004382:	f000 8089 	beq.w	8004498 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800438a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800438c:	2b28      	cmp	r3, #40	; 0x28
 800438e:	d86b      	bhi.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004390:	a201      	add	r2, pc, #4	; (adr r2, 8004398 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004396:	bf00      	nop
 8004398:	08004471 	.word	0x08004471
 800439c:	08004469 	.word	0x08004469
 80043a0:	08004469 	.word	0x08004469
 80043a4:	08004469 	.word	0x08004469
 80043a8:	08004469 	.word	0x08004469
 80043ac:	08004469 	.word	0x08004469
 80043b0:	08004469 	.word	0x08004469
 80043b4:	08004469 	.word	0x08004469
 80043b8:	0800443d 	.word	0x0800443d
 80043bc:	08004469 	.word	0x08004469
 80043c0:	08004469 	.word	0x08004469
 80043c4:	08004469 	.word	0x08004469
 80043c8:	08004469 	.word	0x08004469
 80043cc:	08004469 	.word	0x08004469
 80043d0:	08004469 	.word	0x08004469
 80043d4:	08004469 	.word	0x08004469
 80043d8:	08004453 	.word	0x08004453
 80043dc:	08004469 	.word	0x08004469
 80043e0:	08004469 	.word	0x08004469
 80043e4:	08004469 	.word	0x08004469
 80043e8:	08004469 	.word	0x08004469
 80043ec:	08004469 	.word	0x08004469
 80043f0:	08004469 	.word	0x08004469
 80043f4:	08004469 	.word	0x08004469
 80043f8:	08004471 	.word	0x08004471
 80043fc:	08004469 	.word	0x08004469
 8004400:	08004469 	.word	0x08004469
 8004404:	08004469 	.word	0x08004469
 8004408:	08004469 	.word	0x08004469
 800440c:	08004469 	.word	0x08004469
 8004410:	08004469 	.word	0x08004469
 8004414:	08004469 	.word	0x08004469
 8004418:	08004471 	.word	0x08004471
 800441c:	08004469 	.word	0x08004469
 8004420:	08004469 	.word	0x08004469
 8004424:	08004469 	.word	0x08004469
 8004428:	08004469 	.word	0x08004469
 800442c:	08004469 	.word	0x08004469
 8004430:	08004469 	.word	0x08004469
 8004434:	08004469 	.word	0x08004469
 8004438:	08004471 	.word	0x08004471
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800443c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004440:	3308      	adds	r3, #8
 8004442:	2101      	movs	r1, #1
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fd05 	bl	8004e54 <RCCEx_PLL2_Config>
 800444a:	4603      	mov	r3, r0
 800444c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004450:	e00f      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004456:	3328      	adds	r3, #40	; 0x28
 8004458:	2101      	movs	r1, #1
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fdac 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004460:	4603      	mov	r3, r0
 8004462:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004466:	e004      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800446e:	e000      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004472:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10a      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800447a:	4bbf      	ldr	r3, [pc, #764]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800447c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004488:	4abb      	ldr	r2, [pc, #748]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800448a:	430b      	orrs	r3, r1
 800448c:	6553      	str	r3, [r2, #84]	; 0x54
 800448e:	e003      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004490:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004494:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800449c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a0:	f002 0302 	and.w	r3, r2, #2
 80044a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044a8:	2300      	movs	r3, #0
 80044aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80044ae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80044b2:	460b      	mov	r3, r1
 80044b4:	4313      	orrs	r3, r2
 80044b6:	d041      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80044b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044be:	2b05      	cmp	r3, #5
 80044c0:	d824      	bhi.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80044c2:	a201      	add	r2, pc, #4	; (adr r2, 80044c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80044c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c8:	08004515 	.word	0x08004515
 80044cc:	080044e1 	.word	0x080044e1
 80044d0:	080044f7 	.word	0x080044f7
 80044d4:	08004515 	.word	0x08004515
 80044d8:	08004515 	.word	0x08004515
 80044dc:	08004515 	.word	0x08004515
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e4:	3308      	adds	r3, #8
 80044e6:	2101      	movs	r1, #1
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 fcb3 	bl	8004e54 <RCCEx_PLL2_Config>
 80044ee:	4603      	mov	r3, r0
 80044f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80044f4:	e00f      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044fa:	3328      	adds	r3, #40	; 0x28
 80044fc:	2101      	movs	r1, #1
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fd5a 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004504:	4603      	mov	r3, r0
 8004506:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800450a:	e004      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004512:	e000      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004516:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10a      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800451e:	4b96      	ldr	r3, [pc, #600]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004522:	f023 0107 	bic.w	r1, r3, #7
 8004526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800452a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800452c:	4a92      	ldr	r2, [pc, #584]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800452e:	430b      	orrs	r3, r1
 8004530:	6553      	str	r3, [r2, #84]	; 0x54
 8004532:	e003      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004534:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004538:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800453c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004544:	f002 0304 	and.w	r3, r2, #4
 8004548:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800454c:	2300      	movs	r3, #0
 800454e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004552:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004556:	460b      	mov	r3, r1
 8004558:	4313      	orrs	r3, r2
 800455a:	d044      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800455c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004560:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004564:	2b05      	cmp	r3, #5
 8004566:	d825      	bhi.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004568:	a201      	add	r2, pc, #4	; (adr r2, 8004570 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800456a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456e:	bf00      	nop
 8004570:	080045bd 	.word	0x080045bd
 8004574:	08004589 	.word	0x08004589
 8004578:	0800459f 	.word	0x0800459f
 800457c:	080045bd 	.word	0x080045bd
 8004580:	080045bd 	.word	0x080045bd
 8004584:	080045bd 	.word	0x080045bd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800458c:	3308      	adds	r3, #8
 800458e:	2101      	movs	r1, #1
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fc5f 	bl	8004e54 <RCCEx_PLL2_Config>
 8004596:	4603      	mov	r3, r0
 8004598:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800459c:	e00f      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800459e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a2:	3328      	adds	r3, #40	; 0x28
 80045a4:	2101      	movs	r1, #1
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fd06 	bl	8004fb8 <RCCEx_PLL3_Config>
 80045ac:	4603      	mov	r3, r0
 80045ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80045b2:	e004      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045ba:	e000      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80045bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10b      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045c6:	4b6c      	ldr	r3, [pc, #432]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ca:	f023 0107 	bic.w	r1, r3, #7
 80045ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d6:	4a68      	ldr	r2, [pc, #416]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045d8:	430b      	orrs	r3, r1
 80045da:	6593      	str	r3, [r2, #88]	; 0x58
 80045dc:	e003      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	f002 0320 	and.w	r3, r2, #32
 80045f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045f6:	2300      	movs	r3, #0
 80045f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004600:	460b      	mov	r3, r1
 8004602:	4313      	orrs	r3, r2
 8004604:	d055      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800460a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004612:	d033      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004614:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004618:	d82c      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800461a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461e:	d02f      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004624:	d826      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004626:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800462a:	d02b      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800462c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004630:	d820      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004636:	d012      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800463c:	d81a      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800463e:	2b00      	cmp	r3, #0
 8004640:	d022      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004642:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004646:	d115      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800464c:	3308      	adds	r3, #8
 800464e:	2100      	movs	r1, #0
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fbff 	bl	8004e54 <RCCEx_PLL2_Config>
 8004656:	4603      	mov	r3, r0
 8004658:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800465c:	e015      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004662:	3328      	adds	r3, #40	; 0x28
 8004664:	2102      	movs	r1, #2
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fca6 	bl	8004fb8 <RCCEx_PLL3_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004672:	e00a      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800467a:	e006      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800467c:	bf00      	nop
 800467e:	e004      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004680:	bf00      	nop
 8004682:	e002      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004684:	bf00      	nop
 8004686:	e000      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800468a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10b      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004692:	4b39      	ldr	r3, [pc, #228]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004696:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800469e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a2:	4a35      	ldr	r2, [pc, #212]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046a4:	430b      	orrs	r3, r1
 80046a6:	6553      	str	r3, [r2, #84]	; 0x54
 80046a8:	e003      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80046b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ba:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80046be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046c2:	2300      	movs	r3, #0
 80046c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80046c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4313      	orrs	r3, r2
 80046d0:	d058      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80046d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046de:	d033      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80046e0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046e4:	d82c      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80046e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ea:	d02f      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80046ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f0:	d826      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80046f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046f6:	d02b      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80046f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046fc:	d820      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80046fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004702:	d012      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004708:	d81a      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800470a:	2b00      	cmp	r3, #0
 800470c:	d022      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800470e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004712:	d115      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004718:	3308      	adds	r3, #8
 800471a:	2100      	movs	r1, #0
 800471c:	4618      	mov	r0, r3
 800471e:	f000 fb99 	bl	8004e54 <RCCEx_PLL2_Config>
 8004722:	4603      	mov	r3, r0
 8004724:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004728:	e015      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800472a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800472e:	3328      	adds	r3, #40	; 0x28
 8004730:	2102      	movs	r1, #2
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fc40 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004738:	4603      	mov	r3, r0
 800473a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800473e:	e00a      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004746:	e006      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004748:	bf00      	nop
 800474a:	e004      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800474c:	bf00      	nop
 800474e:	e002      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004750:	bf00      	nop
 8004752:	e000      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004756:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10e      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800475e:	4b06      	ldr	r3, [pc, #24]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004762:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800476a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800476e:	4a02      	ldr	r2, [pc, #8]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004770:	430b      	orrs	r3, r1
 8004772:	6593      	str	r3, [r2, #88]	; 0x58
 8004774:	e006      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004776:	bf00      	nop
 8004778:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004780:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004790:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004794:	2300      	movs	r3, #0
 8004796:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800479a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800479e:	460b      	mov	r3, r1
 80047a0:	4313      	orrs	r3, r2
 80047a2:	d055      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80047a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80047b0:	d033      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80047b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80047b6:	d82c      	bhi.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047bc:	d02f      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80047be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c2:	d826      	bhi.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80047c8:	d02b      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80047ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80047ce:	d820      	bhi.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047d4:	d012      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80047d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047da:	d81a      	bhi.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d022      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80047e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e4:	d115      	bne.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ea:	3308      	adds	r3, #8
 80047ec:	2100      	movs	r1, #0
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fb30 	bl	8004e54 <RCCEx_PLL2_Config>
 80047f4:	4603      	mov	r3, r0
 80047f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80047fa:	e015      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004800:	3328      	adds	r3, #40	; 0x28
 8004802:	2102      	movs	r1, #2
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fbd7 	bl	8004fb8 <RCCEx_PLL3_Config>
 800480a:	4603      	mov	r3, r0
 800480c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004810:	e00a      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004818:	e006      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800481a:	bf00      	nop
 800481c:	e004      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800481e:	bf00      	nop
 8004820:	e002      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004822:	bf00      	nop
 8004824:	e000      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004828:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10b      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004830:	4ba1      	ldr	r3, [pc, #644]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004834:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004840:	4a9d      	ldr	r2, [pc, #628]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004842:	430b      	orrs	r3, r1
 8004844:	6593      	str	r3, [r2, #88]	; 0x58
 8004846:	e003      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004848:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800484c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004858:	f002 0308 	and.w	r3, r2, #8
 800485c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004860:	2300      	movs	r3, #0
 8004862:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004866:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800486a:	460b      	mov	r3, r1
 800486c:	4313      	orrs	r3, r2
 800486e:	d01e      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800487c:	d10c      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800487e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004882:	3328      	adds	r3, #40	; 0x28
 8004884:	2102      	movs	r1, #2
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fb96 	bl	8004fb8 <RCCEx_PLL3_Config>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004898:	4b87      	ldr	r3, [pc, #540]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800489a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a8:	4a83      	ldr	r2, [pc, #524]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048aa:	430b      	orrs	r3, r1
 80048ac:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b6:	f002 0310 	and.w	r3, r2, #16
 80048ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048be:	2300      	movs	r3, #0
 80048c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80048c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80048c8:	460b      	mov	r3, r1
 80048ca:	4313      	orrs	r3, r2
 80048cc:	d01e      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80048ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048da:	d10c      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e0:	3328      	adds	r3, #40	; 0x28
 80048e2:	2102      	movs	r1, #2
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fb67 	bl	8004fb8 <RCCEx_PLL3_Config>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048f6:	4b70      	ldr	r3, [pc, #448]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004902:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004906:	4a6c      	ldr	r2, [pc, #432]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004908:	430b      	orrs	r3, r1
 800490a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800490c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004914:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004918:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800491c:	2300      	movs	r3, #0
 800491e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004922:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004926:	460b      	mov	r3, r1
 8004928:	4313      	orrs	r3, r2
 800492a:	d03e      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800492c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004930:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004934:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004938:	d022      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800493a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800493e:	d81b      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004948:	d00b      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800494a:	e015      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800494c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004950:	3308      	adds	r3, #8
 8004952:	2100      	movs	r1, #0
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fa7d 	bl	8004e54 <RCCEx_PLL2_Config>
 800495a:	4603      	mov	r3, r0
 800495c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004960:	e00f      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004966:	3328      	adds	r3, #40	; 0x28
 8004968:	2102      	movs	r1, #2
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fb24 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004976:	e004      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800497e:	e000      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10b      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800498a:	4b4b      	ldr	r3, [pc, #300]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800498c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004996:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800499a:	4a47      	ldr	r2, [pc, #284]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800499c:	430b      	orrs	r3, r1
 800499e:	6593      	str	r3, [r2, #88]	; 0x58
 80049a0:	e003      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80049b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80049b8:	2300      	movs	r3, #0
 80049ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80049bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80049c0:	460b      	mov	r3, r1
 80049c2:	4313      	orrs	r3, r2
 80049c4:	d03b      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80049c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049d2:	d01f      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80049d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049d8:	d818      	bhi.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80049da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049de:	d003      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80049e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049e4:	d007      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80049e6:	e011      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049e8:	4b33      	ldr	r3, [pc, #204]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	4a32      	ldr	r2, [pc, #200]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80049f4:	e00f      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049fa:	3328      	adds	r3, #40	; 0x28
 80049fc:	2101      	movs	r1, #1
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fada 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004a04:	4603      	mov	r3, r0
 8004a06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a0a:	e004      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a12:	e000      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10b      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a1e:	4b26      	ldr	r3, [pc, #152]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a22:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2e:	4a22      	ldr	r2, [pc, #136]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a30:	430b      	orrs	r3, r1
 8004a32:	6553      	str	r3, [r2, #84]	; 0x54
 8004a34:	e003      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004a4a:	673b      	str	r3, [r7, #112]	; 0x70
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	677b      	str	r3, [r7, #116]	; 0x74
 8004a50:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004a54:	460b      	mov	r3, r1
 8004a56:	4313      	orrs	r3, r2
 8004a58:	d034      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a68:	d007      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004a6a:	e011      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a6c:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	4a11      	ldr	r2, [pc, #68]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a78:	e00e      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a7e:	3308      	adds	r3, #8
 8004a80:	2102      	movs	r1, #2
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 f9e6 	bl	8004e54 <RCCEx_PLL2_Config>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a8e:	e003      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10d      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004aa0:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aae:	4a02      	ldr	r2, [pc, #8]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ab4:	e006      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004ab6:	bf00      	nop
 8004ab8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004abc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ac0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004acc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004ad0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ad6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004ada:	460b      	mov	r3, r1
 8004adc:	4313      	orrs	r3, r2
 8004ade:	d00c      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ae4:	3328      	adds	r3, #40	; 0x28
 8004ae6:	2102      	movs	r1, #2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fa65 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b02:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004b06:	663b      	str	r3, [r7, #96]	; 0x60
 8004b08:	2300      	movs	r3, #0
 8004b0a:	667b      	str	r3, [r7, #100]	; 0x64
 8004b0c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004b10:	460b      	mov	r3, r1
 8004b12:	4313      	orrs	r3, r2
 8004b14:	d038      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b22:	d018      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004b24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b28:	d811      	bhi.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2e:	d014      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b34:	d80b      	bhi.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d011      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3e:	d106      	bne.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b40:	4bc3      	ldr	r3, [pc, #780]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	4ac2      	ldr	r2, [pc, #776]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004b4c:	e008      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b54:	e004      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004b56:	bf00      	nop
 8004b58:	e002      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004b5a:	bf00      	nop
 8004b5c:	e000      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10b      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b68:	4bb9      	ldr	r3, [pc, #740]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b78:	4ab5      	ldr	r2, [pc, #724]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b7a:	430b      	orrs	r3, r1
 8004b7c:	6553      	str	r3, [r2, #84]	; 0x54
 8004b7e:	e003      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b90:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004b94:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b96:	2300      	movs	r3, #0
 8004b98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b9a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	d009      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ba4:	4baa      	ldr	r3, [pc, #680]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb2:	4aa7      	ldr	r2, [pc, #668]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004bc4:	653b      	str	r3, [r7, #80]	; 0x50
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	657b      	str	r3, [r7, #84]	; 0x54
 8004bca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	d00a      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004bd4:	4b9e      	ldr	r3, [pc, #632]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004be0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004be4:	4a9a      	ldr	r2, [pc, #616]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004be6:	430b      	orrs	r3, r1
 8004be8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004bf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bfc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004c00:	460b      	mov	r3, r1
 8004c02:	4313      	orrs	r3, r2
 8004c04:	d009      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c06:	4b92      	ldr	r3, [pc, #584]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c14:	4a8e      	ldr	r2, [pc, #568]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c16:	430b      	orrs	r3, r1
 8004c18:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c22:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004c26:	643b      	str	r3, [r7, #64]	; 0x40
 8004c28:	2300      	movs	r3, #0
 8004c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c2c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004c30:	460b      	mov	r3, r1
 8004c32:	4313      	orrs	r3, r2
 8004c34:	d00e      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c36:	4b86      	ldr	r3, [pc, #536]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	4a85      	ldr	r2, [pc, #532]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c40:	6113      	str	r3, [r2, #16]
 8004c42:	4b83      	ldr	r3, [pc, #524]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c44:	6919      	ldr	r1, [r3, #16]
 8004c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c4a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004c4e:	4a80      	ldr	r2, [pc, #512]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c50:	430b      	orrs	r3, r1
 8004c52:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004c60:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c62:	2300      	movs	r3, #0
 8004c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c66:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	d009      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004c70:	4b77      	ldr	r3, [pc, #476]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c74:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7e:	4a74      	ldr	r2, [pc, #464]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c80:	430b      	orrs	r3, r1
 8004c82:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004c90:	633b      	str	r3, [r7, #48]	; 0x30
 8004c92:	2300      	movs	r3, #0
 8004c94:	637b      	str	r3, [r7, #52]	; 0x34
 8004c96:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	d00a      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ca0:	4b6b      	ldr	r3, [pc, #428]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cb0:	4a67      	ldr	r2, [pc, #412]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cb2:	430b      	orrs	r3, r1
 8004cb4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	62b9      	str	r1, [r7, #40]	; 0x28
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cc8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004ccc:	460b      	mov	r3, r1
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	d011      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 f8ba 	bl	8004e54 <RCCEx_PLL2_Config>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cf2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfe:	2100      	movs	r1, #0
 8004d00:	6239      	str	r1, [r7, #32]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24
 8004d08:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	d011      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d16:	3308      	adds	r3, #8
 8004d18:	2101      	movs	r1, #1
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 f89a 	bl	8004e54 <RCCEx_PLL2_Config>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004d26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	2100      	movs	r1, #0
 8004d40:	61b9      	str	r1, [r7, #24]
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	61fb      	str	r3, [r7, #28]
 8004d48:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	d011      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d56:	3308      	adds	r3, #8
 8004d58:	2102      	movs	r1, #2
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 f87a 	bl	8004e54 <RCCEx_PLL2_Config>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004d66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7e:	2100      	movs	r1, #0
 8004d80:	6139      	str	r1, [r7, #16]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	d011      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d96:	3328      	adds	r3, #40	; 0x28
 8004d98:	2100      	movs	r1, #0
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 f90c 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004da0:	4603      	mov	r3, r0
 8004da2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004da6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004db2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	f003 0310 	and.w	r3, r3, #16
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	d011      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd6:	3328      	adds	r3, #40	; 0x28
 8004dd8:	2101      	movs	r1, #1
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 f8ec 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004de6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004df2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	2100      	movs	r1, #0
 8004e00:	6039      	str	r1, [r7, #0]
 8004e02:	f003 0320 	and.w	r3, r3, #32
 8004e06:	607b      	str	r3, [r7, #4]
 8004e08:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	d011      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e16:	3328      	adds	r3, #40	; 0x28
 8004e18:	2102      	movs	r1, #2
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 f8cc 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004e26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004e36:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e000      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e50:	58024400 	.word	0x58024400

08004e54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e62:	4b53      	ldr	r3, [pc, #332]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d101      	bne.n	8004e72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e099      	b.n	8004fa6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e72:	4b4f      	ldr	r3, [pc, #316]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a4e      	ldr	r2, [pc, #312]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004e78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7e:	f7fb fff3 	bl	8000e68 <HAL_GetTick>
 8004e82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e84:	e008      	b.n	8004e98 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e86:	f7fb ffef 	bl	8000e68 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e086      	b.n	8004fa6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e98:	4b45      	ldr	r3, [pc, #276]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1f0      	bne.n	8004e86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ea4:	4b42      	ldr	r3, [pc, #264]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	031b      	lsls	r3, r3, #12
 8004eb2:	493f      	ldr	r1, [pc, #252]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	628b      	str	r3, [r1, #40]	; 0x28
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	025b      	lsls	r3, r3, #9
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	041b      	lsls	r3, r3, #16
 8004ed6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	061b      	lsls	r3, r3, #24
 8004ee4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ee8:	4931      	ldr	r1, [pc, #196]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004eee:	4b30      	ldr	r3, [pc, #192]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	492d      	ldr	r1, [pc, #180]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f00:	4b2b      	ldr	r3, [pc, #172]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	f023 0220 	bic.w	r2, r3, #32
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	4928      	ldr	r1, [pc, #160]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f12:	4b27      	ldr	r3, [pc, #156]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f16:	4a26      	ldr	r2, [pc, #152]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f18:	f023 0310 	bic.w	r3, r3, #16
 8004f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f1e:	4b24      	ldr	r3, [pc, #144]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f22:	4b24      	ldr	r3, [pc, #144]	; (8004fb4 <RCCEx_PLL2_Config+0x160>)
 8004f24:	4013      	ands	r3, r2
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	69d2      	ldr	r2, [r2, #28]
 8004f2a:	00d2      	lsls	r2, r2, #3
 8004f2c:	4920      	ldr	r1, [pc, #128]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f32:	4b1f      	ldr	r3, [pc, #124]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f36:	4a1e      	ldr	r2, [pc, #120]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f38:	f043 0310 	orr.w	r3, r3, #16
 8004f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d106      	bne.n	8004f52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f44:	4b1a      	ldr	r3, [pc, #104]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f48:	4a19      	ldr	r2, [pc, #100]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f50:	e00f      	b.n	8004f72 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d106      	bne.n	8004f66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f58:	4b15      	ldr	r3, [pc, #84]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	4a14      	ldr	r2, [pc, #80]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f64:	e005      	b.n	8004f72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f66:	4b12      	ldr	r3, [pc, #72]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6a:	4a11      	ldr	r2, [pc, #68]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f72:	4b0f      	ldr	r3, [pc, #60]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a0e      	ldr	r2, [pc, #56]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f7e:	f7fb ff73 	bl	8000e68 <HAL_GetTick>
 8004f82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f84:	e008      	b.n	8004f98 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f86:	f7fb ff6f 	bl	8000e68 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e006      	b.n	8004fa6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f98:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0f0      	beq.n	8004f86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	58024400 	.word	0x58024400
 8004fb4:	ffff0007 	.word	0xffff0007

08004fb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fc6:	4b53      	ldr	r3, [pc, #332]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d101      	bne.n	8004fd6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e099      	b.n	800510a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004fd6:	4b4f      	ldr	r3, [pc, #316]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a4e      	ldr	r2, [pc, #312]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 8004fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe2:	f7fb ff41 	bl	8000e68 <HAL_GetTick>
 8004fe6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fe8:	e008      	b.n	8004ffc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fea:	f7fb ff3d 	bl	8000e68 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e086      	b.n	800510a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ffc:	4b45      	ldr	r3, [pc, #276]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1f0      	bne.n	8004fea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005008:	4b42      	ldr	r3, [pc, #264]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 800500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	051b      	lsls	r3, r3, #20
 8005016:	493f      	ldr	r1, [pc, #252]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005018:	4313      	orrs	r3, r2
 800501a:	628b      	str	r3, [r1, #40]	; 0x28
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	3b01      	subs	r3, #1
 8005022:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	3b01      	subs	r3, #1
 800502c:	025b      	lsls	r3, r3, #9
 800502e:	b29b      	uxth	r3, r3
 8005030:	431a      	orrs	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	3b01      	subs	r3, #1
 8005038:	041b      	lsls	r3, r3, #16
 800503a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	3b01      	subs	r3, #1
 8005046:	061b      	lsls	r3, r3, #24
 8005048:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800504c:	4931      	ldr	r1, [pc, #196]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 800504e:	4313      	orrs	r3, r2
 8005050:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005052:	4b30      	ldr	r3, [pc, #192]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	492d      	ldr	r1, [pc, #180]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005060:	4313      	orrs	r3, r2
 8005062:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005064:	4b2b      	ldr	r3, [pc, #172]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	4928      	ldr	r1, [pc, #160]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005072:	4313      	orrs	r3, r2
 8005074:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005076:	4b27      	ldr	r3, [pc, #156]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507a:	4a26      	ldr	r2, [pc, #152]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 800507c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005080:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005082:	4b24      	ldr	r3, [pc, #144]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005086:	4b24      	ldr	r3, [pc, #144]	; (8005118 <RCCEx_PLL3_Config+0x160>)
 8005088:	4013      	ands	r3, r2
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	69d2      	ldr	r2, [r2, #28]
 800508e:	00d2      	lsls	r2, r2, #3
 8005090:	4920      	ldr	r1, [pc, #128]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005092:	4313      	orrs	r3, r2
 8005094:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005096:	4b1f      	ldr	r3, [pc, #124]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509a:	4a1e      	ldr	r2, [pc, #120]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 800509c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d106      	bne.n	80050b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80050a8:	4b1a      	ldr	r3, [pc, #104]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ac:	4a19      	ldr	r2, [pc, #100]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050b4:	e00f      	b.n	80050d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d106      	bne.n	80050ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80050bc:	4b15      	ldr	r3, [pc, #84]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	4a14      	ldr	r2, [pc, #80]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050c8:	e005      	b.n	80050d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050ca:	4b12      	ldr	r3, [pc, #72]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ce:	4a11      	ldr	r2, [pc, #68]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80050d6:	4b0f      	ldr	r3, [pc, #60]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a0e      	ldr	r2, [pc, #56]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e2:	f7fb fec1 	bl	8000e68 <HAL_GetTick>
 80050e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050e8:	e008      	b.n	80050fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050ea:	f7fb febd 	bl	8000e68 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e006      	b.n	800510a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050fc:	4b05      	ldr	r3, [pc, #20]	; (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0f0      	beq.n	80050ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	58024400 	.word	0x58024400
 8005118:	ffff0007 	.word	0xffff0007

0800511c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e049      	b.n	80051c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fb fc2a 	bl	800099c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3304      	adds	r3, #4
 8005158:	4619      	mov	r1, r3
 800515a:	4610      	mov	r0, r2
 800515c:	f000 fafc 	bl	8005758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b082      	sub	sp, #8
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e049      	b.n	8005270 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d106      	bne.n	80051f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f841 	bl	8005278 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2202      	movs	r2, #2
 80051fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3304      	adds	r3, #4
 8005206:	4619      	mov	r1, r3
 8005208:	4610      	mov	r0, r2
 800520a:	f000 faa5 	bl	8005758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d122      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d11b      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0202 	mvn.w	r2, #2
 80052b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fa24 	bl	800571c <HAL_TIM_IC_CaptureCallback>
 80052d4:	e005      	b.n	80052e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fa16 	bl	8005708 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fa27 	bl	8005730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 0304 	and.w	r3, r3, #4
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d122      	bne.n	800533c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b04      	cmp	r3, #4
 8005302:	d11b      	bne.n	800533c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0204 	mvn.w	r2, #4
 800530c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2202      	movs	r2, #2
 8005312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f9fa 	bl	800571c <HAL_TIM_IC_CaptureCallback>
 8005328:	e005      	b.n	8005336 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f9ec 	bl	8005708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f9fd 	bl	8005730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b08      	cmp	r3, #8
 8005348:	d122      	bne.n	8005390 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0308 	and.w	r3, r3, #8
 8005354:	2b08      	cmp	r3, #8
 8005356:	d11b      	bne.n	8005390 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0208 	mvn.w	r2, #8
 8005360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2204      	movs	r2, #4
 8005366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f9d0 	bl	800571c <HAL_TIM_IC_CaptureCallback>
 800537c:	e005      	b.n	800538a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f9c2 	bl	8005708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f9d3 	bl	8005730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 0310 	and.w	r3, r3, #16
 800539a:	2b10      	cmp	r3, #16
 800539c:	d122      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0310 	and.w	r3, r3, #16
 80053a8:	2b10      	cmp	r3, #16
 80053aa:	d11b      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0210 	mvn.w	r2, #16
 80053b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2208      	movs	r2, #8
 80053ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f9a6 	bl	800571c <HAL_TIM_IC_CaptureCallback>
 80053d0:	e005      	b.n	80053de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f998 	bl	8005708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f9a9 	bl	8005730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d10e      	bne.n	8005410 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d107      	bne.n	8005410 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0201 	mvn.w	r2, #1
 8005408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f972 	bl	80056f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541a:	2b80      	cmp	r3, #128	; 0x80
 800541c:	d10e      	bne.n	800543c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005428:	2b80      	cmp	r3, #128	; 0x80
 800542a:	d107      	bne.n	800543c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fd86 	bl	8005f48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800544a:	d10e      	bne.n	800546a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005456:	2b80      	cmp	r3, #128	; 0x80
 8005458:	d107      	bne.n	800546a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 fd79 	bl	8005f5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005474:	2b40      	cmp	r3, #64	; 0x40
 8005476:	d10e      	bne.n	8005496 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005482:	2b40      	cmp	r3, #64	; 0x40
 8005484:	d107      	bne.n	8005496 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800548e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f957 	bl	8005744 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	f003 0320 	and.w	r3, r3, #32
 80054a0:	2b20      	cmp	r3, #32
 80054a2:	d10e      	bne.n	80054c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b20      	cmp	r3, #32
 80054b0:	d107      	bne.n	80054c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f06f 0220 	mvn.w	r2, #32
 80054ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fd39 	bl	8005f34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054c2:	bf00      	nop
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e0ff      	b.n	80056ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b14      	cmp	r3, #20
 80054f6:	f200 80f0 	bhi.w	80056da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80054fa:	a201      	add	r2, pc, #4	; (adr r2, 8005500 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005500:	08005555 	.word	0x08005555
 8005504:	080056db 	.word	0x080056db
 8005508:	080056db 	.word	0x080056db
 800550c:	080056db 	.word	0x080056db
 8005510:	08005595 	.word	0x08005595
 8005514:	080056db 	.word	0x080056db
 8005518:	080056db 	.word	0x080056db
 800551c:	080056db 	.word	0x080056db
 8005520:	080055d7 	.word	0x080055d7
 8005524:	080056db 	.word	0x080056db
 8005528:	080056db 	.word	0x080056db
 800552c:	080056db 	.word	0x080056db
 8005530:	08005617 	.word	0x08005617
 8005534:	080056db 	.word	0x080056db
 8005538:	080056db 	.word	0x080056db
 800553c:	080056db 	.word	0x080056db
 8005540:	08005659 	.word	0x08005659
 8005544:	080056db 	.word	0x080056db
 8005548:	080056db 	.word	0x080056db
 800554c:	080056db 	.word	0x080056db
 8005550:	08005699 	.word	0x08005699
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	4618      	mov	r0, r3
 800555c:	f000 f996 	bl	800588c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699a      	ldr	r2, [r3, #24]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0208 	orr.w	r2, r2, #8
 800556e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699a      	ldr	r2, [r3, #24]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0204 	bic.w	r2, r2, #4
 800557e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6999      	ldr	r1, [r3, #24]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	691a      	ldr	r2, [r3, #16]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	619a      	str	r2, [r3, #24]
      break;
 8005592:	e0a5      	b.n	80056e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68b9      	ldr	r1, [r7, #8]
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fa06 	bl	80059ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6999      	ldr	r1, [r3, #24]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	021a      	lsls	r2, r3, #8
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	619a      	str	r2, [r3, #24]
      break;
 80055d4:	e084      	b.n	80056e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fa6f 	bl	8005ac0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69da      	ldr	r2, [r3, #28]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0208 	orr.w	r2, r2, #8
 80055f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0204 	bic.w	r2, r2, #4
 8005600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69d9      	ldr	r1, [r3, #28]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	61da      	str	r2, [r3, #28]
      break;
 8005614:	e064      	b.n	80056e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	4618      	mov	r0, r3
 800561e:	f000 fad7 	bl	8005bd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69da      	ldr	r2, [r3, #28]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69d9      	ldr	r1, [r3, #28]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	021a      	lsls	r2, r3, #8
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	61da      	str	r2, [r3, #28]
      break;
 8005656:	e043      	b.n	80056e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fb20 	bl	8005ca4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0208 	orr.w	r2, r2, #8
 8005672:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0204 	bic.w	r2, r2, #4
 8005682:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	691a      	ldr	r2, [r3, #16]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005696:	e023      	b.n	80056e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fb64 	bl	8005d6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	021a      	lsls	r2, r3, #8
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056d8:	e002      	b.n	80056e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	75fb      	strb	r3, [r7, #23]
      break;
 80056de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop

080056f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a40      	ldr	r2, [pc, #256]	; (800586c <TIM_Base_SetConfig+0x114>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d013      	beq.n	8005798 <TIM_Base_SetConfig+0x40>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005776:	d00f      	beq.n	8005798 <TIM_Base_SetConfig+0x40>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a3d      	ldr	r2, [pc, #244]	; (8005870 <TIM_Base_SetConfig+0x118>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00b      	beq.n	8005798 <TIM_Base_SetConfig+0x40>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a3c      	ldr	r2, [pc, #240]	; (8005874 <TIM_Base_SetConfig+0x11c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d007      	beq.n	8005798 <TIM_Base_SetConfig+0x40>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a3b      	ldr	r2, [pc, #236]	; (8005878 <TIM_Base_SetConfig+0x120>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d003      	beq.n	8005798 <TIM_Base_SetConfig+0x40>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a3a      	ldr	r2, [pc, #232]	; (800587c <TIM_Base_SetConfig+0x124>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d108      	bne.n	80057aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a2f      	ldr	r2, [pc, #188]	; (800586c <TIM_Base_SetConfig+0x114>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d01f      	beq.n	80057f2 <TIM_Base_SetConfig+0x9a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b8:	d01b      	beq.n	80057f2 <TIM_Base_SetConfig+0x9a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a2c      	ldr	r2, [pc, #176]	; (8005870 <TIM_Base_SetConfig+0x118>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d017      	beq.n	80057f2 <TIM_Base_SetConfig+0x9a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a2b      	ldr	r2, [pc, #172]	; (8005874 <TIM_Base_SetConfig+0x11c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d013      	beq.n	80057f2 <TIM_Base_SetConfig+0x9a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a2a      	ldr	r2, [pc, #168]	; (8005878 <TIM_Base_SetConfig+0x120>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d00f      	beq.n	80057f2 <TIM_Base_SetConfig+0x9a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a29      	ldr	r2, [pc, #164]	; (800587c <TIM_Base_SetConfig+0x124>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d00b      	beq.n	80057f2 <TIM_Base_SetConfig+0x9a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a28      	ldr	r2, [pc, #160]	; (8005880 <TIM_Base_SetConfig+0x128>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d007      	beq.n	80057f2 <TIM_Base_SetConfig+0x9a>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a27      	ldr	r2, [pc, #156]	; (8005884 <TIM_Base_SetConfig+0x12c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d003      	beq.n	80057f2 <TIM_Base_SetConfig+0x9a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a26      	ldr	r2, [pc, #152]	; (8005888 <TIM_Base_SetConfig+0x130>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d108      	bne.n	8005804 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4313      	orrs	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a10      	ldr	r2, [pc, #64]	; (800586c <TIM_Base_SetConfig+0x114>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00f      	beq.n	8005850 <TIM_Base_SetConfig+0xf8>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a12      	ldr	r2, [pc, #72]	; (800587c <TIM_Base_SetConfig+0x124>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00b      	beq.n	8005850 <TIM_Base_SetConfig+0xf8>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a11      	ldr	r2, [pc, #68]	; (8005880 <TIM_Base_SetConfig+0x128>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d007      	beq.n	8005850 <TIM_Base_SetConfig+0xf8>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a10      	ldr	r2, [pc, #64]	; (8005884 <TIM_Base_SetConfig+0x12c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d003      	beq.n	8005850 <TIM_Base_SetConfig+0xf8>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a0f      	ldr	r2, [pc, #60]	; (8005888 <TIM_Base_SetConfig+0x130>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d103      	bne.n	8005858 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	615a      	str	r2, [r3, #20]
}
 800585e:	bf00      	nop
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	40010000 	.word	0x40010000
 8005870:	40000400 	.word	0x40000400
 8005874:	40000800 	.word	0x40000800
 8005878:	40000c00 	.word	0x40000c00
 800587c:	40010400 	.word	0x40010400
 8005880:	40014000 	.word	0x40014000
 8005884:	40014400 	.word	0x40014400
 8005888:	40014800 	.word	0x40014800

0800588c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	f023 0201 	bic.w	r2, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4b37      	ldr	r3, [pc, #220]	; (8005994 <TIM_OC1_SetConfig+0x108>)
 80058b8:	4013      	ands	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 0303 	bic.w	r3, r3, #3
 80058c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f023 0302 	bic.w	r3, r3, #2
 80058d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a2d      	ldr	r2, [pc, #180]	; (8005998 <TIM_OC1_SetConfig+0x10c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00f      	beq.n	8005908 <TIM_OC1_SetConfig+0x7c>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a2c      	ldr	r2, [pc, #176]	; (800599c <TIM_OC1_SetConfig+0x110>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00b      	beq.n	8005908 <TIM_OC1_SetConfig+0x7c>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a2b      	ldr	r2, [pc, #172]	; (80059a0 <TIM_OC1_SetConfig+0x114>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d007      	beq.n	8005908 <TIM_OC1_SetConfig+0x7c>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a2a      	ldr	r2, [pc, #168]	; (80059a4 <TIM_OC1_SetConfig+0x118>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d003      	beq.n	8005908 <TIM_OC1_SetConfig+0x7c>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a29      	ldr	r2, [pc, #164]	; (80059a8 <TIM_OC1_SetConfig+0x11c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d10c      	bne.n	8005922 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f023 0308 	bic.w	r3, r3, #8
 800590e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f023 0304 	bic.w	r3, r3, #4
 8005920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a1c      	ldr	r2, [pc, #112]	; (8005998 <TIM_OC1_SetConfig+0x10c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00f      	beq.n	800594a <TIM_OC1_SetConfig+0xbe>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a1b      	ldr	r2, [pc, #108]	; (800599c <TIM_OC1_SetConfig+0x110>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00b      	beq.n	800594a <TIM_OC1_SetConfig+0xbe>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a1a      	ldr	r2, [pc, #104]	; (80059a0 <TIM_OC1_SetConfig+0x114>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d007      	beq.n	800594a <TIM_OC1_SetConfig+0xbe>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a19      	ldr	r2, [pc, #100]	; (80059a4 <TIM_OC1_SetConfig+0x118>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d003      	beq.n	800594a <TIM_OC1_SetConfig+0xbe>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a18      	ldr	r2, [pc, #96]	; (80059a8 <TIM_OC1_SetConfig+0x11c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d111      	bne.n	800596e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	621a      	str	r2, [r3, #32]
}
 8005988:	bf00      	nop
 800598a:	371c      	adds	r7, #28
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	fffeff8f 	.word	0xfffeff8f
 8005998:	40010000 	.word	0x40010000
 800599c:	40010400 	.word	0x40010400
 80059a0:	40014000 	.word	0x40014000
 80059a4:	40014400 	.word	0x40014400
 80059a8:	40014800 	.word	0x40014800

080059ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	f023 0210 	bic.w	r2, r3, #16
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	4b34      	ldr	r3, [pc, #208]	; (8005aa8 <TIM_OC2_SetConfig+0xfc>)
 80059d8:	4013      	ands	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	021b      	lsls	r3, r3, #8
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f023 0320 	bic.w	r3, r3, #32
 80059f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a29      	ldr	r2, [pc, #164]	; (8005aac <TIM_OC2_SetConfig+0x100>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d003      	beq.n	8005a14 <TIM_OC2_SetConfig+0x68>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a28      	ldr	r2, [pc, #160]	; (8005ab0 <TIM_OC2_SetConfig+0x104>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d10d      	bne.n	8005a30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a1e      	ldr	r2, [pc, #120]	; (8005aac <TIM_OC2_SetConfig+0x100>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d00f      	beq.n	8005a58 <TIM_OC2_SetConfig+0xac>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a1d      	ldr	r2, [pc, #116]	; (8005ab0 <TIM_OC2_SetConfig+0x104>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00b      	beq.n	8005a58 <TIM_OC2_SetConfig+0xac>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a1c      	ldr	r2, [pc, #112]	; (8005ab4 <TIM_OC2_SetConfig+0x108>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d007      	beq.n	8005a58 <TIM_OC2_SetConfig+0xac>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a1b      	ldr	r2, [pc, #108]	; (8005ab8 <TIM_OC2_SetConfig+0x10c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d003      	beq.n	8005a58 <TIM_OC2_SetConfig+0xac>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a1a      	ldr	r2, [pc, #104]	; (8005abc <TIM_OC2_SetConfig+0x110>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d113      	bne.n	8005a80 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	621a      	str	r2, [r3, #32]
}
 8005a9a:	bf00      	nop
 8005a9c:	371c      	adds	r7, #28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	feff8fff 	.word	0xfeff8fff
 8005aac:	40010000 	.word	0x40010000
 8005ab0:	40010400 	.word	0x40010400
 8005ab4:	40014000 	.word	0x40014000
 8005ab8:	40014400 	.word	0x40014400
 8005abc:	40014800 	.word	0x40014800

08005ac0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	4b33      	ldr	r3, [pc, #204]	; (8005bb8 <TIM_OC3_SetConfig+0xf8>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0303 	bic.w	r3, r3, #3
 8005af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	021b      	lsls	r3, r3, #8
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a28      	ldr	r2, [pc, #160]	; (8005bbc <TIM_OC3_SetConfig+0xfc>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d003      	beq.n	8005b26 <TIM_OC3_SetConfig+0x66>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a27      	ldr	r2, [pc, #156]	; (8005bc0 <TIM_OC3_SetConfig+0x100>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d10d      	bne.n	8005b42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	021b      	lsls	r3, r3, #8
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a1d      	ldr	r2, [pc, #116]	; (8005bbc <TIM_OC3_SetConfig+0xfc>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00f      	beq.n	8005b6a <TIM_OC3_SetConfig+0xaa>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a1c      	ldr	r2, [pc, #112]	; (8005bc0 <TIM_OC3_SetConfig+0x100>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00b      	beq.n	8005b6a <TIM_OC3_SetConfig+0xaa>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a1b      	ldr	r2, [pc, #108]	; (8005bc4 <TIM_OC3_SetConfig+0x104>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d007      	beq.n	8005b6a <TIM_OC3_SetConfig+0xaa>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a1a      	ldr	r2, [pc, #104]	; (8005bc8 <TIM_OC3_SetConfig+0x108>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d003      	beq.n	8005b6a <TIM_OC3_SetConfig+0xaa>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a19      	ldr	r2, [pc, #100]	; (8005bcc <TIM_OC3_SetConfig+0x10c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d113      	bne.n	8005b92 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	011b      	lsls	r3, r3, #4
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	011b      	lsls	r3, r3, #4
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	621a      	str	r2, [r3, #32]
}
 8005bac:	bf00      	nop
 8005bae:	371c      	adds	r7, #28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	fffeff8f 	.word	0xfffeff8f
 8005bbc:	40010000 	.word	0x40010000
 8005bc0:	40010400 	.word	0x40010400
 8005bc4:	40014000 	.word	0x40014000
 8005bc8:	40014400 	.word	0x40014400
 8005bcc:	40014800 	.word	0x40014800

08005bd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4b24      	ldr	r3, [pc, #144]	; (8005c8c <TIM_OC4_SetConfig+0xbc>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	021b      	lsls	r3, r3, #8
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	031b      	lsls	r3, r3, #12
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a19      	ldr	r2, [pc, #100]	; (8005c90 <TIM_OC4_SetConfig+0xc0>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d00f      	beq.n	8005c50 <TIM_OC4_SetConfig+0x80>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a18      	ldr	r2, [pc, #96]	; (8005c94 <TIM_OC4_SetConfig+0xc4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d00b      	beq.n	8005c50 <TIM_OC4_SetConfig+0x80>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a17      	ldr	r2, [pc, #92]	; (8005c98 <TIM_OC4_SetConfig+0xc8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d007      	beq.n	8005c50 <TIM_OC4_SetConfig+0x80>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a16      	ldr	r2, [pc, #88]	; (8005c9c <TIM_OC4_SetConfig+0xcc>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d003      	beq.n	8005c50 <TIM_OC4_SetConfig+0x80>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a15      	ldr	r2, [pc, #84]	; (8005ca0 <TIM_OC4_SetConfig+0xd0>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d109      	bne.n	8005c64 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	019b      	lsls	r3, r3, #6
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	621a      	str	r2, [r3, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	feff8fff 	.word	0xfeff8fff
 8005c90:	40010000 	.word	0x40010000
 8005c94:	40010400 	.word	0x40010400
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	40014400 	.word	0x40014400
 8005ca0:	40014800 	.word	0x40014800

08005ca4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4b21      	ldr	r3, [pc, #132]	; (8005d54 <TIM_OC5_SetConfig+0xb0>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ce4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	041b      	lsls	r3, r3, #16
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a18      	ldr	r2, [pc, #96]	; (8005d58 <TIM_OC5_SetConfig+0xb4>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00f      	beq.n	8005d1a <TIM_OC5_SetConfig+0x76>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a17      	ldr	r2, [pc, #92]	; (8005d5c <TIM_OC5_SetConfig+0xb8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d00b      	beq.n	8005d1a <TIM_OC5_SetConfig+0x76>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a16      	ldr	r2, [pc, #88]	; (8005d60 <TIM_OC5_SetConfig+0xbc>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d007      	beq.n	8005d1a <TIM_OC5_SetConfig+0x76>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a15      	ldr	r2, [pc, #84]	; (8005d64 <TIM_OC5_SetConfig+0xc0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d003      	beq.n	8005d1a <TIM_OC5_SetConfig+0x76>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a14      	ldr	r2, [pc, #80]	; (8005d68 <TIM_OC5_SetConfig+0xc4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d109      	bne.n	8005d2e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	021b      	lsls	r3, r3, #8
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	621a      	str	r2, [r3, #32]
}
 8005d48:	bf00      	nop
 8005d4a:	371c      	adds	r7, #28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	fffeff8f 	.word	0xfffeff8f
 8005d58:	40010000 	.word	0x40010000
 8005d5c:	40010400 	.word	0x40010400
 8005d60:	40014000 	.word	0x40014000
 8005d64:	40014400 	.word	0x40014400
 8005d68:	40014800 	.word	0x40014800

08005d6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	4b22      	ldr	r3, [pc, #136]	; (8005e20 <TIM_OC6_SetConfig+0xb4>)
 8005d98:	4013      	ands	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	021b      	lsls	r3, r3, #8
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	051b      	lsls	r3, r3, #20
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a19      	ldr	r2, [pc, #100]	; (8005e24 <TIM_OC6_SetConfig+0xb8>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d00f      	beq.n	8005de4 <TIM_OC6_SetConfig+0x78>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a18      	ldr	r2, [pc, #96]	; (8005e28 <TIM_OC6_SetConfig+0xbc>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d00b      	beq.n	8005de4 <TIM_OC6_SetConfig+0x78>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a17      	ldr	r2, [pc, #92]	; (8005e2c <TIM_OC6_SetConfig+0xc0>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d007      	beq.n	8005de4 <TIM_OC6_SetConfig+0x78>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a16      	ldr	r2, [pc, #88]	; (8005e30 <TIM_OC6_SetConfig+0xc4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d003      	beq.n	8005de4 <TIM_OC6_SetConfig+0x78>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a15      	ldr	r2, [pc, #84]	; (8005e34 <TIM_OC6_SetConfig+0xc8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d109      	bne.n	8005df8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	029b      	lsls	r3, r3, #10
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	621a      	str	r2, [r3, #32]
}
 8005e12:	bf00      	nop
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	feff8fff 	.word	0xfeff8fff
 8005e24:	40010000 	.word	0x40010000
 8005e28:	40010400 	.word	0x40010400
 8005e2c:	40014000 	.word	0x40014000
 8005e30:	40014400 	.word	0x40014400
 8005e34:	40014800 	.word	0x40014800

08005e38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d101      	bne.n	8005e54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e065      	b.n	8005f20 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	041b      	lsls	r3, r3, #16
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a16      	ldr	r2, [pc, #88]	; (8005f2c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d004      	beq.n	8005ee2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a14      	ldr	r2, [pc, #80]	; (8005f30 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d115      	bne.n	8005f0e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	051b      	lsls	r3, r3, #20
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	40010000 	.word	0x40010000
 8005f30:	40010400 	.word	0x40010400

08005f34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f70:	b084      	sub	sp, #16
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	f107 001c 	add.w	r0, r7, #28
 8005f7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d120      	bne.n	8005fca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68da      	ldr	r2, [r3, #12]
 8005f98:	4b2a      	ldr	r3, [pc, #168]	; (8006044 <USB_CoreInit+0xd4>)
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d105      	bne.n	8005fbe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f001 faf8 	bl	80075b4 <USB_CoreReset>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	73fb      	strb	r3, [r7, #15]
 8005fc8:	e01a      	b.n	8006000 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f001 faec 	bl	80075b4 <USB_CoreReset>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d106      	bne.n	8005ff4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	639a      	str	r2, [r3, #56]	; 0x38
 8005ff2:	e005      	b.n	8006000 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	2b01      	cmp	r3, #1
 8006004:	d116      	bne.n	8006034 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800600a:	b29a      	uxth	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006014:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <USB_CoreInit+0xd8>)
 8006016:	4313      	orrs	r3, r2
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f043 0206 	orr.w	r2, r3, #6
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f043 0220 	orr.w	r2, r3, #32
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006034:	7bfb      	ldrb	r3, [r7, #15]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006040:	b004      	add	sp, #16
 8006042:	4770      	bx	lr
 8006044:	ffbdffbf 	.word	0xffbdffbf
 8006048:	03ee0000 	.word	0x03ee0000

0800604c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800604c:	b480      	push	{r7}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	4613      	mov	r3, r2
 8006058:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d165      	bne.n	800612c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4a41      	ldr	r2, [pc, #260]	; (8006168 <USB_SetTurnaroundTime+0x11c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d906      	bls.n	8006076 <USB_SetTurnaroundTime+0x2a>
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	4a40      	ldr	r2, [pc, #256]	; (800616c <USB_SetTurnaroundTime+0x120>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d202      	bcs.n	8006076 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006070:	230f      	movs	r3, #15
 8006072:	617b      	str	r3, [r7, #20]
 8006074:	e062      	b.n	800613c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	4a3c      	ldr	r2, [pc, #240]	; (800616c <USB_SetTurnaroundTime+0x120>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d306      	bcc.n	800608c <USB_SetTurnaroundTime+0x40>
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	4a3b      	ldr	r2, [pc, #236]	; (8006170 <USB_SetTurnaroundTime+0x124>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d202      	bcs.n	800608c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006086:	230e      	movs	r3, #14
 8006088:	617b      	str	r3, [r7, #20]
 800608a:	e057      	b.n	800613c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	4a38      	ldr	r2, [pc, #224]	; (8006170 <USB_SetTurnaroundTime+0x124>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d306      	bcc.n	80060a2 <USB_SetTurnaroundTime+0x56>
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	4a37      	ldr	r2, [pc, #220]	; (8006174 <USB_SetTurnaroundTime+0x128>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d202      	bcs.n	80060a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800609c:	230d      	movs	r3, #13
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	e04c      	b.n	800613c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	4a33      	ldr	r2, [pc, #204]	; (8006174 <USB_SetTurnaroundTime+0x128>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d306      	bcc.n	80060b8 <USB_SetTurnaroundTime+0x6c>
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	4a32      	ldr	r2, [pc, #200]	; (8006178 <USB_SetTurnaroundTime+0x12c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d802      	bhi.n	80060b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80060b2:	230c      	movs	r3, #12
 80060b4:	617b      	str	r3, [r7, #20]
 80060b6:	e041      	b.n	800613c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	4a2f      	ldr	r2, [pc, #188]	; (8006178 <USB_SetTurnaroundTime+0x12c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d906      	bls.n	80060ce <USB_SetTurnaroundTime+0x82>
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	4a2e      	ldr	r2, [pc, #184]	; (800617c <USB_SetTurnaroundTime+0x130>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d802      	bhi.n	80060ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80060c8:	230b      	movs	r3, #11
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	e036      	b.n	800613c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	4a2a      	ldr	r2, [pc, #168]	; (800617c <USB_SetTurnaroundTime+0x130>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d906      	bls.n	80060e4 <USB_SetTurnaroundTime+0x98>
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	4a29      	ldr	r2, [pc, #164]	; (8006180 <USB_SetTurnaroundTime+0x134>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d802      	bhi.n	80060e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80060de:	230a      	movs	r3, #10
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	e02b      	b.n	800613c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	4a26      	ldr	r2, [pc, #152]	; (8006180 <USB_SetTurnaroundTime+0x134>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d906      	bls.n	80060fa <USB_SetTurnaroundTime+0xae>
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	4a25      	ldr	r2, [pc, #148]	; (8006184 <USB_SetTurnaroundTime+0x138>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d202      	bcs.n	80060fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80060f4:	2309      	movs	r3, #9
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	e020      	b.n	800613c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	4a21      	ldr	r2, [pc, #132]	; (8006184 <USB_SetTurnaroundTime+0x138>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d306      	bcc.n	8006110 <USB_SetTurnaroundTime+0xc4>
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	4a20      	ldr	r2, [pc, #128]	; (8006188 <USB_SetTurnaroundTime+0x13c>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d802      	bhi.n	8006110 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800610a:	2308      	movs	r3, #8
 800610c:	617b      	str	r3, [r7, #20]
 800610e:	e015      	b.n	800613c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	4a1d      	ldr	r2, [pc, #116]	; (8006188 <USB_SetTurnaroundTime+0x13c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d906      	bls.n	8006126 <USB_SetTurnaroundTime+0xda>
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	4a1c      	ldr	r2, [pc, #112]	; (800618c <USB_SetTurnaroundTime+0x140>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d202      	bcs.n	8006126 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006120:	2307      	movs	r3, #7
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	e00a      	b.n	800613c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006126:	2306      	movs	r3, #6
 8006128:	617b      	str	r3, [r7, #20]
 800612a:	e007      	b.n	800613c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800612c:	79fb      	ldrb	r3, [r7, #7]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d102      	bne.n	8006138 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006132:	2309      	movs	r3, #9
 8006134:	617b      	str	r3, [r7, #20]
 8006136:	e001      	b.n	800613c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006138:	2309      	movs	r3, #9
 800613a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	029b      	lsls	r3, r3, #10
 8006150:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006154:	431a      	orrs	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	371c      	adds	r7, #28
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr
 8006168:	00d8acbf 	.word	0x00d8acbf
 800616c:	00e4e1c0 	.word	0x00e4e1c0
 8006170:	00f42400 	.word	0x00f42400
 8006174:	01067380 	.word	0x01067380
 8006178:	011a499f 	.word	0x011a499f
 800617c:	01312cff 	.word	0x01312cff
 8006180:	014ca43f 	.word	0x014ca43f
 8006184:	016e3600 	.word	0x016e3600
 8006188:	01a6ab1f 	.word	0x01a6ab1f
 800618c:	01e84800 	.word	0x01e84800

08006190 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f043 0201 	orr.w	r2, r3, #1
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f023 0201 	bic.w	r2, r3, #1
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d115      	bne.n	8006222 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006202:	2001      	movs	r0, #1
 8006204:	f7fa fe3c 	bl	8000e80 <HAL_Delay>
      ms++;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	3301      	adds	r3, #1
 800620c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f001 f93f 	bl	8007492 <USB_GetMode>
 8006214:	4603      	mov	r3, r0
 8006216:	2b01      	cmp	r3, #1
 8006218:	d01e      	beq.n	8006258 <USB_SetCurrentMode+0x84>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2b31      	cmp	r3, #49	; 0x31
 800621e:	d9f0      	bls.n	8006202 <USB_SetCurrentMode+0x2e>
 8006220:	e01a      	b.n	8006258 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006222:	78fb      	ldrb	r3, [r7, #3]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d115      	bne.n	8006254 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006234:	2001      	movs	r0, #1
 8006236:	f7fa fe23 	bl	8000e80 <HAL_Delay>
      ms++;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3301      	adds	r3, #1
 800623e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f001 f926 	bl	8007492 <USB_GetMode>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <USB_SetCurrentMode+0x84>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b31      	cmp	r3, #49	; 0x31
 8006250:	d9f0      	bls.n	8006234 <USB_SetCurrentMode+0x60>
 8006252:	e001      	b.n	8006258 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e005      	b.n	8006264 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b32      	cmp	r3, #50	; 0x32
 800625c:	d101      	bne.n	8006262 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e000      	b.n	8006264 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800626c:	b084      	sub	sp, #16
 800626e:	b580      	push	{r7, lr}
 8006270:	b086      	sub	sp, #24
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800627a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006286:	2300      	movs	r3, #0
 8006288:	613b      	str	r3, [r7, #16]
 800628a:	e009      	b.n	80062a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	3340      	adds	r3, #64	; 0x40
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	2200      	movs	r2, #0
 8006298:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	3301      	adds	r3, #1
 800629e:	613b      	str	r3, [r7, #16]
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	2b0e      	cmp	r3, #14
 80062a4:	d9f2      	bls.n	800628c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80062a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d11c      	bne.n	80062e6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062ba:	f043 0302 	orr.w	r3, r3, #2
 80062be:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	e005      	b.n	80062f2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062f8:	461a      	mov	r2, r3
 80062fa:	2300      	movs	r3, #0
 80062fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006304:	4619      	mov	r1, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630c:	461a      	mov	r2, r3
 800630e:	680b      	ldr	r3, [r1, #0]
 8006310:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006314:	2b01      	cmp	r3, #1
 8006316:	d10c      	bne.n	8006332 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631a:	2b00      	cmp	r3, #0
 800631c:	d104      	bne.n	8006328 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800631e:	2100      	movs	r1, #0
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f965 	bl	80065f0 <USB_SetDevSpeed>
 8006326:	e008      	b.n	800633a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006328:	2101      	movs	r1, #1
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f960 	bl	80065f0 <USB_SetDevSpeed>
 8006330:	e003      	b.n	800633a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006332:	2103      	movs	r1, #3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f95b 	bl	80065f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800633a:	2110      	movs	r1, #16
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f8f3 	bl	8006528 <USB_FlushTxFifo>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f91f 	bl	8006590 <USB_FlushRxFifo>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006362:	461a      	mov	r2, r3
 8006364:	2300      	movs	r3, #0
 8006366:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636e:	461a      	mov	r2, r3
 8006370:	2300      	movs	r3, #0
 8006372:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800637a:	461a      	mov	r2, r3
 800637c:	2300      	movs	r3, #0
 800637e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006380:	2300      	movs	r3, #0
 8006382:	613b      	str	r3, [r7, #16]
 8006384:	e043      	b.n	800640e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4413      	add	r3, r2
 800638e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006398:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800639c:	d118      	bne.n	80063d0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10a      	bne.n	80063ba <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b0:	461a      	mov	r2, r3
 80063b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	e013      	b.n	80063e2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c6:	461a      	mov	r2, r3
 80063c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063cc:	6013      	str	r3, [r2, #0]
 80063ce:	e008      	b.n	80063e2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063dc:	461a      	mov	r2, r3
 80063de:	2300      	movs	r3, #0
 80063e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ee:	461a      	mov	r2, r3
 80063f0:	2300      	movs	r3, #0
 80063f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006400:	461a      	mov	r2, r3
 8006402:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006406:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	3301      	adds	r3, #1
 800640c:	613b      	str	r3, [r7, #16]
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	429a      	cmp	r2, r3
 8006414:	d3b7      	bcc.n	8006386 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006416:	2300      	movs	r3, #0
 8006418:	613b      	str	r3, [r7, #16]
 800641a:	e043      	b.n	80064a4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800642e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006432:	d118      	bne.n	8006466 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10a      	bne.n	8006450 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	4413      	add	r3, r2
 8006442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006446:	461a      	mov	r2, r3
 8006448:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	e013      	b.n	8006478 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645c:	461a      	mov	r2, r3
 800645e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	e008      	b.n	8006478 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006472:	461a      	mov	r2, r3
 8006474:	2300      	movs	r3, #0
 8006476:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4413      	add	r3, r2
 8006480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006484:	461a      	mov	r2, r3
 8006486:	2300      	movs	r3, #0
 8006488:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006496:	461a      	mov	r2, r3
 8006498:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800649c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	3301      	adds	r3, #1
 80064a2:	613b      	str	r3, [r7, #16]
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d3b7      	bcc.n	800641c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80064cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80064ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d105      	bne.n	80064e0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	f043 0210 	orr.w	r2, r3, #16
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	699a      	ldr	r2, [r3, #24]
 80064e4:	4b0e      	ldr	r3, [pc, #56]	; (8006520 <USB_DevInit+0x2b4>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80064ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d005      	beq.n	80064fe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	f043 0208 	orr.w	r2, r3, #8
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006500:	2b01      	cmp	r3, #1
 8006502:	d105      	bne.n	8006510 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	699a      	ldr	r2, [r3, #24]
 8006508:	4b06      	ldr	r3, [pc, #24]	; (8006524 <USB_DevInit+0x2b8>)
 800650a:	4313      	orrs	r3, r2
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006510:	7dfb      	ldrb	r3, [r7, #23]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800651c:	b004      	add	sp, #16
 800651e:	4770      	bx	lr
 8006520:	803c3800 	.word	0x803c3800
 8006524:	40000004 	.word	0x40000004

08006528 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006532:	2300      	movs	r3, #0
 8006534:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3301      	adds	r3, #1
 800653a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4a13      	ldr	r2, [pc, #76]	; (800658c <USB_FlushTxFifo+0x64>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d901      	bls.n	8006548 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e01b      	b.n	8006580 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	daf2      	bge.n	8006536 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	019b      	lsls	r3, r3, #6
 8006558:	f043 0220 	orr.w	r2, r3, #32
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3301      	adds	r3, #1
 8006564:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	4a08      	ldr	r2, [pc, #32]	; (800658c <USB_FlushTxFifo+0x64>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d901      	bls.n	8006572 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e006      	b.n	8006580 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f003 0320 	and.w	r3, r3, #32
 800657a:	2b20      	cmp	r3, #32
 800657c:	d0f0      	beq.n	8006560 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	00030d40 	.word	0x00030d40

08006590 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	3301      	adds	r3, #1
 80065a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4a11      	ldr	r2, [pc, #68]	; (80065ec <USB_FlushRxFifo+0x5c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d901      	bls.n	80065ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e018      	b.n	80065e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	daf2      	bge.n	800659c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2210      	movs	r2, #16
 80065be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3301      	adds	r3, #1
 80065c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4a08      	ldr	r2, [pc, #32]	; (80065ec <USB_FlushRxFifo+0x5c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d901      	bls.n	80065d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e006      	b.n	80065e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	f003 0310 	and.w	r3, r3, #16
 80065da:	2b10      	cmp	r3, #16
 80065dc:	d0f0      	beq.n	80065c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	00030d40 	.word	0x00030d40

080065f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	460b      	mov	r3, r1
 80065fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	78fb      	ldrb	r3, [r7, #3]
 800660a:	68f9      	ldr	r1, [r7, #12]
 800660c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006610:	4313      	orrs	r3, r2
 8006612:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006622:	b480      	push	{r7}
 8006624:	b087      	sub	sp, #28
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 0306 	and.w	r3, r3, #6
 800663a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d102      	bne.n	8006648 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006642:	2300      	movs	r3, #0
 8006644:	75fb      	strb	r3, [r7, #23]
 8006646:	e00a      	b.n	800665e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b02      	cmp	r3, #2
 800664c:	d002      	beq.n	8006654 <USB_GetDevSpeed+0x32>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2b06      	cmp	r3, #6
 8006652:	d102      	bne.n	800665a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006654:	2302      	movs	r3, #2
 8006656:	75fb      	strb	r3, [r7, #23]
 8006658:	e001      	b.n	800665e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800665a:	230f      	movs	r3, #15
 800665c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800665e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006660:	4618      	mov	r0, r3
 8006662:	371c      	adds	r7, #28
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	785b      	ldrb	r3, [r3, #1]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d139      	bne.n	80066fc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800668e:	69da      	ldr	r2, [r3, #28]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	f003 030f 	and.w	r3, r3, #15
 8006698:	2101      	movs	r1, #1
 800669a:	fa01 f303 	lsl.w	r3, r1, r3
 800669e:	b29b      	uxth	r3, r3
 80066a0:	68f9      	ldr	r1, [r7, #12]
 80066a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066a6:	4313      	orrs	r3, r2
 80066a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d153      	bne.n	8006768 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	791b      	ldrb	r3, [r3, #4]
 80066da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	059b      	lsls	r3, r3, #22
 80066e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066e4:	431a      	orrs	r2, r3
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	0159      	lsls	r1, r3, #5
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	440b      	add	r3, r1
 80066ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f2:	4619      	mov	r1, r3
 80066f4:	4b20      	ldr	r3, [pc, #128]	; (8006778 <USB_ActivateEndpoint+0x10c>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	600b      	str	r3, [r1, #0]
 80066fa:	e035      	b.n	8006768 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	f003 030f 	and.w	r3, r3, #15
 800670c:	2101      	movs	r1, #1
 800670e:	fa01 f303 	lsl.w	r3, r1, r3
 8006712:	041b      	lsls	r3, r3, #16
 8006714:	68f9      	ldr	r1, [r7, #12]
 8006716:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800671a:	4313      	orrs	r3, r2
 800671c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d119      	bne.n	8006768 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	791b      	ldrb	r3, [r3, #4]
 800674e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006750:	430b      	orrs	r3, r1
 8006752:	431a      	orrs	r2, r3
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	0159      	lsls	r1, r3, #5
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	440b      	add	r3, r1
 800675c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006760:	4619      	mov	r1, r3
 8006762:	4b05      	ldr	r3, [pc, #20]	; (8006778 <USB_ActivateEndpoint+0x10c>)
 8006764:	4313      	orrs	r3, r2
 8006766:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	10008000 	.word	0x10008000

0800677c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	785b      	ldrb	r3, [r3, #1]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d161      	bne.n	800685c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067ae:	d11f      	bne.n	80067f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	0151      	lsls	r1, r2, #5
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	440a      	add	r2, r1
 80067c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	0151      	lsls	r1, r2, #5
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	440a      	add	r2, r1
 80067e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	f003 030f 	and.w	r3, r3, #15
 8006800:	2101      	movs	r1, #1
 8006802:	fa01 f303 	lsl.w	r3, r1, r3
 8006806:	b29b      	uxth	r3, r3
 8006808:	43db      	mvns	r3, r3
 800680a:	68f9      	ldr	r1, [r7, #12]
 800680c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006810:	4013      	ands	r3, r2
 8006812:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800681a:	69da      	ldr	r2, [r3, #28]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	f003 030f 	and.w	r3, r3, #15
 8006824:	2101      	movs	r1, #1
 8006826:	fa01 f303 	lsl.w	r3, r1, r3
 800682a:	b29b      	uxth	r3, r3
 800682c:	43db      	mvns	r3, r3
 800682e:	68f9      	ldr	r1, [r7, #12]
 8006830:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006834:	4013      	ands	r3, r2
 8006836:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	0159      	lsls	r1, r3, #5
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	440b      	add	r3, r1
 800684e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006852:	4619      	mov	r1, r3
 8006854:	4b35      	ldr	r3, [pc, #212]	; (800692c <USB_DeactivateEndpoint+0x1b0>)
 8006856:	4013      	ands	r3, r2
 8006858:	600b      	str	r3, [r1, #0]
 800685a:	e060      	b.n	800691e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4413      	add	r3, r2
 8006864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800686e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006872:	d11f      	bne.n	80068b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	0151      	lsls	r1, r2, #5
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	440a      	add	r2, r1
 800688a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800688e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006892:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	0151      	lsls	r1, r2, #5
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	440a      	add	r2, r1
 80068aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	f003 030f 	and.w	r3, r3, #15
 80068c4:	2101      	movs	r1, #1
 80068c6:	fa01 f303 	lsl.w	r3, r1, r3
 80068ca:	041b      	lsls	r3, r3, #16
 80068cc:	43db      	mvns	r3, r3
 80068ce:	68f9      	ldr	r1, [r7, #12]
 80068d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068d4:	4013      	ands	r3, r2
 80068d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068de:	69da      	ldr	r2, [r3, #28]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	f003 030f 	and.w	r3, r3, #15
 80068e8:	2101      	movs	r1, #1
 80068ea:	fa01 f303 	lsl.w	r3, r1, r3
 80068ee:	041b      	lsls	r3, r3, #16
 80068f0:	43db      	mvns	r3, r3
 80068f2:	68f9      	ldr	r1, [r7, #12]
 80068f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068f8:	4013      	ands	r3, r2
 80068fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4413      	add	r3, r2
 8006904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	0159      	lsls	r1, r3, #5
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	440b      	add	r3, r1
 8006912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006916:	4619      	mov	r1, r3
 8006918:	4b05      	ldr	r3, [pc, #20]	; (8006930 <USB_DeactivateEndpoint+0x1b4>)
 800691a:	4013      	ands	r3, r2
 800691c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	ec337800 	.word	0xec337800
 8006930:	eff37800 	.word	0xeff37800

08006934 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b08a      	sub	sp, #40	; 0x28
 8006938:	af02      	add	r7, sp, #8
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	4613      	mov	r3, r2
 8006940:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	785b      	ldrb	r3, [r3, #1]
 8006950:	2b01      	cmp	r3, #1
 8006952:	f040 8181 	bne.w	8006c58 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d132      	bne.n	80069c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	4413      	add	r3, r2
 8006966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800696a:	691a      	ldr	r2, [r3, #16]
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	0159      	lsls	r1, r3, #5
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	440b      	add	r3, r1
 8006974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006978:	4619      	mov	r1, r3
 800697a:	4ba5      	ldr	r3, [pc, #660]	; (8006c10 <USB_EPStartXfer+0x2dc>)
 800697c:	4013      	ands	r3, r2
 800697e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	4413      	add	r3, r2
 8006988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	0151      	lsls	r1, r2, #5
 8006992:	69fa      	ldr	r2, [r7, #28]
 8006994:	440a      	add	r2, r1
 8006996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800699a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800699e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ac:	691a      	ldr	r2, [r3, #16]
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	0159      	lsls	r1, r3, #5
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	440b      	add	r3, r1
 80069b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ba:	4619      	mov	r1, r3
 80069bc:	4b95      	ldr	r3, [pc, #596]	; (8006c14 <USB_EPStartXfer+0x2e0>)
 80069be:	4013      	ands	r3, r2
 80069c0:	610b      	str	r3, [r1, #16]
 80069c2:	e092      	b.n	8006aea <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d0:	691a      	ldr	r2, [r3, #16]
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	0159      	lsls	r1, r3, #5
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	440b      	add	r3, r1
 80069da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069de:	4619      	mov	r1, r3
 80069e0:	4b8c      	ldr	r3, [pc, #560]	; (8006c14 <USB_EPStartXfer+0x2e0>)
 80069e2:	4013      	ands	r3, r2
 80069e4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f2:	691a      	ldr	r2, [r3, #16]
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	0159      	lsls	r1, r3, #5
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	440b      	add	r3, r1
 80069fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a00:	4619      	mov	r1, r3
 8006a02:	4b83      	ldr	r3, [pc, #524]	; (8006c10 <USB_EPStartXfer+0x2dc>)
 8006a04:	4013      	ands	r3, r2
 8006a06:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d11a      	bne.n	8006a44 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	691a      	ldr	r2, [r3, #16]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d903      	bls.n	8006a22 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	689a      	ldr	r2, [r3, #8]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	0151      	lsls	r1, r2, #5
 8006a34:	69fa      	ldr	r2, [r7, #28]
 8006a36:	440a      	add	r2, r1
 8006a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a40:	6113      	str	r3, [r2, #16]
 8006a42:	e01b      	b.n	8006a7c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a50:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	6919      	ldr	r1, [r3, #16]
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	440b      	add	r3, r1
 8006a5c:	1e59      	subs	r1, r3, #1
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a66:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006a68:	4b6b      	ldr	r3, [pc, #428]	; (8006c18 <USB_EPStartXfer+0x2e4>)
 8006a6a:	400b      	ands	r3, r1
 8006a6c:	69b9      	ldr	r1, [r7, #24]
 8006a6e:	0148      	lsls	r0, r1, #5
 8006a70:	69f9      	ldr	r1, [r7, #28]
 8006a72:	4401      	add	r1, r0
 8006a74:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a88:	691a      	ldr	r2, [r3, #16]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a92:	69b9      	ldr	r1, [r7, #24]
 8006a94:	0148      	lsls	r0, r1, #5
 8006a96:	69f9      	ldr	r1, [r7, #28]
 8006a98:	4401      	add	r1, r0
 8006a9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	791b      	ldrb	r3, [r3, #4]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d11f      	bne.n	8006aea <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	0151      	lsls	r1, r2, #5
 8006abc:	69fa      	ldr	r2, [r7, #28]
 8006abe:	440a      	add	r2, r1
 8006ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006ac8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	0151      	lsls	r1, r2, #5
 8006adc:	69fa      	ldr	r2, [r7, #28]
 8006ade:	440a      	add	r2, r1
 8006ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ae8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006aea:	79fb      	ldrb	r3, [r7, #7]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d14b      	bne.n	8006b88 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d009      	beq.n	8006b0c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b04:	461a      	mov	r2, r3
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	791b      	ldrb	r3, [r3, #4]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d128      	bne.n	8006b66 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d110      	bne.n	8006b46 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	0151      	lsls	r1, r2, #5
 8006b36:	69fa      	ldr	r2, [r7, #28]
 8006b38:	440a      	add	r2, r1
 8006b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b42:	6013      	str	r3, [r2, #0]
 8006b44:	e00f      	b.n	8006b66 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	0151      	lsls	r1, r2, #5
 8006b58:	69fa      	ldr	r2, [r7, #28]
 8006b5a:	440a      	add	r2, r1
 8006b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b64:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	0151      	lsls	r1, r2, #5
 8006b78:	69fa      	ldr	r2, [r7, #28]
 8006b7a:	440a      	add	r2, r1
 8006b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	e16a      	b.n	8006e5e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69ba      	ldr	r2, [r7, #24]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	69fa      	ldr	r2, [r7, #28]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ba6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	791b      	ldrb	r3, [r3, #4]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d015      	beq.n	8006bdc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 8152 	beq.w	8006e5e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	f003 030f 	and.w	r3, r3, #15
 8006bca:	2101      	movs	r1, #1
 8006bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd0:	69f9      	ldr	r1, [r7, #28]
 8006bd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	634b      	str	r3, [r1, #52]	; 0x34
 8006bda:	e140      	b.n	8006e5e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d117      	bne.n	8006c1c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	69ba      	ldr	r2, [r7, #24]
 8006bfc:	0151      	lsls	r1, r2, #5
 8006bfe:	69fa      	ldr	r2, [r7, #28]
 8006c00:	440a      	add	r2, r1
 8006c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c0a:	6013      	str	r3, [r2, #0]
 8006c0c:	e016      	b.n	8006c3c <USB_EPStartXfer+0x308>
 8006c0e:	bf00      	nop
 8006c10:	e007ffff 	.word	0xe007ffff
 8006c14:	fff80000 	.word	0xfff80000
 8006c18:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69ba      	ldr	r2, [r7, #24]
 8006c2c:	0151      	lsls	r1, r2, #5
 8006c2e:	69fa      	ldr	r2, [r7, #28]
 8006c30:	440a      	add	r2, r1
 8006c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c3a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	68d9      	ldr	r1, [r3, #12]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	781a      	ldrb	r2, [r3, #0]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	b298      	uxth	r0, r3
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	4603      	mov	r3, r0
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 f9b9 	bl	8006fc8 <USB_WritePacket>
 8006c56:	e102      	b.n	8006e5e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	015a      	lsls	r2, r3, #5
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c64:	691a      	ldr	r2, [r3, #16]
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	0159      	lsls	r1, r3, #5
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	440b      	add	r3, r1
 8006c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c72:	4619      	mov	r1, r3
 8006c74:	4b7c      	ldr	r3, [pc, #496]	; (8006e68 <USB_EPStartXfer+0x534>)
 8006c76:	4013      	ands	r3, r2
 8006c78:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c86:	691a      	ldr	r2, [r3, #16]
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	0159      	lsls	r1, r3, #5
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	440b      	add	r3, r1
 8006c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c94:	4619      	mov	r1, r3
 8006c96:	4b75      	ldr	r3, [pc, #468]	; (8006e6c <USB_EPStartXfer+0x538>)
 8006c98:	4013      	ands	r3, r2
 8006c9a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d12f      	bne.n	8006d02 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	689a      	ldr	r2, [r3, #8]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	689a      	ldr	r2, [r3, #8]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc6:	691a      	ldr	r2, [r3, #16]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cd0:	69b9      	ldr	r1, [r7, #24]
 8006cd2:	0148      	lsls	r0, r1, #5
 8006cd4:	69f9      	ldr	r1, [r7, #28]
 8006cd6:	4401      	add	r1, r0
 8006cd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	0151      	lsls	r1, r2, #5
 8006cf2:	69fa      	ldr	r2, [r7, #28]
 8006cf4:	440a      	add	r2, r1
 8006cf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cfe:	6113      	str	r3, [r2, #16]
 8006d00:	e05f      	b.n	8006dc2 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d123      	bne.n	8006d52 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d16:	691a      	ldr	r2, [r3, #16]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d20:	69b9      	ldr	r1, [r7, #24]
 8006d22:	0148      	lsls	r0, r1, #5
 8006d24:	69f9      	ldr	r1, [r7, #28]
 8006d26:	4401      	add	r1, r0
 8006d28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	0151      	lsls	r1, r2, #5
 8006d42:	69fa      	ldr	r2, [r7, #28]
 8006d44:	440a      	add	r2, r1
 8006d46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d4e:	6113      	str	r3, [r2, #16]
 8006d50:	e037      	b.n	8006dc2 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	691a      	ldr	r2, [r3, #16]
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	1e5a      	subs	r2, r3, #1
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d66:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	8afa      	ldrh	r2, [r7, #22]
 8006d6e:	fb03 f202 	mul.w	r2, r3, r2
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d82:	691a      	ldr	r2, [r3, #16]
 8006d84:	8afb      	ldrh	r3, [r7, #22]
 8006d86:	04d9      	lsls	r1, r3, #19
 8006d88:	4b39      	ldr	r3, [pc, #228]	; (8006e70 <USB_EPStartXfer+0x53c>)
 8006d8a:	400b      	ands	r3, r1
 8006d8c:	69b9      	ldr	r1, [r7, #24]
 8006d8e:	0148      	lsls	r0, r1, #5
 8006d90:	69f9      	ldr	r1, [r7, #28]
 8006d92:	4401      	add	r1, r0
 8006d94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da8:	691a      	ldr	r2, [r3, #16]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006db2:	69b9      	ldr	r1, [r7, #24]
 8006db4:	0148      	lsls	r0, r1, #5
 8006db6:	69f9      	ldr	r1, [r7, #28]
 8006db8:	4401      	add	r1, r0
 8006dba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006dc2:	79fb      	ldrb	r3, [r7, #7]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d10d      	bne.n	8006de4 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d009      	beq.n	8006de4 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	68d9      	ldr	r1, [r3, #12]
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de0:	460a      	mov	r2, r1
 8006de2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	791b      	ldrb	r3, [r3, #4]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d128      	bne.n	8006e3e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d110      	bne.n	8006e1e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	015a      	lsls	r2, r3, #5
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	4413      	add	r3, r2
 8006e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	69ba      	ldr	r2, [r7, #24]
 8006e0c:	0151      	lsls	r1, r2, #5
 8006e0e:	69fa      	ldr	r2, [r7, #28]
 8006e10:	440a      	add	r2, r1
 8006e12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e1a:	6013      	str	r3, [r2, #0]
 8006e1c:	e00f      	b.n	8006e3e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	0151      	lsls	r1, r2, #5
 8006e30:	69fa      	ldr	r2, [r7, #28]
 8006e32:	440a      	add	r2, r1
 8006e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e3c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	015a      	lsls	r2, r3, #5
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	0151      	lsls	r1, r2, #5
 8006e50:	69fa      	ldr	r2, [r7, #28]
 8006e52:	440a      	add	r2, r1
 8006e54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3720      	adds	r7, #32
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	fff80000 	.word	0xfff80000
 8006e6c:	e007ffff 	.word	0xe007ffff
 8006e70:	1ff80000 	.word	0x1ff80000

08006e74 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	785b      	ldrb	r3, [r3, #1]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d14a      	bne.n	8006f28 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eaa:	f040 8086 	bne.w	8006fba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	7812      	ldrb	r2, [r2, #0]
 8006ec2:	0151      	lsls	r1, r2, #5
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	440a      	add	r2, r1
 8006ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ecc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ed0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	7812      	ldrb	r2, [r2, #0]
 8006ee6:	0151      	lsls	r1, r2, #5
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	440a      	add	r2, r1
 8006eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ef4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f242 7210 	movw	r2, #10000	; 0x2710
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d902      	bls.n	8006f0c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	75fb      	strb	r3, [r7, #23]
          break;
 8006f0a:	e056      	b.n	8006fba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f24:	d0e7      	beq.n	8006ef6 <USB_EPStopXfer+0x82>
 8006f26:	e048      	b.n	8006fba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f40:	d13b      	bne.n	8006fba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	7812      	ldrb	r2, [r2, #0]
 8006f56:	0151      	lsls	r1, r2, #5
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	440a      	add	r2, r1
 8006f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f64:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	7812      	ldrb	r2, [r2, #0]
 8006f7a:	0151      	lsls	r1, r2, #5
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	440a      	add	r2, r1
 8006f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f242 7210 	movw	r2, #10000	; 0x2710
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d902      	bls.n	8006fa0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f9e:	e00c      	b.n	8006fba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fb8:	d0e7      	beq.n	8006f8a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	371c      	adds	r7, #28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b089      	sub	sp, #36	; 0x24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	71fb      	strb	r3, [r7, #7]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006fe6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d123      	bne.n	8007036 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006fee:	88bb      	ldrh	r3, [r7, #4]
 8006ff0:	3303      	adds	r3, #3
 8006ff2:	089b      	lsrs	r3, r3, #2
 8006ff4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	61bb      	str	r3, [r7, #24]
 8006ffa:	e018      	b.n	800702e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ffc:	79fb      	ldrb	r3, [r7, #7]
 8006ffe:	031a      	lsls	r2, r3, #12
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	4413      	add	r3, r2
 8007004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007008:	461a      	mov	r2, r3
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	3301      	adds	r3, #1
 8007014:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	3301      	adds	r3, #1
 800701a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	3301      	adds	r3, #1
 8007020:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	3301      	adds	r3, #1
 8007026:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	3301      	adds	r3, #1
 800702c:	61bb      	str	r3, [r7, #24]
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	429a      	cmp	r2, r3
 8007034:	d3e2      	bcc.n	8006ffc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3724      	adds	r7, #36	; 0x24
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007044:	b480      	push	{r7}
 8007046:	b08b      	sub	sp, #44	; 0x2c
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	4613      	mov	r3, r2
 8007050:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800705a:	88fb      	ldrh	r3, [r7, #6]
 800705c:	089b      	lsrs	r3, r3, #2
 800705e:	b29b      	uxth	r3, r3
 8007060:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007062:	88fb      	ldrh	r3, [r7, #6]
 8007064:	f003 0303 	and.w	r3, r3, #3
 8007068:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800706a:	2300      	movs	r3, #0
 800706c:	623b      	str	r3, [r7, #32]
 800706e:	e014      	b.n	800709a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	601a      	str	r2, [r3, #0]
    pDest++;
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	3301      	adds	r3, #1
 8007080:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	3301      	adds	r3, #1
 8007086:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	3301      	adds	r3, #1
 800708c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	3301      	adds	r3, #1
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	3301      	adds	r3, #1
 8007098:	623b      	str	r3, [r7, #32]
 800709a:	6a3a      	ldr	r2, [r7, #32]
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d3e6      	bcc.n	8007070 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80070a2:	8bfb      	ldrh	r3, [r7, #30]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d01e      	beq.n	80070e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80070a8:	2300      	movs	r3, #0
 80070aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070b2:	461a      	mov	r2, r3
 80070b4:	f107 0310 	add.w	r3, r7, #16
 80070b8:	6812      	ldr	r2, [r2, #0]
 80070ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	fa22 f303 	lsr.w	r3, r2, r3
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	701a      	strb	r2, [r3, #0]
      i++;
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	3301      	adds	r3, #1
 80070d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	3301      	adds	r3, #1
 80070d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80070da:	8bfb      	ldrh	r3, [r7, #30]
 80070dc:	3b01      	subs	r3, #1
 80070de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80070e0:	8bfb      	ldrh	r3, [r7, #30]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1ea      	bne.n	80070bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	372c      	adds	r7, #44	; 0x2c
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	785b      	ldrb	r3, [r3, #1]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d12c      	bne.n	800716a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	db12      	blt.n	8007148 <USB_EPSetStall+0x54>
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00f      	beq.n	8007148 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4413      	add	r3, r2
 8007130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	0151      	lsls	r1, r2, #5
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	440a      	add	r2, r1
 800713e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007142:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007146:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	0151      	lsls	r1, r2, #5
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	440a      	add	r2, r1
 800715e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007162:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	e02b      	b.n	80071c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	db12      	blt.n	80071a2 <USB_EPSetStall+0xae>
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00f      	beq.n	80071a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	4413      	add	r3, r2
 800718a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	0151      	lsls	r1, r2, #5
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	440a      	add	r2, r1
 8007198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800719c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80071a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	0151      	lsls	r1, r2, #5
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	440a      	add	r2, r1
 80071b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	785b      	ldrb	r3, [r3, #1]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d128      	bne.n	800723e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	0151      	lsls	r1, r2, #5
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	440a      	add	r2, r1
 8007202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007206:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800720a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	791b      	ldrb	r3, [r3, #4]
 8007210:	2b03      	cmp	r3, #3
 8007212:	d003      	beq.n	800721c <USB_EPClearStall+0x4c>
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	791b      	ldrb	r3, [r3, #4]
 8007218:	2b02      	cmp	r3, #2
 800721a:	d138      	bne.n	800728e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	015a      	lsls	r2, r3, #5
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4413      	add	r3, r2
 8007224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	0151      	lsls	r1, r2, #5
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	440a      	add	r2, r1
 8007232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800723a:	6013      	str	r3, [r2, #0]
 800723c:	e027      	b.n	800728e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	015a      	lsls	r2, r3, #5
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	4413      	add	r3, r2
 8007246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	0151      	lsls	r1, r2, #5
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	440a      	add	r2, r1
 8007254:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007258:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800725c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	791b      	ldrb	r3, [r3, #4]
 8007262:	2b03      	cmp	r3, #3
 8007264:	d003      	beq.n	800726e <USB_EPClearStall+0x9e>
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	791b      	ldrb	r3, [r3, #4]
 800726a:	2b02      	cmp	r3, #2
 800726c:	d10f      	bne.n	800728e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	0151      	lsls	r1, r2, #5
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	440a      	add	r2, r1
 8007284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800728c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	460b      	mov	r3, r1
 80072a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80072be:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	78fb      	ldrb	r3, [r7, #3]
 80072ca:	011b      	lsls	r3, r3, #4
 80072cc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80072d0:	68f9      	ldr	r1, [r7, #12]
 80072d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072d6:	4313      	orrs	r3, r2
 80072d8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007302:	f023 0303 	bic.w	r3, r3, #3
 8007306:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007316:	f023 0302 	bic.w	r3, r3, #2
 800731a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800732a:	b480      	push	{r7}
 800732c:	b085      	sub	sp, #20
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007344:	f023 0303 	bic.w	r3, r3, #3
 8007348:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007358:	f043 0302 	orr.w	r3, r3, #2
 800735c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	4013      	ands	r3, r2
 8007382:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007384:	68fb      	ldr	r3, [r7, #12]
}
 8007386:	4618      	mov	r0, r3
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007392:	b480      	push	{r7}
 8007394:	b085      	sub	sp, #20
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	4013      	ands	r3, r2
 80073b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	0c1b      	lsrs	r3, r3, #16
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b085      	sub	sp, #20
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	4013      	ands	r3, r2
 80073e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	b29b      	uxth	r3, r3
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b085      	sub	sp, #20
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	460b      	mov	r3, r1
 8007404:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	4413      	add	r3, r2
 8007412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	4013      	ands	r3, r2
 8007426:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007428:	68bb      	ldr	r3, [r7, #8]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007436:	b480      	push	{r7}
 8007438:	b087      	sub	sp, #28
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	460b      	mov	r3, r1
 8007440:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007458:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800745a:	78fb      	ldrb	r3, [r7, #3]
 800745c:	f003 030f 	and.w	r3, r3, #15
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	fa22 f303 	lsr.w	r3, r2, r3
 8007466:	01db      	lsls	r3, r3, #7
 8007468:	b2db      	uxtb	r3, r3
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	4313      	orrs	r3, r2
 800746e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007470:	78fb      	ldrb	r3, [r7, #3]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	4013      	ands	r3, r2
 8007482:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007484:	68bb      	ldr	r3, [r7, #8]
}
 8007486:	4618      	mov	r0, r3
 8007488:	371c      	adds	r7, #28
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007492:	b480      	push	{r7}
 8007494:	b083      	sub	sp, #12
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	f003 0301 	and.w	r3, r3, #1
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
	...

080074b0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ca:	4619      	mov	r1, r3
 80074cc:	4b09      	ldr	r3, [pc, #36]	; (80074f4 <USB_ActivateSetup+0x44>)
 80074ce:	4013      	ands	r3, r2
 80074d0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	fffff800 	.word	0xfffff800

080074f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b087      	sub	sp, #28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	460b      	mov	r3, r1
 8007502:	607a      	str	r2, [r7, #4]
 8007504:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	333c      	adds	r3, #60	; 0x3c
 800750e:	3304      	adds	r3, #4
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	4a26      	ldr	r2, [pc, #152]	; (80075b0 <USB_EP0_OutStart+0xb8>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d90a      	bls.n	8007532 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800752c:	d101      	bne.n	8007532 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	e037      	b.n	80075a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007538:	461a      	mov	r2, r3
 800753a:	2300      	movs	r3, #0
 800753c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800754c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007550:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007560:	f043 0318 	orr.w	r3, r3, #24
 8007564:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007574:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007578:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800757a:	7afb      	ldrb	r3, [r7, #11]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d10f      	bne.n	80075a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007586:	461a      	mov	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800759a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800759e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	371c      	adds	r7, #28
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	4f54300a 	.word	0x4f54300a

080075b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3301      	adds	r3, #1
 80075c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	4a13      	ldr	r2, [pc, #76]	; (8007618 <USB_CoreReset+0x64>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d901      	bls.n	80075d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e01b      	b.n	800760a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	daf2      	bge.n	80075c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075da:	2300      	movs	r3, #0
 80075dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	f043 0201 	orr.w	r2, r3, #1
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3301      	adds	r3, #1
 80075ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4a09      	ldr	r2, [pc, #36]	; (8007618 <USB_CoreReset+0x64>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d901      	bls.n	80075fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e006      	b.n	800760a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b01      	cmp	r3, #1
 8007606:	d0f0      	beq.n	80075ea <USB_CoreReset+0x36>

  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	00030d40 	.word	0x00030d40

0800761c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007628:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800762c:	f002 fdb4 	bl	800a198 <USBD_static_malloc>
 8007630:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d109      	bne.n	800764c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	32b0      	adds	r2, #176	; 0xb0
 8007642:	2100      	movs	r1, #0
 8007644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007648:	2302      	movs	r3, #2
 800764a:	e0d4      	b.n	80077f6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800764c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007650:	2100      	movs	r1, #0
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f003 f800 	bl	800a658 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	32b0      	adds	r2, #176	; 0xb0
 8007662:	68f9      	ldr	r1, [r7, #12]
 8007664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	32b0      	adds	r2, #176	; 0xb0
 8007672:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	7c1b      	ldrb	r3, [r3, #16]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d138      	bne.n	80076f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007684:	4b5e      	ldr	r3, [pc, #376]	; (8007800 <USBD_CDC_Init+0x1e4>)
 8007686:	7819      	ldrb	r1, [r3, #0]
 8007688:	f44f 7300 	mov.w	r3, #512	; 0x200
 800768c:	2202      	movs	r2, #2
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f002 fc5f 	bl	8009f52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007694:	4b5a      	ldr	r3, [pc, #360]	; (8007800 <USBD_CDC_Init+0x1e4>)
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	f003 020f 	and.w	r2, r3, #15
 800769c:	6879      	ldr	r1, [r7, #4]
 800769e:	4613      	mov	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	440b      	add	r3, r1
 80076a8:	3324      	adds	r3, #36	; 0x24
 80076aa:	2201      	movs	r2, #1
 80076ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80076ae:	4b55      	ldr	r3, [pc, #340]	; (8007804 <USBD_CDC_Init+0x1e8>)
 80076b0:	7819      	ldrb	r1, [r3, #0]
 80076b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076b6:	2202      	movs	r2, #2
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f002 fc4a 	bl	8009f52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80076be:	4b51      	ldr	r3, [pc, #324]	; (8007804 <USBD_CDC_Init+0x1e8>)
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	f003 020f 	and.w	r2, r3, #15
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	4613      	mov	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	440b      	add	r3, r1
 80076d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80076d6:	2201      	movs	r2, #1
 80076d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80076da:	4b4b      	ldr	r3, [pc, #300]	; (8007808 <USBD_CDC_Init+0x1ec>)
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	f003 020f 	and.w	r2, r3, #15
 80076e2:	6879      	ldr	r1, [r7, #4]
 80076e4:	4613      	mov	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	440b      	add	r3, r1
 80076ee:	3326      	adds	r3, #38	; 0x26
 80076f0:	2210      	movs	r2, #16
 80076f2:	801a      	strh	r2, [r3, #0]
 80076f4:	e035      	b.n	8007762 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80076f6:	4b42      	ldr	r3, [pc, #264]	; (8007800 <USBD_CDC_Init+0x1e4>)
 80076f8:	7819      	ldrb	r1, [r3, #0]
 80076fa:	2340      	movs	r3, #64	; 0x40
 80076fc:	2202      	movs	r2, #2
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f002 fc27 	bl	8009f52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007704:	4b3e      	ldr	r3, [pc, #248]	; (8007800 <USBD_CDC_Init+0x1e4>)
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	f003 020f 	and.w	r2, r3, #15
 800770c:	6879      	ldr	r1, [r7, #4]
 800770e:	4613      	mov	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	440b      	add	r3, r1
 8007718:	3324      	adds	r3, #36	; 0x24
 800771a:	2201      	movs	r2, #1
 800771c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800771e:	4b39      	ldr	r3, [pc, #228]	; (8007804 <USBD_CDC_Init+0x1e8>)
 8007720:	7819      	ldrb	r1, [r3, #0]
 8007722:	2340      	movs	r3, #64	; 0x40
 8007724:	2202      	movs	r2, #2
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f002 fc13 	bl	8009f52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800772c:	4b35      	ldr	r3, [pc, #212]	; (8007804 <USBD_CDC_Init+0x1e8>)
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	f003 020f 	and.w	r2, r3, #15
 8007734:	6879      	ldr	r1, [r7, #4]
 8007736:	4613      	mov	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4413      	add	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	440b      	add	r3, r1
 8007740:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007744:	2201      	movs	r2, #1
 8007746:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007748:	4b2f      	ldr	r3, [pc, #188]	; (8007808 <USBD_CDC_Init+0x1ec>)
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	f003 020f 	and.w	r2, r3, #15
 8007750:	6879      	ldr	r1, [r7, #4]
 8007752:	4613      	mov	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	440b      	add	r3, r1
 800775c:	3326      	adds	r3, #38	; 0x26
 800775e:	2210      	movs	r2, #16
 8007760:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007762:	4b29      	ldr	r3, [pc, #164]	; (8007808 <USBD_CDC_Init+0x1ec>)
 8007764:	7819      	ldrb	r1, [r3, #0]
 8007766:	2308      	movs	r3, #8
 8007768:	2203      	movs	r2, #3
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f002 fbf1 	bl	8009f52 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007770:	4b25      	ldr	r3, [pc, #148]	; (8007808 <USBD_CDC_Init+0x1ec>)
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	f003 020f 	and.w	r2, r3, #15
 8007778:	6879      	ldr	r1, [r7, #4]
 800777a:	4613      	mov	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	440b      	add	r3, r1
 8007784:	3324      	adds	r3, #36	; 0x24
 8007786:	2201      	movs	r2, #1
 8007788:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	33b0      	adds	r3, #176	; 0xb0
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d101      	bne.n	80077c4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80077c0:	2302      	movs	r3, #2
 80077c2:	e018      	b.n	80077f6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	7c1b      	ldrb	r3, [r3, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10a      	bne.n	80077e2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077cc:	4b0d      	ldr	r3, [pc, #52]	; (8007804 <USBD_CDC_Init+0x1e8>)
 80077ce:	7819      	ldrb	r1, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f002 fca8 	bl	800a130 <USBD_LL_PrepareReceive>
 80077e0:	e008      	b.n	80077f4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077e2:	4b08      	ldr	r3, [pc, #32]	; (8007804 <USBD_CDC_Init+0x1e8>)
 80077e4:	7819      	ldrb	r1, [r3, #0]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077ec:	2340      	movs	r3, #64	; 0x40
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f002 fc9e 	bl	800a130 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	24000097 	.word	0x24000097
 8007804:	24000098 	.word	0x24000098
 8007808:	24000099 	.word	0x24000099

0800780c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007818:	4b3a      	ldr	r3, [pc, #232]	; (8007904 <USBD_CDC_DeInit+0xf8>)
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	4619      	mov	r1, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f002 fbbd 	bl	8009f9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007824:	4b37      	ldr	r3, [pc, #220]	; (8007904 <USBD_CDC_DeInit+0xf8>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	f003 020f 	and.w	r2, r3, #15
 800782c:	6879      	ldr	r1, [r7, #4]
 800782e:	4613      	mov	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4413      	add	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	440b      	add	r3, r1
 8007838:	3324      	adds	r3, #36	; 0x24
 800783a:	2200      	movs	r2, #0
 800783c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800783e:	4b32      	ldr	r3, [pc, #200]	; (8007908 <USBD_CDC_DeInit+0xfc>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f002 fbaa 	bl	8009f9e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800784a:	4b2f      	ldr	r3, [pc, #188]	; (8007908 <USBD_CDC_DeInit+0xfc>)
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	f003 020f 	and.w	r2, r3, #15
 8007852:	6879      	ldr	r1, [r7, #4]
 8007854:	4613      	mov	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	440b      	add	r3, r1
 800785e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007862:	2200      	movs	r2, #0
 8007864:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007866:	4b29      	ldr	r3, [pc, #164]	; (800790c <USBD_CDC_DeInit+0x100>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f002 fb96 	bl	8009f9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007872:	4b26      	ldr	r3, [pc, #152]	; (800790c <USBD_CDC_DeInit+0x100>)
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	f003 020f 	and.w	r2, r3, #15
 800787a:	6879      	ldr	r1, [r7, #4]
 800787c:	4613      	mov	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	440b      	add	r3, r1
 8007886:	3324      	adds	r3, #36	; 0x24
 8007888:	2200      	movs	r2, #0
 800788a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800788c:	4b1f      	ldr	r3, [pc, #124]	; (800790c <USBD_CDC_DeInit+0x100>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	f003 020f 	and.w	r2, r3, #15
 8007894:	6879      	ldr	r1, [r7, #4]
 8007896:	4613      	mov	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	440b      	add	r3, r1
 80078a0:	3326      	adds	r3, #38	; 0x26
 80078a2:	2200      	movs	r2, #0
 80078a4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	32b0      	adds	r2, #176	; 0xb0
 80078b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d01f      	beq.n	80078f8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	33b0      	adds	r3, #176	; 0xb0
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	32b0      	adds	r2, #176	; 0xb0
 80078d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078da:	4618      	mov	r0, r3
 80078dc:	f002 fc6a 	bl	800a1b4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	32b0      	adds	r2, #176	; 0xb0
 80078ea:	2100      	movs	r1, #0
 80078ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	24000097 	.word	0x24000097
 8007908:	24000098 	.word	0x24000098
 800790c:	24000099 	.word	0x24000099

08007910 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	32b0      	adds	r2, #176	; 0xb0
 8007924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007928:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800792a:	2300      	movs	r3, #0
 800792c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800793c:	2303      	movs	r3, #3
 800793e:	e0bf      	b.n	8007ac0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007948:	2b00      	cmp	r3, #0
 800794a:	d050      	beq.n	80079ee <USBD_CDC_Setup+0xde>
 800794c:	2b20      	cmp	r3, #32
 800794e:	f040 80af 	bne.w	8007ab0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	88db      	ldrh	r3, [r3, #6]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d03a      	beq.n	80079d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	b25b      	sxtb	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	da1b      	bge.n	800799c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	33b0      	adds	r3, #176	; 0xb0
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800797a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	88d2      	ldrh	r2, [r2, #6]
 8007980:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	88db      	ldrh	r3, [r3, #6]
 8007986:	2b07      	cmp	r3, #7
 8007988:	bf28      	it	cs
 800798a:	2307      	movcs	r3, #7
 800798c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	89fa      	ldrh	r2, [r7, #14]
 8007992:	4619      	mov	r1, r3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f001 fdcf 	bl	8009538 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800799a:	e090      	b.n	8007abe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	785a      	ldrb	r2, [r3, #1]
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	88db      	ldrh	r3, [r3, #6]
 80079aa:	2b3f      	cmp	r3, #63	; 0x3f
 80079ac:	d803      	bhi.n	80079b6 <USBD_CDC_Setup+0xa6>
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	88db      	ldrh	r3, [r3, #6]
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	e000      	b.n	80079b8 <USBD_CDC_Setup+0xa8>
 80079b6:	2240      	movs	r2, #64	; 0x40
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80079be:	6939      	ldr	r1, [r7, #16]
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80079c6:	461a      	mov	r2, r3
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f001 fde1 	bl	8009590 <USBD_CtlPrepareRx>
      break;
 80079ce:	e076      	b.n	8007abe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	33b0      	adds	r3, #176	; 0xb0
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	7850      	ldrb	r0, [r2, #1]
 80079e6:	2200      	movs	r2, #0
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	4798      	blx	r3
      break;
 80079ec:	e067      	b.n	8007abe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	785b      	ldrb	r3, [r3, #1]
 80079f2:	2b0b      	cmp	r3, #11
 80079f4:	d851      	bhi.n	8007a9a <USBD_CDC_Setup+0x18a>
 80079f6:	a201      	add	r2, pc, #4	; (adr r2, 80079fc <USBD_CDC_Setup+0xec>)
 80079f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fc:	08007a2d 	.word	0x08007a2d
 8007a00:	08007aa9 	.word	0x08007aa9
 8007a04:	08007a9b 	.word	0x08007a9b
 8007a08:	08007a9b 	.word	0x08007a9b
 8007a0c:	08007a9b 	.word	0x08007a9b
 8007a10:	08007a9b 	.word	0x08007a9b
 8007a14:	08007a9b 	.word	0x08007a9b
 8007a18:	08007a9b 	.word	0x08007a9b
 8007a1c:	08007a9b 	.word	0x08007a9b
 8007a20:	08007a9b 	.word	0x08007a9b
 8007a24:	08007a57 	.word	0x08007a57
 8007a28:	08007a81 	.word	0x08007a81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b03      	cmp	r3, #3
 8007a36:	d107      	bne.n	8007a48 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007a38:	f107 030a 	add.w	r3, r7, #10
 8007a3c:	2202      	movs	r2, #2
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 fd79 	bl	8009538 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a46:	e032      	b.n	8007aae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f001 fd03 	bl	8009456 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a50:	2303      	movs	r3, #3
 8007a52:	75fb      	strb	r3, [r7, #23]
          break;
 8007a54:	e02b      	b.n	8007aae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	d107      	bne.n	8007a72 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a62:	f107 030d 	add.w	r3, r7, #13
 8007a66:	2201      	movs	r2, #1
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f001 fd64 	bl	8009538 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a70:	e01d      	b.n	8007aae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f001 fcee 	bl	8009456 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	75fb      	strb	r3, [r7, #23]
          break;
 8007a7e:	e016      	b.n	8007aae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d00f      	beq.n	8007aac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007a8c:	6839      	ldr	r1, [r7, #0]
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f001 fce1 	bl	8009456 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a94:	2303      	movs	r3, #3
 8007a96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007a98:	e008      	b.n	8007aac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 fcda 	bl	8009456 <USBD_CtlError>
          ret = USBD_FAIL;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	75fb      	strb	r3, [r7, #23]
          break;
 8007aa6:	e002      	b.n	8007aae <USBD_CDC_Setup+0x19e>
          break;
 8007aa8:	bf00      	nop
 8007aaa:	e008      	b.n	8007abe <USBD_CDC_Setup+0x1ae>
          break;
 8007aac:	bf00      	nop
      }
      break;
 8007aae:	e006      	b.n	8007abe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f001 fccf 	bl	8009456 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	75fb      	strb	r3, [r7, #23]
      break;
 8007abc:	bf00      	nop
  }

  return (uint8_t)ret;
 8007abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ada:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	32b0      	adds	r2, #176	; 0xb0
 8007ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d101      	bne.n	8007af2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e065      	b.n	8007bbe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	32b0      	adds	r2, #176	; 0xb0
 8007afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007b02:	78fb      	ldrb	r3, [r7, #3]
 8007b04:	f003 020f 	and.w	r2, r3, #15
 8007b08:	6879      	ldr	r1, [r7, #4]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	440b      	add	r3, r1
 8007b14:	3318      	adds	r3, #24
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d02f      	beq.n	8007b7c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007b1c:	78fb      	ldrb	r3, [r7, #3]
 8007b1e:	f003 020f 	and.w	r2, r3, #15
 8007b22:	6879      	ldr	r1, [r7, #4]
 8007b24:	4613      	mov	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4413      	add	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	440b      	add	r3, r1
 8007b2e:	3318      	adds	r3, #24
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	78fb      	ldrb	r3, [r7, #3]
 8007b34:	f003 010f 	and.w	r1, r3, #15
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	00db      	lsls	r3, r3, #3
 8007b3e:	440b      	add	r3, r1
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4403      	add	r3, r0
 8007b44:	3344      	adds	r3, #68	; 0x44
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b4c:	fb01 f303 	mul.w	r3, r1, r3
 8007b50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d112      	bne.n	8007b7c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007b56:	78fb      	ldrb	r3, [r7, #3]
 8007b58:	f003 020f 	and.w	r2, r3, #15
 8007b5c:	6879      	ldr	r1, [r7, #4]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	440b      	add	r3, r1
 8007b68:	3318      	adds	r3, #24
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b6e:	78f9      	ldrb	r1, [r7, #3]
 8007b70:	2300      	movs	r3, #0
 8007b72:	2200      	movs	r2, #0
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f002 faba 	bl	800a0ee <USBD_LL_Transmit>
 8007b7a:	e01f      	b.n	8007bbc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	33b0      	adds	r3, #176	; 0xb0
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d010      	beq.n	8007bbc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	33b0      	adds	r3, #176	; 0xb0
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007bb8:	78fa      	ldrb	r2, [r7, #3]
 8007bba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	460b      	mov	r3, r1
 8007bd0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	32b0      	adds	r2, #176	; 0xb0
 8007bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	32b0      	adds	r2, #176	; 0xb0
 8007bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e01a      	b.n	8007c2e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007bf8:	78fb      	ldrb	r3, [r7, #3]
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f002 fab8 	bl	800a172 <USBD_LL_GetRxDataSize>
 8007c02:	4602      	mov	r2, r0
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	33b0      	adds	r3, #176	; 0xb0
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c28:	4611      	mov	r1, r2
 8007c2a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b084      	sub	sp, #16
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	32b0      	adds	r2, #176	; 0xb0
 8007c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e025      	b.n	8007ca4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	33b0      	adds	r3, #176	; 0xb0
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d01a      	beq.n	8007ca2 <USBD_CDC_EP0_RxReady+0x6c>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c72:	2bff      	cmp	r3, #255	; 0xff
 8007c74:	d015      	beq.n	8007ca2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	33b0      	adds	r3, #176	; 0xb0
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007c8e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007c96:	b292      	uxth	r2, r2
 8007c98:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	22ff      	movs	r2, #255	; 0xff
 8007c9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007cb4:	2182      	movs	r1, #130	; 0x82
 8007cb6:	4818      	ldr	r0, [pc, #96]	; (8007d18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007cb8:	f000 fd6b 	bl	8008792 <USBD_GetEpDesc>
 8007cbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	4815      	ldr	r0, [pc, #84]	; (8007d18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007cc2:	f000 fd66 	bl	8008792 <USBD_GetEpDesc>
 8007cc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007cc8:	2181      	movs	r1, #129	; 0x81
 8007cca:	4813      	ldr	r0, [pc, #76]	; (8007d18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ccc:	f000 fd61 	bl	8008792 <USBD_GetEpDesc>
 8007cd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d002      	beq.n	8007cde <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	2210      	movs	r2, #16
 8007cdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d006      	beq.n	8007cf2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cec:	711a      	strb	r2, [r3, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d006      	beq.n	8007d06 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d00:	711a      	strb	r2, [r3, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2243      	movs	r2, #67	; 0x43
 8007d0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d0c:	4b02      	ldr	r3, [pc, #8]	; (8007d18 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3718      	adds	r7, #24
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	24000054 	.word	0x24000054

08007d1c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d24:	2182      	movs	r1, #130	; 0x82
 8007d26:	4818      	ldr	r0, [pc, #96]	; (8007d88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d28:	f000 fd33 	bl	8008792 <USBD_GetEpDesc>
 8007d2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d2e:	2101      	movs	r1, #1
 8007d30:	4815      	ldr	r0, [pc, #84]	; (8007d88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d32:	f000 fd2e 	bl	8008792 <USBD_GetEpDesc>
 8007d36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d38:	2181      	movs	r1, #129	; 0x81
 8007d3a:	4813      	ldr	r0, [pc, #76]	; (8007d88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d3c:	f000 fd29 	bl	8008792 <USBD_GetEpDesc>
 8007d40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d002      	beq.n	8007d4e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	2210      	movs	r2, #16
 8007d4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d006      	beq.n	8007d62 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	2200      	movs	r2, #0
 8007d58:	711a      	strb	r2, [r3, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f042 0202 	orr.w	r2, r2, #2
 8007d60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d006      	beq.n	8007d76 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	711a      	strb	r2, [r3, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f042 0202 	orr.w	r2, r2, #2
 8007d74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2243      	movs	r2, #67	; 0x43
 8007d7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d7c:	4b02      	ldr	r3, [pc, #8]	; (8007d88 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3718      	adds	r7, #24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	24000054 	.word	0x24000054

08007d8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d94:	2182      	movs	r1, #130	; 0x82
 8007d96:	4818      	ldr	r0, [pc, #96]	; (8007df8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d98:	f000 fcfb 	bl	8008792 <USBD_GetEpDesc>
 8007d9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d9e:	2101      	movs	r1, #1
 8007da0:	4815      	ldr	r0, [pc, #84]	; (8007df8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007da2:	f000 fcf6 	bl	8008792 <USBD_GetEpDesc>
 8007da6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007da8:	2181      	movs	r1, #129	; 0x81
 8007daa:	4813      	ldr	r0, [pc, #76]	; (8007df8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007dac:	f000 fcf1 	bl	8008792 <USBD_GetEpDesc>
 8007db0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d002      	beq.n	8007dbe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	2210      	movs	r2, #16
 8007dbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d006      	beq.n	8007dd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dcc:	711a      	strb	r2, [r3, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d006      	beq.n	8007de6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007de0:	711a      	strb	r2, [r3, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2243      	movs	r2, #67	; 0x43
 8007dea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007dec:	4b02      	ldr	r3, [pc, #8]	; (8007df8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	24000054 	.word	0x24000054

08007dfc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	220a      	movs	r2, #10
 8007e08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007e0a:	4b03      	ldr	r3, [pc, #12]	; (8007e18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	24000010 	.word	0x24000010

08007e1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d101      	bne.n	8007e30 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e009      	b.n	8007e44 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	33b0      	adds	r3, #176	; 0xb0
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	4413      	add	r3, r2
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b087      	sub	sp, #28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	32b0      	adds	r2, #176	; 0xb0
 8007e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e008      	b.n	8007e88 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	371c      	adds	r7, #28
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	32b0      	adds	r2, #176	; 0xb0
 8007ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e004      	b.n	8007ec2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3714      	adds	r7, #20
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
	...

08007ed0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	32b0      	adds	r2, #176	; 0xb0
 8007ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e025      	b.n	8007f42 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d11f      	bne.n	8007f40 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007f08:	4b10      	ldr	r3, [pc, #64]	; (8007f4c <USBD_CDC_TransmitPacket+0x7c>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	f003 020f 	and.w	r2, r3, #15
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4403      	add	r3, r0
 8007f22:	3318      	adds	r3, #24
 8007f24:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007f26:	4b09      	ldr	r3, [pc, #36]	; (8007f4c <USBD_CDC_TransmitPacket+0x7c>)
 8007f28:	7819      	ldrb	r1, [r3, #0]
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f002 f8d9 	bl	800a0ee <USBD_LL_Transmit>

    ret = USBD_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	24000097 	.word	0x24000097

08007f50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	32b0      	adds	r2, #176	; 0xb0
 8007f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f66:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	32b0      	adds	r2, #176	; 0xb0
 8007f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e018      	b.n	8007fb0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	7c1b      	ldrb	r3, [r3, #16]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10a      	bne.n	8007f9c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f86:	4b0c      	ldr	r3, [pc, #48]	; (8007fb8 <USBD_CDC_ReceivePacket+0x68>)
 8007f88:	7819      	ldrb	r1, [r3, #0]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f002 f8cb 	bl	800a130 <USBD_LL_PrepareReceive>
 8007f9a:	e008      	b.n	8007fae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f9c:	4b06      	ldr	r3, [pc, #24]	; (8007fb8 <USBD_CDC_ReceivePacket+0x68>)
 8007f9e:	7819      	ldrb	r1, [r3, #0]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fa6:	2340      	movs	r3, #64	; 0x40
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f002 f8c1 	bl	800a130 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	24000098 	.word	0x24000098

08007fbc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10a      	bne.n	8007fe6 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8007fd0:	4817      	ldr	r0, [pc, #92]	; (8008030 <USBD_Init+0x74>)
 8007fd2:	f002 f9e7 	bl	800a3a4 <iprintf>
 8007fd6:	4817      	ldr	r0, [pc, #92]	; (8008034 <USBD_Init+0x78>)
 8007fd8:	f002 f9e4 	bl	800a3a4 <iprintf>
 8007fdc:	200a      	movs	r0, #10
 8007fde:	f002 f9f3 	bl	800a3c8 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e01f      	b.n	8008026 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d003      	beq.n	800800c <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	79fa      	ldrb	r2, [r7, #7]
 8008018:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f001 ff2c 	bl	8009e78 <USBD_LL_Init>
 8008020:	4603      	mov	r3, r0
 8008022:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008024:	7dfb      	ldrb	r3, [r7, #23]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3718      	adds	r7, #24
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	0800b318 	.word	0x0800b318
 8008034:	0800b320 	.word	0x0800b320

08008038 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008042:	2300      	movs	r3, #0
 8008044:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10a      	bne.n	8008062 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800804c:	481a      	ldr	r0, [pc, #104]	; (80080b8 <USBD_RegisterClass+0x80>)
 800804e:	f002 f9a9 	bl	800a3a4 <iprintf>
 8008052:	481a      	ldr	r0, [pc, #104]	; (80080bc <USBD_RegisterClass+0x84>)
 8008054:	f002 f9a6 	bl	800a3a4 <iprintf>
 8008058:	200a      	movs	r0, #10
 800805a:	f002 f9b5 	bl	800a3c8 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800805e:	2303      	movs	r3, #3
 8008060:	e025      	b.n	80080ae <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	683a      	ldr	r2, [r7, #0]
 8008066:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	32ae      	adds	r2, #174	; 0xae
 8008074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00f      	beq.n	800809e <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	32ae      	adds	r2, #174	; 0xae
 8008088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800808c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808e:	f107 020e 	add.w	r2, r7, #14
 8008092:	4610      	mov	r0, r2
 8008094:	4798      	blx	r3
 8008096:	4602      	mov	r2, r0
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80080a4:	1c5a      	adds	r2, r3, #1
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	0800b318 	.word	0x0800b318
 80080bc:	0800b338 	.word	0x0800b338

080080c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f001 ff27 	bl	8009f1c <USBD_LL_Start>
 80080ce:	4603      	mov	r3, r0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080e0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	460b      	mov	r3, r1
 80080f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008104:	2b00      	cmp	r3, #0
 8008106:	d009      	beq.n	800811c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	78fa      	ldrb	r2, [r7, #3]
 8008112:	4611      	mov	r1, r2
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	4798      	blx	r3
 8008118:	4603      	mov	r3, r0
 800811a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800811c:	7bfb      	ldrb	r3, [r7, #15]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b084      	sub	sp, #16
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	460b      	mov	r3, r1
 8008130:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	78fa      	ldrb	r2, [r7, #3]
 8008140:	4611      	mov	r1, r2
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	4798      	blx	r3
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d001      	beq.n	8008150 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800814c:	2303      	movs	r3, #3
 800814e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008150:	7bfb      	ldrb	r3, [r7, #15]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b084      	sub	sp, #16
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	4618      	mov	r0, r3
 800816e:	f001 f938 	bl	80093e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008180:	461a      	mov	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800818e:	f003 031f 	and.w	r3, r3, #31
 8008192:	2b02      	cmp	r3, #2
 8008194:	d01a      	beq.n	80081cc <USBD_LL_SetupStage+0x72>
 8008196:	2b02      	cmp	r3, #2
 8008198:	d822      	bhi.n	80081e0 <USBD_LL_SetupStage+0x86>
 800819a:	2b00      	cmp	r3, #0
 800819c:	d002      	beq.n	80081a4 <USBD_LL_SetupStage+0x4a>
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d00a      	beq.n	80081b8 <USBD_LL_SetupStage+0x5e>
 80081a2:	e01d      	b.n	80081e0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fb65 	bl	800887c <USBD_StdDevReq>
 80081b2:	4603      	mov	r3, r0
 80081b4:	73fb      	strb	r3, [r7, #15]
      break;
 80081b6:	e020      	b.n	80081fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fbcd 	bl	8008960 <USBD_StdItfReq>
 80081c6:	4603      	mov	r3, r0
 80081c8:	73fb      	strb	r3, [r7, #15]
      break;
 80081ca:	e016      	b.n	80081fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fc2f 	bl	8008a38 <USBD_StdEPReq>
 80081da:	4603      	mov	r3, r0
 80081dc:	73fb      	strb	r3, [r7, #15]
      break;
 80081de:	e00c      	b.n	80081fa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80081e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f001 fef4 	bl	8009fdc <USBD_LL_StallEP>
 80081f4:	4603      	mov	r3, r0
 80081f6:	73fb      	strb	r3, [r7, #15]
      break;
 80081f8:	bf00      	nop
  }

  return ret;
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	460b      	mov	r3, r1
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008216:	7afb      	ldrb	r3, [r7, #11]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d16e      	bne.n	80082fa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008222:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800822a:	2b03      	cmp	r3, #3
 800822c:	f040 8098 	bne.w	8008360 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	689a      	ldr	r2, [r3, #8]
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	429a      	cmp	r2, r3
 800823a:	d913      	bls.n	8008264 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	1ad2      	subs	r2, r2, r3
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	68da      	ldr	r2, [r3, #12]
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	4293      	cmp	r3, r2
 8008254:	bf28      	it	cs
 8008256:	4613      	movcs	r3, r2
 8008258:	461a      	mov	r2, r3
 800825a:	6879      	ldr	r1, [r7, #4]
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f001 f9b4 	bl	80095ca <USBD_CtlContinueRx>
 8008262:	e07d      	b.n	8008360 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800826a:	f003 031f 	and.w	r3, r3, #31
 800826e:	2b02      	cmp	r3, #2
 8008270:	d014      	beq.n	800829c <USBD_LL_DataOutStage+0x98>
 8008272:	2b02      	cmp	r3, #2
 8008274:	d81d      	bhi.n	80082b2 <USBD_LL_DataOutStage+0xae>
 8008276:	2b00      	cmp	r3, #0
 8008278:	d002      	beq.n	8008280 <USBD_LL_DataOutStage+0x7c>
 800827a:	2b01      	cmp	r3, #1
 800827c:	d003      	beq.n	8008286 <USBD_LL_DataOutStage+0x82>
 800827e:	e018      	b.n	80082b2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008280:	2300      	movs	r3, #0
 8008282:	75bb      	strb	r3, [r7, #22]
            break;
 8008284:	e018      	b.n	80082b8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800828c:	b2db      	uxtb	r3, r3
 800828e:	4619      	mov	r1, r3
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f000 fa64 	bl	800875e <USBD_CoreFindIF>
 8008296:	4603      	mov	r3, r0
 8008298:	75bb      	strb	r3, [r7, #22]
            break;
 800829a:	e00d      	b.n	80082b8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	4619      	mov	r1, r3
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 fa66 	bl	8008778 <USBD_CoreFindEP>
 80082ac:	4603      	mov	r3, r0
 80082ae:	75bb      	strb	r3, [r7, #22]
            break;
 80082b0:	e002      	b.n	80082b8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	75bb      	strb	r3, [r7, #22]
            break;
 80082b6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80082b8:	7dbb      	ldrb	r3, [r7, #22]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d119      	bne.n	80082f2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d113      	bne.n	80082f2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80082ca:	7dba      	ldrb	r2, [r7, #22]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	32ae      	adds	r2, #174	; 0xae
 80082d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00b      	beq.n	80082f2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80082da:	7dba      	ldrb	r2, [r7, #22]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80082e2:	7dba      	ldrb	r2, [r7, #22]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	32ae      	adds	r2, #174	; 0xae
 80082e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f001 f97a 	bl	80095ec <USBD_CtlSendStatus>
 80082f8:	e032      	b.n	8008360 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80082fa:	7afb      	ldrb	r3, [r7, #11]
 80082fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008300:	b2db      	uxtb	r3, r3
 8008302:	4619      	mov	r1, r3
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f000 fa37 	bl	8008778 <USBD_CoreFindEP>
 800830a:	4603      	mov	r3, r0
 800830c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800830e:	7dbb      	ldrb	r3, [r7, #22]
 8008310:	2bff      	cmp	r3, #255	; 0xff
 8008312:	d025      	beq.n	8008360 <USBD_LL_DataOutStage+0x15c>
 8008314:	7dbb      	ldrb	r3, [r7, #22]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d122      	bne.n	8008360 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b03      	cmp	r3, #3
 8008324:	d117      	bne.n	8008356 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008326:	7dba      	ldrb	r2, [r7, #22]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	32ae      	adds	r2, #174	; 0xae
 800832c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00f      	beq.n	8008356 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008336:	7dba      	ldrb	r2, [r7, #22]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800833e:	7dba      	ldrb	r2, [r7, #22]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	32ae      	adds	r2, #174	; 0xae
 8008344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	7afa      	ldrb	r2, [r7, #11]
 800834c:	4611      	mov	r1, r2
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	4798      	blx	r3
 8008352:	4603      	mov	r3, r0
 8008354:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008356:	7dfb      	ldrb	r3, [r7, #23]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800835c:	7dfb      	ldrb	r3, [r7, #23]
 800835e:	e000      	b.n	8008362 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b086      	sub	sp, #24
 800836e:	af00      	add	r7, sp, #0
 8008370:	60f8      	str	r0, [r7, #12]
 8008372:	460b      	mov	r3, r1
 8008374:	607a      	str	r2, [r7, #4]
 8008376:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008378:	7afb      	ldrb	r3, [r7, #11]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d16f      	bne.n	800845e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3314      	adds	r3, #20
 8008382:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800838a:	2b02      	cmp	r3, #2
 800838c:	d15a      	bne.n	8008444 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	689a      	ldr	r2, [r3, #8]
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	429a      	cmp	r2, r3
 8008398:	d914      	bls.n	80083c4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	689a      	ldr	r2, [r3, #8]
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	1ad2      	subs	r2, r2, r3
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	461a      	mov	r2, r3
 80083ae:	6879      	ldr	r1, [r7, #4]
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f001 f8dc 	bl	800956e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083b6:	2300      	movs	r3, #0
 80083b8:	2200      	movs	r2, #0
 80083ba:	2100      	movs	r1, #0
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f001 feb7 	bl	800a130 <USBD_LL_PrepareReceive>
 80083c2:	e03f      	b.n	8008444 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	68da      	ldr	r2, [r3, #12]
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d11c      	bne.n	800840a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80083d8:	429a      	cmp	r2, r3
 80083da:	d316      	bcc.n	800840a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d20f      	bcs.n	800840a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80083ea:	2200      	movs	r2, #0
 80083ec:	2100      	movs	r1, #0
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f001 f8bd 	bl	800956e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083fc:	2300      	movs	r3, #0
 80083fe:	2200      	movs	r2, #0
 8008400:	2100      	movs	r1, #0
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f001 fe94 	bl	800a130 <USBD_LL_PrepareReceive>
 8008408:	e01c      	b.n	8008444 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b03      	cmp	r3, #3
 8008414:	d10f      	bne.n	8008436 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d009      	beq.n	8008436 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008436:	2180      	movs	r1, #128	; 0x80
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f001 fdcf 	bl	8009fdc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f001 f8e7 	bl	8009612 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d03a      	beq.n	80084c4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f7ff fe42 	bl	80080d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800845c:	e032      	b.n	80084c4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800845e:	7afb      	ldrb	r3, [r7, #11]
 8008460:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008464:	b2db      	uxtb	r3, r3
 8008466:	4619      	mov	r1, r3
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f000 f985 	bl	8008778 <USBD_CoreFindEP>
 800846e:	4603      	mov	r3, r0
 8008470:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008472:	7dfb      	ldrb	r3, [r7, #23]
 8008474:	2bff      	cmp	r3, #255	; 0xff
 8008476:	d025      	beq.n	80084c4 <USBD_LL_DataInStage+0x15a>
 8008478:	7dfb      	ldrb	r3, [r7, #23]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d122      	bne.n	80084c4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b03      	cmp	r3, #3
 8008488:	d11c      	bne.n	80084c4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800848a:	7dfa      	ldrb	r2, [r7, #23]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	32ae      	adds	r2, #174	; 0xae
 8008490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d014      	beq.n	80084c4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800849a:	7dfa      	ldrb	r2, [r7, #23]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80084a2:	7dfa      	ldrb	r2, [r7, #23]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	32ae      	adds	r2, #174	; 0xae
 80084a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	7afa      	ldrb	r2, [r7, #11]
 80084b0:	4611      	mov	r1, r2
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	4798      	blx	r3
 80084b6:	4603      	mov	r3, r0
 80084b8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80084ba:	7dbb      	ldrb	r3, [r7, #22]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80084c0:	7dbb      	ldrb	r3, [r7, #22]
 80084c2:	e000      	b.n	80084c6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3718      	adds	r7, #24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b084      	sub	sp, #16
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008506:	2b00      	cmp	r3, #0
 8008508:	d014      	beq.n	8008534 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00e      	beq.n	8008534 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	6852      	ldr	r2, [r2, #4]
 8008522:	b2d2      	uxtb	r2, r2
 8008524:	4611      	mov	r1, r2
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	4798      	blx	r3
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d001      	beq.n	8008534 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008530:	2303      	movs	r3, #3
 8008532:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008534:	2340      	movs	r3, #64	; 0x40
 8008536:	2200      	movs	r2, #0
 8008538:	2100      	movs	r1, #0
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f001 fd09 	bl	8009f52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2240      	movs	r2, #64	; 0x40
 800854c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008550:	2340      	movs	r3, #64	; 0x40
 8008552:	2200      	movs	r2, #0
 8008554:	2180      	movs	r1, #128	; 0x80
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f001 fcfb 	bl	8009f52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2240      	movs	r2, #64	; 0x40
 8008566:	621a      	str	r2, [r3, #32]

  return ret;
 8008568:	7bfb      	ldrb	r3, [r7, #15]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008572:	b480      	push	{r7}
 8008574:	b083      	sub	sp, #12
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	460b      	mov	r3, r1
 800857c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	78fa      	ldrb	r2, [r7, #3]
 8008582:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008592:	b480      	push	{r7}
 8008594:	b083      	sub	sp, #12
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	2b04      	cmp	r3, #4
 80085a4:	d006      	beq.n	80085b4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ac:	b2da      	uxtb	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2204      	movs	r2, #4
 80085b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d106      	bne.n	80085ec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b082      	sub	sp, #8
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b03      	cmp	r3, #3
 800860c:	d110      	bne.n	8008630 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00b      	beq.n	8008630 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d005      	beq.n	8008630 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800862a:	69db      	ldr	r3, [r3, #28]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b082      	sub	sp, #8
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	460b      	mov	r3, r1
 8008644:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	32ae      	adds	r2, #174	; 0xae
 8008650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d101      	bne.n	800865c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008658:	2303      	movs	r3, #3
 800865a:	e01c      	b.n	8008696 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b03      	cmp	r3, #3
 8008666:	d115      	bne.n	8008694 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	32ae      	adds	r2, #174	; 0xae
 8008672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008676:	6a1b      	ldr	r3, [r3, #32]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00b      	beq.n	8008694 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	32ae      	adds	r2, #174	; 0xae
 8008686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800868a:	6a1b      	ldr	r3, [r3, #32]
 800868c:	78fa      	ldrb	r2, [r7, #3]
 800868e:	4611      	mov	r1, r2
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b082      	sub	sp, #8
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	460b      	mov	r3, r1
 80086a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	32ae      	adds	r2, #174	; 0xae
 80086b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d101      	bne.n	80086c0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80086bc:	2303      	movs	r3, #3
 80086be:	e01c      	b.n	80086fa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	2b03      	cmp	r3, #3
 80086ca:	d115      	bne.n	80086f8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	32ae      	adds	r2, #174	; 0xae
 80086d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00b      	beq.n	80086f8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	32ae      	adds	r2, #174	; 0xae
 80086ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f0:	78fa      	ldrb	r2, [r7, #3]
 80086f2:	4611      	mov	r1, r2
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00e      	beq.n	8008754 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	6852      	ldr	r2, [r2, #4]
 8008742:	b2d2      	uxtb	r2, r2
 8008744:	4611      	mov	r1, r2
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	4798      	blx	r3
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d001      	beq.n	8008754 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008750:	2303      	movs	r3, #3
 8008752:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008754:	7bfb      	ldrb	r3, [r7, #15]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	460b      	mov	r3, r1
 8008768:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800876a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800876c:	4618      	mov	r0, r3
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	460b      	mov	r3, r1
 8008782:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008784:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008786:	4618      	mov	r0, r3
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b086      	sub	sp, #24
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	460b      	mov	r3, r1
 800879c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	885b      	ldrh	r3, [r3, #2]
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d920      	bls.n	80087fc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	b29b      	uxth	r3, r3
 80087c0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80087c2:	e013      	b.n	80087ec <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80087c4:	f107 030a 	add.w	r3, r7, #10
 80087c8:	4619      	mov	r1, r3
 80087ca:	6978      	ldr	r0, [r7, #20]
 80087cc:	f000 f81b 	bl	8008806 <USBD_GetNextDesc>
 80087d0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	785b      	ldrb	r3, [r3, #1]
 80087d6:	2b05      	cmp	r3, #5
 80087d8:	d108      	bne.n	80087ec <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	789b      	ldrb	r3, [r3, #2]
 80087e2:	78fa      	ldrb	r2, [r7, #3]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d008      	beq.n	80087fa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80087e8:	2300      	movs	r3, #0
 80087ea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	885b      	ldrh	r3, [r3, #2]
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	897b      	ldrh	r3, [r7, #10]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d8e5      	bhi.n	80087c4 <USBD_GetEpDesc+0x32>
 80087f8:	e000      	b.n	80087fc <USBD_GetEpDesc+0x6a>
          break;
 80087fa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80087fc:	693b      	ldr	r3, [r7, #16]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3718      	adds	r7, #24
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008806:	b480      	push	{r7}
 8008808:	b085      	sub	sp, #20
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	881a      	ldrh	r2, [r3, #0]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	b29b      	uxth	r3, r3
 800881e:	4413      	add	r3, r2
 8008820:	b29a      	uxth	r2, r3
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4413      	add	r3, r2
 8008830:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008832:	68fb      	ldr	r3, [r7, #12]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3714      	adds	r7, #20
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008840:	b480      	push	{r7}
 8008842:	b087      	sub	sp, #28
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	3301      	adds	r3, #1
 8008856:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800885e:	8a3b      	ldrh	r3, [r7, #16]
 8008860:	021b      	lsls	r3, r3, #8
 8008862:	b21a      	sxth	r2, r3
 8008864:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008868:	4313      	orrs	r3, r2
 800886a:	b21b      	sxth	r3, r3
 800886c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800886e:	89fb      	ldrh	r3, [r7, #14]
}
 8008870:	4618      	mov	r0, r3
 8008872:	371c      	adds	r7, #28
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008892:	2b40      	cmp	r3, #64	; 0x40
 8008894:	d005      	beq.n	80088a2 <USBD_StdDevReq+0x26>
 8008896:	2b40      	cmp	r3, #64	; 0x40
 8008898:	d857      	bhi.n	800894a <USBD_StdDevReq+0xce>
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00f      	beq.n	80088be <USBD_StdDevReq+0x42>
 800889e:	2b20      	cmp	r3, #32
 80088a0:	d153      	bne.n	800894a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	32ae      	adds	r2, #174	; 0xae
 80088ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	6839      	ldr	r1, [r7, #0]
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	4798      	blx	r3
 80088b8:	4603      	mov	r3, r0
 80088ba:	73fb      	strb	r3, [r7, #15]
      break;
 80088bc:	e04a      	b.n	8008954 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	785b      	ldrb	r3, [r3, #1]
 80088c2:	2b09      	cmp	r3, #9
 80088c4:	d83b      	bhi.n	800893e <USBD_StdDevReq+0xc2>
 80088c6:	a201      	add	r2, pc, #4	; (adr r2, 80088cc <USBD_StdDevReq+0x50>)
 80088c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088cc:	08008921 	.word	0x08008921
 80088d0:	08008935 	.word	0x08008935
 80088d4:	0800893f 	.word	0x0800893f
 80088d8:	0800892b 	.word	0x0800892b
 80088dc:	0800893f 	.word	0x0800893f
 80088e0:	080088ff 	.word	0x080088ff
 80088e4:	080088f5 	.word	0x080088f5
 80088e8:	0800893f 	.word	0x0800893f
 80088ec:	08008917 	.word	0x08008917
 80088f0:	08008909 	.word	0x08008909
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fa3c 	bl	8008d74 <USBD_GetDescriptor>
          break;
 80088fc:	e024      	b.n	8008948 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fbcb 	bl	800909c <USBD_SetAddress>
          break;
 8008906:	e01f      	b.n	8008948 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fc0a 	bl	8009124 <USBD_SetConfig>
 8008910:	4603      	mov	r3, r0
 8008912:	73fb      	strb	r3, [r7, #15]
          break;
 8008914:	e018      	b.n	8008948 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008916:	6839      	ldr	r1, [r7, #0]
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fcad 	bl	8009278 <USBD_GetConfig>
          break;
 800891e:	e013      	b.n	8008948 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fcde 	bl	80092e4 <USBD_GetStatus>
          break;
 8008928:	e00e      	b.n	8008948 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800892a:	6839      	ldr	r1, [r7, #0]
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fd0d 	bl	800934c <USBD_SetFeature>
          break;
 8008932:	e009      	b.n	8008948 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008934:	6839      	ldr	r1, [r7, #0]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 fd31 	bl	800939e <USBD_ClrFeature>
          break;
 800893c:	e004      	b.n	8008948 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fd88 	bl	8009456 <USBD_CtlError>
          break;
 8008946:	bf00      	nop
      }
      break;
 8008948:	e004      	b.n	8008954 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fd82 	bl	8009456 <USBD_CtlError>
      break;
 8008952:	bf00      	nop
  }

  return ret;
 8008954:	7bfb      	ldrb	r3, [r7, #15]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop

08008960 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008976:	2b40      	cmp	r3, #64	; 0x40
 8008978:	d005      	beq.n	8008986 <USBD_StdItfReq+0x26>
 800897a:	2b40      	cmp	r3, #64	; 0x40
 800897c:	d852      	bhi.n	8008a24 <USBD_StdItfReq+0xc4>
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <USBD_StdItfReq+0x26>
 8008982:	2b20      	cmp	r3, #32
 8008984:	d14e      	bne.n	8008a24 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800898c:	b2db      	uxtb	r3, r3
 800898e:	3b01      	subs	r3, #1
 8008990:	2b02      	cmp	r3, #2
 8008992:	d840      	bhi.n	8008a16 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	889b      	ldrh	r3, [r3, #4]
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b01      	cmp	r3, #1
 800899c:	d836      	bhi.n	8008a0c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	889b      	ldrh	r3, [r3, #4]
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	4619      	mov	r1, r3
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7ff fed9 	bl	800875e <USBD_CoreFindIF>
 80089ac:	4603      	mov	r3, r0
 80089ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80089b0:	7bbb      	ldrb	r3, [r7, #14]
 80089b2:	2bff      	cmp	r3, #255	; 0xff
 80089b4:	d01d      	beq.n	80089f2 <USBD_StdItfReq+0x92>
 80089b6:	7bbb      	ldrb	r3, [r7, #14]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d11a      	bne.n	80089f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80089bc:	7bba      	ldrb	r2, [r7, #14]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	32ae      	adds	r2, #174	; 0xae
 80089c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00f      	beq.n	80089ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80089cc:	7bba      	ldrb	r2, [r7, #14]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80089d4:	7bba      	ldrb	r2, [r7, #14]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	32ae      	adds	r2, #174	; 0xae
 80089da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	6839      	ldr	r1, [r7, #0]
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	4798      	blx	r3
 80089e6:	4603      	mov	r3, r0
 80089e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80089ea:	e004      	b.n	80089f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80089ec:	2303      	movs	r3, #3
 80089ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80089f0:	e001      	b.n	80089f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80089f2:	2303      	movs	r3, #3
 80089f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	88db      	ldrh	r3, [r3, #6]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d110      	bne.n	8008a20 <USBD_StdItfReq+0xc0>
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10d      	bne.n	8008a20 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fdf1 	bl	80095ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a0a:	e009      	b.n	8008a20 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fd21 	bl	8009456 <USBD_CtlError>
          break;
 8008a14:	e004      	b.n	8008a20 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fd1c 	bl	8009456 <USBD_CtlError>
          break;
 8008a1e:	e000      	b.n	8008a22 <USBD_StdItfReq+0xc2>
          break;
 8008a20:	bf00      	nop
      }
      break;
 8008a22:	e004      	b.n	8008a2e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008a24:	6839      	ldr	r1, [r7, #0]
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fd15 	bl	8009456 <USBD_CtlError>
      break;
 8008a2c:	bf00      	nop
  }

  return ret;
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3710      	adds	r7, #16
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	889b      	ldrh	r3, [r3, #4]
 8008a4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a54:	2b40      	cmp	r3, #64	; 0x40
 8008a56:	d007      	beq.n	8008a68 <USBD_StdEPReq+0x30>
 8008a58:	2b40      	cmp	r3, #64	; 0x40
 8008a5a:	f200 817f 	bhi.w	8008d5c <USBD_StdEPReq+0x324>
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d02a      	beq.n	8008ab8 <USBD_StdEPReq+0x80>
 8008a62:	2b20      	cmp	r3, #32
 8008a64:	f040 817a 	bne.w	8008d5c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f7ff fe83 	bl	8008778 <USBD_CoreFindEP>
 8008a72:	4603      	mov	r3, r0
 8008a74:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a76:	7b7b      	ldrb	r3, [r7, #13]
 8008a78:	2bff      	cmp	r3, #255	; 0xff
 8008a7a:	f000 8174 	beq.w	8008d66 <USBD_StdEPReq+0x32e>
 8008a7e:	7b7b      	ldrb	r3, [r7, #13]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f040 8170 	bne.w	8008d66 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008a86:	7b7a      	ldrb	r2, [r7, #13]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008a8e:	7b7a      	ldrb	r2, [r7, #13]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	32ae      	adds	r2, #174	; 0xae
 8008a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f000 8163 	beq.w	8008d66 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008aa0:	7b7a      	ldrb	r2, [r7, #13]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	32ae      	adds	r2, #174	; 0xae
 8008aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	4798      	blx	r3
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008ab6:	e156      	b.n	8008d66 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	785b      	ldrb	r3, [r3, #1]
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d008      	beq.n	8008ad2 <USBD_StdEPReq+0x9a>
 8008ac0:	2b03      	cmp	r3, #3
 8008ac2:	f300 8145 	bgt.w	8008d50 <USBD_StdEPReq+0x318>
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f000 809b 	beq.w	8008c02 <USBD_StdEPReq+0x1ca>
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d03c      	beq.n	8008b4a <USBD_StdEPReq+0x112>
 8008ad0:	e13e      	b.n	8008d50 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d002      	beq.n	8008ae4 <USBD_StdEPReq+0xac>
 8008ade:	2b03      	cmp	r3, #3
 8008ae0:	d016      	beq.n	8008b10 <USBD_StdEPReq+0xd8>
 8008ae2:	e02c      	b.n	8008b3e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ae4:	7bbb      	ldrb	r3, [r7, #14]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00d      	beq.n	8008b06 <USBD_StdEPReq+0xce>
 8008aea:	7bbb      	ldrb	r3, [r7, #14]
 8008aec:	2b80      	cmp	r3, #128	; 0x80
 8008aee:	d00a      	beq.n	8008b06 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008af0:	7bbb      	ldrb	r3, [r7, #14]
 8008af2:	4619      	mov	r1, r3
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f001 fa71 	bl	8009fdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008afa:	2180      	movs	r1, #128	; 0x80
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f001 fa6d 	bl	8009fdc <USBD_LL_StallEP>
 8008b02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b04:	e020      	b.n	8008b48 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fca4 	bl	8009456 <USBD_CtlError>
              break;
 8008b0e:	e01b      	b.n	8008b48 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	885b      	ldrh	r3, [r3, #2]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10e      	bne.n	8008b36 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00b      	beq.n	8008b36 <USBD_StdEPReq+0xfe>
 8008b1e:	7bbb      	ldrb	r3, [r7, #14]
 8008b20:	2b80      	cmp	r3, #128	; 0x80
 8008b22:	d008      	beq.n	8008b36 <USBD_StdEPReq+0xfe>
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	88db      	ldrh	r3, [r3, #6]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d104      	bne.n	8008b36 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b2c:	7bbb      	ldrb	r3, [r7, #14]
 8008b2e:	4619      	mov	r1, r3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f001 fa53 	bl	8009fdc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 fd58 	bl	80095ec <USBD_CtlSendStatus>

              break;
 8008b3c:	e004      	b.n	8008b48 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008b3e:	6839      	ldr	r1, [r7, #0]
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fc88 	bl	8009456 <USBD_CtlError>
              break;
 8008b46:	bf00      	nop
          }
          break;
 8008b48:	e107      	b.n	8008d5a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d002      	beq.n	8008b5c <USBD_StdEPReq+0x124>
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d016      	beq.n	8008b88 <USBD_StdEPReq+0x150>
 8008b5a:	e04b      	b.n	8008bf4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b5c:	7bbb      	ldrb	r3, [r7, #14]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00d      	beq.n	8008b7e <USBD_StdEPReq+0x146>
 8008b62:	7bbb      	ldrb	r3, [r7, #14]
 8008b64:	2b80      	cmp	r3, #128	; 0x80
 8008b66:	d00a      	beq.n	8008b7e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b68:	7bbb      	ldrb	r3, [r7, #14]
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f001 fa35 	bl	8009fdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b72:	2180      	movs	r1, #128	; 0x80
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f001 fa31 	bl	8009fdc <USBD_LL_StallEP>
 8008b7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b7c:	e040      	b.n	8008c00 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fc68 	bl	8009456 <USBD_CtlError>
              break;
 8008b86:	e03b      	b.n	8008c00 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	885b      	ldrh	r3, [r3, #2]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d136      	bne.n	8008bfe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008b90:	7bbb      	ldrb	r3, [r7, #14]
 8008b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d004      	beq.n	8008ba4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b9a:	7bbb      	ldrb	r3, [r7, #14]
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f001 fa3b 	bl	800a01a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fd21 	bl	80095ec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008baa:	7bbb      	ldrb	r3, [r7, #14]
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f7ff fde2 	bl	8008778 <USBD_CoreFindEP>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bb8:	7b7b      	ldrb	r3, [r7, #13]
 8008bba:	2bff      	cmp	r3, #255	; 0xff
 8008bbc:	d01f      	beq.n	8008bfe <USBD_StdEPReq+0x1c6>
 8008bbe:	7b7b      	ldrb	r3, [r7, #13]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d11c      	bne.n	8008bfe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008bc4:	7b7a      	ldrb	r2, [r7, #13]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008bcc:	7b7a      	ldrb	r2, [r7, #13]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	32ae      	adds	r2, #174	; 0xae
 8008bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d010      	beq.n	8008bfe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008bdc:	7b7a      	ldrb	r2, [r7, #13]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	32ae      	adds	r2, #174	; 0xae
 8008be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	4798      	blx	r3
 8008bee:	4603      	mov	r3, r0
 8008bf0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008bf2:	e004      	b.n	8008bfe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008bf4:	6839      	ldr	r1, [r7, #0]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 fc2d 	bl	8009456 <USBD_CtlError>
              break;
 8008bfc:	e000      	b.n	8008c00 <USBD_StdEPReq+0x1c8>
              break;
 8008bfe:	bf00      	nop
          }
          break;
 8008c00:	e0ab      	b.n	8008d5a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d002      	beq.n	8008c14 <USBD_StdEPReq+0x1dc>
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	d032      	beq.n	8008c78 <USBD_StdEPReq+0x240>
 8008c12:	e097      	b.n	8008d44 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c14:	7bbb      	ldrb	r3, [r7, #14]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d007      	beq.n	8008c2a <USBD_StdEPReq+0x1f2>
 8008c1a:	7bbb      	ldrb	r3, [r7, #14]
 8008c1c:	2b80      	cmp	r3, #128	; 0x80
 8008c1e:	d004      	beq.n	8008c2a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fc17 	bl	8009456 <USBD_CtlError>
                break;
 8008c28:	e091      	b.n	8008d4e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	da0b      	bge.n	8008c4a <USBD_StdEPReq+0x212>
 8008c32:	7bbb      	ldrb	r3, [r7, #14]
 8008c34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c38:	4613      	mov	r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4413      	add	r3, r2
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	3310      	adds	r3, #16
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	4413      	add	r3, r2
 8008c46:	3304      	adds	r3, #4
 8008c48:	e00b      	b.n	8008c62 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c4a:	7bbb      	ldrb	r3, [r7, #14]
 8008c4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c50:	4613      	mov	r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	4413      	add	r3, r2
 8008c60:	3304      	adds	r3, #4
 8008c62:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	2200      	movs	r2, #0
 8008c68:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	2202      	movs	r2, #2
 8008c6e:	4619      	mov	r1, r3
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fc61 	bl	8009538 <USBD_CtlSendData>
              break;
 8008c76:	e06a      	b.n	8008d4e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	da11      	bge.n	8008ca4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	f003 020f 	and.w	r2, r3, #15
 8008c86:	6879      	ldr	r1, [r7, #4]
 8008c88:	4613      	mov	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4413      	add	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	440b      	add	r3, r1
 8008c92:	3324      	adds	r3, #36	; 0x24
 8008c94:	881b      	ldrh	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d117      	bne.n	8008cca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008c9a:	6839      	ldr	r1, [r7, #0]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fbda 	bl	8009456 <USBD_CtlError>
                  break;
 8008ca2:	e054      	b.n	8008d4e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008ca4:	7bbb      	ldrb	r3, [r7, #14]
 8008ca6:	f003 020f 	and.w	r2, r3, #15
 8008caa:	6879      	ldr	r1, [r7, #4]
 8008cac:	4613      	mov	r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4413      	add	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	440b      	add	r3, r1
 8008cb6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d104      	bne.n	8008cca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fbc7 	bl	8009456 <USBD_CtlError>
                  break;
 8008cc8:	e041      	b.n	8008d4e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	da0b      	bge.n	8008cea <USBD_StdEPReq+0x2b2>
 8008cd2:	7bbb      	ldrb	r3, [r7, #14]
 8008cd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cd8:	4613      	mov	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	3310      	adds	r3, #16
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	e00b      	b.n	8008d02 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cea:	7bbb      	ldrb	r3, [r7, #14]
 8008cec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	4413      	add	r3, r2
 8008d00:	3304      	adds	r3, #4
 8008d02:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d04:	7bbb      	ldrb	r3, [r7, #14]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d002      	beq.n	8008d10 <USBD_StdEPReq+0x2d8>
 8008d0a:	7bbb      	ldrb	r3, [r7, #14]
 8008d0c:	2b80      	cmp	r3, #128	; 0x80
 8008d0e:	d103      	bne.n	8008d18 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	2200      	movs	r2, #0
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	e00e      	b.n	8008d36 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008d18:	7bbb      	ldrb	r3, [r7, #14]
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f001 f99b 	bl	800a058 <USBD_LL_IsStallEP>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d003      	beq.n	8008d30 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	e002      	b.n	8008d36 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2202      	movs	r2, #2
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fbfb 	bl	8009538 <USBD_CtlSendData>
              break;
 8008d42:	e004      	b.n	8008d4e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fb85 	bl	8009456 <USBD_CtlError>
              break;
 8008d4c:	bf00      	nop
          }
          break;
 8008d4e:	e004      	b.n	8008d5a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 fb7f 	bl	8009456 <USBD_CtlError>
          break;
 8008d58:	bf00      	nop
      }
      break;
 8008d5a:	e005      	b.n	8008d68 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fb79 	bl	8009456 <USBD_CtlError>
      break;
 8008d64:	e000      	b.n	8008d68 <USBD_StdEPReq+0x330>
      break;
 8008d66:	bf00      	nop
  }

  return ret;
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
	...

08008d74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d82:	2300      	movs	r3, #0
 8008d84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d86:	2300      	movs	r3, #0
 8008d88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	885b      	ldrh	r3, [r3, #2]
 8008d8e:	0a1b      	lsrs	r3, r3, #8
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	3b01      	subs	r3, #1
 8008d94:	2b0e      	cmp	r3, #14
 8008d96:	f200 8152 	bhi.w	800903e <USBD_GetDescriptor+0x2ca>
 8008d9a:	a201      	add	r2, pc, #4	; (adr r2, 8008da0 <USBD_GetDescriptor+0x2c>)
 8008d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da0:	08008e11 	.word	0x08008e11
 8008da4:	08008e29 	.word	0x08008e29
 8008da8:	08008e69 	.word	0x08008e69
 8008dac:	0800903f 	.word	0x0800903f
 8008db0:	0800903f 	.word	0x0800903f
 8008db4:	08008fdf 	.word	0x08008fdf
 8008db8:	0800900b 	.word	0x0800900b
 8008dbc:	0800903f 	.word	0x0800903f
 8008dc0:	0800903f 	.word	0x0800903f
 8008dc4:	0800903f 	.word	0x0800903f
 8008dc8:	0800903f 	.word	0x0800903f
 8008dcc:	0800903f 	.word	0x0800903f
 8008dd0:	0800903f 	.word	0x0800903f
 8008dd4:	0800903f 	.word	0x0800903f
 8008dd8:	08008ddd 	.word	0x08008ddd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008de2:	69db      	ldr	r3, [r3, #28]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00b      	beq.n	8008e00 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dee:	69db      	ldr	r3, [r3, #28]
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	7c12      	ldrb	r2, [r2, #16]
 8008df4:	f107 0108 	add.w	r1, r7, #8
 8008df8:	4610      	mov	r0, r2
 8008dfa:	4798      	blx	r3
 8008dfc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dfe:	e126      	b.n	800904e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008e00:	6839      	ldr	r1, [r7, #0]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fb27 	bl	8009456 <USBD_CtlError>
        err++;
 8008e08:	7afb      	ldrb	r3, [r7, #11]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	72fb      	strb	r3, [r7, #11]
      break;
 8008e0e:	e11e      	b.n	800904e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	7c12      	ldrb	r2, [r2, #16]
 8008e1c:	f107 0108 	add.w	r1, r7, #8
 8008e20:	4610      	mov	r0, r2
 8008e22:	4798      	blx	r3
 8008e24:	60f8      	str	r0, [r7, #12]
      break;
 8008e26:	e112      	b.n	800904e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	7c1b      	ldrb	r3, [r3, #16]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10d      	bne.n	8008e4c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e38:	f107 0208 	add.w	r2, r7, #8
 8008e3c:	4610      	mov	r0, r2
 8008e3e:	4798      	blx	r3
 8008e40:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	3301      	adds	r3, #1
 8008e46:	2202      	movs	r2, #2
 8008e48:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e4a:	e100      	b.n	800904e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e54:	f107 0208 	add.w	r2, r7, #8
 8008e58:	4610      	mov	r0, r2
 8008e5a:	4798      	blx	r3
 8008e5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	3301      	adds	r3, #1
 8008e62:	2202      	movs	r2, #2
 8008e64:	701a      	strb	r2, [r3, #0]
      break;
 8008e66:	e0f2      	b.n	800904e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	885b      	ldrh	r3, [r3, #2]
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	2b05      	cmp	r3, #5
 8008e70:	f200 80ac 	bhi.w	8008fcc <USBD_GetDescriptor+0x258>
 8008e74:	a201      	add	r2, pc, #4	; (adr r2, 8008e7c <USBD_GetDescriptor+0x108>)
 8008e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7a:	bf00      	nop
 8008e7c:	08008e95 	.word	0x08008e95
 8008e80:	08008ec9 	.word	0x08008ec9
 8008e84:	08008efd 	.word	0x08008efd
 8008e88:	08008f31 	.word	0x08008f31
 8008e8c:	08008f65 	.word	0x08008f65
 8008e90:	08008f99 	.word	0x08008f99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00b      	beq.n	8008eb8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	7c12      	ldrb	r2, [r2, #16]
 8008eac:	f107 0108 	add.w	r1, r7, #8
 8008eb0:	4610      	mov	r0, r2
 8008eb2:	4798      	blx	r3
 8008eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eb6:	e091      	b.n	8008fdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 facb 	bl	8009456 <USBD_CtlError>
            err++;
 8008ec0:	7afb      	ldrb	r3, [r7, #11]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ec6:	e089      	b.n	8008fdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00b      	beq.n	8008eec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	7c12      	ldrb	r2, [r2, #16]
 8008ee0:	f107 0108 	add.w	r1, r7, #8
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	4798      	blx	r3
 8008ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eea:	e077      	b.n	8008fdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fab1 	bl	8009456 <USBD_CtlError>
            err++;
 8008ef4:	7afb      	ldrb	r3, [r7, #11]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8008efa:	e06f      	b.n	8008fdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00b      	beq.n	8008f20 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	7c12      	ldrb	r2, [r2, #16]
 8008f14:	f107 0108 	add.w	r1, r7, #8
 8008f18:	4610      	mov	r0, r2
 8008f1a:	4798      	blx	r3
 8008f1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f1e:	e05d      	b.n	8008fdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fa97 	bl	8009456 <USBD_CtlError>
            err++;
 8008f28:	7afb      	ldrb	r3, [r7, #11]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f2e:	e055      	b.n	8008fdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00b      	beq.n	8008f54 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	7c12      	ldrb	r2, [r2, #16]
 8008f48:	f107 0108 	add.w	r1, r7, #8
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	4798      	blx	r3
 8008f50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f52:	e043      	b.n	8008fdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fa7d 	bl	8009456 <USBD_CtlError>
            err++;
 8008f5c:	7afb      	ldrb	r3, [r7, #11]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	72fb      	strb	r3, [r7, #11]
          break;
 8008f62:	e03b      	b.n	8008fdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f6a:	695b      	ldr	r3, [r3, #20]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00b      	beq.n	8008f88 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f76:	695b      	ldr	r3, [r3, #20]
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	7c12      	ldrb	r2, [r2, #16]
 8008f7c:	f107 0108 	add.w	r1, r7, #8
 8008f80:	4610      	mov	r0, r2
 8008f82:	4798      	blx	r3
 8008f84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f86:	e029      	b.n	8008fdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fa63 	bl	8009456 <USBD_CtlError>
            err++;
 8008f90:	7afb      	ldrb	r3, [r7, #11]
 8008f92:	3301      	adds	r3, #1
 8008f94:	72fb      	strb	r3, [r7, #11]
          break;
 8008f96:	e021      	b.n	8008fdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00b      	beq.n	8008fbc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008faa:	699b      	ldr	r3, [r3, #24]
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	7c12      	ldrb	r2, [r2, #16]
 8008fb0:	f107 0108 	add.w	r1, r7, #8
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	4798      	blx	r3
 8008fb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fba:	e00f      	b.n	8008fdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fa49 	bl	8009456 <USBD_CtlError>
            err++;
 8008fc4:	7afb      	ldrb	r3, [r7, #11]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	72fb      	strb	r3, [r7, #11]
          break;
 8008fca:	e007      	b.n	8008fdc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008fcc:	6839      	ldr	r1, [r7, #0]
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fa41 	bl	8009456 <USBD_CtlError>
          err++;
 8008fd4:	7afb      	ldrb	r3, [r7, #11]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008fda:	bf00      	nop
      }
      break;
 8008fdc:	e037      	b.n	800904e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	7c1b      	ldrb	r3, [r3, #16]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d109      	bne.n	8008ffa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fee:	f107 0208 	add.w	r2, r7, #8
 8008ff2:	4610      	mov	r0, r2
 8008ff4:	4798      	blx	r3
 8008ff6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ff8:	e029      	b.n	800904e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 fa2a 	bl	8009456 <USBD_CtlError>
        err++;
 8009002:	7afb      	ldrb	r3, [r7, #11]
 8009004:	3301      	adds	r3, #1
 8009006:	72fb      	strb	r3, [r7, #11]
      break;
 8009008:	e021      	b.n	800904e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	7c1b      	ldrb	r3, [r3, #16]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10d      	bne.n	800902e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901a:	f107 0208 	add.w	r2, r7, #8
 800901e:	4610      	mov	r0, r2
 8009020:	4798      	blx	r3
 8009022:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	3301      	adds	r3, #1
 8009028:	2207      	movs	r2, #7
 800902a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800902c:	e00f      	b.n	800904e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fa10 	bl	8009456 <USBD_CtlError>
        err++;
 8009036:	7afb      	ldrb	r3, [r7, #11]
 8009038:	3301      	adds	r3, #1
 800903a:	72fb      	strb	r3, [r7, #11]
      break;
 800903c:	e007      	b.n	800904e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800903e:	6839      	ldr	r1, [r7, #0]
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 fa08 	bl	8009456 <USBD_CtlError>
      err++;
 8009046:	7afb      	ldrb	r3, [r7, #11]
 8009048:	3301      	adds	r3, #1
 800904a:	72fb      	strb	r3, [r7, #11]
      break;
 800904c:	bf00      	nop
  }

  if (err != 0U)
 800904e:	7afb      	ldrb	r3, [r7, #11]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d11e      	bne.n	8009092 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	88db      	ldrh	r3, [r3, #6]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d016      	beq.n	800908a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800905c:	893b      	ldrh	r3, [r7, #8]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00e      	beq.n	8009080 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	88da      	ldrh	r2, [r3, #6]
 8009066:	893b      	ldrh	r3, [r7, #8]
 8009068:	4293      	cmp	r3, r2
 800906a:	bf28      	it	cs
 800906c:	4613      	movcs	r3, r2
 800906e:	b29b      	uxth	r3, r3
 8009070:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009072:	893b      	ldrh	r3, [r7, #8]
 8009074:	461a      	mov	r2, r3
 8009076:	68f9      	ldr	r1, [r7, #12]
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fa5d 	bl	8009538 <USBD_CtlSendData>
 800907e:	e009      	b.n	8009094 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f9e7 	bl	8009456 <USBD_CtlError>
 8009088:	e004      	b.n	8009094 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 faae 	bl	80095ec <USBD_CtlSendStatus>
 8009090:	e000      	b.n	8009094 <USBD_GetDescriptor+0x320>
    return;
 8009092:	bf00      	nop
  }
}
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop

0800909c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	889b      	ldrh	r3, [r3, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d131      	bne.n	8009112 <USBD_SetAddress+0x76>
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	88db      	ldrh	r3, [r3, #6]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d12d      	bne.n	8009112 <USBD_SetAddress+0x76>
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	885b      	ldrh	r3, [r3, #2]
 80090ba:	2b7f      	cmp	r3, #127	; 0x7f
 80090bc:	d829      	bhi.n	8009112 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	885b      	ldrh	r3, [r3, #2]
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	d104      	bne.n	80090e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f9bc 	bl	8009456 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090de:	e01d      	b.n	800911c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	7bfa      	ldrb	r2, [r7, #15]
 80090e4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 ffdf 	bl	800a0b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fa7a 	bl	80095ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d004      	beq.n	8009108 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2202      	movs	r2, #2
 8009102:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009106:	e009      	b.n	800911c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009110:	e004      	b.n	800911c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 f99e 	bl	8009456 <USBD_CtlError>
  }
}
 800911a:	bf00      	nop
 800911c:	bf00      	nop
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	885b      	ldrh	r3, [r3, #2]
 8009136:	b2da      	uxtb	r2, r3
 8009138:	4b4e      	ldr	r3, [pc, #312]	; (8009274 <USBD_SetConfig+0x150>)
 800913a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800913c:	4b4d      	ldr	r3, [pc, #308]	; (8009274 <USBD_SetConfig+0x150>)
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d905      	bls.n	8009150 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f985 	bl	8009456 <USBD_CtlError>
    return USBD_FAIL;
 800914c:	2303      	movs	r3, #3
 800914e:	e08c      	b.n	800926a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b02      	cmp	r3, #2
 800915a:	d002      	beq.n	8009162 <USBD_SetConfig+0x3e>
 800915c:	2b03      	cmp	r3, #3
 800915e:	d029      	beq.n	80091b4 <USBD_SetConfig+0x90>
 8009160:	e075      	b.n	800924e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009162:	4b44      	ldr	r3, [pc, #272]	; (8009274 <USBD_SetConfig+0x150>)
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d020      	beq.n	80091ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800916a:	4b42      	ldr	r3, [pc, #264]	; (8009274 <USBD_SetConfig+0x150>)
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	461a      	mov	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009174:	4b3f      	ldr	r3, [pc, #252]	; (8009274 <USBD_SetConfig+0x150>)
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7fe ffb7 	bl	80080ee <USBD_SetClassConfig>
 8009180:	4603      	mov	r3, r0
 8009182:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d008      	beq.n	800919c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f962 	bl	8009456 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2202      	movs	r2, #2
 8009196:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800919a:	e065      	b.n	8009268 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fa25 	bl	80095ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2203      	movs	r2, #3
 80091a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80091aa:	e05d      	b.n	8009268 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fa1d 	bl	80095ec <USBD_CtlSendStatus>
      break;
 80091b2:	e059      	b.n	8009268 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80091b4:	4b2f      	ldr	r3, [pc, #188]	; (8009274 <USBD_SetConfig+0x150>)
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d112      	bne.n	80091e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2202      	movs	r2, #2
 80091c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80091c4:	4b2b      	ldr	r3, [pc, #172]	; (8009274 <USBD_SetConfig+0x150>)
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	461a      	mov	r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091ce:	4b29      	ldr	r3, [pc, #164]	; (8009274 <USBD_SetConfig+0x150>)
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	4619      	mov	r1, r3
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f7fe ffa6 	bl	8008126 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fa06 	bl	80095ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80091e0:	e042      	b.n	8009268 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80091e2:	4b24      	ldr	r3, [pc, #144]	; (8009274 <USBD_SetConfig+0x150>)
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	461a      	mov	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d02a      	beq.n	8009246 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f7fe ff94 	bl	8008126 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80091fe:	4b1d      	ldr	r3, [pc, #116]	; (8009274 <USBD_SetConfig+0x150>)
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009208:	4b1a      	ldr	r3, [pc, #104]	; (8009274 <USBD_SetConfig+0x150>)
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	4619      	mov	r1, r3
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f7fe ff6d 	bl	80080ee <USBD_SetClassConfig>
 8009214:	4603      	mov	r3, r0
 8009216:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009218:	7bfb      	ldrb	r3, [r7, #15]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00f      	beq.n	800923e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800921e:	6839      	ldr	r1, [r7, #0]
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f918 	bl	8009456 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	b2db      	uxtb	r3, r3
 800922c:	4619      	mov	r1, r3
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7fe ff79 	bl	8008126 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2202      	movs	r2, #2
 8009238:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800923c:	e014      	b.n	8009268 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f9d4 	bl	80095ec <USBD_CtlSendStatus>
      break;
 8009244:	e010      	b.n	8009268 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f9d0 	bl	80095ec <USBD_CtlSendStatus>
      break;
 800924c:	e00c      	b.n	8009268 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800924e:	6839      	ldr	r1, [r7, #0]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 f900 	bl	8009456 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009256:	4b07      	ldr	r3, [pc, #28]	; (8009274 <USBD_SetConfig+0x150>)
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	4619      	mov	r1, r3
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f7fe ff62 	bl	8008126 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009262:	2303      	movs	r3, #3
 8009264:	73fb      	strb	r3, [r7, #15]
      break;
 8009266:	bf00      	nop
  }

  return ret;
 8009268:	7bfb      	ldrb	r3, [r7, #15]
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	240009d8 	.word	0x240009d8

08009278 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	88db      	ldrh	r3, [r3, #6]
 8009286:	2b01      	cmp	r3, #1
 8009288:	d004      	beq.n	8009294 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 f8e2 	bl	8009456 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009292:	e023      	b.n	80092dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b02      	cmp	r3, #2
 800929e:	dc02      	bgt.n	80092a6 <USBD_GetConfig+0x2e>
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	dc03      	bgt.n	80092ac <USBD_GetConfig+0x34>
 80092a4:	e015      	b.n	80092d2 <USBD_GetConfig+0x5a>
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	d00b      	beq.n	80092c2 <USBD_GetConfig+0x4a>
 80092aa:	e012      	b.n	80092d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	3308      	adds	r3, #8
 80092b6:	2201      	movs	r2, #1
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f93c 	bl	8009538 <USBD_CtlSendData>
        break;
 80092c0:	e00c      	b.n	80092dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	3304      	adds	r3, #4
 80092c6:	2201      	movs	r2, #1
 80092c8:	4619      	mov	r1, r3
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f934 	bl	8009538 <USBD_CtlSendData>
        break;
 80092d0:	e004      	b.n	80092dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80092d2:	6839      	ldr	r1, [r7, #0]
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 f8be 	bl	8009456 <USBD_CtlError>
        break;
 80092da:	bf00      	nop
}
 80092dc:	bf00      	nop
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	3b01      	subs	r3, #1
 80092f8:	2b02      	cmp	r3, #2
 80092fa:	d81e      	bhi.n	800933a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	88db      	ldrh	r3, [r3, #6]
 8009300:	2b02      	cmp	r3, #2
 8009302:	d004      	beq.n	800930e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009304:	6839      	ldr	r1, [r7, #0]
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 f8a5 	bl	8009456 <USBD_CtlError>
        break;
 800930c:	e01a      	b.n	8009344 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2201      	movs	r2, #1
 8009312:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800931a:	2b00      	cmp	r3, #0
 800931c:	d005      	beq.n	800932a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	f043 0202 	orr.w	r2, r3, #2
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	330c      	adds	r3, #12
 800932e:	2202      	movs	r2, #2
 8009330:	4619      	mov	r1, r3
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f900 	bl	8009538 <USBD_CtlSendData>
      break;
 8009338:	e004      	b.n	8009344 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800933a:	6839      	ldr	r1, [r7, #0]
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 f88a 	bl	8009456 <USBD_CtlError>
      break;
 8009342:	bf00      	nop
  }
}
 8009344:	bf00      	nop
 8009346:	3708      	adds	r7, #8
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	885b      	ldrh	r3, [r3, #2]
 800935a:	2b01      	cmp	r3, #1
 800935c:	d107      	bne.n	800936e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f940 	bl	80095ec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800936c:	e013      	b.n	8009396 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	885b      	ldrh	r3, [r3, #2]
 8009372:	2b02      	cmp	r3, #2
 8009374:	d10b      	bne.n	800938e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	889b      	ldrh	r3, [r3, #4]
 800937a:	0a1b      	lsrs	r3, r3, #8
 800937c:	b29b      	uxth	r3, r3
 800937e:	b2da      	uxtb	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f930 	bl	80095ec <USBD_CtlSendStatus>
}
 800938c:	e003      	b.n	8009396 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800938e:	6839      	ldr	r1, [r7, #0]
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 f860 	bl	8009456 <USBD_CtlError>
}
 8009396:	bf00      	nop
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b082      	sub	sp, #8
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
 80093a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	3b01      	subs	r3, #1
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d80b      	bhi.n	80093ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	885b      	ldrh	r3, [r3, #2]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d10c      	bne.n	80093d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f910 	bl	80095ec <USBD_CtlSendStatus>
      }
      break;
 80093cc:	e004      	b.n	80093d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f840 	bl	8009456 <USBD_CtlError>
      break;
 80093d6:	e000      	b.n	80093da <USBD_ClrFeature+0x3c>
      break;
 80093d8:	bf00      	nop
  }
}
 80093da:	bf00      	nop
 80093dc:	3708      	adds	r7, #8
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b084      	sub	sp, #16
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
 80093ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	781a      	ldrb	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	3301      	adds	r3, #1
 80093fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	781a      	ldrb	r2, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	3301      	adds	r3, #1
 800940a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f7ff fa17 	bl	8008840 <SWAPBYTE>
 8009412:	4603      	mov	r3, r0
 8009414:	461a      	mov	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	3301      	adds	r3, #1
 800941e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	3301      	adds	r3, #1
 8009424:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f7ff fa0a 	bl	8008840 <SWAPBYTE>
 800942c:	4603      	mov	r3, r0
 800942e:	461a      	mov	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	3301      	adds	r3, #1
 8009438:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3301      	adds	r3, #1
 800943e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f7ff f9fd 	bl	8008840 <SWAPBYTE>
 8009446:	4603      	mov	r3, r0
 8009448:	461a      	mov	r2, r3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	80da      	strh	r2, [r3, #6]
}
 800944e:	bf00      	nop
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b082      	sub	sp, #8
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009460:	2180      	movs	r1, #128	; 0x80
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 fdba 	bl	8009fdc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009468:	2100      	movs	r1, #0
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fdb6 	bl	8009fdc <USBD_LL_StallEP>
}
 8009470:	bf00      	nop
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b086      	sub	sp, #24
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009484:	2300      	movs	r3, #0
 8009486:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d036      	beq.n	80094fc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009492:	6938      	ldr	r0, [r7, #16]
 8009494:	f000 f836 	bl	8009504 <USBD_GetLen>
 8009498:	4603      	mov	r3, r0
 800949a:	3301      	adds	r3, #1
 800949c:	b29b      	uxth	r3, r3
 800949e:	005b      	lsls	r3, r3, #1
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80094a6:	7dfb      	ldrb	r3, [r7, #23]
 80094a8:	68ba      	ldr	r2, [r7, #8]
 80094aa:	4413      	add	r3, r2
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	7812      	ldrb	r2, [r2, #0]
 80094b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80094b2:	7dfb      	ldrb	r3, [r7, #23]
 80094b4:	3301      	adds	r3, #1
 80094b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	4413      	add	r3, r2
 80094be:	2203      	movs	r2, #3
 80094c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80094c2:	7dfb      	ldrb	r3, [r7, #23]
 80094c4:	3301      	adds	r3, #1
 80094c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80094c8:	e013      	b.n	80094f2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80094ca:	7dfb      	ldrb	r3, [r7, #23]
 80094cc:	68ba      	ldr	r2, [r7, #8]
 80094ce:	4413      	add	r3, r2
 80094d0:	693a      	ldr	r2, [r7, #16]
 80094d2:	7812      	ldrb	r2, [r2, #0]
 80094d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	3301      	adds	r3, #1
 80094da:	613b      	str	r3, [r7, #16]
    idx++;
 80094dc:	7dfb      	ldrb	r3, [r7, #23]
 80094de:	3301      	adds	r3, #1
 80094e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80094e2:	7dfb      	ldrb	r3, [r7, #23]
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	4413      	add	r3, r2
 80094e8:	2200      	movs	r2, #0
 80094ea:	701a      	strb	r2, [r3, #0]
    idx++;
 80094ec:	7dfb      	ldrb	r3, [r7, #23]
 80094ee:	3301      	adds	r3, #1
 80094f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1e7      	bne.n	80094ca <USBD_GetString+0x52>
 80094fa:	e000      	b.n	80094fe <USBD_GetString+0x86>
    return;
 80094fc:	bf00      	nop
  }
}
 80094fe:	3718      	adds	r7, #24
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800950c:	2300      	movs	r3, #0
 800950e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009514:	e005      	b.n	8009522 <USBD_GetLen+0x1e>
  {
    len++;
 8009516:	7bfb      	ldrb	r3, [r7, #15]
 8009518:	3301      	adds	r3, #1
 800951a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	3301      	adds	r3, #1
 8009520:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1f5      	bne.n	8009516 <USBD_GetLen+0x12>
  }

  return len;
 800952a:	7bfb      	ldrb	r3, [r7, #15]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3714      	adds	r7, #20
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2202      	movs	r2, #2
 8009548:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	2100      	movs	r1, #0
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	f000 fdc5 	bl	800a0ee <USBD_LL_Transmit>

  return USBD_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b084      	sub	sp, #16
 8009572:	af00      	add	r7, sp, #0
 8009574:	60f8      	str	r0, [r7, #12]
 8009576:	60b9      	str	r1, [r7, #8]
 8009578:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	68ba      	ldr	r2, [r7, #8]
 800957e:	2100      	movs	r1, #0
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f000 fdb4 	bl	800a0ee <USBD_LL_Transmit>

  return USBD_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2203      	movs	r2, #3
 80095a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	2100      	movs	r1, #0
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f000 fdb8 	bl	800a130 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b084      	sub	sp, #16
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	60f8      	str	r0, [r7, #12]
 80095d2:	60b9      	str	r1, [r7, #8]
 80095d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	2100      	movs	r1, #0
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f000 fda7 	bl	800a130 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2204      	movs	r2, #4
 80095f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095fc:	2300      	movs	r3, #0
 80095fe:	2200      	movs	r2, #0
 8009600:	2100      	movs	r1, #0
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fd73 	bl	800a0ee <USBD_LL_Transmit>

  return USBD_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3708      	adds	r7, #8
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b082      	sub	sp, #8
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2205      	movs	r2, #5
 800961e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009622:	2300      	movs	r3, #0
 8009624:	2200      	movs	r2, #0
 8009626:	2100      	movs	r1, #0
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 fd81 	bl	800a130 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <CDC_OTG_Send>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
uint16_t CDC_OTG_Send(uint8_t *Buf, uint16_t Len){
 8009638:	b590      	push	{r4, r7, lr}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	460b      	mov	r3, r1
 8009642:	807b      	strh	r3, [r7, #2]
	  uint8_t result = USBD_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	73fb      	strb	r3, [r7, #15]
	  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009648:	4b30      	ldr	r3, [pc, #192]	; (800970c <CDC_OTG_Send+0xd4>)
 800964a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800964e:	60bb      	str	r3, [r7, #8]
	  if (USB_OTG_FS_State != 0){
 8009650:	4b2f      	ldr	r3, [pc, #188]	; (8009710 <CDC_OTG_Send+0xd8>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d005      	beq.n	8009664 <CDC_OTG_Send+0x2c>
		  GPIOB->BSRR = (1<<16);
 8009658:	4b2e      	ldr	r3, [pc, #184]	; (8009714 <CDC_OTG_Send+0xdc>)
 800965a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800965e:	619a      	str	r2, [r3, #24]
		  return USBD_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	e04e      	b.n	8009702 <CDC_OTG_Send+0xca>
	  }

	  if (hcdc->TxState != 0 && hcdc->TxState != USBD_BUSY){
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800966a:	2b00      	cmp	r3, #0
 800966c:	d033      	beq.n	80096d6 <CDC_OTG_Send+0x9e>
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009674:	2b01      	cmp	r3, #1
 8009676:	d02e      	beq.n	80096d6 <CDC_OTG_Send+0x9e>
		  GPIOB->BSRR = (1<<16);
 8009678:	4b26      	ldr	r3, [pc, #152]	; (8009714 <CDC_OTG_Send+0xdc>)
 800967a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800967e:	619a      	str	r2, [r3, #24]
	      return hcdc->TxState;
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009686:	b29b      	uxth	r3, r3
 8009688:	e03b      	b.n	8009702 <CDC_OTG_Send+0xca>
	  }

	  while(hcdc->TxState == USBD_BUSY){
		  GPIOB->BSRR = ((1<<0) << (16*flag));
 800968a:	4b23      	ldr	r3, [pc, #140]	; (8009718 <CDC_OTG_Send+0xe0>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	011b      	lsls	r3, r3, #4
 8009690:	2201      	movs	r2, #1
 8009692:	409a      	lsls	r2, r3
 8009694:	4b1f      	ldr	r3, [pc, #124]	; (8009714 <CDC_OTG_Send+0xdc>)
 8009696:	619a      	str	r2, [r3, #24]
		  if(tick + 25 < HAL_GetTick()){
 8009698:	4b20      	ldr	r3, [pc, #128]	; (800971c <CDC_OTG_Send+0xe4>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	3319      	adds	r3, #25
 800969e:	461c      	mov	r4, r3
 80096a0:	f7f7 fbe2 	bl	8000e68 <HAL_GetTick>
 80096a4:	4603      	mov	r3, r0
 80096a6:	429c      	cmp	r4, r3
 80096a8:	d20f      	bcs.n	80096ca <CDC_OTG_Send+0x92>
			  flag = flag?0:1;
 80096aa:	4b1b      	ldr	r3, [pc, #108]	; (8009718 <CDC_OTG_Send+0xe0>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	bf0c      	ite	eq
 80096b2:	2301      	moveq	r3, #1
 80096b4:	2300      	movne	r3, #0
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	461a      	mov	r2, r3
 80096ba:	4b17      	ldr	r3, [pc, #92]	; (8009718 <CDC_OTG_Send+0xe0>)
 80096bc:	601a      	str	r2, [r3, #0]
			  tick = HAL_GetTick();
 80096be:	f7f7 fbd3 	bl	8000e68 <HAL_GetTick>
 80096c2:	4603      	mov	r3, r0
 80096c4:	461a      	mov	r2, r3
 80096c6:	4b15      	ldr	r3, [pc, #84]	; (800971c <CDC_OTG_Send+0xe4>)
 80096c8:	601a      	str	r2, [r3, #0]
		  }
		  if (USB_OTG_FS_State != 0){
 80096ca:	4b11      	ldr	r3, [pc, #68]	; (8009710 <CDC_OTG_Send+0xd8>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d001      	beq.n	80096d6 <CDC_OTG_Send+0x9e>
			  return USBD_OK;
 80096d2:	2300      	movs	r3, #0
 80096d4:	e015      	b.n	8009702 <CDC_OTG_Send+0xca>
	  while(hcdc->TxState == USBD_BUSY){
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d0d4      	beq.n	800968a <CDC_OTG_Send+0x52>
		  }
	  }
	  GPIOB->BSRR = (1<<16);
 80096e0:	4b0c      	ldr	r3, [pc, #48]	; (8009714 <CDC_OTG_Send+0xdc>)
 80096e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80096e6:	619a      	str	r2, [r3, #24]

	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80096e8:	887b      	ldrh	r3, [r7, #2]
 80096ea:	461a      	mov	r2, r3
 80096ec:	6879      	ldr	r1, [r7, #4]
 80096ee:	4807      	ldr	r0, [pc, #28]	; (800970c <CDC_OTG_Send+0xd4>)
 80096f0:	f7fe fbae 	bl	8007e50 <USBD_CDC_SetTxBuffer>
	  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80096f4:	4805      	ldr	r0, [pc, #20]	; (800970c <CDC_OTG_Send+0xd4>)
 80096f6:	f7fe fbeb 	bl	8007ed0 <USBD_CDC_TransmitPacket>
 80096fa:	4603      	mov	r3, r0
 80096fc:	73fb      	strb	r3, [r7, #15]
	  return result;
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
 8009700:	b29b      	uxth	r3, r3
}
 8009702:	4618      	mov	r0, r3
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	bd90      	pop	{r4, r7, pc}
 800970a:	bf00      	nop
 800970c:	240009e4 	.word	0x240009e4
 8009710:	24001ec8 	.word	0x24001ec8
 8009714:	58020400 	.word	0x58020400
 8009718:	240009dc 	.word	0x240009dc
 800971c:	240009e0 	.word	0x240009e0

08009720 <CDC_OTG_Recv>:

uint16_t CDC_OTG_Recv(uint8_t *Buf){
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]

	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 8009728:	6879      	ldr	r1, [r7, #4]
 800972a:	4805      	ldr	r0, [pc, #20]	; (8009740 <CDC_OTG_Recv+0x20>)
 800972c:	f7fe fbb2 	bl	8007e94 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009730:	4803      	ldr	r0, [pc, #12]	; (8009740 <CDC_OTG_Recv+0x20>)
 8009732:	f7fe fc0d 	bl	8007f50 <USBD_CDC_ReceivePacket>
	  return (USBD_OK);
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	240009e4 	.word	0x240009e4

08009744 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009748:	2200      	movs	r2, #0
 800974a:	4913      	ldr	r1, [pc, #76]	; (8009798 <MX_USB_DEVICE_Init+0x54>)
 800974c:	4813      	ldr	r0, [pc, #76]	; (800979c <MX_USB_DEVICE_Init+0x58>)
 800974e:	f7fe fc35 	bl	8007fbc <USBD_Init>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d001      	beq.n	800975c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009758:	f7f7 f8f6 	bl	8000948 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800975c:	4910      	ldr	r1, [pc, #64]	; (80097a0 <MX_USB_DEVICE_Init+0x5c>)
 800975e:	480f      	ldr	r0, [pc, #60]	; (800979c <MX_USB_DEVICE_Init+0x58>)
 8009760:	f7fe fc6a 	bl	8008038 <USBD_RegisterClass>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800976a:	f7f7 f8ed 	bl	8000948 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800976e:	490d      	ldr	r1, [pc, #52]	; (80097a4 <MX_USB_DEVICE_Init+0x60>)
 8009770:	480a      	ldr	r0, [pc, #40]	; (800979c <MX_USB_DEVICE_Init+0x58>)
 8009772:	f7fe fb53 	bl	8007e1c <USBD_CDC_RegisterInterface>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d001      	beq.n	8009780 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800977c:	f7f7 f8e4 	bl	8000948 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009780:	4806      	ldr	r0, [pc, #24]	; (800979c <MX_USB_DEVICE_Init+0x58>)
 8009782:	f7fe fc9d 	bl	80080c0 <USBD_Start>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d001      	beq.n	8009790 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800978c:	f7f7 f8dc 	bl	8000948 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8009790:	f7f9 f98c 	bl	8002aac <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009794:	bf00      	nop
 8009796:	bd80      	pop	{r7, pc}
 8009798:	240000b0 	.word	0x240000b0
 800979c:	240009e4 	.word	0x240009e4
 80097a0:	2400001c 	.word	0x2400001c
 80097a4:	2400009c 	.word	0x2400009c

080097a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80097ac:	2200      	movs	r2, #0
 80097ae:	4905      	ldr	r1, [pc, #20]	; (80097c4 <CDC_Init_FS+0x1c>)
 80097b0:	4805      	ldr	r0, [pc, #20]	; (80097c8 <CDC_Init_FS+0x20>)
 80097b2:	f7fe fb4d 	bl	8007e50 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80097b6:	4905      	ldr	r1, [pc, #20]	; (80097cc <CDC_Init_FS+0x24>)
 80097b8:	4803      	ldr	r0, [pc, #12]	; (80097c8 <CDC_Init_FS+0x20>)
 80097ba:	f7fe fb6b 	bl	8007e94 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80097be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	240014c8 	.word	0x240014c8
 80097c8:	240009e4 	.word	0x240009e4
 80097cc:	24000cc8 	.word	0x24000cc8

080097d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80097d0:	b480      	push	{r7}
 80097d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80097d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	4603      	mov	r3, r0
 80097e8:	6039      	str	r1, [r7, #0]
 80097ea:	71fb      	strb	r3, [r7, #7]
 80097ec:	4613      	mov	r3, r2
 80097ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80097f0:	79fb      	ldrb	r3, [r7, #7]
 80097f2:	2b23      	cmp	r3, #35	; 0x23
 80097f4:	f200 8092 	bhi.w	800991c <CDC_Control_FS+0x13c>
 80097f8:	a201      	add	r2, pc, #4	; (adr r2, 8009800 <CDC_Control_FS+0x20>)
 80097fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fe:	bf00      	nop
 8009800:	0800991d 	.word	0x0800991d
 8009804:	0800991d 	.word	0x0800991d
 8009808:	0800991d 	.word	0x0800991d
 800980c:	0800991d 	.word	0x0800991d
 8009810:	0800991d 	.word	0x0800991d
 8009814:	0800991d 	.word	0x0800991d
 8009818:	0800991d 	.word	0x0800991d
 800981c:	0800991d 	.word	0x0800991d
 8009820:	0800991d 	.word	0x0800991d
 8009824:	0800991d 	.word	0x0800991d
 8009828:	0800991d 	.word	0x0800991d
 800982c:	0800991d 	.word	0x0800991d
 8009830:	0800991d 	.word	0x0800991d
 8009834:	0800991d 	.word	0x0800991d
 8009838:	0800991d 	.word	0x0800991d
 800983c:	0800991d 	.word	0x0800991d
 8009840:	0800991d 	.word	0x0800991d
 8009844:	0800991d 	.word	0x0800991d
 8009848:	0800991d 	.word	0x0800991d
 800984c:	0800991d 	.word	0x0800991d
 8009850:	0800991d 	.word	0x0800991d
 8009854:	0800991d 	.word	0x0800991d
 8009858:	0800991d 	.word	0x0800991d
 800985c:	0800991d 	.word	0x0800991d
 8009860:	0800991d 	.word	0x0800991d
 8009864:	0800991d 	.word	0x0800991d
 8009868:	0800991d 	.word	0x0800991d
 800986c:	0800991d 	.word	0x0800991d
 8009870:	0800991d 	.word	0x0800991d
 8009874:	0800991d 	.word	0x0800991d
 8009878:	0800991d 	.word	0x0800991d
 800987c:	0800991d 	.word	0x0800991d
 8009880:	08009891 	.word	0x08009891
 8009884:	080098d7 	.word	0x080098d7
 8009888:	0800991d 	.word	0x0800991d
 800988c:	0800991d 	.word	0x0800991d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      tempbuf[0]=pbuf[0];
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	781a      	ldrb	r2, [r3, #0]
 8009894:	4b25      	ldr	r3, [pc, #148]	; (800992c <CDC_Control_FS+0x14c>)
 8009896:	701a      	strb	r2, [r3, #0]
      tempbuf[1]=pbuf[1];
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	3301      	adds	r3, #1
 800989c:	781a      	ldrb	r2, [r3, #0]
 800989e:	4b23      	ldr	r3, [pc, #140]	; (800992c <CDC_Control_FS+0x14c>)
 80098a0:	705a      	strb	r2, [r3, #1]
      tempbuf[2]=pbuf[2];
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	3302      	adds	r3, #2
 80098a6:	781a      	ldrb	r2, [r3, #0]
 80098a8:	4b20      	ldr	r3, [pc, #128]	; (800992c <CDC_Control_FS+0x14c>)
 80098aa:	709a      	strb	r2, [r3, #2]
      tempbuf[3]=pbuf[3];
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	3303      	adds	r3, #3
 80098b0:	781a      	ldrb	r2, [r3, #0]
 80098b2:	4b1e      	ldr	r3, [pc, #120]	; (800992c <CDC_Control_FS+0x14c>)
 80098b4:	70da      	strb	r2, [r3, #3]
      tempbuf[4]=pbuf[4];
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	3304      	adds	r3, #4
 80098ba:	781a      	ldrb	r2, [r3, #0]
 80098bc:	4b1b      	ldr	r3, [pc, #108]	; (800992c <CDC_Control_FS+0x14c>)
 80098be:	711a      	strb	r2, [r3, #4]
      tempbuf[5]=pbuf[5];
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	3305      	adds	r3, #5
 80098c4:	781a      	ldrb	r2, [r3, #0]
 80098c6:	4b19      	ldr	r3, [pc, #100]	; (800992c <CDC_Control_FS+0x14c>)
 80098c8:	715a      	strb	r2, [r3, #5]
      tempbuf[6]=pbuf[6];
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	3306      	adds	r3, #6
 80098ce:	781a      	ldrb	r2, [r3, #0]
 80098d0:	4b16      	ldr	r3, [pc, #88]	; (800992c <CDC_Control_FS+0x14c>)
 80098d2:	719a      	strb	r2, [r3, #6]
      break;
 80098d4:	e023      	b.n	800991e <CDC_Control_FS+0x13e>
    case CDC_GET_LINE_CODING:
      pbuf[0]=tempbuf[0];
 80098d6:	4b15      	ldr	r3, [pc, #84]	; (800992c <CDC_Control_FS+0x14c>)
 80098d8:	781a      	ldrb	r2, [r3, #0]
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	701a      	strb	r2, [r3, #0]
      pbuf[1]=tempbuf[1];
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	3301      	adds	r3, #1
 80098e2:	4a12      	ldr	r2, [pc, #72]	; (800992c <CDC_Control_FS+0x14c>)
 80098e4:	7852      	ldrb	r2, [r2, #1]
 80098e6:	701a      	strb	r2, [r3, #0]
      pbuf[2]=tempbuf[2];
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	3302      	adds	r3, #2
 80098ec:	4a0f      	ldr	r2, [pc, #60]	; (800992c <CDC_Control_FS+0x14c>)
 80098ee:	7892      	ldrb	r2, [r2, #2]
 80098f0:	701a      	strb	r2, [r3, #0]
      pbuf[3]=tempbuf[3];
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	3303      	adds	r3, #3
 80098f6:	4a0d      	ldr	r2, [pc, #52]	; (800992c <CDC_Control_FS+0x14c>)
 80098f8:	78d2      	ldrb	r2, [r2, #3]
 80098fa:	701a      	strb	r2, [r3, #0]
      pbuf[4]=tempbuf[4];
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	3304      	adds	r3, #4
 8009900:	4a0a      	ldr	r2, [pc, #40]	; (800992c <CDC_Control_FS+0x14c>)
 8009902:	7912      	ldrb	r2, [r2, #4]
 8009904:	701a      	strb	r2, [r3, #0]
      pbuf[5]=tempbuf[5];
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	3305      	adds	r3, #5
 800990a:	4a08      	ldr	r2, [pc, #32]	; (800992c <CDC_Control_FS+0x14c>)
 800990c:	7952      	ldrb	r2, [r2, #5]
 800990e:	701a      	strb	r2, [r3, #0]
      pbuf[6]=tempbuf[6];
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	3306      	adds	r3, #6
 8009914:	4a05      	ldr	r2, [pc, #20]	; (800992c <CDC_Control_FS+0x14c>)
 8009916:	7992      	ldrb	r2, [r2, #6]
 8009918:	701a      	strb	r2, [r3, #0]
      break;
 800991a:	e000      	b.n	800991e <CDC_Control_FS+0x13e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800991c:	bf00      	nop
  }

  return (USBD_OK);
 800991e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009920:	4618      	mov	r0, r3
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	24000cc0 	.word	0x24000cc0

08009930 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800993a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800993c:	4618      	mov	r0, r3
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009948:	b480      	push	{r7}
 800994a:	b087      	sub	sp, #28
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	4613      	mov	r3, r2
 8009954:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800995a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800995e:	4618      	mov	r0, r3
 8009960:	371c      	adds	r7, #28
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr
	...

0800996c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	4603      	mov	r3, r0
 8009974:	6039      	str	r1, [r7, #0]
 8009976:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	2212      	movs	r2, #18
 800997c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800997e:	4b03      	ldr	r3, [pc, #12]	; (800998c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009980:	4618      	mov	r0, r3
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr
 800998c:	240000d0 	.word	0x240000d0

08009990 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	4603      	mov	r3, r0
 8009998:	6039      	str	r1, [r7, #0]
 800999a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	2204      	movs	r2, #4
 80099a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80099a2:	4b03      	ldr	r3, [pc, #12]	; (80099b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	240000e4 	.word	0x240000e4

080099b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	4603      	mov	r3, r0
 80099bc:	6039      	str	r1, [r7, #0]
 80099be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099c0:	79fb      	ldrb	r3, [r7, #7]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d105      	bne.n	80099d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	4907      	ldr	r1, [pc, #28]	; (80099e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80099ca:	4808      	ldr	r0, [pc, #32]	; (80099ec <USBD_FS_ProductStrDescriptor+0x38>)
 80099cc:	f7ff fd54 	bl	8009478 <USBD_GetString>
 80099d0:	e004      	b.n	80099dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099d2:	683a      	ldr	r2, [r7, #0]
 80099d4:	4904      	ldr	r1, [pc, #16]	; (80099e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80099d6:	4805      	ldr	r0, [pc, #20]	; (80099ec <USBD_FS_ProductStrDescriptor+0x38>)
 80099d8:	f7ff fd4e 	bl	8009478 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099dc:	4b02      	ldr	r3, [pc, #8]	; (80099e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	24001cc8 	.word	0x24001cc8
 80099ec:	0800b350 	.word	0x0800b350

080099f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	4603      	mov	r3, r0
 80099f8:	6039      	str	r1, [r7, #0]
 80099fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80099fc:	683a      	ldr	r2, [r7, #0]
 80099fe:	4904      	ldr	r1, [pc, #16]	; (8009a10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009a00:	4804      	ldr	r0, [pc, #16]	; (8009a14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a02:	f7ff fd39 	bl	8009478 <USBD_GetString>
  return USBD_StrDesc;
 8009a06:	4b02      	ldr	r3, [pc, #8]	; (8009a10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	24001cc8 	.word	0x24001cc8
 8009a14:	0800b368 	.word	0x0800b368

08009a18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	4603      	mov	r3, r0
 8009a20:	6039      	str	r1, [r7, #0]
 8009a22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	221a      	movs	r2, #26
 8009a28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009a2a:	f000 f843 	bl	8009ab4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009a2e:	4b02      	ldr	r3, [pc, #8]	; (8009a38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3708      	adds	r7, #8
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	240000e8 	.word	0x240000e8

08009a3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	4603      	mov	r3, r0
 8009a44:	6039      	str	r1, [r7, #0]
 8009a46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a48:	79fb      	ldrb	r3, [r7, #7]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d105      	bne.n	8009a5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a4e:	683a      	ldr	r2, [r7, #0]
 8009a50:	4907      	ldr	r1, [pc, #28]	; (8009a70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a52:	4808      	ldr	r0, [pc, #32]	; (8009a74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a54:	f7ff fd10 	bl	8009478 <USBD_GetString>
 8009a58:	e004      	b.n	8009a64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a5a:	683a      	ldr	r2, [r7, #0]
 8009a5c:	4904      	ldr	r1, [pc, #16]	; (8009a70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a5e:	4805      	ldr	r0, [pc, #20]	; (8009a74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a60:	f7ff fd0a 	bl	8009478 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a64:	4b02      	ldr	r3, [pc, #8]	; (8009a70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3708      	adds	r7, #8
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	24001cc8 	.word	0x24001cc8
 8009a74:	0800b37c 	.word	0x0800b37c

08009a78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	4603      	mov	r3, r0
 8009a80:	6039      	str	r1, [r7, #0]
 8009a82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a84:	79fb      	ldrb	r3, [r7, #7]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d105      	bne.n	8009a96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a8a:	683a      	ldr	r2, [r7, #0]
 8009a8c:	4907      	ldr	r1, [pc, #28]	; (8009aac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a8e:	4808      	ldr	r0, [pc, #32]	; (8009ab0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a90:	f7ff fcf2 	bl	8009478 <USBD_GetString>
 8009a94:	e004      	b.n	8009aa0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a96:	683a      	ldr	r2, [r7, #0]
 8009a98:	4904      	ldr	r1, [pc, #16]	; (8009aac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a9a:	4805      	ldr	r0, [pc, #20]	; (8009ab0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a9c:	f7ff fcec 	bl	8009478 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009aa0:	4b02      	ldr	r3, [pc, #8]	; (8009aac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	24001cc8 	.word	0x24001cc8
 8009ab0:	0800b388 	.word	0x0800b388

08009ab4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009aba:	4b0f      	ldr	r3, [pc, #60]	; (8009af8 <Get_SerialNum+0x44>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ac0:	4b0e      	ldr	r3, [pc, #56]	; (8009afc <Get_SerialNum+0x48>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009ac6:	4b0e      	ldr	r3, [pc, #56]	; (8009b00 <Get_SerialNum+0x4c>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d009      	beq.n	8009aee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ada:	2208      	movs	r2, #8
 8009adc:	4909      	ldr	r1, [pc, #36]	; (8009b04 <Get_SerialNum+0x50>)
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f000 f814 	bl	8009b0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ae4:	2204      	movs	r2, #4
 8009ae6:	4908      	ldr	r1, [pc, #32]	; (8009b08 <Get_SerialNum+0x54>)
 8009ae8:	68b8      	ldr	r0, [r7, #8]
 8009aea:	f000 f80f 	bl	8009b0c <IntToUnicode>
  }
}
 8009aee:	bf00      	nop
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	1ff1e800 	.word	0x1ff1e800
 8009afc:	1ff1e804 	.word	0x1ff1e804
 8009b00:	1ff1e808 	.word	0x1ff1e808
 8009b04:	240000ea 	.word	0x240000ea
 8009b08:	240000fa 	.word	0x240000fa

08009b0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b087      	sub	sp, #28
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	4613      	mov	r3, r2
 8009b18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009b1e:	2300      	movs	r3, #0
 8009b20:	75fb      	strb	r3, [r7, #23]
 8009b22:	e027      	b.n	8009b74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	0f1b      	lsrs	r3, r3, #28
 8009b28:	2b09      	cmp	r3, #9
 8009b2a:	d80b      	bhi.n	8009b44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	0f1b      	lsrs	r3, r3, #28
 8009b30:	b2da      	uxtb	r2, r3
 8009b32:	7dfb      	ldrb	r3, [r7, #23]
 8009b34:	005b      	lsls	r3, r3, #1
 8009b36:	4619      	mov	r1, r3
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	440b      	add	r3, r1
 8009b3c:	3230      	adds	r2, #48	; 0x30
 8009b3e:	b2d2      	uxtb	r2, r2
 8009b40:	701a      	strb	r2, [r3, #0]
 8009b42:	e00a      	b.n	8009b5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	0f1b      	lsrs	r3, r3, #28
 8009b48:	b2da      	uxtb	r2, r3
 8009b4a:	7dfb      	ldrb	r3, [r7, #23]
 8009b4c:	005b      	lsls	r3, r3, #1
 8009b4e:	4619      	mov	r1, r3
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	440b      	add	r3, r1
 8009b54:	3237      	adds	r2, #55	; 0x37
 8009b56:	b2d2      	uxtb	r2, r2
 8009b58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	011b      	lsls	r3, r3, #4
 8009b5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b60:	7dfb      	ldrb	r3, [r7, #23]
 8009b62:	005b      	lsls	r3, r3, #1
 8009b64:	3301      	adds	r3, #1
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	4413      	add	r3, r2
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b6e:	7dfb      	ldrb	r3, [r7, #23]
 8009b70:	3301      	adds	r3, #1
 8009b72:	75fb      	strb	r3, [r7, #23]
 8009b74:	7dfa      	ldrb	r2, [r7, #23]
 8009b76:	79fb      	ldrb	r3, [r7, #7]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d3d3      	bcc.n	8009b24 <IntToUnicode+0x18>
  }
}
 8009b7c:	bf00      	nop
 8009b7e:	bf00      	nop
 8009b80:	371c      	adds	r7, #28
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
	...

08009b8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b0ba      	sub	sp, #232	; 0xe8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b94:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009b98:	2200      	movs	r2, #0
 8009b9a:	601a      	str	r2, [r3, #0]
 8009b9c:	605a      	str	r2, [r3, #4]
 8009b9e:	609a      	str	r2, [r3, #8]
 8009ba0:	60da      	str	r2, [r3, #12]
 8009ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009ba4:	f107 0310 	add.w	r3, r7, #16
 8009ba8:	22c0      	movs	r2, #192	; 0xc0
 8009baa:	2100      	movs	r1, #0
 8009bac:	4618      	mov	r0, r3
 8009bae:	f000 fd53 	bl	800a658 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a34      	ldr	r2, [pc, #208]	; (8009c88 <HAL_PCD_MspInit+0xfc>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d161      	bne.n	8009c80 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009bbc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009bc0:	f04f 0300 	mov.w	r3, #0
 8009bc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009bc8:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8009bcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009bd0:	f107 0310 	add.w	r3, r7, #16
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7f9 ff33 	bl	8003a40 <HAL_RCCEx_PeriphCLKConfig>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d001      	beq.n	8009be4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8009be0:	f7f6 feb2 	bl	8000948 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8009be4:	f7f8 ff62 	bl	8002aac <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009be8:	4b28      	ldr	r3, [pc, #160]	; (8009c8c <HAL_PCD_MspInit+0x100>)
 8009bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009bee:	4a27      	ldr	r2, [pc, #156]	; (8009c8c <HAL_PCD_MspInit+0x100>)
 8009bf0:	f043 0301 	orr.w	r3, r3, #1
 8009bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009bf8:	4b24      	ldr	r3, [pc, #144]	; (8009c8c <HAL_PCD_MspInit+0x100>)
 8009bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009bfe:	f003 0301 	and.w	r3, r3, #1
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c14:	2300      	movs	r3, #0
 8009c16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c1a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009c1e:	4619      	mov	r1, r3
 8009c20:	481b      	ldr	r0, [pc, #108]	; (8009c90 <HAL_PCD_MspInit+0x104>)
 8009c22:	f7f7 fa6d 	bl	8001100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009c26:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c2e:	2302      	movs	r3, #2
 8009c30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c34:	2300      	movs	r3, #0
 8009c36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8009c40:	230a      	movs	r3, #10
 8009c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c46:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	4810      	ldr	r0, [pc, #64]	; (8009c90 <HAL_PCD_MspInit+0x104>)
 8009c4e:	f7f7 fa57 	bl	8001100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c52:	4b0e      	ldr	r3, [pc, #56]	; (8009c8c <HAL_PCD_MspInit+0x100>)
 8009c54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009c58:	4a0c      	ldr	r2, [pc, #48]	; (8009c8c <HAL_PCD_MspInit+0x100>)
 8009c5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c5e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009c62:	4b0a      	ldr	r3, [pc, #40]	; (8009c8c <HAL_PCD_MspInit+0x100>)
 8009c64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c6c:	60bb      	str	r3, [r7, #8]
 8009c6e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009c70:	2200      	movs	r2, #0
 8009c72:	2100      	movs	r1, #0
 8009c74:	2065      	movs	r0, #101	; 0x65
 8009c76:	f7f7 fa0e 	bl	8001096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009c7a:	2065      	movs	r0, #101	; 0x65
 8009c7c:	f7f7 fa25 	bl	80010ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c80:	bf00      	nop
 8009c82:	37e8      	adds	r7, #232	; 0xe8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	40080000 	.word	0x40080000
 8009c8c:	58024400 	.word	0x58024400
 8009c90:	58020000 	.word	0x58020000

08009c94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009ca8:	4619      	mov	r1, r3
 8009caa:	4610      	mov	r0, r2
 8009cac:	f7fe fa55 	bl	800815a <USBD_LL_SetupStage>
}
 8009cb0:	bf00      	nop
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009cca:	78fa      	ldrb	r2, [r7, #3]
 8009ccc:	6879      	ldr	r1, [r7, #4]
 8009cce:	4613      	mov	r3, r2
 8009cd0:	00db      	lsls	r3, r3, #3
 8009cd2:	4413      	add	r3, r2
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	440b      	add	r3, r1
 8009cd8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	78fb      	ldrb	r3, [r7, #3]
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	f7fe fa8f 	bl	8008204 <USBD_LL_DataOutStage>
}
 8009ce6:	bf00      	nop
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b082      	sub	sp, #8
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009d00:	78fa      	ldrb	r2, [r7, #3]
 8009d02:	6879      	ldr	r1, [r7, #4]
 8009d04:	4613      	mov	r3, r2
 8009d06:	00db      	lsls	r3, r3, #3
 8009d08:	4413      	add	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	440b      	add	r3, r1
 8009d0e:	3348      	adds	r3, #72	; 0x48
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	78fb      	ldrb	r3, [r7, #3]
 8009d14:	4619      	mov	r1, r3
 8009d16:	f7fe fb28 	bl	800836a <USBD_LL_DataInStage>
}
 8009d1a:	bf00      	nop
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b082      	sub	sp, #8
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7fe fc62 	bl	80085fa <USBD_LL_SOF>
}
 8009d36:	bf00      	nop
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b084      	sub	sp, #16
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d46:	2301      	movs	r3, #1
 8009d48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d102      	bne.n	8009d58 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009d52:	2300      	movs	r3, #0
 8009d54:	73fb      	strb	r3, [r7, #15]
 8009d56:	e008      	b.n	8009d6a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d102      	bne.n	8009d66 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009d60:	2301      	movs	r3, #1
 8009d62:	73fb      	strb	r3, [r7, #15]
 8009d64:	e001      	b.n	8009d6a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009d66:	f7f6 fdef 	bl	8000948 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d70:	7bfa      	ldrb	r2, [r7, #15]
 8009d72:	4611      	mov	r1, r2
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7fe fbfc 	bl	8008572 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7fe fba4 	bl	80084ce <USBD_LL_Reset>
}
 8009d86:	bf00      	nop
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
	...

08009d90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7fe fbf7 	bl	8008592 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	6812      	ldr	r2, [r2, #0]
 8009db2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009db6:	f043 0301 	orr.w	r3, r3, #1
 8009dba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a1b      	ldr	r3, [r3, #32]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d005      	beq.n	8009dd0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009dc4:	4b04      	ldr	r3, [pc, #16]	; (8009dd8 <HAL_PCD_SuspendCallback+0x48>)
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	4a03      	ldr	r2, [pc, #12]	; (8009dd8 <HAL_PCD_SuspendCallback+0x48>)
 8009dca:	f043 0306 	orr.w	r3, r3, #6
 8009dce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009dd0:	bf00      	nop
 8009dd2:	3708      	adds	r7, #8
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	e000ed00 	.word	0xe000ed00

08009ddc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fe fbed 	bl	80085ca <USBD_LL_Resume>
}
 8009df0:	bf00      	nop
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	460b      	mov	r3, r1
 8009e02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e0a:	78fa      	ldrb	r2, [r7, #3]
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7fe fc45 	bl	800869e <USBD_LL_IsoOUTIncomplete>
}
 8009e14:	bf00      	nop
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	460b      	mov	r3, r1
 8009e26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e2e:	78fa      	ldrb	r2, [r7, #3]
 8009e30:	4611      	mov	r1, r2
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7fe fc01 	bl	800863a <USBD_LL_IsoINIncomplete>
}
 8009e38:	bf00      	nop
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fe fc57 	bl	8008702 <USBD_LL_DevConnected>
}
 8009e54:	bf00      	nop
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fe fc54 	bl	8008718 <USBD_LL_DevDisconnected>
}
 8009e70:	bf00      	nop
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d140      	bne.n	8009f0a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009e88:	4a22      	ldr	r2, [pc, #136]	; (8009f14 <USBD_LL_Init+0x9c>)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4a20      	ldr	r2, [pc, #128]	; (8009f14 <USBD_LL_Init+0x9c>)
 8009e94:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009e98:	4b1e      	ldr	r3, [pc, #120]	; (8009f14 <USBD_LL_Init+0x9c>)
 8009e9a:	4a1f      	ldr	r2, [pc, #124]	; (8009f18 <USBD_LL_Init+0xa0>)
 8009e9c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8009e9e:	4b1d      	ldr	r3, [pc, #116]	; (8009f14 <USBD_LL_Init+0x9c>)
 8009ea0:	2209      	movs	r2, #9
 8009ea2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009ea4:	4b1b      	ldr	r3, [pc, #108]	; (8009f14 <USBD_LL_Init+0x9c>)
 8009ea6:	2202      	movs	r2, #2
 8009ea8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009eaa:	4b1a      	ldr	r3, [pc, #104]	; (8009f14 <USBD_LL_Init+0x9c>)
 8009eac:	2200      	movs	r2, #0
 8009eae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009eb0:	4b18      	ldr	r3, [pc, #96]	; (8009f14 <USBD_LL_Init+0x9c>)
 8009eb2:	2202      	movs	r2, #2
 8009eb4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009eb6:	4b17      	ldr	r3, [pc, #92]	; (8009f14 <USBD_LL_Init+0x9c>)
 8009eb8:	2200      	movs	r2, #0
 8009eba:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009ebc:	4b15      	ldr	r3, [pc, #84]	; (8009f14 <USBD_LL_Init+0x9c>)
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009ec2:	4b14      	ldr	r3, [pc, #80]	; (8009f14 <USBD_LL_Init+0x9c>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009ec8:	4b12      	ldr	r3, [pc, #72]	; (8009f14 <USBD_LL_Init+0x9c>)
 8009eca:	2200      	movs	r2, #0
 8009ecc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009ece:	4b11      	ldr	r3, [pc, #68]	; (8009f14 <USBD_LL_Init+0x9c>)
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009ed4:	4b0f      	ldr	r3, [pc, #60]	; (8009f14 <USBD_LL_Init+0x9c>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009eda:	480e      	ldr	r0, [pc, #56]	; (8009f14 <USBD_LL_Init+0x9c>)
 8009edc:	f7f7 faf3 	bl	80014c6 <HAL_PCD_Init>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d001      	beq.n	8009eea <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8009ee6:	f7f6 fd2f 	bl	8000948 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x200);
 8009eea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009eee:	4809      	ldr	r0, [pc, #36]	; (8009f14 <USBD_LL_Init+0x9c>)
 8009ef0:	f7f8 fd61 	bl	80029b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x80);
 8009ef4:	2280      	movs	r2, #128	; 0x80
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	4806      	ldr	r0, [pc, #24]	; (8009f14 <USBD_LL_Init+0x9c>)
 8009efa:	f7f8 fd15 	bl	8002928 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x200);
 8009efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f02:	2101      	movs	r1, #1
 8009f04:	4803      	ldr	r0, [pc, #12]	; (8009f14 <USBD_LL_Init+0x9c>)
 8009f06:	f7f8 fd0f 	bl	8002928 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	24001ecc 	.word	0x24001ecc
 8009f18:	40080000 	.word	0x40080000

08009f1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7f7 fbeb 	bl	800170e <HAL_PCD_Start>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f3c:	7bfb      	ldrb	r3, [r7, #15]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 f942 	bl	800a1c8 <USBD_Get_USB_Status>
 8009f44:	4603      	mov	r3, r0
 8009f46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f48:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b084      	sub	sp, #16
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
 8009f5a:	4608      	mov	r0, r1
 8009f5c:	4611      	mov	r1, r2
 8009f5e:	461a      	mov	r2, r3
 8009f60:	4603      	mov	r3, r0
 8009f62:	70fb      	strb	r3, [r7, #3]
 8009f64:	460b      	mov	r3, r1
 8009f66:	70bb      	strb	r3, [r7, #2]
 8009f68:	4613      	mov	r3, r2
 8009f6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f70:	2300      	movs	r3, #0
 8009f72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009f7a:	78bb      	ldrb	r3, [r7, #2]
 8009f7c:	883a      	ldrh	r2, [r7, #0]
 8009f7e:	78f9      	ldrb	r1, [r7, #3]
 8009f80:	f7f8 f8eb 	bl	800215a <HAL_PCD_EP_Open>
 8009f84:	4603      	mov	r3, r0
 8009f86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f88:	7bfb      	ldrb	r3, [r7, #15]
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f000 f91c 	bl	800a1c8 <USBD_Get_USB_Status>
 8009f90:	4603      	mov	r3, r0
 8009f92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b084      	sub	sp, #16
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009fb8:	78fa      	ldrb	r2, [r7, #3]
 8009fba:	4611      	mov	r1, r2
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7f8 f934 	bl	800222a <HAL_PCD_EP_Close>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f000 f8fd 	bl	800a1c8 <USBD_Get_USB_Status>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3710      	adds	r7, #16
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ff6:	78fa      	ldrb	r2, [r7, #3]
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7f8 f9ee 	bl	80023dc <HAL_PCD_EP_SetStall>
 800a000:	4603      	mov	r3, r0
 800a002:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a004:	7bfb      	ldrb	r3, [r7, #15]
 800a006:	4618      	mov	r0, r3
 800a008:	f000 f8de 	bl	800a1c8 <USBD_Get_USB_Status>
 800a00c:	4603      	mov	r3, r0
 800a00e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a010:	7bbb      	ldrb	r3, [r7, #14]
}
 800a012:	4618      	mov	r0, r3
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b084      	sub	sp, #16
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	460b      	mov	r3, r1
 800a024:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a026:	2300      	movs	r3, #0
 800a028:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a034:	78fa      	ldrb	r2, [r7, #3]
 800a036:	4611      	mov	r1, r2
 800a038:	4618      	mov	r0, r3
 800a03a:	f7f8 fa33 	bl	80024a4 <HAL_PCD_EP_ClrStall>
 800a03e:	4603      	mov	r3, r0
 800a040:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a042:	7bfb      	ldrb	r3, [r7, #15]
 800a044:	4618      	mov	r0, r3
 800a046:	f000 f8bf 	bl	800a1c8 <USBD_Get_USB_Status>
 800a04a:	4603      	mov	r3, r0
 800a04c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a04e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	460b      	mov	r3, r1
 800a062:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a06a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a06c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a070:	2b00      	cmp	r3, #0
 800a072:	da0b      	bge.n	800a08c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a074:	78fb      	ldrb	r3, [r7, #3]
 800a076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a07a:	68f9      	ldr	r1, [r7, #12]
 800a07c:	4613      	mov	r3, r2
 800a07e:	00db      	lsls	r3, r3, #3
 800a080:	4413      	add	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	440b      	add	r3, r1
 800a086:	333e      	adds	r3, #62	; 0x3e
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	e00b      	b.n	800a0a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a08c:	78fb      	ldrb	r3, [r7, #3]
 800a08e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a092:	68f9      	ldr	r1, [r7, #12]
 800a094:	4613      	mov	r3, r2
 800a096:	00db      	lsls	r3, r3, #3
 800a098:	4413      	add	r3, r2
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	440b      	add	r3, r1
 800a09e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a0a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3714      	adds	r7, #20
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0ca:	78fa      	ldrb	r2, [r7, #3]
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7f8 f81e 	bl	8002110 <HAL_PCD_SetAddress>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0d8:	7bfb      	ldrb	r3, [r7, #15]
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f000 f874 	bl	800a1c8 <USBD_Get_USB_Status>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b086      	sub	sp, #24
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	60f8      	str	r0, [r7, #12]
 800a0f6:	607a      	str	r2, [r7, #4]
 800a0f8:	603b      	str	r3, [r7, #0]
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0fe:	2300      	movs	r3, #0
 800a100:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a102:	2300      	movs	r3, #0
 800a104:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a10c:	7af9      	ldrb	r1, [r7, #11]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	f7f8 f928 	bl	8002366 <HAL_PCD_EP_Transmit>
 800a116:	4603      	mov	r3, r0
 800a118:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a11a:	7dfb      	ldrb	r3, [r7, #23]
 800a11c:	4618      	mov	r0, r3
 800a11e:	f000 f853 	bl	800a1c8 <USBD_Get_USB_Status>
 800a122:	4603      	mov	r3, r0
 800a124:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a126:	7dbb      	ldrb	r3, [r7, #22]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3718      	adds	r7, #24
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b086      	sub	sp, #24
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	607a      	str	r2, [r7, #4]
 800a13a:	603b      	str	r3, [r7, #0]
 800a13c:	460b      	mov	r3, r1
 800a13e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a140:	2300      	movs	r3, #0
 800a142:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a14e:	7af9      	ldrb	r1, [r7, #11]
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	f7f8 f8b3 	bl	80022be <HAL_PCD_EP_Receive>
 800a158:	4603      	mov	r3, r0
 800a15a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a15c:	7dfb      	ldrb	r3, [r7, #23]
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 f832 	bl	800a1c8 <USBD_Get_USB_Status>
 800a164:	4603      	mov	r3, r0
 800a166:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a168:	7dbb      	ldrb	r3, [r7, #22]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3718      	adds	r7, #24
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b082      	sub	sp, #8
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	460b      	mov	r3, r1
 800a17c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a184:	78fa      	ldrb	r2, [r7, #3]
 800a186:	4611      	mov	r1, r2
 800a188:	4618      	mov	r0, r3
 800a18a:	f7f8 f8d4 	bl	8002336 <HAL_PCD_EP_GetRxCount>
 800a18e:	4603      	mov	r3, r0
}
 800a190:	4618      	mov	r0, r3
 800a192:	3708      	adds	r7, #8
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a1a0:	4b03      	ldr	r3, [pc, #12]	; (800a1b0 <USBD_static_malloc+0x18>)
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	370c      	adds	r7, #12
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr
 800a1ae:	bf00      	nop
 800a1b0:	240023d8 	.word	0x240023d8

0800a1b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800a1bc:	bf00      	nop
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a1d6:	79fb      	ldrb	r3, [r7, #7]
 800a1d8:	2b03      	cmp	r3, #3
 800a1da:	d817      	bhi.n	800a20c <USBD_Get_USB_Status+0x44>
 800a1dc:	a201      	add	r2, pc, #4	; (adr r2, 800a1e4 <USBD_Get_USB_Status+0x1c>)
 800a1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e2:	bf00      	nop
 800a1e4:	0800a1f5 	.word	0x0800a1f5
 800a1e8:	0800a1fb 	.word	0x0800a1fb
 800a1ec:	0800a201 	.word	0x0800a201
 800a1f0:	0800a207 	.word	0x0800a207
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a1f8:	e00b      	b.n	800a212 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	73fb      	strb	r3, [r7, #15]
    break;
 800a1fe:	e008      	b.n	800a212 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a200:	2301      	movs	r3, #1
 800a202:	73fb      	strb	r3, [r7, #15]
    break;
 800a204:	e005      	b.n	800a212 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a206:	2303      	movs	r3, #3
 800a208:	73fb      	strb	r3, [r7, #15]
    break;
 800a20a:	e002      	b.n	800a212 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a20c:	2303      	movs	r3, #3
 800a20e:	73fb      	strb	r3, [r7, #15]
    break;
 800a210:	bf00      	nop
  }
  return usb_status;
 800a212:	7bfb      	ldrb	r3, [r7, #15]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3714      	adds	r7, #20
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <std>:
 800a220:	2300      	movs	r3, #0
 800a222:	b510      	push	{r4, lr}
 800a224:	4604      	mov	r4, r0
 800a226:	e9c0 3300 	strd	r3, r3, [r0]
 800a22a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a22e:	6083      	str	r3, [r0, #8]
 800a230:	8181      	strh	r1, [r0, #12]
 800a232:	6643      	str	r3, [r0, #100]	; 0x64
 800a234:	81c2      	strh	r2, [r0, #14]
 800a236:	6183      	str	r3, [r0, #24]
 800a238:	4619      	mov	r1, r3
 800a23a:	2208      	movs	r2, #8
 800a23c:	305c      	adds	r0, #92	; 0x5c
 800a23e:	f000 fa0b 	bl	800a658 <memset>
 800a242:	4b0d      	ldr	r3, [pc, #52]	; (800a278 <std+0x58>)
 800a244:	6263      	str	r3, [r4, #36]	; 0x24
 800a246:	4b0d      	ldr	r3, [pc, #52]	; (800a27c <std+0x5c>)
 800a248:	62a3      	str	r3, [r4, #40]	; 0x28
 800a24a:	4b0d      	ldr	r3, [pc, #52]	; (800a280 <std+0x60>)
 800a24c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a24e:	4b0d      	ldr	r3, [pc, #52]	; (800a284 <std+0x64>)
 800a250:	6323      	str	r3, [r4, #48]	; 0x30
 800a252:	4b0d      	ldr	r3, [pc, #52]	; (800a288 <std+0x68>)
 800a254:	6224      	str	r4, [r4, #32]
 800a256:	429c      	cmp	r4, r3
 800a258:	d006      	beq.n	800a268 <std+0x48>
 800a25a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a25e:	4294      	cmp	r4, r2
 800a260:	d002      	beq.n	800a268 <std+0x48>
 800a262:	33d0      	adds	r3, #208	; 0xd0
 800a264:	429c      	cmp	r4, r3
 800a266:	d105      	bne.n	800a274 <std+0x54>
 800a268:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a270:	f000 ba6a 	b.w	800a748 <__retarget_lock_init_recursive>
 800a274:	bd10      	pop	{r4, pc}
 800a276:	bf00      	nop
 800a278:	0800a491 	.word	0x0800a491
 800a27c:	0800a4b3 	.word	0x0800a4b3
 800a280:	0800a4eb 	.word	0x0800a4eb
 800a284:	0800a50f 	.word	0x0800a50f
 800a288:	240025f8 	.word	0x240025f8

0800a28c <stdio_exit_handler>:
 800a28c:	4a02      	ldr	r2, [pc, #8]	; (800a298 <stdio_exit_handler+0xc>)
 800a28e:	4903      	ldr	r1, [pc, #12]	; (800a29c <stdio_exit_handler+0x10>)
 800a290:	4803      	ldr	r0, [pc, #12]	; (800a2a0 <stdio_exit_handler+0x14>)
 800a292:	f000 b869 	b.w	800a368 <_fwalk_sglue>
 800a296:	bf00      	nop
 800a298:	24000104 	.word	0x24000104
 800a29c:	0800aff5 	.word	0x0800aff5
 800a2a0:	24000110 	.word	0x24000110

0800a2a4 <cleanup_stdio>:
 800a2a4:	6841      	ldr	r1, [r0, #4]
 800a2a6:	4b0c      	ldr	r3, [pc, #48]	; (800a2d8 <cleanup_stdio+0x34>)
 800a2a8:	4299      	cmp	r1, r3
 800a2aa:	b510      	push	{r4, lr}
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	d001      	beq.n	800a2b4 <cleanup_stdio+0x10>
 800a2b0:	f000 fea0 	bl	800aff4 <_fflush_r>
 800a2b4:	68a1      	ldr	r1, [r4, #8]
 800a2b6:	4b09      	ldr	r3, [pc, #36]	; (800a2dc <cleanup_stdio+0x38>)
 800a2b8:	4299      	cmp	r1, r3
 800a2ba:	d002      	beq.n	800a2c2 <cleanup_stdio+0x1e>
 800a2bc:	4620      	mov	r0, r4
 800a2be:	f000 fe99 	bl	800aff4 <_fflush_r>
 800a2c2:	68e1      	ldr	r1, [r4, #12]
 800a2c4:	4b06      	ldr	r3, [pc, #24]	; (800a2e0 <cleanup_stdio+0x3c>)
 800a2c6:	4299      	cmp	r1, r3
 800a2c8:	d004      	beq.n	800a2d4 <cleanup_stdio+0x30>
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2d0:	f000 be90 	b.w	800aff4 <_fflush_r>
 800a2d4:	bd10      	pop	{r4, pc}
 800a2d6:	bf00      	nop
 800a2d8:	240025f8 	.word	0x240025f8
 800a2dc:	24002660 	.word	0x24002660
 800a2e0:	240026c8 	.word	0x240026c8

0800a2e4 <global_stdio_init.part.0>:
 800a2e4:	b510      	push	{r4, lr}
 800a2e6:	4b0b      	ldr	r3, [pc, #44]	; (800a314 <global_stdio_init.part.0+0x30>)
 800a2e8:	4c0b      	ldr	r4, [pc, #44]	; (800a318 <global_stdio_init.part.0+0x34>)
 800a2ea:	4a0c      	ldr	r2, [pc, #48]	; (800a31c <global_stdio_init.part.0+0x38>)
 800a2ec:	601a      	str	r2, [r3, #0]
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	2104      	movs	r1, #4
 800a2f4:	f7ff ff94 	bl	800a220 <std>
 800a2f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	2109      	movs	r1, #9
 800a300:	f7ff ff8e 	bl	800a220 <std>
 800a304:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a308:	2202      	movs	r2, #2
 800a30a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a30e:	2112      	movs	r1, #18
 800a310:	f7ff bf86 	b.w	800a220 <std>
 800a314:	24002730 	.word	0x24002730
 800a318:	240025f8 	.word	0x240025f8
 800a31c:	0800a28d 	.word	0x0800a28d

0800a320 <__sfp_lock_acquire>:
 800a320:	4801      	ldr	r0, [pc, #4]	; (800a328 <__sfp_lock_acquire+0x8>)
 800a322:	f000 ba12 	b.w	800a74a <__retarget_lock_acquire_recursive>
 800a326:	bf00      	nop
 800a328:	24002739 	.word	0x24002739

0800a32c <__sfp_lock_release>:
 800a32c:	4801      	ldr	r0, [pc, #4]	; (800a334 <__sfp_lock_release+0x8>)
 800a32e:	f000 ba0d 	b.w	800a74c <__retarget_lock_release_recursive>
 800a332:	bf00      	nop
 800a334:	24002739 	.word	0x24002739

0800a338 <__sinit>:
 800a338:	b510      	push	{r4, lr}
 800a33a:	4604      	mov	r4, r0
 800a33c:	f7ff fff0 	bl	800a320 <__sfp_lock_acquire>
 800a340:	6a23      	ldr	r3, [r4, #32]
 800a342:	b11b      	cbz	r3, 800a34c <__sinit+0x14>
 800a344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a348:	f7ff bff0 	b.w	800a32c <__sfp_lock_release>
 800a34c:	4b04      	ldr	r3, [pc, #16]	; (800a360 <__sinit+0x28>)
 800a34e:	6223      	str	r3, [r4, #32]
 800a350:	4b04      	ldr	r3, [pc, #16]	; (800a364 <__sinit+0x2c>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d1f5      	bne.n	800a344 <__sinit+0xc>
 800a358:	f7ff ffc4 	bl	800a2e4 <global_stdio_init.part.0>
 800a35c:	e7f2      	b.n	800a344 <__sinit+0xc>
 800a35e:	bf00      	nop
 800a360:	0800a2a5 	.word	0x0800a2a5
 800a364:	24002730 	.word	0x24002730

0800a368 <_fwalk_sglue>:
 800a368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a36c:	4607      	mov	r7, r0
 800a36e:	4688      	mov	r8, r1
 800a370:	4614      	mov	r4, r2
 800a372:	2600      	movs	r6, #0
 800a374:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a378:	f1b9 0901 	subs.w	r9, r9, #1
 800a37c:	d505      	bpl.n	800a38a <_fwalk_sglue+0x22>
 800a37e:	6824      	ldr	r4, [r4, #0]
 800a380:	2c00      	cmp	r4, #0
 800a382:	d1f7      	bne.n	800a374 <_fwalk_sglue+0xc>
 800a384:	4630      	mov	r0, r6
 800a386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a38a:	89ab      	ldrh	r3, [r5, #12]
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d907      	bls.n	800a3a0 <_fwalk_sglue+0x38>
 800a390:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a394:	3301      	adds	r3, #1
 800a396:	d003      	beq.n	800a3a0 <_fwalk_sglue+0x38>
 800a398:	4629      	mov	r1, r5
 800a39a:	4638      	mov	r0, r7
 800a39c:	47c0      	blx	r8
 800a39e:	4306      	orrs	r6, r0
 800a3a0:	3568      	adds	r5, #104	; 0x68
 800a3a2:	e7e9      	b.n	800a378 <_fwalk_sglue+0x10>

0800a3a4 <iprintf>:
 800a3a4:	b40f      	push	{r0, r1, r2, r3}
 800a3a6:	b507      	push	{r0, r1, r2, lr}
 800a3a8:	4906      	ldr	r1, [pc, #24]	; (800a3c4 <iprintf+0x20>)
 800a3aa:	ab04      	add	r3, sp, #16
 800a3ac:	6808      	ldr	r0, [r1, #0]
 800a3ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3b2:	6881      	ldr	r1, [r0, #8]
 800a3b4:	9301      	str	r3, [sp, #4]
 800a3b6:	f000 faed 	bl	800a994 <_vfiprintf_r>
 800a3ba:	b003      	add	sp, #12
 800a3bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3c0:	b004      	add	sp, #16
 800a3c2:	4770      	bx	lr
 800a3c4:	2400015c 	.word	0x2400015c

0800a3c8 <putchar>:
 800a3c8:	4b02      	ldr	r3, [pc, #8]	; (800a3d4 <putchar+0xc>)
 800a3ca:	4601      	mov	r1, r0
 800a3cc:	6818      	ldr	r0, [r3, #0]
 800a3ce:	6882      	ldr	r2, [r0, #8]
 800a3d0:	f000 be9a 	b.w	800b108 <_putc_r>
 800a3d4:	2400015c 	.word	0x2400015c

0800a3d8 <_puts_r>:
 800a3d8:	6a03      	ldr	r3, [r0, #32]
 800a3da:	b570      	push	{r4, r5, r6, lr}
 800a3dc:	6884      	ldr	r4, [r0, #8]
 800a3de:	4605      	mov	r5, r0
 800a3e0:	460e      	mov	r6, r1
 800a3e2:	b90b      	cbnz	r3, 800a3e8 <_puts_r+0x10>
 800a3e4:	f7ff ffa8 	bl	800a338 <__sinit>
 800a3e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3ea:	07db      	lsls	r3, r3, #31
 800a3ec:	d405      	bmi.n	800a3fa <_puts_r+0x22>
 800a3ee:	89a3      	ldrh	r3, [r4, #12]
 800a3f0:	0598      	lsls	r0, r3, #22
 800a3f2:	d402      	bmi.n	800a3fa <_puts_r+0x22>
 800a3f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3f6:	f000 f9a8 	bl	800a74a <__retarget_lock_acquire_recursive>
 800a3fa:	89a3      	ldrh	r3, [r4, #12]
 800a3fc:	0719      	lsls	r1, r3, #28
 800a3fe:	d513      	bpl.n	800a428 <_puts_r+0x50>
 800a400:	6923      	ldr	r3, [r4, #16]
 800a402:	b18b      	cbz	r3, 800a428 <_puts_r+0x50>
 800a404:	3e01      	subs	r6, #1
 800a406:	68a3      	ldr	r3, [r4, #8]
 800a408:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a40c:	3b01      	subs	r3, #1
 800a40e:	60a3      	str	r3, [r4, #8]
 800a410:	b9e9      	cbnz	r1, 800a44e <_puts_r+0x76>
 800a412:	2b00      	cmp	r3, #0
 800a414:	da2e      	bge.n	800a474 <_puts_r+0x9c>
 800a416:	4622      	mov	r2, r4
 800a418:	210a      	movs	r1, #10
 800a41a:	4628      	mov	r0, r5
 800a41c:	f000 f886 	bl	800a52c <__swbuf_r>
 800a420:	3001      	adds	r0, #1
 800a422:	d007      	beq.n	800a434 <_puts_r+0x5c>
 800a424:	250a      	movs	r5, #10
 800a426:	e007      	b.n	800a438 <_puts_r+0x60>
 800a428:	4621      	mov	r1, r4
 800a42a:	4628      	mov	r0, r5
 800a42c:	f000 f8bc 	bl	800a5a8 <__swsetup_r>
 800a430:	2800      	cmp	r0, #0
 800a432:	d0e7      	beq.n	800a404 <_puts_r+0x2c>
 800a434:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a438:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a43a:	07da      	lsls	r2, r3, #31
 800a43c:	d405      	bmi.n	800a44a <_puts_r+0x72>
 800a43e:	89a3      	ldrh	r3, [r4, #12]
 800a440:	059b      	lsls	r3, r3, #22
 800a442:	d402      	bmi.n	800a44a <_puts_r+0x72>
 800a444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a446:	f000 f981 	bl	800a74c <__retarget_lock_release_recursive>
 800a44a:	4628      	mov	r0, r5
 800a44c:	bd70      	pop	{r4, r5, r6, pc}
 800a44e:	2b00      	cmp	r3, #0
 800a450:	da04      	bge.n	800a45c <_puts_r+0x84>
 800a452:	69a2      	ldr	r2, [r4, #24]
 800a454:	429a      	cmp	r2, r3
 800a456:	dc06      	bgt.n	800a466 <_puts_r+0x8e>
 800a458:	290a      	cmp	r1, #10
 800a45a:	d004      	beq.n	800a466 <_puts_r+0x8e>
 800a45c:	6823      	ldr	r3, [r4, #0]
 800a45e:	1c5a      	adds	r2, r3, #1
 800a460:	6022      	str	r2, [r4, #0]
 800a462:	7019      	strb	r1, [r3, #0]
 800a464:	e7cf      	b.n	800a406 <_puts_r+0x2e>
 800a466:	4622      	mov	r2, r4
 800a468:	4628      	mov	r0, r5
 800a46a:	f000 f85f 	bl	800a52c <__swbuf_r>
 800a46e:	3001      	adds	r0, #1
 800a470:	d1c9      	bne.n	800a406 <_puts_r+0x2e>
 800a472:	e7df      	b.n	800a434 <_puts_r+0x5c>
 800a474:	6823      	ldr	r3, [r4, #0]
 800a476:	250a      	movs	r5, #10
 800a478:	1c5a      	adds	r2, r3, #1
 800a47a:	6022      	str	r2, [r4, #0]
 800a47c:	701d      	strb	r5, [r3, #0]
 800a47e:	e7db      	b.n	800a438 <_puts_r+0x60>

0800a480 <puts>:
 800a480:	4b02      	ldr	r3, [pc, #8]	; (800a48c <puts+0xc>)
 800a482:	4601      	mov	r1, r0
 800a484:	6818      	ldr	r0, [r3, #0]
 800a486:	f7ff bfa7 	b.w	800a3d8 <_puts_r>
 800a48a:	bf00      	nop
 800a48c:	2400015c 	.word	0x2400015c

0800a490 <__sread>:
 800a490:	b510      	push	{r4, lr}
 800a492:	460c      	mov	r4, r1
 800a494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a498:	f000 f908 	bl	800a6ac <_read_r>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	bfab      	itete	ge
 800a4a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4a2:	89a3      	ldrhlt	r3, [r4, #12]
 800a4a4:	181b      	addge	r3, r3, r0
 800a4a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4aa:	bfac      	ite	ge
 800a4ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4ae:	81a3      	strhlt	r3, [r4, #12]
 800a4b0:	bd10      	pop	{r4, pc}

0800a4b2 <__swrite>:
 800a4b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b6:	461f      	mov	r7, r3
 800a4b8:	898b      	ldrh	r3, [r1, #12]
 800a4ba:	05db      	lsls	r3, r3, #23
 800a4bc:	4605      	mov	r5, r0
 800a4be:	460c      	mov	r4, r1
 800a4c0:	4616      	mov	r6, r2
 800a4c2:	d505      	bpl.n	800a4d0 <__swrite+0x1e>
 800a4c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c8:	2302      	movs	r3, #2
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f000 f8dc 	bl	800a688 <_lseek_r>
 800a4d0:	89a3      	ldrh	r3, [r4, #12]
 800a4d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4da:	81a3      	strh	r3, [r4, #12]
 800a4dc:	4632      	mov	r2, r6
 800a4de:	463b      	mov	r3, r7
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e6:	f000 b8f3 	b.w	800a6d0 <_write_r>

0800a4ea <__sseek>:
 800a4ea:	b510      	push	{r4, lr}
 800a4ec:	460c      	mov	r4, r1
 800a4ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4f2:	f000 f8c9 	bl	800a688 <_lseek_r>
 800a4f6:	1c43      	adds	r3, r0, #1
 800a4f8:	89a3      	ldrh	r3, [r4, #12]
 800a4fa:	bf15      	itete	ne
 800a4fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a4fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a502:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a506:	81a3      	strheq	r3, [r4, #12]
 800a508:	bf18      	it	ne
 800a50a:	81a3      	strhne	r3, [r4, #12]
 800a50c:	bd10      	pop	{r4, pc}

0800a50e <__sclose>:
 800a50e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a512:	f000 b8a9 	b.w	800a668 <_close_r>
	...

0800a518 <viprintf>:
 800a518:	460b      	mov	r3, r1
 800a51a:	4903      	ldr	r1, [pc, #12]	; (800a528 <viprintf+0x10>)
 800a51c:	4602      	mov	r2, r0
 800a51e:	6808      	ldr	r0, [r1, #0]
 800a520:	6881      	ldr	r1, [r0, #8]
 800a522:	f000 ba37 	b.w	800a994 <_vfiprintf_r>
 800a526:	bf00      	nop
 800a528:	2400015c 	.word	0x2400015c

0800a52c <__swbuf_r>:
 800a52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52e:	460e      	mov	r6, r1
 800a530:	4614      	mov	r4, r2
 800a532:	4605      	mov	r5, r0
 800a534:	b118      	cbz	r0, 800a53e <__swbuf_r+0x12>
 800a536:	6a03      	ldr	r3, [r0, #32]
 800a538:	b90b      	cbnz	r3, 800a53e <__swbuf_r+0x12>
 800a53a:	f7ff fefd 	bl	800a338 <__sinit>
 800a53e:	69a3      	ldr	r3, [r4, #24]
 800a540:	60a3      	str	r3, [r4, #8]
 800a542:	89a3      	ldrh	r3, [r4, #12]
 800a544:	071a      	lsls	r2, r3, #28
 800a546:	d525      	bpl.n	800a594 <__swbuf_r+0x68>
 800a548:	6923      	ldr	r3, [r4, #16]
 800a54a:	b31b      	cbz	r3, 800a594 <__swbuf_r+0x68>
 800a54c:	6823      	ldr	r3, [r4, #0]
 800a54e:	6922      	ldr	r2, [r4, #16]
 800a550:	1a98      	subs	r0, r3, r2
 800a552:	6963      	ldr	r3, [r4, #20]
 800a554:	b2f6      	uxtb	r6, r6
 800a556:	4283      	cmp	r3, r0
 800a558:	4637      	mov	r7, r6
 800a55a:	dc04      	bgt.n	800a566 <__swbuf_r+0x3a>
 800a55c:	4621      	mov	r1, r4
 800a55e:	4628      	mov	r0, r5
 800a560:	f000 fd48 	bl	800aff4 <_fflush_r>
 800a564:	b9e0      	cbnz	r0, 800a5a0 <__swbuf_r+0x74>
 800a566:	68a3      	ldr	r3, [r4, #8]
 800a568:	3b01      	subs	r3, #1
 800a56a:	60a3      	str	r3, [r4, #8]
 800a56c:	6823      	ldr	r3, [r4, #0]
 800a56e:	1c5a      	adds	r2, r3, #1
 800a570:	6022      	str	r2, [r4, #0]
 800a572:	701e      	strb	r6, [r3, #0]
 800a574:	6962      	ldr	r2, [r4, #20]
 800a576:	1c43      	adds	r3, r0, #1
 800a578:	429a      	cmp	r2, r3
 800a57a:	d004      	beq.n	800a586 <__swbuf_r+0x5a>
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	07db      	lsls	r3, r3, #31
 800a580:	d506      	bpl.n	800a590 <__swbuf_r+0x64>
 800a582:	2e0a      	cmp	r6, #10
 800a584:	d104      	bne.n	800a590 <__swbuf_r+0x64>
 800a586:	4621      	mov	r1, r4
 800a588:	4628      	mov	r0, r5
 800a58a:	f000 fd33 	bl	800aff4 <_fflush_r>
 800a58e:	b938      	cbnz	r0, 800a5a0 <__swbuf_r+0x74>
 800a590:	4638      	mov	r0, r7
 800a592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a594:	4621      	mov	r1, r4
 800a596:	4628      	mov	r0, r5
 800a598:	f000 f806 	bl	800a5a8 <__swsetup_r>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	d0d5      	beq.n	800a54c <__swbuf_r+0x20>
 800a5a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a5a4:	e7f4      	b.n	800a590 <__swbuf_r+0x64>
	...

0800a5a8 <__swsetup_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	4b2a      	ldr	r3, [pc, #168]	; (800a654 <__swsetup_r+0xac>)
 800a5ac:	4605      	mov	r5, r0
 800a5ae:	6818      	ldr	r0, [r3, #0]
 800a5b0:	460c      	mov	r4, r1
 800a5b2:	b118      	cbz	r0, 800a5bc <__swsetup_r+0x14>
 800a5b4:	6a03      	ldr	r3, [r0, #32]
 800a5b6:	b90b      	cbnz	r3, 800a5bc <__swsetup_r+0x14>
 800a5b8:	f7ff febe 	bl	800a338 <__sinit>
 800a5bc:	89a3      	ldrh	r3, [r4, #12]
 800a5be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5c2:	0718      	lsls	r0, r3, #28
 800a5c4:	d422      	bmi.n	800a60c <__swsetup_r+0x64>
 800a5c6:	06d9      	lsls	r1, r3, #27
 800a5c8:	d407      	bmi.n	800a5da <__swsetup_r+0x32>
 800a5ca:	2309      	movs	r3, #9
 800a5cc:	602b      	str	r3, [r5, #0]
 800a5ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5d2:	81a3      	strh	r3, [r4, #12]
 800a5d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5d8:	e034      	b.n	800a644 <__swsetup_r+0x9c>
 800a5da:	0758      	lsls	r0, r3, #29
 800a5dc:	d512      	bpl.n	800a604 <__swsetup_r+0x5c>
 800a5de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5e0:	b141      	cbz	r1, 800a5f4 <__swsetup_r+0x4c>
 800a5e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5e6:	4299      	cmp	r1, r3
 800a5e8:	d002      	beq.n	800a5f0 <__swsetup_r+0x48>
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	f000 f8b0 	bl	800a750 <_free_r>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	6363      	str	r3, [r4, #52]	; 0x34
 800a5f4:	89a3      	ldrh	r3, [r4, #12]
 800a5f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5fa:	81a3      	strh	r3, [r4, #12]
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	6063      	str	r3, [r4, #4]
 800a600:	6923      	ldr	r3, [r4, #16]
 800a602:	6023      	str	r3, [r4, #0]
 800a604:	89a3      	ldrh	r3, [r4, #12]
 800a606:	f043 0308 	orr.w	r3, r3, #8
 800a60a:	81a3      	strh	r3, [r4, #12]
 800a60c:	6923      	ldr	r3, [r4, #16]
 800a60e:	b94b      	cbnz	r3, 800a624 <__swsetup_r+0x7c>
 800a610:	89a3      	ldrh	r3, [r4, #12]
 800a612:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a61a:	d003      	beq.n	800a624 <__swsetup_r+0x7c>
 800a61c:	4621      	mov	r1, r4
 800a61e:	4628      	mov	r0, r5
 800a620:	f000 fd36 	bl	800b090 <__smakebuf_r>
 800a624:	89a0      	ldrh	r0, [r4, #12]
 800a626:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a62a:	f010 0301 	ands.w	r3, r0, #1
 800a62e:	d00a      	beq.n	800a646 <__swsetup_r+0x9e>
 800a630:	2300      	movs	r3, #0
 800a632:	60a3      	str	r3, [r4, #8]
 800a634:	6963      	ldr	r3, [r4, #20]
 800a636:	425b      	negs	r3, r3
 800a638:	61a3      	str	r3, [r4, #24]
 800a63a:	6923      	ldr	r3, [r4, #16]
 800a63c:	b943      	cbnz	r3, 800a650 <__swsetup_r+0xa8>
 800a63e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a642:	d1c4      	bne.n	800a5ce <__swsetup_r+0x26>
 800a644:	bd38      	pop	{r3, r4, r5, pc}
 800a646:	0781      	lsls	r1, r0, #30
 800a648:	bf58      	it	pl
 800a64a:	6963      	ldrpl	r3, [r4, #20]
 800a64c:	60a3      	str	r3, [r4, #8]
 800a64e:	e7f4      	b.n	800a63a <__swsetup_r+0x92>
 800a650:	2000      	movs	r0, #0
 800a652:	e7f7      	b.n	800a644 <__swsetup_r+0x9c>
 800a654:	2400015c 	.word	0x2400015c

0800a658 <memset>:
 800a658:	4402      	add	r2, r0
 800a65a:	4603      	mov	r3, r0
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d100      	bne.n	800a662 <memset+0xa>
 800a660:	4770      	bx	lr
 800a662:	f803 1b01 	strb.w	r1, [r3], #1
 800a666:	e7f9      	b.n	800a65c <memset+0x4>

0800a668 <_close_r>:
 800a668:	b538      	push	{r3, r4, r5, lr}
 800a66a:	4d06      	ldr	r5, [pc, #24]	; (800a684 <_close_r+0x1c>)
 800a66c:	2300      	movs	r3, #0
 800a66e:	4604      	mov	r4, r0
 800a670:	4608      	mov	r0, r1
 800a672:	602b      	str	r3, [r5, #0]
 800a674:	f7f6 fa55 	bl	8000b22 <_close>
 800a678:	1c43      	adds	r3, r0, #1
 800a67a:	d102      	bne.n	800a682 <_close_r+0x1a>
 800a67c:	682b      	ldr	r3, [r5, #0]
 800a67e:	b103      	cbz	r3, 800a682 <_close_r+0x1a>
 800a680:	6023      	str	r3, [r4, #0]
 800a682:	bd38      	pop	{r3, r4, r5, pc}
 800a684:	24002734 	.word	0x24002734

0800a688 <_lseek_r>:
 800a688:	b538      	push	{r3, r4, r5, lr}
 800a68a:	4d07      	ldr	r5, [pc, #28]	; (800a6a8 <_lseek_r+0x20>)
 800a68c:	4604      	mov	r4, r0
 800a68e:	4608      	mov	r0, r1
 800a690:	4611      	mov	r1, r2
 800a692:	2200      	movs	r2, #0
 800a694:	602a      	str	r2, [r5, #0]
 800a696:	461a      	mov	r2, r3
 800a698:	f7f6 fa6a 	bl	8000b70 <_lseek>
 800a69c:	1c43      	adds	r3, r0, #1
 800a69e:	d102      	bne.n	800a6a6 <_lseek_r+0x1e>
 800a6a0:	682b      	ldr	r3, [r5, #0]
 800a6a2:	b103      	cbz	r3, 800a6a6 <_lseek_r+0x1e>
 800a6a4:	6023      	str	r3, [r4, #0]
 800a6a6:	bd38      	pop	{r3, r4, r5, pc}
 800a6a8:	24002734 	.word	0x24002734

0800a6ac <_read_r>:
 800a6ac:	b538      	push	{r3, r4, r5, lr}
 800a6ae:	4d07      	ldr	r5, [pc, #28]	; (800a6cc <_read_r+0x20>)
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	4608      	mov	r0, r1
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	602a      	str	r2, [r5, #0]
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	f7f6 f9f2 	bl	8000aa4 <_read>
 800a6c0:	1c43      	adds	r3, r0, #1
 800a6c2:	d102      	bne.n	800a6ca <_read_r+0x1e>
 800a6c4:	682b      	ldr	r3, [r5, #0]
 800a6c6:	b103      	cbz	r3, 800a6ca <_read_r+0x1e>
 800a6c8:	6023      	str	r3, [r4, #0]
 800a6ca:	bd38      	pop	{r3, r4, r5, pc}
 800a6cc:	24002734 	.word	0x24002734

0800a6d0 <_write_r>:
 800a6d0:	b538      	push	{r3, r4, r5, lr}
 800a6d2:	4d07      	ldr	r5, [pc, #28]	; (800a6f0 <_write_r+0x20>)
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	4608      	mov	r0, r1
 800a6d8:	4611      	mov	r1, r2
 800a6da:	2200      	movs	r2, #0
 800a6dc:	602a      	str	r2, [r5, #0]
 800a6de:	461a      	mov	r2, r3
 800a6e0:	f7f6 f9fd 	bl	8000ade <_write>
 800a6e4:	1c43      	adds	r3, r0, #1
 800a6e6:	d102      	bne.n	800a6ee <_write_r+0x1e>
 800a6e8:	682b      	ldr	r3, [r5, #0]
 800a6ea:	b103      	cbz	r3, 800a6ee <_write_r+0x1e>
 800a6ec:	6023      	str	r3, [r4, #0]
 800a6ee:	bd38      	pop	{r3, r4, r5, pc}
 800a6f0:	24002734 	.word	0x24002734

0800a6f4 <__errno>:
 800a6f4:	4b01      	ldr	r3, [pc, #4]	; (800a6fc <__errno+0x8>)
 800a6f6:	6818      	ldr	r0, [r3, #0]
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	2400015c 	.word	0x2400015c

0800a700 <__libc_init_array>:
 800a700:	b570      	push	{r4, r5, r6, lr}
 800a702:	4d0d      	ldr	r5, [pc, #52]	; (800a738 <__libc_init_array+0x38>)
 800a704:	4c0d      	ldr	r4, [pc, #52]	; (800a73c <__libc_init_array+0x3c>)
 800a706:	1b64      	subs	r4, r4, r5
 800a708:	10a4      	asrs	r4, r4, #2
 800a70a:	2600      	movs	r6, #0
 800a70c:	42a6      	cmp	r6, r4
 800a70e:	d109      	bne.n	800a724 <__libc_init_array+0x24>
 800a710:	4d0b      	ldr	r5, [pc, #44]	; (800a740 <__libc_init_array+0x40>)
 800a712:	4c0c      	ldr	r4, [pc, #48]	; (800a744 <__libc_init_array+0x44>)
 800a714:	f000 fd5e 	bl	800b1d4 <_init>
 800a718:	1b64      	subs	r4, r4, r5
 800a71a:	10a4      	asrs	r4, r4, #2
 800a71c:	2600      	movs	r6, #0
 800a71e:	42a6      	cmp	r6, r4
 800a720:	d105      	bne.n	800a72e <__libc_init_array+0x2e>
 800a722:	bd70      	pop	{r4, r5, r6, pc}
 800a724:	f855 3b04 	ldr.w	r3, [r5], #4
 800a728:	4798      	blx	r3
 800a72a:	3601      	adds	r6, #1
 800a72c:	e7ee      	b.n	800a70c <__libc_init_array+0xc>
 800a72e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a732:	4798      	blx	r3
 800a734:	3601      	adds	r6, #1
 800a736:	e7f2      	b.n	800a71e <__libc_init_array+0x1e>
 800a738:	0800b3dc 	.word	0x0800b3dc
 800a73c:	0800b3dc 	.word	0x0800b3dc
 800a740:	0800b3dc 	.word	0x0800b3dc
 800a744:	0800b3e0 	.word	0x0800b3e0

0800a748 <__retarget_lock_init_recursive>:
 800a748:	4770      	bx	lr

0800a74a <__retarget_lock_acquire_recursive>:
 800a74a:	4770      	bx	lr

0800a74c <__retarget_lock_release_recursive>:
 800a74c:	4770      	bx	lr
	...

0800a750 <_free_r>:
 800a750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a752:	2900      	cmp	r1, #0
 800a754:	d044      	beq.n	800a7e0 <_free_r+0x90>
 800a756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a75a:	9001      	str	r0, [sp, #4]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f1a1 0404 	sub.w	r4, r1, #4
 800a762:	bfb8      	it	lt
 800a764:	18e4      	addlt	r4, r4, r3
 800a766:	f000 f8df 	bl	800a928 <__malloc_lock>
 800a76a:	4a1e      	ldr	r2, [pc, #120]	; (800a7e4 <_free_r+0x94>)
 800a76c:	9801      	ldr	r0, [sp, #4]
 800a76e:	6813      	ldr	r3, [r2, #0]
 800a770:	b933      	cbnz	r3, 800a780 <_free_r+0x30>
 800a772:	6063      	str	r3, [r4, #4]
 800a774:	6014      	str	r4, [r2, #0]
 800a776:	b003      	add	sp, #12
 800a778:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a77c:	f000 b8da 	b.w	800a934 <__malloc_unlock>
 800a780:	42a3      	cmp	r3, r4
 800a782:	d908      	bls.n	800a796 <_free_r+0x46>
 800a784:	6825      	ldr	r5, [r4, #0]
 800a786:	1961      	adds	r1, r4, r5
 800a788:	428b      	cmp	r3, r1
 800a78a:	bf01      	itttt	eq
 800a78c:	6819      	ldreq	r1, [r3, #0]
 800a78e:	685b      	ldreq	r3, [r3, #4]
 800a790:	1949      	addeq	r1, r1, r5
 800a792:	6021      	streq	r1, [r4, #0]
 800a794:	e7ed      	b.n	800a772 <_free_r+0x22>
 800a796:	461a      	mov	r2, r3
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	b10b      	cbz	r3, 800a7a0 <_free_r+0x50>
 800a79c:	42a3      	cmp	r3, r4
 800a79e:	d9fa      	bls.n	800a796 <_free_r+0x46>
 800a7a0:	6811      	ldr	r1, [r2, #0]
 800a7a2:	1855      	adds	r5, r2, r1
 800a7a4:	42a5      	cmp	r5, r4
 800a7a6:	d10b      	bne.n	800a7c0 <_free_r+0x70>
 800a7a8:	6824      	ldr	r4, [r4, #0]
 800a7aa:	4421      	add	r1, r4
 800a7ac:	1854      	adds	r4, r2, r1
 800a7ae:	42a3      	cmp	r3, r4
 800a7b0:	6011      	str	r1, [r2, #0]
 800a7b2:	d1e0      	bne.n	800a776 <_free_r+0x26>
 800a7b4:	681c      	ldr	r4, [r3, #0]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	6053      	str	r3, [r2, #4]
 800a7ba:	440c      	add	r4, r1
 800a7bc:	6014      	str	r4, [r2, #0]
 800a7be:	e7da      	b.n	800a776 <_free_r+0x26>
 800a7c0:	d902      	bls.n	800a7c8 <_free_r+0x78>
 800a7c2:	230c      	movs	r3, #12
 800a7c4:	6003      	str	r3, [r0, #0]
 800a7c6:	e7d6      	b.n	800a776 <_free_r+0x26>
 800a7c8:	6825      	ldr	r5, [r4, #0]
 800a7ca:	1961      	adds	r1, r4, r5
 800a7cc:	428b      	cmp	r3, r1
 800a7ce:	bf04      	itt	eq
 800a7d0:	6819      	ldreq	r1, [r3, #0]
 800a7d2:	685b      	ldreq	r3, [r3, #4]
 800a7d4:	6063      	str	r3, [r4, #4]
 800a7d6:	bf04      	itt	eq
 800a7d8:	1949      	addeq	r1, r1, r5
 800a7da:	6021      	streq	r1, [r4, #0]
 800a7dc:	6054      	str	r4, [r2, #4]
 800a7de:	e7ca      	b.n	800a776 <_free_r+0x26>
 800a7e0:	b003      	add	sp, #12
 800a7e2:	bd30      	pop	{r4, r5, pc}
 800a7e4:	2400273c 	.word	0x2400273c

0800a7e8 <sbrk_aligned>:
 800a7e8:	b570      	push	{r4, r5, r6, lr}
 800a7ea:	4e0e      	ldr	r6, [pc, #56]	; (800a824 <sbrk_aligned+0x3c>)
 800a7ec:	460c      	mov	r4, r1
 800a7ee:	6831      	ldr	r1, [r6, #0]
 800a7f0:	4605      	mov	r5, r0
 800a7f2:	b911      	cbnz	r1, 800a7fa <sbrk_aligned+0x12>
 800a7f4:	f000 fcde 	bl	800b1b4 <_sbrk_r>
 800a7f8:	6030      	str	r0, [r6, #0]
 800a7fa:	4621      	mov	r1, r4
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	f000 fcd9 	bl	800b1b4 <_sbrk_r>
 800a802:	1c43      	adds	r3, r0, #1
 800a804:	d00a      	beq.n	800a81c <sbrk_aligned+0x34>
 800a806:	1cc4      	adds	r4, r0, #3
 800a808:	f024 0403 	bic.w	r4, r4, #3
 800a80c:	42a0      	cmp	r0, r4
 800a80e:	d007      	beq.n	800a820 <sbrk_aligned+0x38>
 800a810:	1a21      	subs	r1, r4, r0
 800a812:	4628      	mov	r0, r5
 800a814:	f000 fcce 	bl	800b1b4 <_sbrk_r>
 800a818:	3001      	adds	r0, #1
 800a81a:	d101      	bne.n	800a820 <sbrk_aligned+0x38>
 800a81c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a820:	4620      	mov	r0, r4
 800a822:	bd70      	pop	{r4, r5, r6, pc}
 800a824:	24002740 	.word	0x24002740

0800a828 <_malloc_r>:
 800a828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a82c:	1ccd      	adds	r5, r1, #3
 800a82e:	f025 0503 	bic.w	r5, r5, #3
 800a832:	3508      	adds	r5, #8
 800a834:	2d0c      	cmp	r5, #12
 800a836:	bf38      	it	cc
 800a838:	250c      	movcc	r5, #12
 800a83a:	2d00      	cmp	r5, #0
 800a83c:	4607      	mov	r7, r0
 800a83e:	db01      	blt.n	800a844 <_malloc_r+0x1c>
 800a840:	42a9      	cmp	r1, r5
 800a842:	d905      	bls.n	800a850 <_malloc_r+0x28>
 800a844:	230c      	movs	r3, #12
 800a846:	603b      	str	r3, [r7, #0]
 800a848:	2600      	movs	r6, #0
 800a84a:	4630      	mov	r0, r6
 800a84c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a850:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a924 <_malloc_r+0xfc>
 800a854:	f000 f868 	bl	800a928 <__malloc_lock>
 800a858:	f8d8 3000 	ldr.w	r3, [r8]
 800a85c:	461c      	mov	r4, r3
 800a85e:	bb5c      	cbnz	r4, 800a8b8 <_malloc_r+0x90>
 800a860:	4629      	mov	r1, r5
 800a862:	4638      	mov	r0, r7
 800a864:	f7ff ffc0 	bl	800a7e8 <sbrk_aligned>
 800a868:	1c43      	adds	r3, r0, #1
 800a86a:	4604      	mov	r4, r0
 800a86c:	d155      	bne.n	800a91a <_malloc_r+0xf2>
 800a86e:	f8d8 4000 	ldr.w	r4, [r8]
 800a872:	4626      	mov	r6, r4
 800a874:	2e00      	cmp	r6, #0
 800a876:	d145      	bne.n	800a904 <_malloc_r+0xdc>
 800a878:	2c00      	cmp	r4, #0
 800a87a:	d048      	beq.n	800a90e <_malloc_r+0xe6>
 800a87c:	6823      	ldr	r3, [r4, #0]
 800a87e:	4631      	mov	r1, r6
 800a880:	4638      	mov	r0, r7
 800a882:	eb04 0903 	add.w	r9, r4, r3
 800a886:	f000 fc95 	bl	800b1b4 <_sbrk_r>
 800a88a:	4581      	cmp	r9, r0
 800a88c:	d13f      	bne.n	800a90e <_malloc_r+0xe6>
 800a88e:	6821      	ldr	r1, [r4, #0]
 800a890:	1a6d      	subs	r5, r5, r1
 800a892:	4629      	mov	r1, r5
 800a894:	4638      	mov	r0, r7
 800a896:	f7ff ffa7 	bl	800a7e8 <sbrk_aligned>
 800a89a:	3001      	adds	r0, #1
 800a89c:	d037      	beq.n	800a90e <_malloc_r+0xe6>
 800a89e:	6823      	ldr	r3, [r4, #0]
 800a8a0:	442b      	add	r3, r5
 800a8a2:	6023      	str	r3, [r4, #0]
 800a8a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d038      	beq.n	800a91e <_malloc_r+0xf6>
 800a8ac:	685a      	ldr	r2, [r3, #4]
 800a8ae:	42a2      	cmp	r2, r4
 800a8b0:	d12b      	bne.n	800a90a <_malloc_r+0xe2>
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	605a      	str	r2, [r3, #4]
 800a8b6:	e00f      	b.n	800a8d8 <_malloc_r+0xb0>
 800a8b8:	6822      	ldr	r2, [r4, #0]
 800a8ba:	1b52      	subs	r2, r2, r5
 800a8bc:	d41f      	bmi.n	800a8fe <_malloc_r+0xd6>
 800a8be:	2a0b      	cmp	r2, #11
 800a8c0:	d917      	bls.n	800a8f2 <_malloc_r+0xca>
 800a8c2:	1961      	adds	r1, r4, r5
 800a8c4:	42a3      	cmp	r3, r4
 800a8c6:	6025      	str	r5, [r4, #0]
 800a8c8:	bf18      	it	ne
 800a8ca:	6059      	strne	r1, [r3, #4]
 800a8cc:	6863      	ldr	r3, [r4, #4]
 800a8ce:	bf08      	it	eq
 800a8d0:	f8c8 1000 	streq.w	r1, [r8]
 800a8d4:	5162      	str	r2, [r4, r5]
 800a8d6:	604b      	str	r3, [r1, #4]
 800a8d8:	4638      	mov	r0, r7
 800a8da:	f104 060b 	add.w	r6, r4, #11
 800a8de:	f000 f829 	bl	800a934 <__malloc_unlock>
 800a8e2:	f026 0607 	bic.w	r6, r6, #7
 800a8e6:	1d23      	adds	r3, r4, #4
 800a8e8:	1af2      	subs	r2, r6, r3
 800a8ea:	d0ae      	beq.n	800a84a <_malloc_r+0x22>
 800a8ec:	1b9b      	subs	r3, r3, r6
 800a8ee:	50a3      	str	r3, [r4, r2]
 800a8f0:	e7ab      	b.n	800a84a <_malloc_r+0x22>
 800a8f2:	42a3      	cmp	r3, r4
 800a8f4:	6862      	ldr	r2, [r4, #4]
 800a8f6:	d1dd      	bne.n	800a8b4 <_malloc_r+0x8c>
 800a8f8:	f8c8 2000 	str.w	r2, [r8]
 800a8fc:	e7ec      	b.n	800a8d8 <_malloc_r+0xb0>
 800a8fe:	4623      	mov	r3, r4
 800a900:	6864      	ldr	r4, [r4, #4]
 800a902:	e7ac      	b.n	800a85e <_malloc_r+0x36>
 800a904:	4634      	mov	r4, r6
 800a906:	6876      	ldr	r6, [r6, #4]
 800a908:	e7b4      	b.n	800a874 <_malloc_r+0x4c>
 800a90a:	4613      	mov	r3, r2
 800a90c:	e7cc      	b.n	800a8a8 <_malloc_r+0x80>
 800a90e:	230c      	movs	r3, #12
 800a910:	603b      	str	r3, [r7, #0]
 800a912:	4638      	mov	r0, r7
 800a914:	f000 f80e 	bl	800a934 <__malloc_unlock>
 800a918:	e797      	b.n	800a84a <_malloc_r+0x22>
 800a91a:	6025      	str	r5, [r4, #0]
 800a91c:	e7dc      	b.n	800a8d8 <_malloc_r+0xb0>
 800a91e:	605b      	str	r3, [r3, #4]
 800a920:	deff      	udf	#255	; 0xff
 800a922:	bf00      	nop
 800a924:	2400273c 	.word	0x2400273c

0800a928 <__malloc_lock>:
 800a928:	4801      	ldr	r0, [pc, #4]	; (800a930 <__malloc_lock+0x8>)
 800a92a:	f7ff bf0e 	b.w	800a74a <__retarget_lock_acquire_recursive>
 800a92e:	bf00      	nop
 800a930:	24002738 	.word	0x24002738

0800a934 <__malloc_unlock>:
 800a934:	4801      	ldr	r0, [pc, #4]	; (800a93c <__malloc_unlock+0x8>)
 800a936:	f7ff bf09 	b.w	800a74c <__retarget_lock_release_recursive>
 800a93a:	bf00      	nop
 800a93c:	24002738 	.word	0x24002738

0800a940 <__sfputc_r>:
 800a940:	6893      	ldr	r3, [r2, #8]
 800a942:	3b01      	subs	r3, #1
 800a944:	2b00      	cmp	r3, #0
 800a946:	b410      	push	{r4}
 800a948:	6093      	str	r3, [r2, #8]
 800a94a:	da08      	bge.n	800a95e <__sfputc_r+0x1e>
 800a94c:	6994      	ldr	r4, [r2, #24]
 800a94e:	42a3      	cmp	r3, r4
 800a950:	db01      	blt.n	800a956 <__sfputc_r+0x16>
 800a952:	290a      	cmp	r1, #10
 800a954:	d103      	bne.n	800a95e <__sfputc_r+0x1e>
 800a956:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a95a:	f7ff bde7 	b.w	800a52c <__swbuf_r>
 800a95e:	6813      	ldr	r3, [r2, #0]
 800a960:	1c58      	adds	r0, r3, #1
 800a962:	6010      	str	r0, [r2, #0]
 800a964:	7019      	strb	r1, [r3, #0]
 800a966:	4608      	mov	r0, r1
 800a968:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <__sfputs_r>:
 800a96e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a970:	4606      	mov	r6, r0
 800a972:	460f      	mov	r7, r1
 800a974:	4614      	mov	r4, r2
 800a976:	18d5      	adds	r5, r2, r3
 800a978:	42ac      	cmp	r4, r5
 800a97a:	d101      	bne.n	800a980 <__sfputs_r+0x12>
 800a97c:	2000      	movs	r0, #0
 800a97e:	e007      	b.n	800a990 <__sfputs_r+0x22>
 800a980:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a984:	463a      	mov	r2, r7
 800a986:	4630      	mov	r0, r6
 800a988:	f7ff ffda 	bl	800a940 <__sfputc_r>
 800a98c:	1c43      	adds	r3, r0, #1
 800a98e:	d1f3      	bne.n	800a978 <__sfputs_r+0xa>
 800a990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a994 <_vfiprintf_r>:
 800a994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a998:	460d      	mov	r5, r1
 800a99a:	b09d      	sub	sp, #116	; 0x74
 800a99c:	4614      	mov	r4, r2
 800a99e:	4698      	mov	r8, r3
 800a9a0:	4606      	mov	r6, r0
 800a9a2:	b118      	cbz	r0, 800a9ac <_vfiprintf_r+0x18>
 800a9a4:	6a03      	ldr	r3, [r0, #32]
 800a9a6:	b90b      	cbnz	r3, 800a9ac <_vfiprintf_r+0x18>
 800a9a8:	f7ff fcc6 	bl	800a338 <__sinit>
 800a9ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9ae:	07d9      	lsls	r1, r3, #31
 800a9b0:	d405      	bmi.n	800a9be <_vfiprintf_r+0x2a>
 800a9b2:	89ab      	ldrh	r3, [r5, #12]
 800a9b4:	059a      	lsls	r2, r3, #22
 800a9b6:	d402      	bmi.n	800a9be <_vfiprintf_r+0x2a>
 800a9b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9ba:	f7ff fec6 	bl	800a74a <__retarget_lock_acquire_recursive>
 800a9be:	89ab      	ldrh	r3, [r5, #12]
 800a9c0:	071b      	lsls	r3, r3, #28
 800a9c2:	d501      	bpl.n	800a9c8 <_vfiprintf_r+0x34>
 800a9c4:	692b      	ldr	r3, [r5, #16]
 800a9c6:	b99b      	cbnz	r3, 800a9f0 <_vfiprintf_r+0x5c>
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	f7ff fdec 	bl	800a5a8 <__swsetup_r>
 800a9d0:	b170      	cbz	r0, 800a9f0 <_vfiprintf_r+0x5c>
 800a9d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9d4:	07dc      	lsls	r4, r3, #31
 800a9d6:	d504      	bpl.n	800a9e2 <_vfiprintf_r+0x4e>
 800a9d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9dc:	b01d      	add	sp, #116	; 0x74
 800a9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e2:	89ab      	ldrh	r3, [r5, #12]
 800a9e4:	0598      	lsls	r0, r3, #22
 800a9e6:	d4f7      	bmi.n	800a9d8 <_vfiprintf_r+0x44>
 800a9e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9ea:	f7ff feaf 	bl	800a74c <__retarget_lock_release_recursive>
 800a9ee:	e7f3      	b.n	800a9d8 <_vfiprintf_r+0x44>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a9f4:	2320      	movs	r3, #32
 800a9f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9fe:	2330      	movs	r3, #48	; 0x30
 800aa00:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800abb4 <_vfiprintf_r+0x220>
 800aa04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa08:	f04f 0901 	mov.w	r9, #1
 800aa0c:	4623      	mov	r3, r4
 800aa0e:	469a      	mov	sl, r3
 800aa10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa14:	b10a      	cbz	r2, 800aa1a <_vfiprintf_r+0x86>
 800aa16:	2a25      	cmp	r2, #37	; 0x25
 800aa18:	d1f9      	bne.n	800aa0e <_vfiprintf_r+0x7a>
 800aa1a:	ebba 0b04 	subs.w	fp, sl, r4
 800aa1e:	d00b      	beq.n	800aa38 <_vfiprintf_r+0xa4>
 800aa20:	465b      	mov	r3, fp
 800aa22:	4622      	mov	r2, r4
 800aa24:	4629      	mov	r1, r5
 800aa26:	4630      	mov	r0, r6
 800aa28:	f7ff ffa1 	bl	800a96e <__sfputs_r>
 800aa2c:	3001      	adds	r0, #1
 800aa2e:	f000 80a9 	beq.w	800ab84 <_vfiprintf_r+0x1f0>
 800aa32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa34:	445a      	add	r2, fp
 800aa36:	9209      	str	r2, [sp, #36]	; 0x24
 800aa38:	f89a 3000 	ldrb.w	r3, [sl]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f000 80a1 	beq.w	800ab84 <_vfiprintf_r+0x1f0>
 800aa42:	2300      	movs	r3, #0
 800aa44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa4c:	f10a 0a01 	add.w	sl, sl, #1
 800aa50:	9304      	str	r3, [sp, #16]
 800aa52:	9307      	str	r3, [sp, #28]
 800aa54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa58:	931a      	str	r3, [sp, #104]	; 0x68
 800aa5a:	4654      	mov	r4, sl
 800aa5c:	2205      	movs	r2, #5
 800aa5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa62:	4854      	ldr	r0, [pc, #336]	; (800abb4 <_vfiprintf_r+0x220>)
 800aa64:	f7f5 fc4c 	bl	8000300 <memchr>
 800aa68:	9a04      	ldr	r2, [sp, #16]
 800aa6a:	b9d8      	cbnz	r0, 800aaa4 <_vfiprintf_r+0x110>
 800aa6c:	06d1      	lsls	r1, r2, #27
 800aa6e:	bf44      	itt	mi
 800aa70:	2320      	movmi	r3, #32
 800aa72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa76:	0713      	lsls	r3, r2, #28
 800aa78:	bf44      	itt	mi
 800aa7a:	232b      	movmi	r3, #43	; 0x2b
 800aa7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa80:	f89a 3000 	ldrb.w	r3, [sl]
 800aa84:	2b2a      	cmp	r3, #42	; 0x2a
 800aa86:	d015      	beq.n	800aab4 <_vfiprintf_r+0x120>
 800aa88:	9a07      	ldr	r2, [sp, #28]
 800aa8a:	4654      	mov	r4, sl
 800aa8c:	2000      	movs	r0, #0
 800aa8e:	f04f 0c0a 	mov.w	ip, #10
 800aa92:	4621      	mov	r1, r4
 800aa94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa98:	3b30      	subs	r3, #48	; 0x30
 800aa9a:	2b09      	cmp	r3, #9
 800aa9c:	d94d      	bls.n	800ab3a <_vfiprintf_r+0x1a6>
 800aa9e:	b1b0      	cbz	r0, 800aace <_vfiprintf_r+0x13a>
 800aaa0:	9207      	str	r2, [sp, #28]
 800aaa2:	e014      	b.n	800aace <_vfiprintf_r+0x13a>
 800aaa4:	eba0 0308 	sub.w	r3, r0, r8
 800aaa8:	fa09 f303 	lsl.w	r3, r9, r3
 800aaac:	4313      	orrs	r3, r2
 800aaae:	9304      	str	r3, [sp, #16]
 800aab0:	46a2      	mov	sl, r4
 800aab2:	e7d2      	b.n	800aa5a <_vfiprintf_r+0xc6>
 800aab4:	9b03      	ldr	r3, [sp, #12]
 800aab6:	1d19      	adds	r1, r3, #4
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	9103      	str	r1, [sp, #12]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	bfbb      	ittet	lt
 800aac0:	425b      	neglt	r3, r3
 800aac2:	f042 0202 	orrlt.w	r2, r2, #2
 800aac6:	9307      	strge	r3, [sp, #28]
 800aac8:	9307      	strlt	r3, [sp, #28]
 800aaca:	bfb8      	it	lt
 800aacc:	9204      	strlt	r2, [sp, #16]
 800aace:	7823      	ldrb	r3, [r4, #0]
 800aad0:	2b2e      	cmp	r3, #46	; 0x2e
 800aad2:	d10c      	bne.n	800aaee <_vfiprintf_r+0x15a>
 800aad4:	7863      	ldrb	r3, [r4, #1]
 800aad6:	2b2a      	cmp	r3, #42	; 0x2a
 800aad8:	d134      	bne.n	800ab44 <_vfiprintf_r+0x1b0>
 800aada:	9b03      	ldr	r3, [sp, #12]
 800aadc:	1d1a      	adds	r2, r3, #4
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	9203      	str	r2, [sp, #12]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	bfb8      	it	lt
 800aae6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aaea:	3402      	adds	r4, #2
 800aaec:	9305      	str	r3, [sp, #20]
 800aaee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800abc4 <_vfiprintf_r+0x230>
 800aaf2:	7821      	ldrb	r1, [r4, #0]
 800aaf4:	2203      	movs	r2, #3
 800aaf6:	4650      	mov	r0, sl
 800aaf8:	f7f5 fc02 	bl	8000300 <memchr>
 800aafc:	b138      	cbz	r0, 800ab0e <_vfiprintf_r+0x17a>
 800aafe:	9b04      	ldr	r3, [sp, #16]
 800ab00:	eba0 000a 	sub.w	r0, r0, sl
 800ab04:	2240      	movs	r2, #64	; 0x40
 800ab06:	4082      	lsls	r2, r0
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	3401      	adds	r4, #1
 800ab0c:	9304      	str	r3, [sp, #16]
 800ab0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab12:	4829      	ldr	r0, [pc, #164]	; (800abb8 <_vfiprintf_r+0x224>)
 800ab14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab18:	2206      	movs	r2, #6
 800ab1a:	f7f5 fbf1 	bl	8000300 <memchr>
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d03f      	beq.n	800aba2 <_vfiprintf_r+0x20e>
 800ab22:	4b26      	ldr	r3, [pc, #152]	; (800abbc <_vfiprintf_r+0x228>)
 800ab24:	bb1b      	cbnz	r3, 800ab6e <_vfiprintf_r+0x1da>
 800ab26:	9b03      	ldr	r3, [sp, #12]
 800ab28:	3307      	adds	r3, #7
 800ab2a:	f023 0307 	bic.w	r3, r3, #7
 800ab2e:	3308      	adds	r3, #8
 800ab30:	9303      	str	r3, [sp, #12]
 800ab32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab34:	443b      	add	r3, r7
 800ab36:	9309      	str	r3, [sp, #36]	; 0x24
 800ab38:	e768      	b.n	800aa0c <_vfiprintf_r+0x78>
 800ab3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab3e:	460c      	mov	r4, r1
 800ab40:	2001      	movs	r0, #1
 800ab42:	e7a6      	b.n	800aa92 <_vfiprintf_r+0xfe>
 800ab44:	2300      	movs	r3, #0
 800ab46:	3401      	adds	r4, #1
 800ab48:	9305      	str	r3, [sp, #20]
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	f04f 0c0a 	mov.w	ip, #10
 800ab50:	4620      	mov	r0, r4
 800ab52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab56:	3a30      	subs	r2, #48	; 0x30
 800ab58:	2a09      	cmp	r2, #9
 800ab5a:	d903      	bls.n	800ab64 <_vfiprintf_r+0x1d0>
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d0c6      	beq.n	800aaee <_vfiprintf_r+0x15a>
 800ab60:	9105      	str	r1, [sp, #20]
 800ab62:	e7c4      	b.n	800aaee <_vfiprintf_r+0x15a>
 800ab64:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab68:	4604      	mov	r4, r0
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e7f0      	b.n	800ab50 <_vfiprintf_r+0x1bc>
 800ab6e:	ab03      	add	r3, sp, #12
 800ab70:	9300      	str	r3, [sp, #0]
 800ab72:	462a      	mov	r2, r5
 800ab74:	4b12      	ldr	r3, [pc, #72]	; (800abc0 <_vfiprintf_r+0x22c>)
 800ab76:	a904      	add	r1, sp, #16
 800ab78:	4630      	mov	r0, r6
 800ab7a:	f3af 8000 	nop.w
 800ab7e:	4607      	mov	r7, r0
 800ab80:	1c78      	adds	r0, r7, #1
 800ab82:	d1d6      	bne.n	800ab32 <_vfiprintf_r+0x19e>
 800ab84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab86:	07d9      	lsls	r1, r3, #31
 800ab88:	d405      	bmi.n	800ab96 <_vfiprintf_r+0x202>
 800ab8a:	89ab      	ldrh	r3, [r5, #12]
 800ab8c:	059a      	lsls	r2, r3, #22
 800ab8e:	d402      	bmi.n	800ab96 <_vfiprintf_r+0x202>
 800ab90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab92:	f7ff fddb 	bl	800a74c <__retarget_lock_release_recursive>
 800ab96:	89ab      	ldrh	r3, [r5, #12]
 800ab98:	065b      	lsls	r3, r3, #25
 800ab9a:	f53f af1d 	bmi.w	800a9d8 <_vfiprintf_r+0x44>
 800ab9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aba0:	e71c      	b.n	800a9dc <_vfiprintf_r+0x48>
 800aba2:	ab03      	add	r3, sp, #12
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	462a      	mov	r2, r5
 800aba8:	4b05      	ldr	r3, [pc, #20]	; (800abc0 <_vfiprintf_r+0x22c>)
 800abaa:	a904      	add	r1, sp, #16
 800abac:	4630      	mov	r0, r6
 800abae:	f000 f879 	bl	800aca4 <_printf_i>
 800abb2:	e7e4      	b.n	800ab7e <_vfiprintf_r+0x1ea>
 800abb4:	0800b3a8 	.word	0x0800b3a8
 800abb8:	0800b3b2 	.word	0x0800b3b2
 800abbc:	00000000 	.word	0x00000000
 800abc0:	0800a96f 	.word	0x0800a96f
 800abc4:	0800b3ae 	.word	0x0800b3ae

0800abc8 <_printf_common>:
 800abc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abcc:	4616      	mov	r6, r2
 800abce:	4699      	mov	r9, r3
 800abd0:	688a      	ldr	r2, [r1, #8]
 800abd2:	690b      	ldr	r3, [r1, #16]
 800abd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abd8:	4293      	cmp	r3, r2
 800abda:	bfb8      	it	lt
 800abdc:	4613      	movlt	r3, r2
 800abde:	6033      	str	r3, [r6, #0]
 800abe0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800abe4:	4607      	mov	r7, r0
 800abe6:	460c      	mov	r4, r1
 800abe8:	b10a      	cbz	r2, 800abee <_printf_common+0x26>
 800abea:	3301      	adds	r3, #1
 800abec:	6033      	str	r3, [r6, #0]
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	0699      	lsls	r1, r3, #26
 800abf2:	bf42      	ittt	mi
 800abf4:	6833      	ldrmi	r3, [r6, #0]
 800abf6:	3302      	addmi	r3, #2
 800abf8:	6033      	strmi	r3, [r6, #0]
 800abfa:	6825      	ldr	r5, [r4, #0]
 800abfc:	f015 0506 	ands.w	r5, r5, #6
 800ac00:	d106      	bne.n	800ac10 <_printf_common+0x48>
 800ac02:	f104 0a19 	add.w	sl, r4, #25
 800ac06:	68e3      	ldr	r3, [r4, #12]
 800ac08:	6832      	ldr	r2, [r6, #0]
 800ac0a:	1a9b      	subs	r3, r3, r2
 800ac0c:	42ab      	cmp	r3, r5
 800ac0e:	dc26      	bgt.n	800ac5e <_printf_common+0x96>
 800ac10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac14:	1e13      	subs	r3, r2, #0
 800ac16:	6822      	ldr	r2, [r4, #0]
 800ac18:	bf18      	it	ne
 800ac1a:	2301      	movne	r3, #1
 800ac1c:	0692      	lsls	r2, r2, #26
 800ac1e:	d42b      	bmi.n	800ac78 <_printf_common+0xb0>
 800ac20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac24:	4649      	mov	r1, r9
 800ac26:	4638      	mov	r0, r7
 800ac28:	47c0      	blx	r8
 800ac2a:	3001      	adds	r0, #1
 800ac2c:	d01e      	beq.n	800ac6c <_printf_common+0xa4>
 800ac2e:	6823      	ldr	r3, [r4, #0]
 800ac30:	6922      	ldr	r2, [r4, #16]
 800ac32:	f003 0306 	and.w	r3, r3, #6
 800ac36:	2b04      	cmp	r3, #4
 800ac38:	bf02      	ittt	eq
 800ac3a:	68e5      	ldreq	r5, [r4, #12]
 800ac3c:	6833      	ldreq	r3, [r6, #0]
 800ac3e:	1aed      	subeq	r5, r5, r3
 800ac40:	68a3      	ldr	r3, [r4, #8]
 800ac42:	bf0c      	ite	eq
 800ac44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac48:	2500      	movne	r5, #0
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	bfc4      	itt	gt
 800ac4e:	1a9b      	subgt	r3, r3, r2
 800ac50:	18ed      	addgt	r5, r5, r3
 800ac52:	2600      	movs	r6, #0
 800ac54:	341a      	adds	r4, #26
 800ac56:	42b5      	cmp	r5, r6
 800ac58:	d11a      	bne.n	800ac90 <_printf_common+0xc8>
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	e008      	b.n	800ac70 <_printf_common+0xa8>
 800ac5e:	2301      	movs	r3, #1
 800ac60:	4652      	mov	r2, sl
 800ac62:	4649      	mov	r1, r9
 800ac64:	4638      	mov	r0, r7
 800ac66:	47c0      	blx	r8
 800ac68:	3001      	adds	r0, #1
 800ac6a:	d103      	bne.n	800ac74 <_printf_common+0xac>
 800ac6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac74:	3501      	adds	r5, #1
 800ac76:	e7c6      	b.n	800ac06 <_printf_common+0x3e>
 800ac78:	18e1      	adds	r1, r4, r3
 800ac7a:	1c5a      	adds	r2, r3, #1
 800ac7c:	2030      	movs	r0, #48	; 0x30
 800ac7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac82:	4422      	add	r2, r4
 800ac84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac8c:	3302      	adds	r3, #2
 800ac8e:	e7c7      	b.n	800ac20 <_printf_common+0x58>
 800ac90:	2301      	movs	r3, #1
 800ac92:	4622      	mov	r2, r4
 800ac94:	4649      	mov	r1, r9
 800ac96:	4638      	mov	r0, r7
 800ac98:	47c0      	blx	r8
 800ac9a:	3001      	adds	r0, #1
 800ac9c:	d0e6      	beq.n	800ac6c <_printf_common+0xa4>
 800ac9e:	3601      	adds	r6, #1
 800aca0:	e7d9      	b.n	800ac56 <_printf_common+0x8e>
	...

0800aca4 <_printf_i>:
 800aca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aca8:	7e0f      	ldrb	r7, [r1, #24]
 800acaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800acac:	2f78      	cmp	r7, #120	; 0x78
 800acae:	4691      	mov	r9, r2
 800acb0:	4680      	mov	r8, r0
 800acb2:	460c      	mov	r4, r1
 800acb4:	469a      	mov	sl, r3
 800acb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800acba:	d807      	bhi.n	800accc <_printf_i+0x28>
 800acbc:	2f62      	cmp	r7, #98	; 0x62
 800acbe:	d80a      	bhi.n	800acd6 <_printf_i+0x32>
 800acc0:	2f00      	cmp	r7, #0
 800acc2:	f000 80d4 	beq.w	800ae6e <_printf_i+0x1ca>
 800acc6:	2f58      	cmp	r7, #88	; 0x58
 800acc8:	f000 80c0 	beq.w	800ae4c <_printf_i+0x1a8>
 800accc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800acd4:	e03a      	b.n	800ad4c <_printf_i+0xa8>
 800acd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800acda:	2b15      	cmp	r3, #21
 800acdc:	d8f6      	bhi.n	800accc <_printf_i+0x28>
 800acde:	a101      	add	r1, pc, #4	; (adr r1, 800ace4 <_printf_i+0x40>)
 800ace0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ace4:	0800ad3d 	.word	0x0800ad3d
 800ace8:	0800ad51 	.word	0x0800ad51
 800acec:	0800accd 	.word	0x0800accd
 800acf0:	0800accd 	.word	0x0800accd
 800acf4:	0800accd 	.word	0x0800accd
 800acf8:	0800accd 	.word	0x0800accd
 800acfc:	0800ad51 	.word	0x0800ad51
 800ad00:	0800accd 	.word	0x0800accd
 800ad04:	0800accd 	.word	0x0800accd
 800ad08:	0800accd 	.word	0x0800accd
 800ad0c:	0800accd 	.word	0x0800accd
 800ad10:	0800ae55 	.word	0x0800ae55
 800ad14:	0800ad7d 	.word	0x0800ad7d
 800ad18:	0800ae0f 	.word	0x0800ae0f
 800ad1c:	0800accd 	.word	0x0800accd
 800ad20:	0800accd 	.word	0x0800accd
 800ad24:	0800ae77 	.word	0x0800ae77
 800ad28:	0800accd 	.word	0x0800accd
 800ad2c:	0800ad7d 	.word	0x0800ad7d
 800ad30:	0800accd 	.word	0x0800accd
 800ad34:	0800accd 	.word	0x0800accd
 800ad38:	0800ae17 	.word	0x0800ae17
 800ad3c:	682b      	ldr	r3, [r5, #0]
 800ad3e:	1d1a      	adds	r2, r3, #4
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	602a      	str	r2, [r5, #0]
 800ad44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e09f      	b.n	800ae90 <_printf_i+0x1ec>
 800ad50:	6820      	ldr	r0, [r4, #0]
 800ad52:	682b      	ldr	r3, [r5, #0]
 800ad54:	0607      	lsls	r7, r0, #24
 800ad56:	f103 0104 	add.w	r1, r3, #4
 800ad5a:	6029      	str	r1, [r5, #0]
 800ad5c:	d501      	bpl.n	800ad62 <_printf_i+0xbe>
 800ad5e:	681e      	ldr	r6, [r3, #0]
 800ad60:	e003      	b.n	800ad6a <_printf_i+0xc6>
 800ad62:	0646      	lsls	r6, r0, #25
 800ad64:	d5fb      	bpl.n	800ad5e <_printf_i+0xba>
 800ad66:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ad6a:	2e00      	cmp	r6, #0
 800ad6c:	da03      	bge.n	800ad76 <_printf_i+0xd2>
 800ad6e:	232d      	movs	r3, #45	; 0x2d
 800ad70:	4276      	negs	r6, r6
 800ad72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad76:	485a      	ldr	r0, [pc, #360]	; (800aee0 <_printf_i+0x23c>)
 800ad78:	230a      	movs	r3, #10
 800ad7a:	e012      	b.n	800ada2 <_printf_i+0xfe>
 800ad7c:	682b      	ldr	r3, [r5, #0]
 800ad7e:	6820      	ldr	r0, [r4, #0]
 800ad80:	1d19      	adds	r1, r3, #4
 800ad82:	6029      	str	r1, [r5, #0]
 800ad84:	0605      	lsls	r5, r0, #24
 800ad86:	d501      	bpl.n	800ad8c <_printf_i+0xe8>
 800ad88:	681e      	ldr	r6, [r3, #0]
 800ad8a:	e002      	b.n	800ad92 <_printf_i+0xee>
 800ad8c:	0641      	lsls	r1, r0, #25
 800ad8e:	d5fb      	bpl.n	800ad88 <_printf_i+0xe4>
 800ad90:	881e      	ldrh	r6, [r3, #0]
 800ad92:	4853      	ldr	r0, [pc, #332]	; (800aee0 <_printf_i+0x23c>)
 800ad94:	2f6f      	cmp	r7, #111	; 0x6f
 800ad96:	bf0c      	ite	eq
 800ad98:	2308      	moveq	r3, #8
 800ad9a:	230a      	movne	r3, #10
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ada2:	6865      	ldr	r5, [r4, #4]
 800ada4:	60a5      	str	r5, [r4, #8]
 800ada6:	2d00      	cmp	r5, #0
 800ada8:	bfa2      	ittt	ge
 800adaa:	6821      	ldrge	r1, [r4, #0]
 800adac:	f021 0104 	bicge.w	r1, r1, #4
 800adb0:	6021      	strge	r1, [r4, #0]
 800adb2:	b90e      	cbnz	r6, 800adb8 <_printf_i+0x114>
 800adb4:	2d00      	cmp	r5, #0
 800adb6:	d04b      	beq.n	800ae50 <_printf_i+0x1ac>
 800adb8:	4615      	mov	r5, r2
 800adba:	fbb6 f1f3 	udiv	r1, r6, r3
 800adbe:	fb03 6711 	mls	r7, r3, r1, r6
 800adc2:	5dc7      	ldrb	r7, [r0, r7]
 800adc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800adc8:	4637      	mov	r7, r6
 800adca:	42bb      	cmp	r3, r7
 800adcc:	460e      	mov	r6, r1
 800adce:	d9f4      	bls.n	800adba <_printf_i+0x116>
 800add0:	2b08      	cmp	r3, #8
 800add2:	d10b      	bne.n	800adec <_printf_i+0x148>
 800add4:	6823      	ldr	r3, [r4, #0]
 800add6:	07de      	lsls	r6, r3, #31
 800add8:	d508      	bpl.n	800adec <_printf_i+0x148>
 800adda:	6923      	ldr	r3, [r4, #16]
 800addc:	6861      	ldr	r1, [r4, #4]
 800adde:	4299      	cmp	r1, r3
 800ade0:	bfde      	ittt	le
 800ade2:	2330      	movle	r3, #48	; 0x30
 800ade4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ade8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800adec:	1b52      	subs	r2, r2, r5
 800adee:	6122      	str	r2, [r4, #16]
 800adf0:	f8cd a000 	str.w	sl, [sp]
 800adf4:	464b      	mov	r3, r9
 800adf6:	aa03      	add	r2, sp, #12
 800adf8:	4621      	mov	r1, r4
 800adfa:	4640      	mov	r0, r8
 800adfc:	f7ff fee4 	bl	800abc8 <_printf_common>
 800ae00:	3001      	adds	r0, #1
 800ae02:	d14a      	bne.n	800ae9a <_printf_i+0x1f6>
 800ae04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae08:	b004      	add	sp, #16
 800ae0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae0e:	6823      	ldr	r3, [r4, #0]
 800ae10:	f043 0320 	orr.w	r3, r3, #32
 800ae14:	6023      	str	r3, [r4, #0]
 800ae16:	4833      	ldr	r0, [pc, #204]	; (800aee4 <_printf_i+0x240>)
 800ae18:	2778      	movs	r7, #120	; 0x78
 800ae1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ae1e:	6823      	ldr	r3, [r4, #0]
 800ae20:	6829      	ldr	r1, [r5, #0]
 800ae22:	061f      	lsls	r7, r3, #24
 800ae24:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae28:	d402      	bmi.n	800ae30 <_printf_i+0x18c>
 800ae2a:	065f      	lsls	r7, r3, #25
 800ae2c:	bf48      	it	mi
 800ae2e:	b2b6      	uxthmi	r6, r6
 800ae30:	07df      	lsls	r7, r3, #31
 800ae32:	bf48      	it	mi
 800ae34:	f043 0320 	orrmi.w	r3, r3, #32
 800ae38:	6029      	str	r1, [r5, #0]
 800ae3a:	bf48      	it	mi
 800ae3c:	6023      	strmi	r3, [r4, #0]
 800ae3e:	b91e      	cbnz	r6, 800ae48 <_printf_i+0x1a4>
 800ae40:	6823      	ldr	r3, [r4, #0]
 800ae42:	f023 0320 	bic.w	r3, r3, #32
 800ae46:	6023      	str	r3, [r4, #0]
 800ae48:	2310      	movs	r3, #16
 800ae4a:	e7a7      	b.n	800ad9c <_printf_i+0xf8>
 800ae4c:	4824      	ldr	r0, [pc, #144]	; (800aee0 <_printf_i+0x23c>)
 800ae4e:	e7e4      	b.n	800ae1a <_printf_i+0x176>
 800ae50:	4615      	mov	r5, r2
 800ae52:	e7bd      	b.n	800add0 <_printf_i+0x12c>
 800ae54:	682b      	ldr	r3, [r5, #0]
 800ae56:	6826      	ldr	r6, [r4, #0]
 800ae58:	6961      	ldr	r1, [r4, #20]
 800ae5a:	1d18      	adds	r0, r3, #4
 800ae5c:	6028      	str	r0, [r5, #0]
 800ae5e:	0635      	lsls	r5, r6, #24
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	d501      	bpl.n	800ae68 <_printf_i+0x1c4>
 800ae64:	6019      	str	r1, [r3, #0]
 800ae66:	e002      	b.n	800ae6e <_printf_i+0x1ca>
 800ae68:	0670      	lsls	r0, r6, #25
 800ae6a:	d5fb      	bpl.n	800ae64 <_printf_i+0x1c0>
 800ae6c:	8019      	strh	r1, [r3, #0]
 800ae6e:	2300      	movs	r3, #0
 800ae70:	6123      	str	r3, [r4, #16]
 800ae72:	4615      	mov	r5, r2
 800ae74:	e7bc      	b.n	800adf0 <_printf_i+0x14c>
 800ae76:	682b      	ldr	r3, [r5, #0]
 800ae78:	1d1a      	adds	r2, r3, #4
 800ae7a:	602a      	str	r2, [r5, #0]
 800ae7c:	681d      	ldr	r5, [r3, #0]
 800ae7e:	6862      	ldr	r2, [r4, #4]
 800ae80:	2100      	movs	r1, #0
 800ae82:	4628      	mov	r0, r5
 800ae84:	f7f5 fa3c 	bl	8000300 <memchr>
 800ae88:	b108      	cbz	r0, 800ae8e <_printf_i+0x1ea>
 800ae8a:	1b40      	subs	r0, r0, r5
 800ae8c:	6060      	str	r0, [r4, #4]
 800ae8e:	6863      	ldr	r3, [r4, #4]
 800ae90:	6123      	str	r3, [r4, #16]
 800ae92:	2300      	movs	r3, #0
 800ae94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae98:	e7aa      	b.n	800adf0 <_printf_i+0x14c>
 800ae9a:	6923      	ldr	r3, [r4, #16]
 800ae9c:	462a      	mov	r2, r5
 800ae9e:	4649      	mov	r1, r9
 800aea0:	4640      	mov	r0, r8
 800aea2:	47d0      	blx	sl
 800aea4:	3001      	adds	r0, #1
 800aea6:	d0ad      	beq.n	800ae04 <_printf_i+0x160>
 800aea8:	6823      	ldr	r3, [r4, #0]
 800aeaa:	079b      	lsls	r3, r3, #30
 800aeac:	d413      	bmi.n	800aed6 <_printf_i+0x232>
 800aeae:	68e0      	ldr	r0, [r4, #12]
 800aeb0:	9b03      	ldr	r3, [sp, #12]
 800aeb2:	4298      	cmp	r0, r3
 800aeb4:	bfb8      	it	lt
 800aeb6:	4618      	movlt	r0, r3
 800aeb8:	e7a6      	b.n	800ae08 <_printf_i+0x164>
 800aeba:	2301      	movs	r3, #1
 800aebc:	4632      	mov	r2, r6
 800aebe:	4649      	mov	r1, r9
 800aec0:	4640      	mov	r0, r8
 800aec2:	47d0      	blx	sl
 800aec4:	3001      	adds	r0, #1
 800aec6:	d09d      	beq.n	800ae04 <_printf_i+0x160>
 800aec8:	3501      	adds	r5, #1
 800aeca:	68e3      	ldr	r3, [r4, #12]
 800aecc:	9903      	ldr	r1, [sp, #12]
 800aece:	1a5b      	subs	r3, r3, r1
 800aed0:	42ab      	cmp	r3, r5
 800aed2:	dcf2      	bgt.n	800aeba <_printf_i+0x216>
 800aed4:	e7eb      	b.n	800aeae <_printf_i+0x20a>
 800aed6:	2500      	movs	r5, #0
 800aed8:	f104 0619 	add.w	r6, r4, #25
 800aedc:	e7f5      	b.n	800aeca <_printf_i+0x226>
 800aede:	bf00      	nop
 800aee0:	0800b3b9 	.word	0x0800b3b9
 800aee4:	0800b3ca 	.word	0x0800b3ca

0800aee8 <__sflush_r>:
 800aee8:	898a      	ldrh	r2, [r1, #12]
 800aeea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeee:	4605      	mov	r5, r0
 800aef0:	0710      	lsls	r0, r2, #28
 800aef2:	460c      	mov	r4, r1
 800aef4:	d458      	bmi.n	800afa8 <__sflush_r+0xc0>
 800aef6:	684b      	ldr	r3, [r1, #4]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	dc05      	bgt.n	800af08 <__sflush_r+0x20>
 800aefc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aefe:	2b00      	cmp	r3, #0
 800af00:	dc02      	bgt.n	800af08 <__sflush_r+0x20>
 800af02:	2000      	movs	r0, #0
 800af04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af0a:	2e00      	cmp	r6, #0
 800af0c:	d0f9      	beq.n	800af02 <__sflush_r+0x1a>
 800af0e:	2300      	movs	r3, #0
 800af10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af14:	682f      	ldr	r7, [r5, #0]
 800af16:	6a21      	ldr	r1, [r4, #32]
 800af18:	602b      	str	r3, [r5, #0]
 800af1a:	d032      	beq.n	800af82 <__sflush_r+0x9a>
 800af1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af1e:	89a3      	ldrh	r3, [r4, #12]
 800af20:	075a      	lsls	r2, r3, #29
 800af22:	d505      	bpl.n	800af30 <__sflush_r+0x48>
 800af24:	6863      	ldr	r3, [r4, #4]
 800af26:	1ac0      	subs	r0, r0, r3
 800af28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af2a:	b10b      	cbz	r3, 800af30 <__sflush_r+0x48>
 800af2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af2e:	1ac0      	subs	r0, r0, r3
 800af30:	2300      	movs	r3, #0
 800af32:	4602      	mov	r2, r0
 800af34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af36:	6a21      	ldr	r1, [r4, #32]
 800af38:	4628      	mov	r0, r5
 800af3a:	47b0      	blx	r6
 800af3c:	1c43      	adds	r3, r0, #1
 800af3e:	89a3      	ldrh	r3, [r4, #12]
 800af40:	d106      	bne.n	800af50 <__sflush_r+0x68>
 800af42:	6829      	ldr	r1, [r5, #0]
 800af44:	291d      	cmp	r1, #29
 800af46:	d82b      	bhi.n	800afa0 <__sflush_r+0xb8>
 800af48:	4a29      	ldr	r2, [pc, #164]	; (800aff0 <__sflush_r+0x108>)
 800af4a:	410a      	asrs	r2, r1
 800af4c:	07d6      	lsls	r6, r2, #31
 800af4e:	d427      	bmi.n	800afa0 <__sflush_r+0xb8>
 800af50:	2200      	movs	r2, #0
 800af52:	6062      	str	r2, [r4, #4]
 800af54:	04d9      	lsls	r1, r3, #19
 800af56:	6922      	ldr	r2, [r4, #16]
 800af58:	6022      	str	r2, [r4, #0]
 800af5a:	d504      	bpl.n	800af66 <__sflush_r+0x7e>
 800af5c:	1c42      	adds	r2, r0, #1
 800af5e:	d101      	bne.n	800af64 <__sflush_r+0x7c>
 800af60:	682b      	ldr	r3, [r5, #0]
 800af62:	b903      	cbnz	r3, 800af66 <__sflush_r+0x7e>
 800af64:	6560      	str	r0, [r4, #84]	; 0x54
 800af66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af68:	602f      	str	r7, [r5, #0]
 800af6a:	2900      	cmp	r1, #0
 800af6c:	d0c9      	beq.n	800af02 <__sflush_r+0x1a>
 800af6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af72:	4299      	cmp	r1, r3
 800af74:	d002      	beq.n	800af7c <__sflush_r+0x94>
 800af76:	4628      	mov	r0, r5
 800af78:	f7ff fbea 	bl	800a750 <_free_r>
 800af7c:	2000      	movs	r0, #0
 800af7e:	6360      	str	r0, [r4, #52]	; 0x34
 800af80:	e7c0      	b.n	800af04 <__sflush_r+0x1c>
 800af82:	2301      	movs	r3, #1
 800af84:	4628      	mov	r0, r5
 800af86:	47b0      	blx	r6
 800af88:	1c41      	adds	r1, r0, #1
 800af8a:	d1c8      	bne.n	800af1e <__sflush_r+0x36>
 800af8c:	682b      	ldr	r3, [r5, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d0c5      	beq.n	800af1e <__sflush_r+0x36>
 800af92:	2b1d      	cmp	r3, #29
 800af94:	d001      	beq.n	800af9a <__sflush_r+0xb2>
 800af96:	2b16      	cmp	r3, #22
 800af98:	d101      	bne.n	800af9e <__sflush_r+0xb6>
 800af9a:	602f      	str	r7, [r5, #0]
 800af9c:	e7b1      	b.n	800af02 <__sflush_r+0x1a>
 800af9e:	89a3      	ldrh	r3, [r4, #12]
 800afa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afa4:	81a3      	strh	r3, [r4, #12]
 800afa6:	e7ad      	b.n	800af04 <__sflush_r+0x1c>
 800afa8:	690f      	ldr	r7, [r1, #16]
 800afaa:	2f00      	cmp	r7, #0
 800afac:	d0a9      	beq.n	800af02 <__sflush_r+0x1a>
 800afae:	0793      	lsls	r3, r2, #30
 800afb0:	680e      	ldr	r6, [r1, #0]
 800afb2:	bf08      	it	eq
 800afb4:	694b      	ldreq	r3, [r1, #20]
 800afb6:	600f      	str	r7, [r1, #0]
 800afb8:	bf18      	it	ne
 800afba:	2300      	movne	r3, #0
 800afbc:	eba6 0807 	sub.w	r8, r6, r7
 800afc0:	608b      	str	r3, [r1, #8]
 800afc2:	f1b8 0f00 	cmp.w	r8, #0
 800afc6:	dd9c      	ble.n	800af02 <__sflush_r+0x1a>
 800afc8:	6a21      	ldr	r1, [r4, #32]
 800afca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800afcc:	4643      	mov	r3, r8
 800afce:	463a      	mov	r2, r7
 800afd0:	4628      	mov	r0, r5
 800afd2:	47b0      	blx	r6
 800afd4:	2800      	cmp	r0, #0
 800afd6:	dc06      	bgt.n	800afe6 <__sflush_r+0xfe>
 800afd8:	89a3      	ldrh	r3, [r4, #12]
 800afda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afde:	81a3      	strh	r3, [r4, #12]
 800afe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afe4:	e78e      	b.n	800af04 <__sflush_r+0x1c>
 800afe6:	4407      	add	r7, r0
 800afe8:	eba8 0800 	sub.w	r8, r8, r0
 800afec:	e7e9      	b.n	800afc2 <__sflush_r+0xda>
 800afee:	bf00      	nop
 800aff0:	dfbffffe 	.word	0xdfbffffe

0800aff4 <_fflush_r>:
 800aff4:	b538      	push	{r3, r4, r5, lr}
 800aff6:	690b      	ldr	r3, [r1, #16]
 800aff8:	4605      	mov	r5, r0
 800affa:	460c      	mov	r4, r1
 800affc:	b913      	cbnz	r3, 800b004 <_fflush_r+0x10>
 800affe:	2500      	movs	r5, #0
 800b000:	4628      	mov	r0, r5
 800b002:	bd38      	pop	{r3, r4, r5, pc}
 800b004:	b118      	cbz	r0, 800b00e <_fflush_r+0x1a>
 800b006:	6a03      	ldr	r3, [r0, #32]
 800b008:	b90b      	cbnz	r3, 800b00e <_fflush_r+0x1a>
 800b00a:	f7ff f995 	bl	800a338 <__sinit>
 800b00e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d0f3      	beq.n	800affe <_fflush_r+0xa>
 800b016:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b018:	07d0      	lsls	r0, r2, #31
 800b01a:	d404      	bmi.n	800b026 <_fflush_r+0x32>
 800b01c:	0599      	lsls	r1, r3, #22
 800b01e:	d402      	bmi.n	800b026 <_fflush_r+0x32>
 800b020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b022:	f7ff fb92 	bl	800a74a <__retarget_lock_acquire_recursive>
 800b026:	4628      	mov	r0, r5
 800b028:	4621      	mov	r1, r4
 800b02a:	f7ff ff5d 	bl	800aee8 <__sflush_r>
 800b02e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b030:	07da      	lsls	r2, r3, #31
 800b032:	4605      	mov	r5, r0
 800b034:	d4e4      	bmi.n	800b000 <_fflush_r+0xc>
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	059b      	lsls	r3, r3, #22
 800b03a:	d4e1      	bmi.n	800b000 <_fflush_r+0xc>
 800b03c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b03e:	f7ff fb85 	bl	800a74c <__retarget_lock_release_recursive>
 800b042:	e7dd      	b.n	800b000 <_fflush_r+0xc>

0800b044 <__swhatbuf_r>:
 800b044:	b570      	push	{r4, r5, r6, lr}
 800b046:	460c      	mov	r4, r1
 800b048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b04c:	2900      	cmp	r1, #0
 800b04e:	b096      	sub	sp, #88	; 0x58
 800b050:	4615      	mov	r5, r2
 800b052:	461e      	mov	r6, r3
 800b054:	da0d      	bge.n	800b072 <__swhatbuf_r+0x2e>
 800b056:	89a3      	ldrh	r3, [r4, #12]
 800b058:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b05c:	f04f 0100 	mov.w	r1, #0
 800b060:	bf0c      	ite	eq
 800b062:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b066:	2340      	movne	r3, #64	; 0x40
 800b068:	2000      	movs	r0, #0
 800b06a:	6031      	str	r1, [r6, #0]
 800b06c:	602b      	str	r3, [r5, #0]
 800b06e:	b016      	add	sp, #88	; 0x58
 800b070:	bd70      	pop	{r4, r5, r6, pc}
 800b072:	466a      	mov	r2, sp
 800b074:	f000 f87c 	bl	800b170 <_fstat_r>
 800b078:	2800      	cmp	r0, #0
 800b07a:	dbec      	blt.n	800b056 <__swhatbuf_r+0x12>
 800b07c:	9901      	ldr	r1, [sp, #4]
 800b07e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b082:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b086:	4259      	negs	r1, r3
 800b088:	4159      	adcs	r1, r3
 800b08a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b08e:	e7eb      	b.n	800b068 <__swhatbuf_r+0x24>

0800b090 <__smakebuf_r>:
 800b090:	898b      	ldrh	r3, [r1, #12]
 800b092:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b094:	079d      	lsls	r5, r3, #30
 800b096:	4606      	mov	r6, r0
 800b098:	460c      	mov	r4, r1
 800b09a:	d507      	bpl.n	800b0ac <__smakebuf_r+0x1c>
 800b09c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0a0:	6023      	str	r3, [r4, #0]
 800b0a2:	6123      	str	r3, [r4, #16]
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	6163      	str	r3, [r4, #20]
 800b0a8:	b002      	add	sp, #8
 800b0aa:	bd70      	pop	{r4, r5, r6, pc}
 800b0ac:	ab01      	add	r3, sp, #4
 800b0ae:	466a      	mov	r2, sp
 800b0b0:	f7ff ffc8 	bl	800b044 <__swhatbuf_r>
 800b0b4:	9900      	ldr	r1, [sp, #0]
 800b0b6:	4605      	mov	r5, r0
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	f7ff fbb5 	bl	800a828 <_malloc_r>
 800b0be:	b948      	cbnz	r0, 800b0d4 <__smakebuf_r+0x44>
 800b0c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0c4:	059a      	lsls	r2, r3, #22
 800b0c6:	d4ef      	bmi.n	800b0a8 <__smakebuf_r+0x18>
 800b0c8:	f023 0303 	bic.w	r3, r3, #3
 800b0cc:	f043 0302 	orr.w	r3, r3, #2
 800b0d0:	81a3      	strh	r3, [r4, #12]
 800b0d2:	e7e3      	b.n	800b09c <__smakebuf_r+0xc>
 800b0d4:	89a3      	ldrh	r3, [r4, #12]
 800b0d6:	6020      	str	r0, [r4, #0]
 800b0d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0dc:	81a3      	strh	r3, [r4, #12]
 800b0de:	9b00      	ldr	r3, [sp, #0]
 800b0e0:	6163      	str	r3, [r4, #20]
 800b0e2:	9b01      	ldr	r3, [sp, #4]
 800b0e4:	6120      	str	r0, [r4, #16]
 800b0e6:	b15b      	cbz	r3, 800b100 <__smakebuf_r+0x70>
 800b0e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	f000 f851 	bl	800b194 <_isatty_r>
 800b0f2:	b128      	cbz	r0, 800b100 <__smakebuf_r+0x70>
 800b0f4:	89a3      	ldrh	r3, [r4, #12]
 800b0f6:	f023 0303 	bic.w	r3, r3, #3
 800b0fa:	f043 0301 	orr.w	r3, r3, #1
 800b0fe:	81a3      	strh	r3, [r4, #12]
 800b100:	89a3      	ldrh	r3, [r4, #12]
 800b102:	431d      	orrs	r5, r3
 800b104:	81a5      	strh	r5, [r4, #12]
 800b106:	e7cf      	b.n	800b0a8 <__smakebuf_r+0x18>

0800b108 <_putc_r>:
 800b108:	b570      	push	{r4, r5, r6, lr}
 800b10a:	460d      	mov	r5, r1
 800b10c:	4614      	mov	r4, r2
 800b10e:	4606      	mov	r6, r0
 800b110:	b118      	cbz	r0, 800b11a <_putc_r+0x12>
 800b112:	6a03      	ldr	r3, [r0, #32]
 800b114:	b90b      	cbnz	r3, 800b11a <_putc_r+0x12>
 800b116:	f7ff f90f 	bl	800a338 <__sinit>
 800b11a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b11c:	07d8      	lsls	r0, r3, #31
 800b11e:	d405      	bmi.n	800b12c <_putc_r+0x24>
 800b120:	89a3      	ldrh	r3, [r4, #12]
 800b122:	0599      	lsls	r1, r3, #22
 800b124:	d402      	bmi.n	800b12c <_putc_r+0x24>
 800b126:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b128:	f7ff fb0f 	bl	800a74a <__retarget_lock_acquire_recursive>
 800b12c:	68a3      	ldr	r3, [r4, #8]
 800b12e:	3b01      	subs	r3, #1
 800b130:	2b00      	cmp	r3, #0
 800b132:	60a3      	str	r3, [r4, #8]
 800b134:	da05      	bge.n	800b142 <_putc_r+0x3a>
 800b136:	69a2      	ldr	r2, [r4, #24]
 800b138:	4293      	cmp	r3, r2
 800b13a:	db12      	blt.n	800b162 <_putc_r+0x5a>
 800b13c:	b2eb      	uxtb	r3, r5
 800b13e:	2b0a      	cmp	r3, #10
 800b140:	d00f      	beq.n	800b162 <_putc_r+0x5a>
 800b142:	6823      	ldr	r3, [r4, #0]
 800b144:	1c5a      	adds	r2, r3, #1
 800b146:	6022      	str	r2, [r4, #0]
 800b148:	701d      	strb	r5, [r3, #0]
 800b14a:	b2ed      	uxtb	r5, r5
 800b14c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b14e:	07da      	lsls	r2, r3, #31
 800b150:	d405      	bmi.n	800b15e <_putc_r+0x56>
 800b152:	89a3      	ldrh	r3, [r4, #12]
 800b154:	059b      	lsls	r3, r3, #22
 800b156:	d402      	bmi.n	800b15e <_putc_r+0x56>
 800b158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b15a:	f7ff faf7 	bl	800a74c <__retarget_lock_release_recursive>
 800b15e:	4628      	mov	r0, r5
 800b160:	bd70      	pop	{r4, r5, r6, pc}
 800b162:	4629      	mov	r1, r5
 800b164:	4622      	mov	r2, r4
 800b166:	4630      	mov	r0, r6
 800b168:	f7ff f9e0 	bl	800a52c <__swbuf_r>
 800b16c:	4605      	mov	r5, r0
 800b16e:	e7ed      	b.n	800b14c <_putc_r+0x44>

0800b170 <_fstat_r>:
 800b170:	b538      	push	{r3, r4, r5, lr}
 800b172:	4d07      	ldr	r5, [pc, #28]	; (800b190 <_fstat_r+0x20>)
 800b174:	2300      	movs	r3, #0
 800b176:	4604      	mov	r4, r0
 800b178:	4608      	mov	r0, r1
 800b17a:	4611      	mov	r1, r2
 800b17c:	602b      	str	r3, [r5, #0]
 800b17e:	f7f5 fcdc 	bl	8000b3a <_fstat>
 800b182:	1c43      	adds	r3, r0, #1
 800b184:	d102      	bne.n	800b18c <_fstat_r+0x1c>
 800b186:	682b      	ldr	r3, [r5, #0]
 800b188:	b103      	cbz	r3, 800b18c <_fstat_r+0x1c>
 800b18a:	6023      	str	r3, [r4, #0]
 800b18c:	bd38      	pop	{r3, r4, r5, pc}
 800b18e:	bf00      	nop
 800b190:	24002734 	.word	0x24002734

0800b194 <_isatty_r>:
 800b194:	b538      	push	{r3, r4, r5, lr}
 800b196:	4d06      	ldr	r5, [pc, #24]	; (800b1b0 <_isatty_r+0x1c>)
 800b198:	2300      	movs	r3, #0
 800b19a:	4604      	mov	r4, r0
 800b19c:	4608      	mov	r0, r1
 800b19e:	602b      	str	r3, [r5, #0]
 800b1a0:	f7f5 fcdb 	bl	8000b5a <_isatty>
 800b1a4:	1c43      	adds	r3, r0, #1
 800b1a6:	d102      	bne.n	800b1ae <_isatty_r+0x1a>
 800b1a8:	682b      	ldr	r3, [r5, #0]
 800b1aa:	b103      	cbz	r3, 800b1ae <_isatty_r+0x1a>
 800b1ac:	6023      	str	r3, [r4, #0]
 800b1ae:	bd38      	pop	{r3, r4, r5, pc}
 800b1b0:	24002734 	.word	0x24002734

0800b1b4 <_sbrk_r>:
 800b1b4:	b538      	push	{r3, r4, r5, lr}
 800b1b6:	4d06      	ldr	r5, [pc, #24]	; (800b1d0 <_sbrk_r+0x1c>)
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	4608      	mov	r0, r1
 800b1be:	602b      	str	r3, [r5, #0]
 800b1c0:	f7f5 fce4 	bl	8000b8c <_sbrk>
 800b1c4:	1c43      	adds	r3, r0, #1
 800b1c6:	d102      	bne.n	800b1ce <_sbrk_r+0x1a>
 800b1c8:	682b      	ldr	r3, [r5, #0]
 800b1ca:	b103      	cbz	r3, 800b1ce <_sbrk_r+0x1a>
 800b1cc:	6023      	str	r3, [r4, #0]
 800b1ce:	bd38      	pop	{r3, r4, r5, pc}
 800b1d0:	24002734 	.word	0x24002734

0800b1d4 <_init>:
 800b1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1d6:	bf00      	nop
 800b1d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1da:	bc08      	pop	{r3}
 800b1dc:	469e      	mov	lr, r3
 800b1de:	4770      	bx	lr

0800b1e0 <_fini>:
 800b1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e2:	bf00      	nop
 800b1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1e6:	bc08      	pop	{r3}
 800b1e8:	469e      	mov	lr, r3
 800b1ea:	4770      	bx	lr
