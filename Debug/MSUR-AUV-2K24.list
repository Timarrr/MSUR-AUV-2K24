
MSUR-AUV-2K24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0ec  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800d390  0800d390  0001d390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d884  0800d884  0001d884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d888  0800d888  0001d888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002e4  24000000  0800d88c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002694  240002e4  0800db70  000202e4  2**2
                  ALLOC
  7 ._user_heap_stack 00000800  24002978  0800db70  00022978  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020312  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ba22  00000000  00000000  00020355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003de0  00000000  00000000  0003bd77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013e8  00000000  00000000  0003fb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f05  00000000  00000000  00040f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b019  00000000  00000000  00041e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019fd9  00000000  00000000  0007ce5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016960a  00000000  00000000  00096e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000617c  00000000  00000000  00200444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000066  00000000  00000000  002065c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002e4 	.word	0x240002e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d374 	.word	0x0800d374

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002e8 	.word	0x240002e8
 80002dc:	0800d374 	.word	0x0800d374

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <PrepareFrame>:
uint8_t pbits = 0b00000000;
//				  ^   ^
//				  |   \_ESC_0 THR_3
//				  \_____ESC_1 THR_3

void PrepareFrame(int16_t thrust, int8_t telemetry, ESC esc, THR thruster){
 80003b0:	b590      	push	{r4, r7, lr}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4604      	mov	r4, r0
 80003b8:	4608      	mov	r0, r1
 80003ba:	4611      	mov	r1, r2
 80003bc:	461a      	mov	r2, r3
 80003be:	4623      	mov	r3, r4
 80003c0:	80fb      	strh	r3, [r7, #6]
 80003c2:	4603      	mov	r3, r0
 80003c4:	717b      	strb	r3, [r7, #5]
 80003c6:	460b      	mov	r3, r1
 80003c8:	713b      	strb	r3, [r7, #4]
 80003ca:	4613      	mov	r3, r2
 80003cc:	70fb      	strb	r3, [r7, #3]
		int16_t frame = thrust << 1 | telemetry;
 80003ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	b21a      	sxth	r2, r3
 80003d6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80003da:	b21b      	sxth	r3, r3
 80003dc:	4313      	orrs	r3, r2
 80003de:	81fb      	strh	r3, [r7, #14]

		int8_t crc = (frame ^ (frame >> 4) ^ (frame >> 8)) & 0x0F;
 80003e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003e4:	111b      	asrs	r3, r3, #4
 80003e6:	b21b      	sxth	r3, r3
 80003e8:	b25a      	sxtb	r2, r3
 80003ea:	89fb      	ldrh	r3, [r7, #14]
 80003ec:	b25b      	sxtb	r3, r3
 80003ee:	4053      	eors	r3, r2
 80003f0:	b25a      	sxtb	r2, r3
 80003f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003f6:	121b      	asrs	r3, r3, #8
 80003f8:	b21b      	sxth	r3, r3
 80003fa:	b25b      	sxtb	r3, r3
 80003fc:	4053      	eors	r3, r2
 80003fe:	b25b      	sxtb	r3, r3
 8000400:	f003 030f 	and.w	r3, r3, #15
 8000404:	737b      	strb	r3, [r7, #13]
		frame = (frame << 4) | crc;
 8000406:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800040a:	011b      	lsls	r3, r3, #4
 800040c:	b21a      	sxth	r2, r3
 800040e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000412:	b21b      	sxth	r3, r3
 8000414:	4313      	orrs	r3, r2
 8000416:	81fb      	strh	r3, [r7, #14]
		SendFrame(frame, esc, thruster);
 8000418:	78fa      	ldrb	r2, [r7, #3]
 800041a:	7939      	ldrb	r1, [r7, #4]
 800041c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000420:	4618      	mov	r0, r3
 8000422:	f000 f805 	bl	8000430 <SendFrame>
}
 8000426:	bf00      	nop
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	bd90      	pop	{r4, r7, pc}
	...

08000430 <SendFrame>:

void SendFrame(int16_t frame, ESC esc, THR thruster){
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af02      	add	r7, sp, #8
 8000436:	4603      	mov	r3, r0
 8000438:	80fb      	strh	r3, [r7, #6]
 800043a:	460b      	mov	r3, r1
 800043c:	717b      	strb	r3, [r7, #5]
 800043e:	4613      	mov	r3, r2
 8000440:	713b      	strb	r3, [r7, #4]
	uint8_t bitnum = esc<<2 | thruster;
 8000442:	797b      	ldrb	r3, [r7, #5]
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	b25a      	sxtb	r2, r3
 8000448:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800044c:	4313      	orrs	r3, r2
 800044e:	b25b      	sxtb	r3, r3
 8000450:	73fb      	strb	r3, [r7, #15]
	if(active & (1<<bitnum)){
 8000452:	4b21      	ldr	r3, [pc, #132]	; (80004d8 <SendFrame+0xa8>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	461a      	mov	r2, r3
 8000458:	7bfb      	ldrb	r3, [r7, #15]
 800045a:	fa42 f303 	asr.w	r3, r2, r3
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	2b00      	cmp	r3, #0
 8000464:	d00f      	beq.n	8000486 <SendFrame+0x56>
		LOG_CDC_FS(ERR, "Too much frames @ ESC%d THR%d, progress is %d, pbits is %d", esc, thruster, frame_progress[bitnum], pbits);
 8000466:	797a      	ldrb	r2, [r7, #5]
 8000468:	7939      	ldrb	r1, [r7, #4]
 800046a:	7bfb      	ldrb	r3, [r7, #15]
 800046c:	481b      	ldr	r0, [pc, #108]	; (80004dc <SendFrame+0xac>)
 800046e:	5cc3      	ldrb	r3, [r0, r3]
 8000470:	4618      	mov	r0, r3
 8000472:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <SendFrame+0xb0>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	9301      	str	r3, [sp, #4]
 8000478:	9000      	str	r0, [sp, #0]
 800047a:	460b      	mov	r3, r1
 800047c:	4919      	ldr	r1, [pc, #100]	; (80004e4 <SendFrame+0xb4>)
 800047e:	2005      	movs	r0, #5
 8000480:	f000 f92c 	bl	80006dc <LOG_CDC_FS>
		pframe[bitnum] = frame;
		frame_progress[bitnum] = 0;
		active |= (1<<bitnum);
		pbits &= (frame & 1) << (bitnum);
	}
}
 8000484:	e024      	b.n	80004d0 <SendFrame+0xa0>
		pframe[bitnum] = frame;
 8000486:	7bfb      	ldrb	r3, [r7, #15]
 8000488:	88f9      	ldrh	r1, [r7, #6]
 800048a:	4a17      	ldr	r2, [pc, #92]	; (80004e8 <SendFrame+0xb8>)
 800048c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		frame_progress[bitnum] = 0;
 8000490:	7bfb      	ldrb	r3, [r7, #15]
 8000492:	4a12      	ldr	r2, [pc, #72]	; (80004dc <SendFrame+0xac>)
 8000494:	2100      	movs	r1, #0
 8000496:	54d1      	strb	r1, [r2, r3]
		active |= (1<<bitnum);
 8000498:	7bfb      	ldrb	r3, [r7, #15]
 800049a:	2201      	movs	r2, #1
 800049c:	fa02 f303 	lsl.w	r3, r2, r3
 80004a0:	b25a      	sxtb	r2, r3
 80004a2:	4b0d      	ldr	r3, [pc, #52]	; (80004d8 <SendFrame+0xa8>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	b25b      	sxtb	r3, r3
 80004a8:	4313      	orrs	r3, r2
 80004aa:	b25b      	sxtb	r3, r3
 80004ac:	b2da      	uxtb	r2, r3
 80004ae:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <SendFrame+0xa8>)
 80004b0:	701a      	strb	r2, [r3, #0]
		pbits &= (frame & 1) << (bitnum);
 80004b2:	88fb      	ldrh	r3, [r7, #6]
 80004b4:	f003 0201 	and.w	r2, r3, #1
 80004b8:	7bfb      	ldrb	r3, [r7, #15]
 80004ba:	fa02 f303 	lsl.w	r3, r2, r3
 80004be:	b25a      	sxtb	r2, r3
 80004c0:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <SendFrame+0xb0>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	b25b      	sxtb	r3, r3
 80004c6:	4013      	ands	r3, r2
 80004c8:	b25b      	sxtb	r3, r3
 80004ca:	b2da      	uxtb	r2, r3
 80004cc:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <SendFrame+0xb0>)
 80004ce:	701a      	strb	r2, [r3, #0]
}
 80004d0:	bf00      	nop
 80004d2:	3710      	adds	r7, #16
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	24000318 	.word	0x24000318
 80004dc:	24000310 	.word	0x24000310
 80004e0:	24000319 	.word	0x24000319
 80004e4:	0800d390 	.word	0x0800d390
 80004e8:	24000300 	.word	0x24000300

080004ec <HAL_HRTIM_Compare1EventCallback>:

//this writes dshot600 "zeros"
void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6039      	str	r1, [r7, #0]
	if(TimerIdx == HRTIM_TIMERINDEX_MASTER){
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	2b05      	cmp	r3, #5
 80004fa:	d118      	bne.n	800052e <HAL_HRTIM_Compare1EventCallback+0x42>
		TimMBit0s++;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <HAL_HRTIM_Compare1EventCallback+0x50>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	3301      	adds	r3, #1
 8000502:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_HRTIM_Compare1EventCallback+0x50>)
 8000504:	6013      	str	r3, [r2, #0]
		GPIOF->BSRR = (~pbits & active) << 16;
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <HAL_HRTIM_Compare1EventCallback+0x54>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	43db      	mvns	r3, r3
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_HRTIM_Compare1EventCallback+0x58>)
 800050e:	7812      	ldrb	r2, [r2, #0]
 8000510:	4013      	ands	r3, r2
 8000512:	041a      	lsls	r2, r3, #16
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <HAL_HRTIM_Compare1EventCallback+0x5c>)
 8000516:	619a      	str	r2, [r3, #24]
		GPIOB->BSRR = (~pbits & (active & 1)) << 30;
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <HAL_HRTIM_Compare1EventCallback+0x54>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	43da      	mvns	r2, r3
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <HAL_HRTIM_Compare1EventCallback+0x58>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	4013      	ands	r3, r2
 8000528:	079a      	lsls	r2, r3, #30
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <HAL_HRTIM_Compare1EventCallback+0x60>)
 800052c:	619a      	str	r2, [r3, #24]
	}
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	24000c00 	.word	0x24000c00
 8000540:	24000319 	.word	0x24000319
 8000544:	24000318 	.word	0x24000318
 8000548:	58021400 	.word	0x58021400
 800054c:	58020400 	.word	0x58020400

08000550 <HAL_HRTIM_Compare2EventCallback>:

//this writes dshot600 "ones"
void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
	if(TimerIdx == HRTIM_TIMERINDEX_MASTER){
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	2b05      	cmp	r3, #5
 800055e:	d118      	bne.n	8000592 <HAL_HRTIM_Compare2EventCallback+0x42>
		TimMBit1s++;
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <HAL_HRTIM_Compare2EventCallback+0x50>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	4a0e      	ldr	r2, [pc, #56]	; (80005a0 <HAL_HRTIM_Compare2EventCallback+0x50>)
 8000568:	6013      	str	r3, [r2, #0]
		GPIOF->BSRR = (pbits & active) << 16;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <HAL_HRTIM_Compare2EventCallback+0x54>)
 800056c:	781a      	ldrb	r2, [r3, #0]
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <HAL_HRTIM_Compare2EventCallback+0x58>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	4013      	ands	r3, r2
 8000574:	b2db      	uxtb	r3, r3
 8000576:	041a      	lsls	r2, r3, #16
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <HAL_HRTIM_Compare2EventCallback+0x5c>)
 800057a:	619a      	str	r2, [r3, #24]
		GPIOB->BSRR = (pbits & (active & 1)) << 30;
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <HAL_HRTIM_Compare2EventCallback+0x54>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	461a      	mov	r2, r3
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <HAL_HRTIM_Compare2EventCallback+0x58>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	4013      	ands	r3, r2
 800058c:	079a      	lsls	r2, r3, #30
 800058e:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_HRTIM_Compare2EventCallback+0x60>)
 8000590:	619a      	str	r2, [r3, #24]
	}
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	24000bfc 	.word	0x24000bfc
 80005a4:	24000319 	.word	0x24000319
 80005a8:	24000318 	.word	0x24000318
 80005ac:	58021400 	.word	0x58021400
 80005b0:	58020400 	.word	0x58020400

080005b4 <HAL_HRTIM_RepetitionEventCallback>:

//nya
void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx){
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	if(TimerIdx==HRTIM_TIMERINDEX_MASTER){
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	2b05      	cmp	r3, #5
 80005c2:	d177      	bne.n	80006b4 <HAL_HRTIM_RepetitionEventCallback+0x100>
		TimMRollovers++;
 80005c4:	4b3e      	ldr	r3, [pc, #248]	; (80006c0 <HAL_HRTIM_RepetitionEventCallback+0x10c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	3301      	adds	r3, #1
 80005ca:	4a3d      	ldr	r2, [pc, #244]	; (80006c0 <HAL_HRTIM_RepetitionEventCallback+0x10c>)
 80005cc:	6013      	str	r3, [r2, #0]
//		uint16_t pactive = 0;
//		uint16_t ppbits = 0;
//		active <<= 1;              		  // and shifted to the left to make room for the next bit
//		pbits <<=1;						  // and shifted to the left to make room for the next bit

		for(int i = 0; i<8; i++){
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
 80005d2:	e061      	b.n	8000698 <HAL_HRTIM_RepetitionEventCallback+0xe4>
			if(!(active & (1<<i))) continue;
 80005d4:	4b3b      	ldr	r3, [pc, #236]	; (80006c4 <HAL_HRTIM_RepetitionEventCallback+0x110>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	fa42 f303 	asr.w	r3, r2, r3
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d053      	beq.n	8000690 <HAL_HRTIM_RepetitionEventCallback+0xdc>
			frame_progress[i]++; //increment frame progress
 80005e8:	4a37      	ldr	r2, [pc, #220]	; (80006c8 <HAL_HRTIM_RepetitionEventCallback+0x114>)
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	4413      	add	r3, r2
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	b2d9      	uxtb	r1, r3
 80005f4:	4a34      	ldr	r2, [pc, #208]	; (80006c8 <HAL_HRTIM_RepetitionEventCallback+0x114>)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	4413      	add	r3, r2
 80005fa:	460a      	mov	r2, r1
 80005fc:	701a      	strb	r2, [r3, #0]
			int not_frame_ended = !(frame_progress[i]==16); // this checks if frame is not ended
 80005fe:	4a32      	ldr	r2, [pc, #200]	; (80006c8 <HAL_HRTIM_RepetitionEventCallback+0x114>)
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b10      	cmp	r3, #16
 8000608:	bf14      	ite	ne
 800060a:	2301      	movne	r3, #1
 800060c:	2300      	moveq	r3, #0
 800060e:	b2db      	uxtb	r3, r3
 8000610:	60bb      	str	r3, [r7, #8]
			pframe[i] >>= 1;
 8000612:	4a2e      	ldr	r2, [pc, #184]	; (80006cc <HAL_HRTIM_RepetitionEventCallback+0x118>)
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800061a:	085b      	lsrs	r3, r3, #1
 800061c:	b299      	uxth	r1, r3
 800061e:	4a2b      	ldr	r2, [pc, #172]	; (80006cc <HAL_HRTIM_RepetitionEventCallback+0x118>)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			active <<= 1;              		  // shifted to the left to make room for the next bit
 8000626:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <HAL_HRTIM_RepetitionEventCallback+0x110>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <HAL_HRTIM_RepetitionEventCallback+0x110>)
 8000630:	701a      	strb	r2, [r3, #0]
			active &= not_frame_ended; 		  // LSB is set to 1 if frame is still active
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	b25a      	sxtb	r2, r3
 8000636:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <HAL_HRTIM_RepetitionEventCallback+0x110>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b25b      	sxtb	r3, r3
 800063c:	4013      	ands	r3, r2
 800063e:	b25b      	sxtb	r3, r3
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <HAL_HRTIM_RepetitionEventCallback+0x110>)
 8000644:	701a      	strb	r2, [r3, #0]
			pbits <<=1;						  // shifted to the left to make room for the next bit
 8000646:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <HAL_HRTIM_RepetitionEventCallback+0x11c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	b2da      	uxtb	r2, r3
 800064e:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <HAL_HRTIM_RepetitionEventCallback+0x11c>)
 8000650:	701a      	strb	r2, [r3, #0]
			pbits |= pframe[i] & 1;    		  // pending^2 bit is set if there is a set bit in the frame "now"
 8000652:	4a1e      	ldr	r2, [pc, #120]	; (80006cc <HAL_HRTIM_RepetitionEventCallback+0x118>)
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800065a:	b25b      	sxtb	r3, r3
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	b25a      	sxtb	r2, r3
 8000662:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <HAL_HRTIM_RepetitionEventCallback+0x11c>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b25b      	sxtb	r3, r3
 8000668:	4313      	orrs	r3, r2
 800066a:	b25b      	sxtb	r3, r3
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <HAL_HRTIM_RepetitionEventCallback+0x11c>)
 8000670:	701a      	strb	r2, [r3, #0]
			frame_progress[i] *= not_frame_ended; //zero out the frame progress if we're at the end
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <HAL_HRTIM_RepetitionEventCallback+0x114>)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	781a      	ldrb	r2, [r3, #0]
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	fb12 f303 	smulbb	r3, r2, r3
 8000682:	b2d9      	uxtb	r1, r3
 8000684:	4a10      	ldr	r2, [pc, #64]	; (80006c8 <HAL_HRTIM_RepetitionEventCallback+0x114>)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	4413      	add	r3, r2
 800068a:	460a      	mov	r2, r1
 800068c:	701a      	strb	r2, [r3, #0]
 800068e:	e000      	b.n	8000692 <HAL_HRTIM_RepetitionEventCallback+0xde>
			if(!(active & (1<<i))) continue;
 8000690:	bf00      	nop
		for(int i = 0; i<8; i++){
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	3301      	adds	r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	2b07      	cmp	r3, #7
 800069c:	dd9a      	ble.n	80005d4 <HAL_HRTIM_RepetitionEventCallback+0x20>
//		ppbits >>= 1;  // overshift compensation
//		pbits = ppbits;// assignment to th
//
//		pactive >>= 1;
//		active = pactive;
		GPIOF->BSRR = active;
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <HAL_HRTIM_RepetitionEventCallback+0x110>)
 80006a0:	781a      	ldrb	r2, [r3, #0]
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <HAL_HRTIM_RepetitionEventCallback+0x120>)
 80006a4:	619a      	str	r2, [r3, #24]
		GPIOB->BSRR = (active & 1) << 14;
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <HAL_HRTIM_RepetitionEventCallback+0x110>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	039b      	lsls	r3, r3, #14
 80006ac:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <HAL_HRTIM_RepetitionEventCallback+0x124>)
 80006ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b2:	6193      	str	r3, [r2, #24]
	}
}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	24000bf8 	.word	0x24000bf8
 80006c4:	24000318 	.word	0x24000318
 80006c8:	24000310 	.word	0x24000310
 80006cc:	24000300 	.word	0x24000300
 80006d0:	24000319 	.word	0x24000319
 80006d4:	58021400 	.word	0x58021400
 80006d8:	58020400 	.word	0x58020400

080006dc <LOG_CDC_FS>:
#include "config.h"
#include <string.h>
#include <stdio.h>
#include <stdarg.h>

void LOG_CDC_FS(Severity severity, const char *fmt, ...){
 80006dc:	b40e      	push	{r1, r2, r3}
 80006de:	b580      	push	{r7, lr}
 80006e0:	b085      	sub	sp, #20
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	4603      	mov	r3, r0
 80006e6:	71fb      	strb	r3, [r7, #7]
	va_list args;
    va_start(args, fmt);
 80006e8:	f107 0320 	add.w	r3, r7, #32
 80006ec:	60fb      	str	r3, [r7, #12]
//	if(severity < CONF_GLOBAL_SEVERITY)
//	    	return;
	printf("[%f]:", ((float)HAL_GetTick())/1000);
 80006ee:	f000 fda9 	bl	8001244 <HAL_GetTick>
 80006f2:	ee07 0a90 	vmov	s15, r0
 80006f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006fa:	eddf 6a21 	vldr	s13, [pc, #132]	; 8000780 <LOG_CDC_FS+0xa4>
 80006fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000702:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000706:	ec53 2b17 	vmov	r2, r3, d7
 800070a:	481e      	ldr	r0, [pc, #120]	; (8000784 <LOG_CDC_FS+0xa8>)
 800070c:	f00a fe6c 	bl	800b3e8 <iprintf>
    switch(severity){
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	2b05      	cmp	r3, #5
 8000714:	d826      	bhi.n	8000764 <LOG_CDC_FS+0x88>
 8000716:	a201      	add	r2, pc, #4	; (adr r2, 800071c <LOG_CDC_FS+0x40>)
 8000718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071c:	08000735 	.word	0x08000735
 8000720:	0800073d 	.word	0x0800073d
 8000724:	08000745 	.word	0x08000745
 8000728:	0800074d 	.word	0x0800074d
 800072c:	08000755 	.word	0x08000755
 8000730:	0800075d 	.word	0x0800075d
	case TRACE:
		printf(" trace: ");
 8000734:	4814      	ldr	r0, [pc, #80]	; (8000788 <LOG_CDC_FS+0xac>)
 8000736:	f00a fe57 	bl	800b3e8 <iprintf>
		break;
 800073a:	e013      	b.n	8000764 <LOG_CDC_FS+0x88>
	case DEBUG:
		printf("\033[37m debug: ");
 800073c:	4813      	ldr	r0, [pc, #76]	; (800078c <LOG_CDC_FS+0xb0>)
 800073e:	f00a fe53 	bl	800b3e8 <iprintf>
		break;
 8000742:	e00f      	b.n	8000764 <LOG_CDC_FS+0x88>
	case INFO:
		printf("\033[36m info: ");
 8000744:	4812      	ldr	r0, [pc, #72]	; (8000790 <LOG_CDC_FS+0xb4>)
 8000746:	f00a fe4f 	bl	800b3e8 <iprintf>
		break;
 800074a:	e00b      	b.n	8000764 <LOG_CDC_FS+0x88>
	case NOTICE:
		printf("\033[36m notice: ");
 800074c:	4811      	ldr	r0, [pc, #68]	; (8000794 <LOG_CDC_FS+0xb8>)
 800074e:	f00a fe4b 	bl	800b3e8 <iprintf>
		break;
 8000752:	e007      	b.n	8000764 <LOG_CDC_FS+0x88>
	case WARN:
		printf("\033[33m warn: ");
 8000754:	4810      	ldr	r0, [pc, #64]	; (8000798 <LOG_CDC_FS+0xbc>)
 8000756:	f00a fe47 	bl	800b3e8 <iprintf>
		break;
 800075a:	e003      	b.n	8000764 <LOG_CDC_FS+0x88>
	case ERR:
		printf("\033[31;1m err: ");
 800075c:	480f      	ldr	r0, [pc, #60]	; (800079c <LOG_CDC_FS+0xc0>)
 800075e:	f00a fe43 	bl	800b3e8 <iprintf>
		break;
 8000762:	bf00      	nop
	}

    vprintf(fmt, args);
 8000764:	68f9      	ldr	r1, [r7, #12]
 8000766:	69f8      	ldr	r0, [r7, #28]
 8000768:	f00a fef8 	bl	800b55c <viprintf>
    printf("\033[0m\r\n");
 800076c:	480c      	ldr	r0, [pc, #48]	; (80007a0 <LOG_CDC_FS+0xc4>)
 800076e:	f00a fea9 	bl	800b4c4 <puts>
    va_end(args);
}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800077c:	b003      	add	sp, #12
 800077e:	4770      	bx	lr
 8000780:	447a0000 	.word	0x447a0000
 8000784:	0800d3cc 	.word	0x0800d3cc
 8000788:	0800d3d4 	.word	0x0800d3d4
 800078c:	0800d3e0 	.word	0x0800d3e0
 8000790:	0800d3f0 	.word	0x0800d3f0
 8000794:	0800d400 	.word	0x0800d400
 8000798:	0800d410 	.word	0x0800d410
 800079c:	0800d420 	.word	0x0800d420
 80007a0:	0800d430 	.word	0x0800d430

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af02      	add	r7, sp, #8
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007aa:	4b6f      	ldr	r3, [pc, #444]	; (8000968 <main+0x1c4>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d11b      	bne.n	80007ee <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007b6:	f3bf 8f4f 	dsb	sy
}
 80007ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007bc:	f3bf 8f6f 	isb	sy
}
 80007c0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007c2:	4b69      	ldr	r3, [pc, #420]	; (8000968 <main+0x1c4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007ca:	f3bf 8f4f 	dsb	sy
}
 80007ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007d0:	f3bf 8f6f 	isb	sy
}
 80007d4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007d6:	4b64      	ldr	r3, [pc, #400]	; (8000968 <main+0x1c4>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a63      	ldr	r2, [pc, #396]	; (8000968 <main+0x1c4>)
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007e2:	f3bf 8f4f 	dsb	sy
}
 80007e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007e8:	f3bf 8f6f 	isb	sy
}
 80007ec:	e000      	b.n	80007f0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007ee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007f0:	4b5d      	ldr	r3, [pc, #372]	; (8000968 <main+0x1c4>)
 80007f2:	695b      	ldr	r3, [r3, #20]
 80007f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d138      	bne.n	800086e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80007fc:	4b5a      	ldr	r3, [pc, #360]	; (8000968 <main+0x1c4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000804:	f3bf 8f4f 	dsb	sy
}
 8000808:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800080a:	4b57      	ldr	r3, [pc, #348]	; (8000968 <main+0x1c4>)
 800080c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000810:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	0b5b      	lsrs	r3, r3, #13
 8000816:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800081a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	08db      	lsrs	r3, r3, #3
 8000820:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000824:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	015a      	lsls	r2, r3, #5
 800082a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800082e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000834:	494c      	ldr	r1, [pc, #304]	; (8000968 <main+0x1c4>)
 8000836:	4313      	orrs	r3, r2
 8000838:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	1e5a      	subs	r2, r3, #1
 8000840:	607a      	str	r2, [r7, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1ef      	bne.n	8000826 <main+0x82>
    } while(sets-- != 0U);
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	1e5a      	subs	r2, r3, #1
 800084a:	60ba      	str	r2, [r7, #8]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d1e5      	bne.n	800081c <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000850:	f3bf 8f4f 	dsb	sy
}
 8000854:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000856:	4b44      	ldr	r3, [pc, #272]	; (8000968 <main+0x1c4>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	4a43      	ldr	r2, [pc, #268]	; (8000968 <main+0x1c4>)
 800085c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000860:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000862:	f3bf 8f4f 	dsb	sy
}
 8000866:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000868:	f3bf 8f6f 	isb	sy
}
 800086c:	e000      	b.n	8000870 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800086e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000870:	f000 fc62 	bl	8001138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000874:	f000 f890 	bl	8000998 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000878:	f000 f992 	bl	8000ba0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800087c:	f009 fb4a 	bl	8009f14 <MX_USB_DEVICE_Init>
  MX_HRTIM_Init();
 8000880:	f000 f908 	bl	8000a94 <MX_HRTIM_Init>
  /* USER CODE BEGIN 2 */

  HAL_HRTIM_SimpleBaseStart_IT(&hhrtim, HRTIM_TIMERINDEX_MASTER);
 8000884:	2105      	movs	r1, #5
 8000886:	4839      	ldr	r0, [pc, #228]	; (800096c <main+0x1c8>)
 8000888:	f001 f904 	bl	8001a94 <HAL_HRTIM_SimpleBaseStart_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t oldtick = HAL_GetTick();
 800088c:	f000 fcda 	bl	8001244 <HAL_GetTick>
 8000890:	6178      	str	r0, [r7, #20]
  uint32_t newtick = oldtick;
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	613b      	str	r3, [r7, #16]
  while (1)
  {
	  memset(CDCRxBufferFS, '\0', strlen(CDCRxBufferFS));
 8000896:	4836      	ldr	r0, [pc, #216]	; (8000970 <main+0x1cc>)
 8000898:	f7ff fd82 	bl	80003a0 <strlen>
 800089c:	4603      	mov	r3, r0
 800089e:	461a      	mov	r2, r3
 80008a0:	2100      	movs	r1, #0
 80008a2:	4833      	ldr	r0, [pc, #204]	; (8000970 <main+0x1cc>)
 80008a4:	f00a fefa 	bl	800b69c <memset>

	  CDC_OTG_Recv(CDCRxBufferFS);
 80008a8:	4831      	ldr	r0, [pc, #196]	; (8000970 <main+0x1cc>)
 80008aa:	f009 fb21 	bl	8009ef0 <CDC_OTG_Recv>
	  if(strlen(CDCRxBufferFS) > 0){
 80008ae:	4b30      	ldr	r3, [pc, #192]	; (8000970 <main+0x1cc>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d02a      	beq.n	800090c <main+0x168>
		  LOG_CDC_FS(TRACE, "%d %d", CDCRxBufferFS[0], CDCRxBufferFS[1]);
 80008b6:	4b2e      	ldr	r3, [pc, #184]	; (8000970 <main+0x1cc>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	461a      	mov	r2, r3
 80008bc:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <main+0x1cc>)
 80008be:	785b      	ldrb	r3, [r3, #1]
 80008c0:	492c      	ldr	r1, [pc, #176]	; (8000974 <main+0x1d0>)
 80008c2:	2000      	movs	r0, #0
 80008c4:	f7ff ff0a 	bl	80006dc <LOG_CDC_FS>
		  if(strcmp(CDCRxBufferFS, "a")==0)
 80008c8:	492b      	ldr	r1, [pc, #172]	; (8000978 <main+0x1d4>)
 80008ca:	4829      	ldr	r0, [pc, #164]	; (8000970 <main+0x1cc>)
 80008cc:	f7ff fd08 	bl	80002e0 <strcmp>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d103      	bne.n	80008de <main+0x13a>
		  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80008d6:	2101      	movs	r1, #1
 80008d8:	4828      	ldr	r0, [pc, #160]	; (800097c <main+0x1d8>)
 80008da:	f000 ffc8 	bl	800186e <HAL_GPIO_TogglePin>
		  if(strcmp(CDCRxBufferFS, "s")==0)
 80008de:	4928      	ldr	r1, [pc, #160]	; (8000980 <main+0x1dc>)
 80008e0:	4823      	ldr	r0, [pc, #140]	; (8000970 <main+0x1cc>)
 80008e2:	f7ff fcfd 	bl	80002e0 <strcmp>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d103      	bne.n	80008f4 <main+0x150>
		    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	4823      	ldr	r0, [pc, #140]	; (800097c <main+0x1d8>)
 80008f0:	f000 ffbd 	bl	800186e <HAL_GPIO_TogglePin>
		  if(strcmp(CDCRxBufferFS, "d")==0)
 80008f4:	4923      	ldr	r1, [pc, #140]	; (8000984 <main+0x1e0>)
 80008f6:	481e      	ldr	r0, [pc, #120]	; (8000970 <main+0x1cc>)
 80008f8:	f7ff fcf2 	bl	80002e0 <strcmp>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d104      	bne.n	800090c <main+0x168>
		  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000902:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000906:	481d      	ldr	r0, [pc, #116]	; (800097c <main+0x1d8>)
 8000908:	f000 ffb1 	bl	800186e <HAL_GPIO_TogglePin>

	  }

	  newtick = HAL_GetTick();
 800090c:	f000 fc9a 	bl	8001244 <HAL_GetTick>
 8000910:	6138      	str	r0, [r7, #16]
	  if(oldtick + 999 < newtick){
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	429a      	cmp	r2, r3
 800091c:	d9bb      	bls.n	8000896 <main+0xf2>
		  LOG_CDC_FS(INFO, "Interrupts from last %d ms: %d rollovers, %d 1s, %d 0s", newtick - oldtick, TimMRollovers, TimMBit1s, TimMBit0s);
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	1ad1      	subs	r1, r2, r3
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <main+0x1e4>)
 8000926:	6818      	ldr	r0, [r3, #0]
 8000928:	4b18      	ldr	r3, [pc, #96]	; (800098c <main+0x1e8>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a18      	ldr	r2, [pc, #96]	; (8000990 <main+0x1ec>)
 800092e:	6812      	ldr	r2, [r2, #0]
 8000930:	9201      	str	r2, [sp, #4]
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	4603      	mov	r3, r0
 8000936:	460a      	mov	r2, r1
 8000938:	4916      	ldr	r1, [pc, #88]	; (8000994 <main+0x1f0>)
 800093a:	2002      	movs	r0, #2
 800093c:	f7ff fece 	bl	80006dc <LOG_CDC_FS>
		  PrepareFrame(1500, 1, ESC_0, THR_0);
 8000940:	2300      	movs	r3, #0
 8000942:	2200      	movs	r2, #0
 8000944:	2101      	movs	r1, #1
 8000946:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800094a:	f7ff fd31 	bl	80003b0 <PrepareFrame>
		  TimMRollovers = 0;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <main+0x1e4>)
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
		  TimMBit1s = 0;
 8000954:	4b0d      	ldr	r3, [pc, #52]	; (800098c <main+0x1e8>)
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
		  TimMBit0s = 0;
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <main+0x1ec>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
		  oldtick = newtick;
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	617b      	str	r3, [r7, #20]
  {
 8000964:	e797      	b.n	8000896 <main+0xf2>
 8000966:	bf00      	nop
 8000968:	e000ed00 	.word	0xe000ed00
 800096c:	2400031c 	.word	0x2400031c
 8000970:	240003f8 	.word	0x240003f8
 8000974:	0800d438 	.word	0x0800d438
 8000978:	0800d440 	.word	0x0800d440
 800097c:	58020400 	.word	0x58020400
 8000980:	0800d444 	.word	0x0800d444
 8000984:	0800d448 	.word	0x0800d448
 8000988:	24000bf8 	.word	0x24000bf8
 800098c:	24000bfc 	.word	0x24000bfc
 8000990:	24000c00 	.word	0x24000c00
 8000994:	0800d44c 	.word	0x0800d44c

08000998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b09c      	sub	sp, #112	; 0x70
 800099c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a2:	224c      	movs	r2, #76	; 0x4c
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f00a fe78 	bl	800b69c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2220      	movs	r2, #32
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f00a fe72 	bl	800b69c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009b8:	2002      	movs	r0, #2
 80009ba:	f003 fb4f 	bl	800405c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b32      	ldr	r3, [pc, #200]	; (8000a8c <SystemClock_Config+0xf4>)
 80009c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c6:	4a31      	ldr	r2, [pc, #196]	; (8000a8c <SystemClock_Config+0xf4>)
 80009c8:	f023 0301 	bic.w	r3, r3, #1
 80009cc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009ce:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <SystemClock_Config+0xf4>)
 80009d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	4b2d      	ldr	r3, [pc, #180]	; (8000a90 <SystemClock_Config+0xf8>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a2c      	ldr	r2, [pc, #176]	; (8000a90 <SystemClock_Config+0xf8>)
 80009de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <SystemClock_Config+0xf8>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009f0:	bf00      	nop
 80009f2:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <SystemClock_Config+0xf8>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009fe:	d1f8      	bne.n	80009f2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000a00:	2322      	movs	r3, #34	; 0x22
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a04:	2301      	movs	r3, #1
 8000a06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a08:	2340      	movs	r3, #64	; 0x40
 8000a0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a10:	2302      	movs	r3, #2
 8000a12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a14:	2300      	movs	r3, #0
 8000a16:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000a1c:	2332      	movs	r3, #50	; 0x32
 8000a1e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a2c:	230c      	movs	r3, #12
 8000a2e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f003 fb57 	bl	80040f0 <HAL_RCC_OscConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a48:	f000 f936 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4c:	233f      	movs	r3, #63	; 0x3f
 8000a4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a50:	2303      	movs	r3, #3
 8000a52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a5c:	2340      	movs	r3, #64	; 0x40
 8000a5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a60:	2340      	movs	r3, #64	; 0x40
 8000a62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a68:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a6a:	2340      	movs	r3, #64	; 0x40
 8000a6c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2102      	movs	r1, #2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f003 ff96 	bl	80049a4 <HAL_RCC_ClockConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000a7e:	f000 f91b 	bl	8000cb8 <Error_Handler>
  }
}
 8000a82:	bf00      	nop
 8000a84:	3770      	adds	r7, #112	; 0x70
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	58000400 	.word	0x58000400
 8000a90:	58024800 	.word	0x58024800

08000a94 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b09c      	sub	sp, #112	; 0x70
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000a9a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	2254      	movs	r2, #84	; 0x54
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f00a fdf3 	bl	800b69c <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8000ac0:	4b35      	ldr	r3, [pc, #212]	; (8000b98 <MX_HRTIM_Init+0x104>)
 8000ac2:	4a36      	ldr	r2, [pc, #216]	; (8000b9c <MX_HRTIM_Init+0x108>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000ac6:	4b34      	ldr	r3, [pc, #208]	; (8000b98 <MX_HRTIM_Init+0x104>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000acc:	4b32      	ldr	r3, [pc, #200]	; (8000b98 <MX_HRTIM_Init+0x104>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8000ad2:	4831      	ldr	r0, [pc, #196]	; (8000b98 <MX_HRTIM_Init+0x104>)
 8000ad4:	f000 fee6 	bl	80018a4 <HAL_HRTIM_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_HRTIM_Init+0x4e>
  {
    Error_Handler();
 8000ade:	f000 f8eb 	bl	8000cb8 <Error_Handler>
  }
  pTimeBaseCfg.Period = 1332;
 8000ae2:	f240 5334 	movw	r3, #1332	; 0x534
 8000ae6:	663b      	str	r3, [r7, #96]	; 0x60
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	667b      	str	r3, [r7, #100]	; 0x64
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000aec:	2305      	movs	r3, #5
 8000aee:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000af0:	2308      	movs	r3, #8
 8000af2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 8000af4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000af8:	461a      	mov	r2, r3
 8000afa:	2105      	movs	r1, #5
 8000afc:	4826      	ldr	r0, [pc, #152]	; (8000b98 <MX_HRTIM_Init+0x104>)
 8000afe:	f000 ffa1 	bl	8001a44 <HAL_HRTIM_TimeBaseConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_HRTIM_Init+0x78>
  {
    Error_Handler();
 8000b08:	f000 f8d6 	bl	8000cb8 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_MCMP1|HRTIM_MASTER_IT_MCMP2
 8000b0c:	2353      	movs	r3, #83	; 0x53
 8000b0e:	60fb      	str	r3, [r7, #12]
                              |HRTIM_MASTER_IT_MREP|HRTIM_MASTER_IT_MUPD;
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
  pTimerCfg.DMASrcAddress = 0x0000;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  pTimerCfg.DMADstAddress = 0x0000;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMASize = 0x1;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8000b30:	2300      	movs	r3, #0
 8000b32:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000b34:	2300      	movs	r3, #0
 8000b36:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	461a      	mov	r2, r3
 8000b46:	2105      	movs	r1, #5
 8000b48:	4813      	ldr	r0, [pc, #76]	; (8000b98 <MX_HRTIM_Init+0x104>)
 8000b4a:	f000 ffef 	bl	8001b2c <HAL_HRTIM_WaveformTimerConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_HRTIM_Init+0xc4>
  {
    Error_Handler();
 8000b54:	f000 f8b0 	bl	8000cb8 <Error_Handler>
  }
  pCompareCfg.CompareValue = 500;
 8000b58:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b5c:	603b      	str	r3, [r7, #0]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000b5e:	463b      	mov	r3, r7
 8000b60:	2201      	movs	r2, #1
 8000b62:	2105      	movs	r1, #5
 8000b64:	480c      	ldr	r0, [pc, #48]	; (8000b98 <MX_HRTIM_Init+0x104>)
 8000b66:	f001 f853 	bl	8001c10 <HAL_HRTIM_WaveformCompareConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_HRTIM_Init+0xe0>
  {
    Error_Handler();
 8000b70:	f000 f8a2 	bl	8000cb8 <Error_Handler>
  }
  pCompareCfg.CompareValue = 1000;
 8000b74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b78:	603b      	str	r3, [r7, #0]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	2105      	movs	r1, #5
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_HRTIM_Init+0x104>)
 8000b82:	f001 f845 	bl	8001c10 <HAL_HRTIM_WaveformCompareConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_HRTIM_Init+0xfc>
  {
    Error_Handler();
 8000b8c:	f000 f894 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	3770      	adds	r7, #112	; 0x70
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	2400031c 	.word	0x2400031c
 8000b9c:	40017400 	.word	0x40017400

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	4b3d      	ldr	r3, [pc, #244]	; (8000cac <MX_GPIO_Init+0x10c>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	4a3b      	ldr	r2, [pc, #236]	; (8000cac <MX_GPIO_Init+0x10c>)
 8000bbe:	f043 0304 	orr.w	r3, r3, #4
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc6:	4b39      	ldr	r3, [pc, #228]	; (8000cac <MX_GPIO_Init+0x10c>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd4:	4b35      	ldr	r3, [pc, #212]	; (8000cac <MX_GPIO_Init+0x10c>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	4a34      	ldr	r2, [pc, #208]	; (8000cac <MX_GPIO_Init+0x10c>)
 8000bdc:	f043 0320 	orr.w	r3, r3, #32
 8000be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be4:	4b31      	ldr	r3, [pc, #196]	; (8000cac <MX_GPIO_Init+0x10c>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bea:	f003 0320 	and.w	r3, r3, #32
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bf2:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <MX_GPIO_Init+0x10c>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	4a2c      	ldr	r2, [pc, #176]	; (8000cac <MX_GPIO_Init+0x10c>)
 8000bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c02:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <MX_GPIO_Init+0x10c>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c10:	4b26      	ldr	r3, [pc, #152]	; (8000cac <MX_GPIO_Init+0x10c>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c16:	4a25      	ldr	r2, [pc, #148]	; (8000cac <MX_GPIO_Init+0x10c>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c20:	4b22      	ldr	r3, [pc, #136]	; (8000cac <MX_GPIO_Init+0x10c>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <MX_GPIO_Init+0x10c>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	4a1d      	ldr	r2, [pc, #116]	; (8000cac <MX_GPIO_Init+0x10c>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <MX_GPIO_Init+0x10c>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	21ff      	movs	r1, #255	; 0xff
 8000c50:	4817      	ldr	r0, [pc, #92]	; (8000cb0 <MX_GPIO_Init+0x110>)
 8000c52:	f000 fdf3 	bl	800183c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c5c:	4815      	ldr	r0, [pc, #84]	; (8000cb4 <MX_GPIO_Init+0x114>)
 8000c5e:	f000 fded 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c62:	23ff      	movs	r3, #255	; 0xff
 8000c64:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <MX_GPIO_Init+0x110>)
 8000c7a:	f000 fc2f 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000c7e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <MX_GPIO_Init+0x114>)
 8000c98:	f000 fc20 	bl	80014dc <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB7_FMP);
 8000c9c:	2020      	movs	r0, #32
 8000c9e:	f001 feff 	bl	8002aa0 <HAL_I2CEx_EnableFastModePlus>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ca2:	bf00      	nop
 8000ca4:	3728      	adds	r7, #40	; 0x28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	58024400 	.word	0x58024400
 8000cb0:	58021400 	.word	0x58021400
 8000cb4:	58020400 	.word	0x58020400

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000cc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <Error_Handler+0x1c>)
 8000cc6:	f000 fdd2 	bl	800186e <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000cca:	2064      	movs	r0, #100	; 0x64
 8000ccc:	f000 fac6 	bl	800125c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000cd0:	e7f6      	b.n	8000cc0 <Error_Handler+0x8>
 8000cd2:	bf00      	nop
 8000cd4:	58020400 	.word	0x58020400

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_MspInit+0x30>)
 8000ce0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ce4:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <HAL_MspInit+0x30>)
 8000ce6:	f043 0302 	orr.w	r3, r3, #2
 8000cea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_MspInit+0x30>)
 8000cf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	58024400 	.word	0x58024400

08000d0c <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b0b4      	sub	sp, #208	; 0xd0
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	22c0      	movs	r2, #192	; 0xc0
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f00a fcbd 	bl	800b69c <memset>
  if(hhrtim->Instance==HRTIM1)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a19      	ldr	r2, [pc, #100]	; (8000d8c <HAL_HRTIM_MspInit+0x80>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d12a      	bne.n	8000d82 <HAL_HRTIM_MspInit+0x76>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8000d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_CPUCLK;
 8000d38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	4618      	mov	r0, r3
 8000d46:	f004 f98d 	bl	8005064 <HAL_RCCEx_PeriphCLKConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_HRTIM_MspInit+0x48>
    {
      Error_Handler();
 8000d50:	f7ff ffb2 	bl	8000cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_HRTIM_MspInit+0x84>)
 8000d56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d5a:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <HAL_HRTIM_MspInit+0x84>)
 8000d5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d60:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d64:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <HAL_HRTIM_MspInit+0x84>)
 8000d66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_Master_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	2067      	movs	r0, #103	; 0x67
 8000d78:	f000 fb7b 	bl	8001472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_Master_IRQn);
 8000d7c:	2067      	movs	r0, #103	; 0x67
 8000d7e:	f000 fb92 	bl	80014a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8000d82:	bf00      	nop
 8000d84:	37d0      	adds	r7, #208	; 0xd0
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40017400 	.word	0x40017400
 8000d90:	58024400 	.word	0x58024400

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
	  GPIOB->BSRR = 1;
 8000d98:	4b01      	ldr	r3, [pc, #4]	; (8000da0 <NMI_Handler+0xc>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	619a      	str	r2, [r3, #24]
 8000d9e:	e7fb      	b.n	8000d98 <NMI_Handler+0x4>
 8000da0:	58020400 	.word	0x58020400

08000da4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <HardFault_Handler+0x4>
	...

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  GPIOB->BSRR = 1;
 8000db0:	4b01      	ldr	r3, [pc, #4]	; (8000db8 <MemManage_Handler+0xc>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	619a      	str	r2, [r3, #24]
 8000db6:	e7fb      	b.n	8000db0 <MemManage_Handler+0x4>
 8000db8:	58020400 	.word	0x58020400

08000dbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  GPIOB->BSRR = 1;
 8000dc0:	4b01      	ldr	r3, [pc, #4]	; (8000dc8 <BusFault_Handler+0xc>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	619a      	str	r2, [r3, #24]
 8000dc6:	e7fb      	b.n	8000dc0 <BusFault_Handler+0x4>
 8000dc8:	58020400 	.word	0x58020400

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  GPIOB->BSRR = 1;
 8000dd0:	4b01      	ldr	r3, [pc, #4]	; (8000dd8 <UsageFault_Handler+0xc>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	619a      	str	r2, [r3, #24]
 8000dd6:	e7fb      	b.n	8000dd0 <UsageFault_Handler+0x4>
 8000dd8:	58020400 	.word	0x58020400

08000ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0a:	f000 fa07 	bl	800121c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <OTG_FS_IRQHandler+0x10>)
 8000e1a:	f001 ffbe 	bl	8002d9a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	24002100 	.word	0x24002100

08000e28 <HRTIM1_Master_IRQHandler>:

/**
  * @brief This function handles HRTIM master timer global interrupt.
  */
void HRTIM1_Master_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_Master_IRQn 0 */

  /* USER CODE END HRTIM1_Master_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_MASTER);
 8000e2c:	2105      	movs	r1, #5
 8000e2e:	4802      	ldr	r0, [pc, #8]	; (8000e38 <HRTIM1_Master_IRQHandler+0x10>)
 8000e30:	f001 f85c 	bl	8001eec <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_Master_IRQn 1 */

  /* USER CODE END HRTIM1_Master_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	2400031c 	.word	0x2400031c

08000e3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return 1;
 8000e40:	2301      	movs	r3, #1
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <_kill>:

int _kill(int pid, int sig)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e56:	f00a fc73 	bl	800b740 <__errno>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2216      	movs	r2, #22
 8000e5e:	601a      	str	r2, [r3, #0]
  return -1;
 8000e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <_exit>:

void _exit (int status)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff ffe7 	bl	8000e4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e7e:	e7fe      	b.n	8000e7e <_exit+0x12>

08000e80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	e00a      	b.n	8000ea8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e92:	f3af 8000 	nop.w
 8000e96:	4601      	mov	r1, r0
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	60ba      	str	r2, [r7, #8]
 8000e9e:	b2ca      	uxtb	r2, r1
 8000ea0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	dbf0      	blt.n	8000e92 <_read+0x12>
  }

  return len;
 8000eb0:	687b      	ldr	r3, [r7, #4]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <_write>:

int _write(int file, char *ptr, int len)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b084      	sub	sp, #16
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d00a      	beq.n	8000ee2 <_write+0x28>
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d007      	beq.n	8000ee2 <_write+0x28>
    {
	   errno = EBADF;
 8000ed2:	f00a fc35 	bl	800b740 <__errno>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2209      	movs	r2, #9
 8000eda:	601a      	str	r2, [r3, #0]
	   return -1;
 8000edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ee0:	e009      	b.n	8000ef6 <_write+0x3c>
	}

	return CDC_OTG_Send(ptr, len) == 0 ? len : 0;
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	68b8      	ldr	r0, [r7, #8]
 8000ee6:	f008 ff8f 	bl	8009e08 <CDC_OTG_Send>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d101      	bne.n	8000ef4 <_write+0x3a>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	e000      	b.n	8000ef6 <_write+0x3c>
 8000ef4:	2300      	movs	r3, #0

}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_close>:

int _close(int file)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f26:	605a      	str	r2, [r3, #4]
  return 0;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <_isatty>:

int _isatty(int file)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f70:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <_sbrk+0x5c>)
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <_sbrk+0x60>)
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d102      	bne.n	8000f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <_sbrk+0x64>)
 8000f86:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <_sbrk+0x68>)
 8000f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d207      	bcs.n	8000fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f98:	f00a fbd2 	bl	800b740 <__errno>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fa6:	e009      	b.n	8000fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <_sbrk+0x64>)
 8000fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fba:	68fb      	ldr	r3, [r7, #12]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	24080000 	.word	0x24080000
 8000fc8:	00000400 	.word	0x00000400
 8000fcc:	24000c04 	.word	0x24000c04
 8000fd0:	24002978 	.word	0x24002978

08000fd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fd8:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <SystemInit+0xe4>)
 8000fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fde:	4a36      	ldr	r2, [pc, #216]	; (80010b8 <SystemInit+0xe4>)
 8000fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fe8:	4b34      	ldr	r3, [pc, #208]	; (80010bc <SystemInit+0xe8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 030f 	and.w	r3, r3, #15
 8000ff0:	2b06      	cmp	r3, #6
 8000ff2:	d807      	bhi.n	8001004 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ff4:	4b31      	ldr	r3, [pc, #196]	; (80010bc <SystemInit+0xe8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f023 030f 	bic.w	r3, r3, #15
 8000ffc:	4a2f      	ldr	r2, [pc, #188]	; (80010bc <SystemInit+0xe8>)
 8000ffe:	f043 0307 	orr.w	r3, r3, #7
 8001002:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001004:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <SystemInit+0xec>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a2d      	ldr	r2, [pc, #180]	; (80010c0 <SystemInit+0xec>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001010:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <SystemInit+0xec>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001016:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <SystemInit+0xec>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4929      	ldr	r1, [pc, #164]	; (80010c0 <SystemInit+0xec>)
 800101c:	4b29      	ldr	r3, [pc, #164]	; (80010c4 <SystemInit+0xf0>)
 800101e:	4013      	ands	r3, r2
 8001020:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001022:	4b26      	ldr	r3, [pc, #152]	; (80010bc <SystemInit+0xe8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	2b00      	cmp	r3, #0
 800102c:	d007      	beq.n	800103e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800102e:	4b23      	ldr	r3, [pc, #140]	; (80010bc <SystemInit+0xe8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f023 030f 	bic.w	r3, r3, #15
 8001036:	4a21      	ldr	r2, [pc, #132]	; (80010bc <SystemInit+0xe8>)
 8001038:	f043 0307 	orr.w	r3, r3, #7
 800103c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800103e:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <SystemInit+0xec>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001044:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <SystemInit+0xec>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <SystemInit+0xec>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <SystemInit+0xec>)
 8001052:	4a1d      	ldr	r2, [pc, #116]	; (80010c8 <SystemInit+0xf4>)
 8001054:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001056:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <SystemInit+0xec>)
 8001058:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <SystemInit+0xf8>)
 800105a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <SystemInit+0xec>)
 800105e:	4a1c      	ldr	r2, [pc, #112]	; (80010d0 <SystemInit+0xfc>)
 8001060:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <SystemInit+0xec>)
 8001064:	2200      	movs	r2, #0
 8001066:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <SystemInit+0xec>)
 800106a:	4a19      	ldr	r2, [pc, #100]	; (80010d0 <SystemInit+0xfc>)
 800106c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <SystemInit+0xec>)
 8001070:	2200      	movs	r2, #0
 8001072:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <SystemInit+0xec>)
 8001076:	4a16      	ldr	r2, [pc, #88]	; (80010d0 <SystemInit+0xfc>)
 8001078:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <SystemInit+0xec>)
 800107c:	2200      	movs	r2, #0
 800107e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <SystemInit+0xec>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <SystemInit+0xec>)
 8001086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800108a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <SystemInit+0xec>)
 800108e:	2200      	movs	r2, #0
 8001090:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <SystemInit+0x100>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <SystemInit+0x104>)
 8001098:	4013      	ands	r3, r2
 800109a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800109e:	d202      	bcs.n	80010a6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <SystemInit+0x108>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <SystemInit+0x10c>)
 80010a8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80010ac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	52002000 	.word	0x52002000
 80010c0:	58024400 	.word	0x58024400
 80010c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80010c8:	02020200 	.word	0x02020200
 80010cc:	01ff0000 	.word	0x01ff0000
 80010d0:	01010280 	.word	0x01010280
 80010d4:	5c001000 	.word	0x5c001000
 80010d8:	ffff0000 	.word	0xffff0000
 80010dc:	51008108 	.word	0x51008108
 80010e0:	52004000 	.word	0x52004000

080010e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800111c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010e8:	f7ff ff74 	bl	8000fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ee:	490d      	ldr	r1, [pc, #52]	; (8001124 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010f0:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f4:	e002      	b.n	80010fc <LoopCopyDataInit>

080010f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fa:	3304      	adds	r3, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001100:	d3f9      	bcc.n	80010f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001104:	4c0a      	ldr	r4, [pc, #40]	; (8001130 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001108:	e001      	b.n	800110e <LoopFillZerobss>

0800110a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110c:	3204      	adds	r2, #4

0800110e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001110:	d3fb      	bcc.n	800110a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001112:	f00a fb1b 	bl	800b74c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001116:	f7ff fb45 	bl	80007a4 <main>
  bx  lr
 800111a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800111c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001120:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001124:	240002e4 	.word	0x240002e4
  ldr r2, =_sidata
 8001128:	0800d88c 	.word	0x0800d88c
  ldr r2, =_sbss
 800112c:	240002e4 	.word	0x240002e4
  ldr r4, =_ebss
 8001130:	24002978 	.word	0x24002978

08001134 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001134:	e7fe      	b.n	8001134 <ADC3_IRQHandler>
	...

08001138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113e:	2003      	movs	r0, #3
 8001140:	f000 f98c 	bl	800145c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001144:	f003 fde4 	bl	8004d10 <HAL_RCC_GetSysClockFreq>
 8001148:	4602      	mov	r2, r0
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_Init+0x68>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	0a1b      	lsrs	r3, r3, #8
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	4913      	ldr	r1, [pc, #76]	; (80011a4 <HAL_Init+0x6c>)
 8001156:	5ccb      	ldrb	r3, [r1, r3]
 8001158:	f003 031f 	and.w	r3, r3, #31
 800115c:	fa22 f303 	lsr.w	r3, r2, r3
 8001160:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <HAL_Init+0x68>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <HAL_Init+0x6c>)
 800116c:	5cd3      	ldrb	r3, [r2, r3]
 800116e:	f003 031f 	and.w	r3, r3, #31
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	fa22 f303 	lsr.w	r3, r2, r3
 8001178:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <HAL_Init+0x70>)
 800117a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800117c:	4a0b      	ldr	r2, [pc, #44]	; (80011ac <HAL_Init+0x74>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001182:	200f      	movs	r0, #15
 8001184:	f000 f814 	bl	80011b0 <HAL_InitTick>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e002      	b.n	8001198 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001192:	f7ff fda1 	bl	8000cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	58024400 	.word	0x58024400
 80011a4:	0800d504 	.word	0x0800d504
 80011a8:	24000004 	.word	0x24000004
 80011ac:	24000000 	.word	0x24000000

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_InitTick+0x60>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d101      	bne.n	80011c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e021      	b.n	8001208 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <HAL_InitTick+0x64>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_InitTick+0x60>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f971 	bl	80014c2 <HAL_SYSTICK_Config>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00e      	b.n	8001208 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d80a      	bhi.n	8001206 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f0:	2200      	movs	r2, #0
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f8:	f000 f93b 	bl	8001472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011fc:	4a06      	ldr	r2, [pc, #24]	; (8001218 <HAL_InitTick+0x68>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	e000      	b.n	8001208 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	2400000c 	.word	0x2400000c
 8001214:	24000000 	.word	0x24000000
 8001218:	24000008 	.word	0x24000008

0800121c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_IncTick+0x20>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_IncTick+0x24>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4413      	add	r3, r2
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <HAL_IncTick+0x24>)
 800122e:	6013      	str	r3, [r2, #0]
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	2400000c 	.word	0x2400000c
 8001240:	24000c08 	.word	0x24000c08

08001244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return uwTick;
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <HAL_GetTick+0x14>)
 800124a:	681b      	ldr	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	24000c08 	.word	0x24000c08

0800125c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001264:	f7ff ffee 	bl	8001244 <HAL_GetTick>
 8001268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001274:	d005      	beq.n	8001282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_Delay+0x44>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001282:	bf00      	nop
 8001284:	f7ff ffde 	bl	8001244 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d8f7      	bhi.n	8001284 <HAL_Delay+0x28>
  {
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2400000c 	.word	0x2400000c

080012a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <HAL_GetREVID+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	0c1b      	lsrs	r3, r3, #16
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	5c001000 	.word	0x5c001000

080012bc <__NVIC_SetPriorityGrouping>:
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <__NVIC_SetPriorityGrouping+0x40>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ea:	4a04      	ldr	r2, [pc, #16]	; (80012fc <__NVIC_SetPriorityGrouping+0x40>)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	60d3      	str	r3, [r2, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00
 8001300:	05fa0000 	.word	0x05fa0000

08001304 <__NVIC_GetPriorityGrouping>:
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_EnableIRQ>:
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800132a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132e:	2b00      	cmp	r3, #0
 8001330:	db0b      	blt.n	800134a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	f003 021f 	and.w	r2, r3, #31
 8001338:	4907      	ldr	r1, [pc, #28]	; (8001358 <__NVIC_EnableIRQ+0x38>)
 800133a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	2001      	movs	r0, #1
 8001342:	fa00 f202 	lsl.w	r2, r0, r2
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000e100 	.word	0xe000e100

0800135c <__NVIC_SetPriority>:
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001368:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0a      	blt.n	8001386 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	490c      	ldr	r1, [pc, #48]	; (80013a8 <__NVIC_SetPriority+0x4c>)
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	440b      	add	r3, r1
 8001380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001384:	e00a      	b.n	800139c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4908      	ldr	r1, [pc, #32]	; (80013ac <__NVIC_SetPriority+0x50>)
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3b04      	subs	r3, #4
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	440b      	add	r3, r1
 800139a:	761a      	strb	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <NVIC_EncodePriority>:
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	; 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	bf28      	it	cs
 80013ce:	2304      	movcs	r3, #4
 80013d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d902      	bls.n	80013e0 <NVIC_EncodePriority+0x30>
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3b03      	subs	r3, #3
 80013de:	e000      	b.n	80013e2 <NVIC_EncodePriority+0x32>
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43d9      	mvns	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	4313      	orrs	r3, r2
}
 800140a:	4618      	mov	r0, r3
 800140c:	3724      	adds	r7, #36	; 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001428:	d301      	bcc.n	800142e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142a:	2301      	movs	r3, #1
 800142c:	e00f      	b.n	800144e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <SysTick_Config+0x40>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001436:	210f      	movs	r1, #15
 8001438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800143c:	f7ff ff8e 	bl	800135c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <SysTick_Config+0x40>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <SysTick_Config+0x40>)
 8001448:	2207      	movs	r2, #7
 800144a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	e000e010 	.word	0xe000e010

0800145c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff29 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001480:	f7ff ff40 	bl	8001304 <__NVIC_GetPriorityGrouping>
 8001484:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	6978      	ldr	r0, [r7, #20]
 800148c:	f7ff ff90 	bl	80013b0 <NVIC_EncodePriority>
 8001490:	4602      	mov	r2, r0
 8001492:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff5f 	bl	800135c <__NVIC_SetPriority>
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff33 	bl	8001320 <__NVIC_EnableIRQ>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ffa4 	bl	8001418 <SysTick_Config>
 80014d0:	4603      	mov	r3, r0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014dc:	b480      	push	{r7}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80014ea:	4b89      	ldr	r3, [pc, #548]	; (8001710 <HAL_GPIO_Init+0x234>)
 80014ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014ee:	e194      	b.n	800181a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	2101      	movs	r1, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa01 f303 	lsl.w	r3, r1, r3
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 8186 	beq.w	8001814 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b01      	cmp	r3, #1
 8001512:	d005      	beq.n	8001520 <HAL_GPIO_Init+0x44>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d130      	bne.n	8001582 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2203      	movs	r2, #3
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	68da      	ldr	r2, [r3, #12]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001556:	2201      	movs	r2, #1
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	091b      	lsrs	r3, r3, #4
 800156c:	f003 0201 	and.w	r2, r3, #1
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	2b03      	cmp	r3, #3
 800158c:	d017      	beq.n	80015be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	2203      	movs	r2, #3
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d123      	bne.n	8001612 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	08da      	lsrs	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3208      	adds	r2, #8
 80015d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	220f      	movs	r2, #15
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	691a      	ldr	r2, [r3, #16]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	08da      	lsrs	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3208      	adds	r2, #8
 800160c:	69b9      	ldr	r1, [r7, #24]
 800160e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2203      	movs	r2, #3
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 0203 	and.w	r2, r3, #3
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 80e0 	beq.w	8001814 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001654:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <HAL_GPIO_Init+0x238>)
 8001656:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800165a:	4a2e      	ldr	r2, [pc, #184]	; (8001714 <HAL_GPIO_Init+0x238>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001664:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <HAL_GPIO_Init+0x238>)
 8001666:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001672:	4a29      	ldr	r2, [pc, #164]	; (8001718 <HAL_GPIO_Init+0x23c>)
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	3302      	adds	r3, #2
 800167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	220f      	movs	r2, #15
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a20      	ldr	r2, [pc, #128]	; (800171c <HAL_GPIO_Init+0x240>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d052      	beq.n	8001744 <HAL_GPIO_Init+0x268>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a1f      	ldr	r2, [pc, #124]	; (8001720 <HAL_GPIO_Init+0x244>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d031      	beq.n	800170a <HAL_GPIO_Init+0x22e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a1e      	ldr	r2, [pc, #120]	; (8001724 <HAL_GPIO_Init+0x248>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d02b      	beq.n	8001706 <HAL_GPIO_Init+0x22a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a1d      	ldr	r2, [pc, #116]	; (8001728 <HAL_GPIO_Init+0x24c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d025      	beq.n	8001702 <HAL_GPIO_Init+0x226>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a1c      	ldr	r2, [pc, #112]	; (800172c <HAL_GPIO_Init+0x250>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d01f      	beq.n	80016fe <HAL_GPIO_Init+0x222>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a1b      	ldr	r2, [pc, #108]	; (8001730 <HAL_GPIO_Init+0x254>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d019      	beq.n	80016fa <HAL_GPIO_Init+0x21e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a1a      	ldr	r2, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x258>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <HAL_GPIO_Init+0x21a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a19      	ldr	r2, [pc, #100]	; (8001738 <HAL_GPIO_Init+0x25c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00d      	beq.n	80016f2 <HAL_GPIO_Init+0x216>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a18      	ldr	r2, [pc, #96]	; (800173c <HAL_GPIO_Init+0x260>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d007      	beq.n	80016ee <HAL_GPIO_Init+0x212>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a17      	ldr	r2, [pc, #92]	; (8001740 <HAL_GPIO_Init+0x264>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d101      	bne.n	80016ea <HAL_GPIO_Init+0x20e>
 80016e6:	2309      	movs	r3, #9
 80016e8:	e02d      	b.n	8001746 <HAL_GPIO_Init+0x26a>
 80016ea:	230a      	movs	r3, #10
 80016ec:	e02b      	b.n	8001746 <HAL_GPIO_Init+0x26a>
 80016ee:	2308      	movs	r3, #8
 80016f0:	e029      	b.n	8001746 <HAL_GPIO_Init+0x26a>
 80016f2:	2307      	movs	r3, #7
 80016f4:	e027      	b.n	8001746 <HAL_GPIO_Init+0x26a>
 80016f6:	2306      	movs	r3, #6
 80016f8:	e025      	b.n	8001746 <HAL_GPIO_Init+0x26a>
 80016fa:	2305      	movs	r3, #5
 80016fc:	e023      	b.n	8001746 <HAL_GPIO_Init+0x26a>
 80016fe:	2304      	movs	r3, #4
 8001700:	e021      	b.n	8001746 <HAL_GPIO_Init+0x26a>
 8001702:	2303      	movs	r3, #3
 8001704:	e01f      	b.n	8001746 <HAL_GPIO_Init+0x26a>
 8001706:	2302      	movs	r3, #2
 8001708:	e01d      	b.n	8001746 <HAL_GPIO_Init+0x26a>
 800170a:	2301      	movs	r3, #1
 800170c:	e01b      	b.n	8001746 <HAL_GPIO_Init+0x26a>
 800170e:	bf00      	nop
 8001710:	58000080 	.word	0x58000080
 8001714:	58024400 	.word	0x58024400
 8001718:	58000400 	.word	0x58000400
 800171c:	58020000 	.word	0x58020000
 8001720:	58020400 	.word	0x58020400
 8001724:	58020800 	.word	0x58020800
 8001728:	58020c00 	.word	0x58020c00
 800172c:	58021000 	.word	0x58021000
 8001730:	58021400 	.word	0x58021400
 8001734:	58021800 	.word	0x58021800
 8001738:	58021c00 	.word	0x58021c00
 800173c:	58022000 	.word	0x58022000
 8001740:	58022400 	.word	0x58022400
 8001744:	2300      	movs	r3, #0
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	f002 0203 	and.w	r2, r2, #3
 800174c:	0092      	lsls	r2, r2, #2
 800174e:	4093      	lsls	r3, r2
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001756:	4938      	ldr	r1, [pc, #224]	; (8001838 <HAL_GPIO_Init+0x35c>)
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	3302      	adds	r3, #2
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800178a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80017b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	3301      	adds	r3, #1
 8001818:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	fa22 f303 	lsr.w	r3, r2, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	f47f ae63 	bne.w	80014f0 <HAL_GPIO_Init+0x14>
  }
}
 800182a:	bf00      	nop
 800182c:	bf00      	nop
 800182e:	3724      	adds	r7, #36	; 0x24
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	58000400 	.word	0x58000400

0800183c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	807b      	strh	r3, [r7, #2]
 8001848:	4613      	mov	r3, r2
 800184a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800184c:	787b      	ldrb	r3, [r7, #1]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001858:	e003      	b.n	8001862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800185a:	887b      	ldrh	r3, [r7, #2]
 800185c:	041a      	lsls	r2, r3, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	619a      	str	r2, [r3, #24]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800186e:	b480      	push	{r7}
 8001870:	b085      	sub	sp, #20
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	460b      	mov	r3, r1
 8001878:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001880:	887a      	ldrh	r2, [r7, #2]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4013      	ands	r3, r2
 8001886:	041a      	lsls	r2, r3, #16
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	43d9      	mvns	r1, r3
 800188c:	887b      	ldrh	r3, [r7, #2]
 800188e:	400b      	ands	r3, r1
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	619a      	str	r2, [r3, #24]
}
 8001896:	bf00      	nop
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e0bd      	b.n	8001a32 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2202      	movs	r2, #2
 80018ba:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d031      	beq.n	800195e <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a4f      	ldr	r2, [pc, #316]	; (8001a3c <HAL_HRTIM_Init+0x198>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d10e      	bne.n	8001922 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001904:	4b4e      	ldr	r3, [pc, #312]	; (8001a40 <HAL_HRTIM_Init+0x19c>)
 8001906:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800190a:	4a4d      	ldr	r2, [pc, #308]	; (8001a40 <HAL_HRTIM_Init+0x19c>)
 800190c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001910:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001914:	4b4a      	ldr	r3, [pc, #296]	; (8001a40 <HAL_HRTIM_Init+0x19c>)
 8001916:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800191a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001930:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001946:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff f9d4 	bl	8000d0c <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d012      	beq.n	8001996 <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800197e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80019a6:	2300      	movs	r3, #0
 80019a8:	75fb      	strb	r3, [r7, #23]
 80019aa:	e03e      	b.n	8001a2a <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80019ac:	7dfa      	ldrb	r2, [r7, #23]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	3318      	adds	r3, #24
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80019c0:	7dfa      	ldrb	r2, [r7, #23]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	331c      	adds	r3, #28
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80019d4:	7dfa      	ldrb	r2, [r7, #23]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	1a9b      	subs	r3, r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	3320      	adds	r3, #32
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80019e8:	7dfa      	ldrb	r2, [r7, #23]
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	1a9b      	subs	r3, r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	3324      	adds	r3, #36	; 0x24
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80019fc:	7dfa      	ldrb	r2, [r7, #23]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	3328      	adds	r3, #40	; 0x28
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8001a10:	7dfa      	ldrb	r2, [r7, #23]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	1a9b      	subs	r3, r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3330      	adds	r3, #48	; 0x30
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
 8001a26:	3301      	adds	r3, #1
 8001a28:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8001a2a:	7dfb      	ldrb	r3, [r7, #23]
 8001a2c:	2b05      	cmp	r3, #5
 8001a2e:	d9bd      	bls.n	80019ac <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40017400 	.word	0x40017400
 8001a40:	58024400 	.word	0x58024400

08001a44 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d101      	bne.n	8001a60 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e015      	b.n	8001a8c <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2202      	movs	r2, #2
 8001a64:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b05      	cmp	r3, #5
 8001a6c:	d104      	bne.n	8001a78 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 fb1f 	bl	80020b4 <HRTIM_MasterBase_Config>
 8001a76:	e004      	b.n	8001a82 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	68b9      	ldr	r1, [r7, #8]
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 fb48 	bl	8002112 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_HRTIM_SimpleBaseStart_IT>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_SimpleBaseStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_HRTIM_SimpleBaseStart_IT+0x18>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e037      	b.n	8001b1c <HAL_HRTIM_SimpleBaseStart_IT+0x88>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the repetition interrupt */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	2b05      	cmp	r3, #5
 8001ac0:	d108      	bne.n	8001ad4 <HAL_HRTIM_SimpleBaseStart_IT+0x40>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0210 	orr.w	r2, r2, #16
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	e00f      	b.n	8001af4 <HAL_HRTIM_SimpleBaseStart_IT+0x60>
  }
  else
  {
    __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	01db      	lsls	r3, r3, #7
 8001adc:	4413      	add	r3, r2
 8001ade:	338c      	adds	r3, #140	; 0x8c
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6811      	ldr	r1, [r2, #0]
 8001ae6:	f043 0210 	orr.w	r2, r3, #16
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	01db      	lsls	r3, r3, #7
 8001aee:	440b      	add	r3, r1
 8001af0:	338c      	adds	r3, #140	; 0x8c
 8001af2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the timer counter */
  __HAL_HRTIM_ENABLE(hhrtim, TimerIdxToTimerId[TimerIdx]);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6819      	ldr	r1, [r3, #0]
 8001afa:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <HAL_HRTIM_SimpleBaseStart_IT+0x94>)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	24000010 	.word	0x24000010

08001b2c <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d101      	bne.n	8001b48 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8001b44:	2302      	movs	r3, #2
 8001b46:	e05f      	b.n	8001c08 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e058      	b.n	8001c08 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2202      	movs	r2, #2
 8001b62:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b05      	cmp	r3, #5
 8001b6a:	d104      	bne.n	8001b76 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 fb0f 	bl	8002192 <HRTIM_MasterWaveform_Config>
 8001b74:	e004      	b.n	8001b80 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 fb70 	bl	8002260 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6819      	ldr	r1, [r3, #0]
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	1a9b      	subs	r3, r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4403      	add	r3, r0
 8001b92:	3320      	adds	r3, #32
 8001b94:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6859      	ldr	r1, [r3, #4]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	1a9b      	subs	r3, r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4403      	add	r3, r0
 8001ba8:	3324      	adds	r3, #36	; 0x24
 8001baa:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6899      	ldr	r1, [r3, #8]
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	1a9b      	subs	r3, r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4403      	add	r3, r0
 8001bbe:	3328      	adds	r3, #40	; 0x28
 8001bc0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68d9      	ldr	r1, [r3, #12]
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	1a9b      	subs	r3, r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4403      	add	r3, r0
 8001bd4:	332c      	adds	r3, #44	; 0x2c
 8001bd6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6919      	ldr	r1, [r3, #16]
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	4613      	mov	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4403      	add	r3, r0
 8001bea:	3330      	adds	r3, #48	; 0x30
 8001bec:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f000 fc75 	bl	80024e0 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d101      	bne.n	8001c2e <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e157      	b.n	8001ede <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e150      	b.n	8001ede <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b05      	cmp	r3, #5
 8001c50:	d140      	bne.n	8001cd4 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	2b07      	cmp	r3, #7
 8001c58:	d82a      	bhi.n	8001cb0 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8001c5a:	a201      	add	r2, pc, #4	; (adr r2, 8001c60 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8001c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c60:	08001c81 	.word	0x08001c81
 8001c64:	08001c8d 	.word	0x08001c8d
 8001c68:	08001cb1 	.word	0x08001cb1
 8001c6c:	08001c99 	.word	0x08001c99
 8001c70:	08001cb1 	.word	0x08001cb1
 8001c74:	08001cb1 	.word	0x08001cb1
 8001c78:	08001cb1 	.word	0x08001cb1
 8001c7c:	08001ca5 	.word	0x08001ca5
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	61da      	str	r2, [r3, #28]
        break;
 8001c8a:	e01a      	b.n	8001cc2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8001c96:	e014      	b.n	8001cc2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8001ca2:	e00e      	b.n	8001cc2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8001cae:	e008      	b.n	8001cc2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8001cc0:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b07      	cmp	r3, #7
 8001ccc:	f040 80fe 	bne.w	8001ecc <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e104      	b.n	8001ede <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	2b07      	cmp	r3, #7
 8001cda:	f200 80e3 	bhi.w	8001ea4 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8001cde:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8001ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce4:	08001d05 	.word	0x08001d05
 8001ce8:	08001d19 	.word	0x08001d19
 8001cec:	08001ea5 	.word	0x08001ea5
 8001cf0:	08001dd5 	.word	0x08001dd5
 8001cf4:	08001ea5 	.word	0x08001ea5
 8001cf8:	08001ea5 	.word	0x08001ea5
 8001cfc:	08001ea5 	.word	0x08001ea5
 8001d00:	08001de9 	.word	0x08001de9
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6819      	ldr	r1, [r3, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	01db      	lsls	r3, r3, #7
 8001d10:	440b      	add	r3, r1
 8001d12:	339c      	adds	r3, #156	; 0x9c
 8001d14:	601a      	str	r2, [r3, #0]
        break;
 8001d16:	e0d1      	b.n	8001ebc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6819      	ldr	r1, [r3, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	01db      	lsls	r3, r3, #7
 8001d24:	440b      	add	r3, r1
 8001d26:	33a4      	adds	r3, #164	; 0xa4
 8001d28:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d03f      	beq.n	8001db2 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	01db      	lsls	r3, r3, #7
 8001d3c:	4413      	add	r3, r2
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	6811      	ldr	r1, [r2, #0]
 8001d44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	01db      	lsls	r3, r3, #7
 8001d4e:	440b      	add	r3, r1
 8001d50:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	01db      	lsls	r3, r3, #7
 8001d5c:	4413      	add	r3, r2
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	68f9      	ldr	r1, [r7, #12]
 8001d66:	6809      	ldr	r1, [r1, #0]
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	01db      	lsls	r3, r3, #7
 8001d70:	440b      	add	r3, r1
 8001d72:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d7c:	d109      	bne.n	8001d92 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6819      	ldr	r1, [r3, #0]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	01db      	lsls	r3, r3, #7
 8001d8a:	440b      	add	r3, r1
 8001d8c:	339c      	adds	r3, #156	; 0x9c
 8001d8e:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8001d90:	e091      	b.n	8001eb6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001d9a:	f040 808c 	bne.w	8001eb6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6819      	ldr	r1, [r3, #0]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	01db      	lsls	r3, r3, #7
 8001daa:	440b      	add	r3, r1
 8001dac:	33a8      	adds	r3, #168	; 0xa8
 8001dae:	601a      	str	r2, [r3, #0]
         break;
 8001db0:	e081      	b.n	8001eb6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	3301      	adds	r3, #1
 8001dba:	01db      	lsls	r3, r3, #7
 8001dbc:	4413      	add	r3, r2
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	6811      	ldr	r1, [r2, #0]
 8001dc4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	01db      	lsls	r3, r3, #7
 8001dce:	440b      	add	r3, r1
 8001dd0:	601a      	str	r2, [r3, #0]
         break;
 8001dd2:	e070      	b.n	8001eb6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6819      	ldr	r1, [r3, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	01db      	lsls	r3, r3, #7
 8001de0:	440b      	add	r3, r1
 8001de2:	33a8      	adds	r3, #168	; 0xa8
 8001de4:	601a      	str	r2, [r3, #0]
        break;
 8001de6:	e069      	b.n	8001ebc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6819      	ldr	r1, [r3, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	01db      	lsls	r3, r3, #7
 8001df4:	440b      	add	r3, r1
 8001df6:	33ac      	adds	r3, #172	; 0xac
 8001df8:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d03f      	beq.n	8001e82 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	01db      	lsls	r3, r3, #7
 8001e0c:	4413      	add	r3, r2
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	6811      	ldr	r1, [r2, #0]
 8001e14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	01db      	lsls	r3, r3, #7
 8001e1e:	440b      	add	r3, r1
 8001e20:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	01db      	lsls	r3, r3, #7
 8001e2c:	4413      	add	r3, r2
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	68f9      	ldr	r1, [r7, #12]
 8001e38:	6809      	ldr	r1, [r1, #0]
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	01db      	lsls	r3, r3, #7
 8001e42:	440b      	add	r3, r1
 8001e44:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e4e:	d109      	bne.n	8001e64 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6819      	ldr	r1, [r3, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	01db      	lsls	r3, r3, #7
 8001e5c:	440b      	add	r3, r1
 8001e5e:	339c      	adds	r3, #156	; 0x9c
 8001e60:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8001e62:	e02a      	b.n	8001eba <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001e6c:	d125      	bne.n	8001eba <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6819      	ldr	r1, [r3, #0]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	01db      	lsls	r3, r3, #7
 8001e7a:	440b      	add	r3, r1
 8001e7c:	33a8      	adds	r3, #168	; 0xa8
 8001e7e:	601a      	str	r2, [r3, #0]
         break;
 8001e80:	e01b      	b.n	8001eba <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	01db      	lsls	r3, r3, #7
 8001e8c:	4413      	add	r3, r2
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	6811      	ldr	r1, [r2, #0]
 8001e94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	01db      	lsls	r3, r3, #7
 8001e9e:	440b      	add	r3, r1
 8001ea0:	601a      	str	r2, [r3, #0]
         break;
 8001ea2:	e00a      	b.n	8001eba <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2207      	movs	r2, #7
 8001ea8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8001eb4:	e002      	b.n	8001ebc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8001eb6:	bf00      	nop
 8001eb8:	e000      	b.n	8001ebc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8001eba:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b07      	cmp	r3, #7
 8001ec6:	d101      	bne.n	8001ecc <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e008      	b.n	8001ede <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop

08001eec <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2bff      	cmp	r3, #255	; 0xff
 8001efa:	d103      	bne.n	8001f04 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 fb51 	bl	80025a4 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8001f02:	e00a      	b.n	8001f1a <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2b05      	cmp	r3, #5
 8001f08:	d103      	bne.n	8001f12 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fbc8 	bl	80026a0 <HRTIM_Master_ISR>
}
 8001f10:	e003      	b.n	8001f1a <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8001f12:	6839      	ldr	r1, [r7, #0]
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 fc6d 	bl	80027f4 <HRTIM_Timer_ISR>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f023 0307 	bic.w	r3, r3, #7
 80020cc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f023 0318 	bic.w	r3, r3, #24
 80020de:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	6852      	ldr	r2, [r2, #4]
 8002104:	619a      	str	r2, [r3, #24]
}
 8002106:	bf00      	nop
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002112:	b480      	push	{r7}
 8002114:	b087      	sub	sp, #28
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	3301      	adds	r3, #1
 8002126:	01db      	lsls	r3, r3, #7
 8002128:	4413      	add	r3, r2
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f023 0307 	bic.w	r3, r3, #7
 8002134:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f023 0318 	bic.w	r3, r3, #24
 8002146:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	4313      	orrs	r3, r2
 8002150:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	3301      	adds	r3, #1
 800215a:	01db      	lsls	r3, r3, #7
 800215c:	4413      	add	r3, r2
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6819      	ldr	r1, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	01db      	lsls	r3, r3, #7
 800216e:	440b      	add	r3, r1
 8002170:	3394      	adds	r3, #148	; 0x94
 8002172:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6819      	ldr	r1, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	01db      	lsls	r3, r3, #7
 8002180:	440b      	add	r3, r1
 8002182:	3398      	adds	r3, #152	; 0x98
 8002184:	601a      	str	r2, [r3, #0]
}
 8002186:	bf00      	nop
 8002188:	371c      	adds	r7, #28
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8002192:	b480      	push	{r7}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80021ac:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f023 0320 	bic.w	r3, r3, #32
 80021b4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021c6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021d8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80021ea:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80021fc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800220e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002222:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002234:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	4313      	orrs	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8002260:	b480      	push	{r7}
 8002262:	b08b      	sub	sp, #44	; 0x2c
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	3301      	adds	r3, #1
 8002274:	01db      	lsls	r3, r3, #7
 8002276:	4413      	add	r3, r2
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	6811      	ldr	r1, [r2, #0]
 800227e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3301      	adds	r3, #1
 8002286:	01db      	lsls	r3, r3, #7
 8002288:	440b      	add	r3, r1
 800228a:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	3301      	adds	r3, #1
 8002294:	01db      	lsls	r3, r3, #7
 8002296:	4413      	add	r3, r2
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	01db      	lsls	r3, r3, #7
 80022a4:	4413      	add	r3, r2
 80022a6:	33e8      	adds	r3, #232	; 0xe8
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	01db      	lsls	r3, r3, #7
 80022b4:	4413      	add	r3, r2
 80022b6:	33e4      	adds	r3, #228	; 0xe4
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80022c4:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	f023 0320 	bic.w	r3, r3, #32
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d4:	4313      	orrs	r3, r2
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e6:	4313      	orrs	r3, r2
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f8:	4313      	orrs	r3, r2
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800230a:	4313      	orrs	r3, r2
 800230c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231c:	4313      	orrs	r3, r2
 800231e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232e:	4313      	orrs	r3, r2
 8002330:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002342:	d103      	bne.n	800234c <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235a:	4313      	orrs	r3, r2
 800235c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800236a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236c:	4313      	orrs	r3, r2
 800236e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800237e:	4313      	orrs	r3, r2
 8002380:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	f023 031f 	bic.w	r3, r3, #31
 8002388:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800239e:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d108      	bne.n	80023c4 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023b8:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	6a3a      	ldr	r2, [r7, #32]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c8:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80023cc:	d004      	beq.n	80023d8 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80023d6:	d103      	bne.n	80023e0 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023dc:	2b40      	cmp	r3, #64	; 0x40
 80023de:	d108      	bne.n	80023f2 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 80023e6:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ec:	6a3a      	ldr	r2, [r7, #32]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f6:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d843      	bhi.n	8002486 <HRTIM_TimingUnitWaveform_Config+0x226>
 80023fe:	a201      	add	r2, pc, #4	; (adr r2, 8002404 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8002400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002404:	08002419 	.word	0x08002419
 8002408:	0800242f 	.word	0x0800242f
 800240c:	08002445 	.word	0x08002445
 8002410:	0800245b 	.word	0x0800245b
 8002414:	08002471 	.word	0x08002471
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800241e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	4313      	orrs	r3, r2
 800242a:	61fb      	str	r3, [r7, #28]
      break;
 800242c:	e02c      	b.n	8002488 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002434:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	4313      	orrs	r3, r2
 8002440:	61fb      	str	r3, [r7, #28]
      break;
 8002442:	e021      	b.n	8002488 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800244a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	4313      	orrs	r3, r2
 8002456:	61fb      	str	r3, [r7, #28]
      break;
 8002458:	e016      	b.n	8002488 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002460:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	4313      	orrs	r3, r2
 800246c:	61fb      	str	r3, [r7, #28]
      break;
 800246e:	e00b      	b.n	8002488 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002476:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	015b      	lsls	r3, r3, #5
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	4313      	orrs	r3, r2
 8002482:	61fb      	str	r3, [r7, #28]
      break;
 8002484:	e000      	b.n	8002488 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8002486:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	3301      	adds	r3, #1
 8002490:	01db      	lsls	r3, r3, #7
 8002492:	4413      	add	r3, r2
 8002494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002496:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	01db      	lsls	r3, r3, #7
 80024a0:	4413      	add	r3, r2
 80024a2:	33e8      	adds	r3, #232	; 0xe8
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	01db      	lsls	r3, r3, #7
 80024b0:	4413      	add	r3, r2
 80024b2:	33e4      	adds	r3, #228	; 0xe4
 80024b4:	6a3a      	ldr	r2, [r7, #32]
 80024b6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	01db      	lsls	r3, r3, #7
 80024c0:	4413      	add	r3, r2
 80024c2:	33d4      	adds	r3, #212	; 0xd4
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	69fa      	ldr	r2, [r7, #28]
 80024ce:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80024d2:	bf00      	nop
 80024d4:	372c      	adds	r7, #44	; 0x2c
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop

080024e0 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b05      	cmp	r3, #5
 80024ee:	d851      	bhi.n	8002594 <HRTIM_ForceRegistersUpdate+0xb4>
 80024f0:	a201      	add	r2, pc, #4	; (adr r2, 80024f8 <HRTIM_ForceRegistersUpdate+0x18>)
 80024f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f6:	bf00      	nop
 80024f8:	08002527 	.word	0x08002527
 80024fc:	0800253d 	.word	0x0800253d
 8002500:	08002553 	.word	0x08002553
 8002504:	08002569 	.word	0x08002569
 8002508:	0800257f 	.word	0x0800257f
 800250c:	08002511 	.word	0x08002511
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 0201 	orr.w	r2, r2, #1
 8002520:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8002524:	e037      	b.n	8002596 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0202 	orr.w	r2, r2, #2
 8002536:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800253a:	e02c      	b.n	8002596 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 0204 	orr.w	r2, r2, #4
 800254c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8002550:	e021      	b.n	8002596 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0208 	orr.w	r2, r2, #8
 8002562:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8002566:	e016      	b.n	8002596 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0210 	orr.w	r2, r2, #16
 8002578:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800257c:	e00b      	b.n	8002596 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0220 	orr.w	r2, r2, #32
 800258e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8002592:	e000      	b.n	8002596 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8002594:	bf00      	nop
  }
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop

080025a4 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80025b4:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80025be:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00c      	beq.n	80025e4 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d007      	beq.n	80025e4 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2201      	movs	r2, #1
 80025da:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7ff fc9f 	bl	8001f22 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00c      	beq.n	8002608 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d007      	beq.n	8002608 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2202      	movs	r2, #2
 80025fe:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff fc97 	bl	8001f36 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00c      	beq.n	800262c <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d007      	beq.n	800262c <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2204      	movs	r2, #4
 8002622:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff fc8f 	bl	8001f4a <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00c      	beq.n	8002650 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d007      	beq.n	8002650 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2208      	movs	r2, #8
 8002646:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff fc87 	bl	8001f5e <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00c      	beq.n	8002674 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	2b00      	cmp	r3, #0
 8002662:	d007      	beq.n	8002674 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2210      	movs	r2, #16
 800266a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff fc7f 	bl	8001f72 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00c      	beq.n	8002698 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	2b00      	cmp	r3, #0
 8002686:	d007      	beq.n	8002698 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2220      	movs	r2, #32
 800268e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff fc77 	bl	8001f86 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80026b0:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80026ba:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00d      	beq.n	80026f2 <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026e8:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff fc54 	bl	8001f9a <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00c      	beq.n	8002716 <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d007      	beq.n	8002716 <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2201      	movs	r2, #1
 800270c:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800270e:	2105      	movs	r1, #5
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7fd feeb 	bl	80004ec <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00c      	beq.n	800273a <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2202      	movs	r2, #2
 8002730:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8002732:	2105      	movs	r1, #5
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7fd ff0b 	bl	8000550 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00c      	beq.n	800275e <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2204      	movs	r2, #4
 8002754:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8002756:	2105      	movs	r1, #5
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff fc3d 	bl	8001fd8 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00c      	beq.n	8002782 <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d007      	beq.n	8002782 <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2208      	movs	r2, #8
 8002778:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800277a:	2105      	movs	r1, #5
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff fc36 	bl	8001fee <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00c      	beq.n	80027a6 <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f003 0310 	and.w	r3, r3, #16
 8002792:	2b00      	cmp	r3, #0
 8002794:	d007      	beq.n	80027a6 <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2210      	movs	r2, #16
 800279c:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800279e:	2105      	movs	r1, #5
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7fd ff07 	bl	80005b4 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f003 0320 	and.w	r3, r3, #32
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00b      	beq.n	80027c8 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f003 0320 	and.w	r3, r3, #32
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d006      	beq.n	80027c8 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2220      	movs	r2, #32
 80027c0:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff fbf3 	bl	8001fae <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00c      	beq.n	80027ec <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d007      	beq.n	80027ec <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2240      	movs	r2, #64	; 0x40
 80027e2:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80027e4:	2105      	movs	r1, #5
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff fbeb 	bl	8001fc2 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80027ec:	bf00      	nop
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	3301      	adds	r3, #1
 8002806:	01db      	lsls	r3, r3, #7
 8002808:	4413      	add	r3, r2
 800280a:	3304      	adds	r3, #4
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	01db      	lsls	r3, r3, #7
 8002818:	4413      	add	r3, r2
 800281a:	338c      	adds	r3, #140	; 0x8c
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d010      	beq.n	800284c <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00b      	beq.n	800284c <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	01db      	lsls	r3, r3, #7
 800283c:	4413      	add	r3, r2
 800283e:	3388      	adds	r3, #136	; 0x88
 8002840:	2201      	movs	r2, #1
 8002842:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8002844:	6839      	ldr	r1, [r7, #0]
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7fd fe50 	bl	80004ec <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d010      	beq.n	8002878 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00b      	beq.n	8002878 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	01db      	lsls	r3, r3, #7
 8002868:	4413      	add	r3, r2
 800286a:	3388      	adds	r3, #136	; 0x88
 800286c:	2202      	movs	r2, #2
 800286e:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8002870:	6839      	ldr	r1, [r7, #0]
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7fd fe6c 	bl	8000550 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	d010      	beq.n	80028a4 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00b      	beq.n	80028a4 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	01db      	lsls	r3, r3, #7
 8002894:	4413      	add	r3, r2
 8002896:	3388      	adds	r3, #136	; 0x88
 8002898:	2204      	movs	r2, #4
 800289a:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 800289c:	6839      	ldr	r1, [r7, #0]
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff fb9a 	bl	8001fd8 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d010      	beq.n	80028d0 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00b      	beq.n	80028d0 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	01db      	lsls	r3, r3, #7
 80028c0:	4413      	add	r3, r2
 80028c2:	3388      	adds	r3, #136	; 0x88
 80028c4:	2208      	movs	r2, #8
 80028c6:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 80028c8:	6839      	ldr	r1, [r7, #0]
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff fb8f 	bl	8001fee <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d010      	beq.n	80028fc <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00b      	beq.n	80028fc <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	01db      	lsls	r3, r3, #7
 80028ec:	4413      	add	r3, r2
 80028ee:	3388      	adds	r3, #136	; 0x88
 80028f0:	2210      	movs	r2, #16
 80028f2:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 80028f4:	6839      	ldr	r1, [r7, #0]
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fd fe5c 	bl	80005b4 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002902:	2b00      	cmp	r3, #0
 8002904:	d010      	beq.n	8002928 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00b      	beq.n	8002928 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	01db      	lsls	r3, r3, #7
 8002918:	4413      	add	r3, r2
 800291a:	3388      	adds	r3, #136	; 0x88
 800291c:	2240      	movs	r2, #64	; 0x40
 800291e:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8002920:	6839      	ldr	r1, [r7, #0]
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff fb4d 	bl	8001fc2 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292e:	2b00      	cmp	r3, #0
 8002930:	d010      	beq.n	8002954 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00b      	beq.n	8002954 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	01db      	lsls	r3, r3, #7
 8002944:	4413      	add	r3, r2
 8002946:	3388      	adds	r3, #136	; 0x88
 8002948:	2280      	movs	r2, #128	; 0x80
 800294a:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 800294c:	6839      	ldr	r1, [r7, #0]
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff fb58 	bl	8002004 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295a:	2b00      	cmp	r3, #0
 800295c:	d011      	beq.n	8002982 <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00c      	beq.n	8002982 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	01db      	lsls	r3, r3, #7
 8002970:	4413      	add	r3, r2
 8002972:	3388      	adds	r3, #136	; 0x88
 8002974:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002978:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 800297a:	6839      	ldr	r1, [r7, #0]
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff fb4c 	bl	800201a <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002988:	2b00      	cmp	r3, #0
 800298a:	d011      	beq.n	80029b0 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00c      	beq.n	80029b0 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	01db      	lsls	r3, r3, #7
 800299e:	4413      	add	r3, r2
 80029a0:	3388      	adds	r3, #136	; 0x88
 80029a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029a6:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 80029a8:	6839      	ldr	r1, [r7, #0]
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff fb56 	bl	800205c <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d011      	beq.n	80029de <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00c      	beq.n	80029de <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	01db      	lsls	r3, r3, #7
 80029cc:	4413      	add	r3, r2
 80029ce:	3388      	adds	r3, #136	; 0x88
 80029d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029d4:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 80029d6:	6839      	ldr	r1, [r7, #0]
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff fb4a 	bl	8002072 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d011      	beq.n	8002a0c <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00c      	beq.n	8002a0c <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	01db      	lsls	r3, r3, #7
 80029fa:	4413      	add	r3, r2
 80029fc:	3388      	adds	r3, #136	; 0x88
 80029fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a02:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8002a04:	6839      	ldr	r1, [r7, #0]
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff fb3e 	bl	8002088 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d011      	beq.n	8002a3a <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00c      	beq.n	8002a3a <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	01db      	lsls	r3, r3, #7
 8002a28:	4413      	add	r3, r2
 8002a2a:	3388      	adds	r3, #136	; 0x88
 8002a2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a30:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8002a32:	6839      	ldr	r1, [r7, #0]
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff fb32 	bl	800209e <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d011      	beq.n	8002a68 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00c      	beq.n	8002a68 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	01db      	lsls	r3, r3, #7
 8002a56:	4413      	add	r3, r2
 8002a58:	3388      	adds	r3, #136	; 0x88
 8002a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a5e:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8002a60:	6839      	ldr	r1, [r7, #0]
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff faef 	bl	8002046 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d011      	beq.n	8002a96 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00c      	beq.n	8002a96 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	01db      	lsls	r3, r3, #7
 8002a84:	4413      	add	r3, r2
 8002a86:	3388      	adds	r3, #136	; 0x88
 8002a88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a8c:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8002a8e:	6839      	ldr	r1, [r7, #0]
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff facd 	bl	8002030 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa8:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8002aaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002aae:	4a0c      	ldr	r2, [pc, #48]	; (8002ae0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8002ab0:	f043 0302 	orr.w	r3, r3, #2
 8002ab4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ab8:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8002aba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8002ac6:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	4906      	ldr	r1, [pc, #24]	; (8002ae4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]
}
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	58024400 	.word	0x58024400
 8002ae4:	58000400 	.word	0x58000400

08002ae8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aea:	b08f      	sub	sp, #60	; 0x3c
 8002aec:	af0a      	add	r7, sp, #40	; 0x28
 8002aee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e116      	b.n	8002d28 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d106      	bne.n	8002b1a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f007 fc21 	bl	800a35c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d102      	bne.n	8002b34 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f003 ff22 	bl	8006982 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	687e      	ldr	r6, [r7, #4]
 8002b46:	466d      	mov	r5, sp
 8002b48:	f106 0410 	add.w	r4, r6, #16
 8002b4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b58:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b5c:	1d33      	adds	r3, r6, #4
 8002b5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b60:	6838      	ldr	r0, [r7, #0]
 8002b62:	f003 fded 	bl	8006740 <USB_CoreInit>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0d7      	b.n	8002d28 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f003 ff10 	bl	80069a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]
 8002b88:	e04a      	b.n	8002c20 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	333d      	adds	r3, #61	; 0x3d
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	333c      	adds	r3, #60	; 0x3c
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bb2:	7bfa      	ldrb	r2, [r7, #15]
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	b298      	uxth	r0, r3
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	3356      	adds	r3, #86	; 0x56
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	3340      	adds	r3, #64	; 0x40
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	3344      	adds	r3, #68	; 0x44
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bf2:	7bfa      	ldrb	r2, [r7, #15]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	3348      	adds	r3, #72	; 0x48
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c06:	7bfa      	ldrb	r2, [r7, #15]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	334c      	adds	r3, #76	; 0x4c
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
 8002c20:	7bfa      	ldrb	r2, [r7, #15]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d3af      	bcc.n	8002b8a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	73fb      	strb	r3, [r7, #15]
 8002c2e:	e044      	b.n	8002cba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c5c:	7bfa      	ldrb	r2, [r7, #15]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c88:	7bfa      	ldrb	r2, [r7, #15]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d3b5      	bcc.n	8002c30 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	603b      	str	r3, [r7, #0]
 8002cca:	687e      	ldr	r6, [r7, #4]
 8002ccc:	466d      	mov	r5, sp
 8002cce:	f106 0410 	add.w	r4, r6, #16
 8002cd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cde:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ce2:	1d33      	adds	r3, r6, #4
 8002ce4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ce6:	6838      	ldr	r0, [r7, #0]
 8002ce8:	f003 fea8 	bl	8006a3c <USB_DevInit>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d005      	beq.n	8002cfe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e014      	b.n	8002d28 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d102      	bne.n	8002d1c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f001 f970 	bl	8003ffc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f004 feea 	bl	8007afa <USB_DevDisconnect>

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d30 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_PCD_Start+0x1c>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e022      	b.n	8002d92 <HAL_PCD_Start+0x62>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d109      	bne.n	8002d74 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d105      	bne.n	8002d74 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f003 fdf1 	bl	8006960 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f004 fe98 	bl	8007ab8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d9a:	b590      	push	{r4, r7, lr}
 8002d9c:	b08d      	sub	sp, #52	; 0x34
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f004 ff56 	bl	8007c62 <USB_GetMode>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 84b7 	bne.w	800372c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f004 feba 	bl	8007b3c <USB_ReadInterrupts>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 84ad 	beq.w	800372a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	0a1b      	lsrs	r3, r3, #8
 8002dda:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f004 fea7 	bl	8007b3c <USB_ReadInterrupts>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d107      	bne.n	8002e08 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f002 0202 	and.w	r2, r2, #2
 8002e06:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f004 fe95 	bl	8007b3c <USB_ReadInterrupts>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	2b10      	cmp	r3, #16
 8002e1a:	d161      	bne.n	8002ee0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0210 	bic.w	r2, r2, #16
 8002e2a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	f003 020f 	and.w	r2, r3, #15
 8002e38:	4613      	mov	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	4413      	add	r3, r2
 8002e48:	3304      	adds	r3, #4
 8002e4a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	0c5b      	lsrs	r3, r3, #17
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d124      	bne.n	8002ea2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d035      	beq.n	8002ed0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	091b      	lsrs	r3, r3, #4
 8002e6c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	461a      	mov	r2, r3
 8002e76:	6a38      	ldr	r0, [r7, #32]
 8002e78:	f004 fccc 	bl	8007814 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	091b      	lsrs	r3, r3, #4
 8002e84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e88:	441a      	add	r2, r3
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	695a      	ldr	r2, [r3, #20]
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e9a:	441a      	add	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	615a      	str	r2, [r3, #20]
 8002ea0:	e016      	b.n	8002ed0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	0c5b      	lsrs	r3, r3, #17
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	2b06      	cmp	r3, #6
 8002eac:	d110      	bne.n	8002ed0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002eb4:	2208      	movs	r2, #8
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	6a38      	ldr	r0, [r7, #32]
 8002eba:	f004 fcab 	bl	8007814 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eca:	441a      	add	r2, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0210 	orr.w	r2, r2, #16
 8002ede:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f004 fe29 	bl	8007b3c <USB_ReadInterrupts>
 8002eea:	4603      	mov	r3, r0
 8002eec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ef0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ef4:	f040 80a7 	bne.w	8003046 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f004 fe2e 	bl	8007b62 <USB_ReadDevAllOutEpInterrupt>
 8002f06:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f08:	e099      	b.n	800303e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 808e 	beq.w	8003032 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f004 fe52 	bl	8007bca <USB_ReadDevOutEPInterrupt>
 8002f26:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00c      	beq.n	8002f4c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f3e:	461a      	mov	r2, r3
 8002f40:	2301      	movs	r3, #1
 8002f42:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fed2 	bl	8003cf0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00c      	beq.n	8002f70 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f62:	461a      	mov	r2, r3
 8002f64:	2308      	movs	r3, #8
 8002f66:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 ffa8 	bl	8003ec0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d008      	beq.n	8002f8c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f86:	461a      	mov	r2, r3
 8002f88:	2310      	movs	r3, #16
 8002f8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d030      	beq.n	8002ff8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9e:	2b80      	cmp	r3, #128	; 0x80
 8002fa0:	d109      	bne.n	8002fb6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fb4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3304      	adds	r3, #4
 8002fca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	78db      	ldrb	r3, [r3, #3]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d108      	bne.n	8002fe6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	4619      	mov	r1, r3
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f007 faf1 	bl	800a5c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d008      	beq.n	8003014 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	4413      	add	r3, r2
 800300a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800300e:	461a      	mov	r2, r3
 8003010:	2320      	movs	r3, #32
 8003012:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	4413      	add	r3, r2
 8003026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800302a:	461a      	mov	r2, r3
 800302c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003030:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	3301      	adds	r3, #1
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303a:	085b      	lsrs	r3, r3, #1
 800303c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800303e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003040:	2b00      	cmp	r3, #0
 8003042:	f47f af62 	bne.w	8002f0a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f004 fd76 	bl	8007b3c <USB_ReadInterrupts>
 8003050:	4603      	mov	r3, r0
 8003052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003056:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800305a:	f040 80db 	bne.w	8003214 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f004 fd97 	bl	8007b96 <USB_ReadDevAllInEpInterrupt>
 8003068:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800306e:	e0cd      	b.n	800320c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 80c2 	beq.w	8003200 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f004 fdbd 	bl	8007c06 <USB_ReadDevInEPInterrupt>
 800308c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d057      	beq.n	8003148 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	2201      	movs	r2, #1
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69f9      	ldr	r1, [r7, #28]
 80030b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030b8:	4013      	ands	r3, r2
 80030ba:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c8:	461a      	mov	r2, r3
 80030ca:	2301      	movs	r3, #1
 80030cc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d132      	bne.n	800313c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030da:	4613      	mov	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	3348      	adds	r3, #72	; 0x48
 80030e6:	6819      	ldr	r1, [r3, #0]
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4403      	add	r3, r0
 80030f6:	3344      	adds	r3, #68	; 0x44
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4419      	add	r1, r3
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4403      	add	r3, r0
 800310a:	3348      	adds	r3, #72	; 0x48
 800310c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	2b00      	cmp	r3, #0
 8003112:	d113      	bne.n	800313c <HAL_PCD_IRQHandler+0x3a2>
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003118:	4613      	mov	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	334c      	adds	r3, #76	; 0x4c
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d108      	bne.n	800313c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003134:	461a      	mov	r2, r3
 8003136:	2101      	movs	r1, #1
 8003138:	f004 fdc6 	bl	8007cc8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	b2db      	uxtb	r3, r3
 8003140:	4619      	mov	r1, r3
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f007 f9bb 	bl	800a4be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d008      	beq.n	8003164 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	015a      	lsls	r2, r3, #5
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	4413      	add	r3, r2
 800315a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315e:	461a      	mov	r2, r3
 8003160:	2308      	movs	r3, #8
 8003162:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800317a:	461a      	mov	r2, r3
 800317c:	2310      	movs	r3, #16
 800317e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d008      	beq.n	800319c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	4413      	add	r3, r2
 8003192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003196:	461a      	mov	r2, r3
 8003198:	2340      	movs	r3, #64	; 0x40
 800319a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d023      	beq.n	80031ee <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031a8:	6a38      	ldr	r0, [r7, #32]
 80031aa:	f003 fda5 	bl	8006cf8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b0:	4613      	mov	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	3338      	adds	r3, #56	; 0x38
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	3304      	adds	r3, #4
 80031c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	78db      	ldrb	r3, [r3, #3]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d108      	bne.n	80031dc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2200      	movs	r2, #0
 80031ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	4619      	mov	r1, r3
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f007 fa08 	bl	800a5ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e8:	461a      	mov	r2, r3
 80031ea:	2302      	movs	r3, #2
 80031ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80031f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fcea 	bl	8003bd4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	3301      	adds	r3, #1
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003208:	085b      	lsrs	r3, r3, #1
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800320c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320e:	2b00      	cmp	r3, #0
 8003210:	f47f af2e 	bne.w	8003070 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f004 fc8f 	bl	8007b3c <USB_ReadInterrupts>
 800321e:	4603      	mov	r3, r0
 8003220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003228:	d122      	bne.n	8003270 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	69fa      	ldr	r2, [r7, #28]
 8003234:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003238:	f023 0301 	bic.w	r3, r3, #1
 800323c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003244:	2b01      	cmp	r3, #1
 8003246:	d108      	bne.n	800325a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003250:	2100      	movs	r1, #0
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fef6 	bl	8004044 <HAL_PCDEx_LPM_Callback>
 8003258:	e002      	b.n	8003260 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f007 f9a6 	bl	800a5ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695a      	ldr	r2, [r3, #20]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800326e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f004 fc61 	bl	8007b3c <USB_ReadInterrupts>
 800327a:	4603      	mov	r3, r0
 800327c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003280:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003284:	d112      	bne.n	80032ac <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b01      	cmp	r3, #1
 8003294:	d102      	bne.n	800329c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f007 f962 	bl	800a560 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80032aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f004 fc43 	bl	8007b3c <USB_ReadInterrupts>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032c0:	d121      	bne.n	8003306 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695a      	ldr	r2, [r3, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80032d0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d111      	bne.n	8003300 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ea:	089b      	lsrs	r3, r3, #2
 80032ec:	f003 020f 	and.w	r2, r3, #15
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80032f6:	2101      	movs	r1, #1
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 fea3 	bl	8004044 <HAL_PCDEx_LPM_Callback>
 80032fe:	e002      	b.n	8003306 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f007 f92d 	bl	800a560 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f004 fc16 	bl	8007b3c <USB_ReadInterrupts>
 8003310:	4603      	mov	r3, r0
 8003312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331a:	f040 80b7 	bne.w	800348c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2110      	movs	r1, #16
 8003338:	4618      	mov	r0, r3
 800333a:	f003 fcdd 	bl	8006cf8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333e:	2300      	movs	r3, #0
 8003340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003342:	e046      	b.n	80033d2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	4413      	add	r3, r2
 800334c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003350:	461a      	mov	r2, r3
 8003352:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003356:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	4413      	add	r3, r2
 8003360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003368:	0151      	lsls	r1, r2, #5
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	440a      	add	r2, r1
 800336e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003372:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003376:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	4413      	add	r3, r2
 8003380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003384:	461a      	mov	r2, r3
 8003386:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800338a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	4413      	add	r3, r2
 8003394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800339c:	0151      	lsls	r1, r2, #5
 800339e:	69fa      	ldr	r2, [r7, #28]
 80033a0:	440a      	add	r2, r1
 80033a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033bc:	0151      	lsls	r1, r2, #5
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	440a      	add	r2, r1
 80033c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033ca:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ce:	3301      	adds	r3, #1
 80033d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033d8:	429a      	cmp	r2, r3
 80033da:	d3b3      	bcc.n	8003344 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d016      	beq.n	8003426 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003408:	f043 030b 	orr.w	r3, r3, #11
 800340c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800341e:	f043 030b 	orr.w	r3, r3, #11
 8003422:	6453      	str	r3, [r2, #68]	; 0x44
 8003424:	e015      	b.n	8003452 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003434:	4619      	mov	r1, r3
 8003436:	f242 032b 	movw	r3, #8235	; 0x202b
 800343a:	4313      	orrs	r3, r2
 800343c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800344c:	f043 030b 	orr.w	r3, r3, #11
 8003450:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003460:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003464:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003476:	461a      	mov	r2, r3
 8003478:	f004 fc26 	bl	8007cc8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800348a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f004 fb53 	bl	8007b3c <USB_ReadInterrupts>
 8003496:	4603      	mov	r3, r0
 8003498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800349c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a0:	d124      	bne.n	80034ec <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f004 fbea 	bl	8007c80 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f003 fc9e 	bl	8006df2 <USB_GetDevSpeed>
 80034b6:	4603      	mov	r3, r0
 80034b8:	461a      	mov	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681c      	ldr	r4, [r3, #0]
 80034c2:	f001 fd9f 	bl	8005004 <HAL_RCC_GetHCLKFreq>
 80034c6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	461a      	mov	r2, r3
 80034d0:	4620      	mov	r0, r4
 80034d2:	f003 f9a3 	bl	800681c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f007 f819 	bl	800a50e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80034ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f004 fb23 	bl	8007b3c <USB_ReadInterrupts>
 80034f6:	4603      	mov	r3, r0
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d10a      	bne.n	8003516 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f006 fff6 	bl	800a4f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	695a      	ldr	r2, [r3, #20]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f002 0208 	and.w	r2, r2, #8
 8003514:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f004 fb0e 	bl	8007b3c <USB_ReadInterrupts>
 8003520:	4603      	mov	r3, r0
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	2b80      	cmp	r3, #128	; 0x80
 8003528:	d122      	bne.n	8003570 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003536:	2301      	movs	r3, #1
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
 800353a:	e014      	b.n	8003566 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d105      	bne.n	8003560 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	b2db      	uxtb	r3, r3
 8003558:	4619      	mov	r1, r3
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fb09 	bl	8003b72 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	3301      	adds	r3, #1
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356c:	429a      	cmp	r2, r3
 800356e:	d3e5      	bcc.n	800353c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f004 fae1 	bl	8007b3c <USB_ReadInterrupts>
 800357a:	4603      	mov	r3, r0
 800357c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003584:	d13b      	bne.n	80035fe <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003586:	2301      	movs	r3, #1
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
 800358a:	e02b      	b.n	80035e4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	4413      	add	r3, r2
 8003594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	3340      	adds	r3, #64	; 0x40
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d115      	bne.n	80035de <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80035b2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	da12      	bge.n	80035de <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	333f      	adds	r3, #63	; 0x3f
 80035c8:	2201      	movs	r2, #1
 80035ca:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	4619      	mov	r1, r3
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 faca 	bl	8003b72 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	3301      	adds	r3, #1
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d3ce      	bcc.n	800358c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80035fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f004 fa9a 	bl	8007b3c <USB_ReadInterrupts>
 8003608:	4603      	mov	r3, r0
 800360a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800360e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003612:	d155      	bne.n	80036c0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003614:	2301      	movs	r3, #1
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
 8003618:	e045      	b.n	80036a6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	4413      	add	r3, r2
 8003622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362e:	4613      	mov	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d12e      	bne.n	80036a0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003642:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003644:	2b00      	cmp	r3, #0
 8003646:	da2b      	bge.n	80036a0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003654:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003658:	429a      	cmp	r2, r3
 800365a:	d121      	bne.n	80036a0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003660:	4613      	mov	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800366e:	2201      	movs	r2, #1
 8003670:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10a      	bne.n	80036a0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003698:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800369c:	6053      	str	r3, [r2, #4]
            break;
 800369e:	e007      	b.n	80036b0 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	3301      	adds	r3, #1
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d3b4      	bcc.n	800361a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695a      	ldr	r2, [r3, #20]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80036be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f004 fa39 	bl	8007b3c <USB_ReadInterrupts>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d4:	d10a      	bne.n	80036ec <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f006 ff9a 	bl	800a610 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80036ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f004 fa23 	bl	8007b3c <USB_ReadInterrupts>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d115      	bne.n	800372c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f006 ff8a 	bl	800a62c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6859      	ldr	r1, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	430a      	orrs	r2, r1
 8003726:	605a      	str	r2, [r3, #4]
 8003728:	e000      	b.n	800372c <HAL_PCD_IRQHandler+0x992>
      return;
 800372a:	bf00      	nop
    }
  }
}
 800372c:	3734      	adds	r7, #52	; 0x34
 800372e:	46bd      	mov	sp, r7
 8003730:	bd90      	pop	{r4, r7, pc}

08003732 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	460b      	mov	r3, r1
 800373c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_PCD_SetAddress+0x1a>
 8003748:	2302      	movs	r3, #2
 800374a:	e013      	b.n	8003774 <HAL_PCD_SetAddress+0x42>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	78fa      	ldrb	r2, [r7, #3]
 8003758:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	78fa      	ldrb	r2, [r7, #3]
 8003762:	4611      	mov	r1, r2
 8003764:	4618      	mov	r0, r3
 8003766:	f004 f981 	bl	8007a6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	4608      	mov	r0, r1
 8003786:	4611      	mov	r1, r2
 8003788:	461a      	mov	r2, r3
 800378a:	4603      	mov	r3, r0
 800378c:	70fb      	strb	r3, [r7, #3]
 800378e:	460b      	mov	r3, r1
 8003790:	803b      	strh	r3, [r7, #0]
 8003792:	4613      	mov	r3, r2
 8003794:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800379a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	da0f      	bge.n	80037c2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	f003 020f 	and.w	r2, r3, #15
 80037a8:	4613      	mov	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	3338      	adds	r3, #56	; 0x38
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	4413      	add	r3, r2
 80037b6:	3304      	adds	r3, #4
 80037b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	705a      	strb	r2, [r3, #1]
 80037c0:	e00f      	b.n	80037e2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	f003 020f 	and.w	r2, r3, #15
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	4413      	add	r3, r2
 80037d8:	3304      	adds	r3, #4
 80037da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	f003 030f 	and.w	r3, r3, #15
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80037ee:	883a      	ldrh	r2, [r7, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	78ba      	ldrb	r2, [r7, #2]
 80037f8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	785b      	ldrb	r3, [r3, #1]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d004      	beq.n	800380c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800380c:	78bb      	ldrb	r3, [r7, #2]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d102      	bne.n	8003818 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <HAL_PCD_EP_Open+0xaa>
 8003822:	2302      	movs	r3, #2
 8003824:	e00e      	b.n	8003844 <HAL_PCD_EP_Open+0xc8>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68f9      	ldr	r1, [r7, #12]
 8003834:	4618      	mov	r0, r3
 8003836:	f003 fb01 	bl	8006e3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003842:	7afb      	ldrb	r3, [r7, #11]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003858:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800385c:	2b00      	cmp	r3, #0
 800385e:	da0f      	bge.n	8003880 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003860:	78fb      	ldrb	r3, [r7, #3]
 8003862:	f003 020f 	and.w	r2, r3, #15
 8003866:	4613      	mov	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	3338      	adds	r3, #56	; 0x38
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	4413      	add	r3, r2
 8003874:	3304      	adds	r3, #4
 8003876:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2201      	movs	r2, #1
 800387c:	705a      	strb	r2, [r3, #1]
 800387e:	e00f      	b.n	80038a0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	f003 020f 	and.w	r2, r3, #15
 8003886:	4613      	mov	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	4413      	add	r3, r2
 8003896:	3304      	adds	r3, #4
 8003898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_PCD_EP_Close+0x6e>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e00e      	b.n	80038d8 <HAL_PCD_EP_Close+0x8c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68f9      	ldr	r1, [r7, #12]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f003 fb3f 	bl	8006f4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	607a      	str	r2, [r7, #4]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	460b      	mov	r3, r1
 80038ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038f0:	7afb      	ldrb	r3, [r7, #11]
 80038f2:	f003 020f 	and.w	r2, r3, #15
 80038f6:	4613      	mov	r3, r2
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4413      	add	r3, r2
 8003906:	3304      	adds	r3, #4
 8003908:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2200      	movs	r2, #0
 800391a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2200      	movs	r2, #0
 8003920:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003922:	7afb      	ldrb	r3, [r7, #11]
 8003924:	f003 030f 	and.w	r3, r3, #15
 8003928:	b2da      	uxtb	r2, r3
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d102      	bne.n	800393c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6818      	ldr	r0, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	461a      	mov	r2, r3
 8003948:	6979      	ldr	r1, [r7, #20]
 800394a:	f003 fbdb 	bl	8007104 <USB_EPStartXfer>

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	f003 020f 	and.w	r2, r3, #15
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800397a:	681b      	ldr	r3, [r3, #0]
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	607a      	str	r2, [r7, #4]
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	460b      	mov	r3, r1
 8003996:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003998:	7afb      	ldrb	r3, [r7, #11]
 800399a:	f003 020f 	and.w	r2, r3, #15
 800399e:	4613      	mov	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	3338      	adds	r3, #56	; 0x38
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	4413      	add	r3, r2
 80039ac:	3304      	adds	r3, #4
 80039ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2200      	movs	r2, #0
 80039c0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2201      	movs	r2, #1
 80039c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039c8:	7afb      	ldrb	r3, [r7, #11]
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d102      	bne.n	80039e2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	461a      	mov	r2, r3
 80039ee:	6979      	ldr	r1, [r7, #20]
 80039f0:	f003 fb88 	bl	8007104 <USB_EPStartXfer>

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	460b      	mov	r3, r1
 8003a08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	f003 020f 	and.w	r2, r3, #15
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d901      	bls.n	8003a1c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e050      	b.n	8003abe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	da0f      	bge.n	8003a44 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	f003 020f 	and.w	r2, r3, #15
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	3338      	adds	r3, #56	; 0x38
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	4413      	add	r3, r2
 8003a38:	3304      	adds	r3, #4
 8003a3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	705a      	strb	r2, [r3, #1]
 8003a42:	e00d      	b.n	8003a60 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a44:	78fa      	ldrb	r2, [r7, #3]
 8003a46:	4613      	mov	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	4413      	add	r3, r2
 8003a56:	3304      	adds	r3, #4
 8003a58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2201      	movs	r2, #1
 8003a64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_PCD_EP_SetStall+0x82>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e01e      	b.n	8003abe <HAL_PCD_EP_SetStall+0xc0>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68f9      	ldr	r1, [r7, #12]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f003 ff18 	bl	80078c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10a      	bne.n	8003ab4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	b2d9      	uxtb	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f004 f90a 	bl	8007cc8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b084      	sub	sp, #16
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ad2:	78fb      	ldrb	r3, [r7, #3]
 8003ad4:	f003 020f 	and.w	r2, r3, #15
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d901      	bls.n	8003ae4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e042      	b.n	8003b6a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ae4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	da0f      	bge.n	8003b0c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	f003 020f 	and.w	r2, r3, #15
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	3338      	adds	r3, #56	; 0x38
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	4413      	add	r3, r2
 8003b00:	3304      	adds	r3, #4
 8003b02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2201      	movs	r2, #1
 8003b08:	705a      	strb	r2, [r3, #1]
 8003b0a:	e00f      	b.n	8003b2c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	f003 020f 	and.w	r2, r3, #15
 8003b12:	4613      	mov	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	4413      	add	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	4413      	add	r3, r2
 8003b22:	3304      	adds	r3, #4
 8003b24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b32:	78fb      	ldrb	r3, [r7, #3]
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_PCD_EP_ClrStall+0x86>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e00e      	b.n	8003b6a <HAL_PCD_EP_ClrStall+0xa4>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68f9      	ldr	r1, [r7, #12]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f003 ff20 	bl	80079a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	da0c      	bge.n	8003ba0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	f003 020f 	and.w	r2, r3, #15
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4413      	add	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	3338      	adds	r3, #56	; 0x38
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	4413      	add	r3, r2
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	e00c      	b.n	8003bba <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	f003 020f 	and.w	r2, r3, #15
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4413      	add	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68f9      	ldr	r1, [r7, #12]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f003 fd3f 	bl	8007644 <USB_EPStopXfer>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003bca:	7afb      	ldrb	r3, [r7, #11]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08a      	sub	sp, #40	; 0x28
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	4613      	mov	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	3338      	adds	r3, #56	; 0x38
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	695a      	ldr	r2, [r3, #20]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d901      	bls.n	8003c0c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e06c      	b.n	8003ce6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d902      	bls.n	8003c28 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	3303      	adds	r3, #3
 8003c2c:	089b      	lsrs	r3, r3, #2
 8003c2e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c30:	e02b      	b.n	8003c8a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d902      	bls.n	8003c4e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	3303      	adds	r3, #3
 8003c52:	089b      	lsrs	r3, r3, #2
 8003c54:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	68d9      	ldr	r1, [r3, #12]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	6978      	ldr	r0, [r7, #20]
 8003c6e:	f003 fd93 	bl	8007798 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	441a      	add	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	441a      	add	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d809      	bhi.n	8003cb4 <PCD_WriteEmptyTxFifo+0xe0>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d203      	bcs.n	8003cb4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1be      	bne.n	8003c32 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d811      	bhi.n	8003ce4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	6939      	ldr	r1, [r7, #16]
 8003cdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	333c      	adds	r3, #60	; 0x3c
 8003d08:	3304      	adds	r3, #4
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d17b      	bne.n	8003e1e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d015      	beq.n	8003d5c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	4a61      	ldr	r2, [pc, #388]	; (8003eb8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	f240 80b9 	bls.w	8003eac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80b3 	beq.w	8003eac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d52:	461a      	mov	r2, r3
 8003d54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d58:	6093      	str	r3, [r2, #8]
 8003d5a:	e0a7      	b.n	8003eac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d009      	beq.n	8003d7a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d72:	461a      	mov	r2, r3
 8003d74:	2320      	movs	r3, #32
 8003d76:	6093      	str	r3, [r2, #8]
 8003d78:	e098      	b.n	8003eac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f040 8093 	bne.w	8003eac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	4a4b      	ldr	r2, [pc, #300]	; (8003eb8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d90f      	bls.n	8003dae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00a      	beq.n	8003dae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da4:	461a      	mov	r2, r3
 8003da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003daa:	6093      	str	r3, [r2, #8]
 8003dac:	e07e      	b.n	8003eac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	4613      	mov	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a1a      	ldr	r2, [r3, #32]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	0159      	lsls	r1, r3, #5
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	440b      	add	r3, r1
 8003dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dda:	1ad2      	subs	r2, r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d114      	bne.n	8003e10 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003df8:	461a      	mov	r2, r3
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	f003 ff64 	bl	8007cc8 <USB_EP0_OutStart>
 8003e00:	e006      	b.n	8003e10 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	441a      	add	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	4619      	mov	r1, r3
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f006 fb36 	bl	800a488 <HAL_PCD_DataOutStageCallback>
 8003e1c:	e046      	b.n	8003eac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	4a26      	ldr	r2, [pc, #152]	; (8003ebc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d124      	bne.n	8003e70 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e42:	6093      	str	r3, [r2, #8]
 8003e44:	e032      	b.n	8003eac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f003 0320 	and.w	r3, r3, #32
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d008      	beq.n	8003e62 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	2320      	movs	r3, #32
 8003e60:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	4619      	mov	r1, r3
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f006 fb0d 	bl	800a488 <HAL_PCD_DataOutStageCallback>
 8003e6e:	e01d      	b.n	8003eac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d114      	bne.n	8003ea0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4413      	add	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	440b      	add	r3, r1
 8003e84:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d108      	bne.n	8003ea0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6818      	ldr	r0, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e98:	461a      	mov	r2, r3
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	f003 ff14 	bl	8007cc8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f006 faee 	bl	800a488 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3720      	adds	r7, #32
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	4f54300a 	.word	0x4f54300a
 8003ebc:	4f54310a 	.word	0x4f54310a

08003ec0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	333c      	adds	r3, #60	; 0x3c
 8003ed8:	3304      	adds	r3, #4
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4a15      	ldr	r2, [pc, #84]	; (8003f48 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d90e      	bls.n	8003f14 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d009      	beq.n	8003f14 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f12:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f006 faa5 	bl	800a464 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4a0a      	ldr	r2, [pc, #40]	; (8003f48 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d90c      	bls.n	8003f3c <PCD_EP_OutSetupPacket_int+0x7c>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d108      	bne.n	8003f3c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f34:	461a      	mov	r2, r3
 8003f36:	2101      	movs	r1, #1
 8003f38:	f003 fec6 	bl	8007cc8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	4f54300a 	.word	0x4f54300a

08003f4c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	70fb      	strb	r3, [r7, #3]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d107      	bne.n	8003f7a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f6a:	883b      	ldrh	r3, [r7, #0]
 8003f6c:	0419      	lsls	r1, r3, #16
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28
 8003f78:	e028      	b.n	8003fcc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	0c1b      	lsrs	r3, r3, #16
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	4413      	add	r3, r2
 8003f86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f88:	2300      	movs	r3, #0
 8003f8a:	73fb      	strb	r3, [r7, #15]
 8003f8c:	e00d      	b.n	8003faa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	3340      	adds	r3, #64	; 0x40
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	0c1b      	lsrs	r3, r3, #16
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]
 8003faa:	7bfa      	ldrb	r2, [r7, #15]
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d3ec      	bcc.n	8003f8e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003fb4:	883b      	ldrh	r3, [r7, #0]
 8003fb6:	0418      	lsls	r0, r3, #16
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6819      	ldr	r1, [r3, #0]
 8003fbc:	78fb      	ldrb	r3, [r7, #3]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	4302      	orrs	r2, r0
 8003fc4:	3340      	adds	r3, #64	; 0x40
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	887a      	ldrh	r2, [r7, #2]
 8003fec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800402a:	4b05      	ldr	r3, [pc, #20]	; (8004040 <HAL_PCDEx_ActivateLPM+0x44>)
 800402c:	4313      	orrs	r3, r2
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	10000003 	.word	0x10000003

08004044 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004064:	4b19      	ldr	r3, [pc, #100]	; (80040cc <HAL_PWREx_ConfigSupply+0x70>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b04      	cmp	r3, #4
 800406e:	d00a      	beq.n	8004086 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004070:	4b16      	ldr	r3, [pc, #88]	; (80040cc <HAL_PWREx_ConfigSupply+0x70>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	429a      	cmp	r2, r3
 800407c:	d001      	beq.n	8004082 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e01f      	b.n	80040c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	e01d      	b.n	80040c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004086:	4b11      	ldr	r3, [pc, #68]	; (80040cc <HAL_PWREx_ConfigSupply+0x70>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f023 0207 	bic.w	r2, r3, #7
 800408e:	490f      	ldr	r1, [pc, #60]	; (80040cc <HAL_PWREx_ConfigSupply+0x70>)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4313      	orrs	r3, r2
 8004094:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004096:	f7fd f8d5 	bl	8001244 <HAL_GetTick>
 800409a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800409c:	e009      	b.n	80040b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800409e:	f7fd f8d1 	bl	8001244 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ac:	d901      	bls.n	80040b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e007      	b.n	80040c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80040b2:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_PWREx_ConfigSupply+0x70>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040be:	d1ee      	bne.n	800409e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	58024800 	.word	0x58024800

080040d0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80040d4:	4b05      	ldr	r3, [pc, #20]	; (80040ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4a04      	ldr	r2, [pc, #16]	; (80040ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80040da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040de:	60d3      	str	r3, [r2, #12]
}
 80040e0:	bf00      	nop
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	58024800 	.word	0x58024800

080040f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08c      	sub	sp, #48	; 0x30
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d102      	bne.n	8004104 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f000 bc48 	b.w	8004994 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 8088 	beq.w	8004222 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004112:	4b99      	ldr	r3, [pc, #612]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800411a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800411c:	4b96      	ldr	r3, [pc, #600]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 800411e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004120:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004124:	2b10      	cmp	r3, #16
 8004126:	d007      	beq.n	8004138 <HAL_RCC_OscConfig+0x48>
 8004128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412a:	2b18      	cmp	r3, #24
 800412c:	d111      	bne.n	8004152 <HAL_RCC_OscConfig+0x62>
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d10c      	bne.n	8004152 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004138:	4b8f      	ldr	r3, [pc, #572]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d06d      	beq.n	8004220 <HAL_RCC_OscConfig+0x130>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d169      	bne.n	8004220 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	f000 bc21 	b.w	8004994 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415a:	d106      	bne.n	800416a <HAL_RCC_OscConfig+0x7a>
 800415c:	4b86      	ldr	r3, [pc, #536]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a85      	ldr	r2, [pc, #532]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 8004162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	e02e      	b.n	80041c8 <HAL_RCC_OscConfig+0xd8>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10c      	bne.n	800418c <HAL_RCC_OscConfig+0x9c>
 8004172:	4b81      	ldr	r3, [pc, #516]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a80      	ldr	r2, [pc, #512]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 8004178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	4b7e      	ldr	r3, [pc, #504]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a7d      	ldr	r2, [pc, #500]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 8004184:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	e01d      	b.n	80041c8 <HAL_RCC_OscConfig+0xd8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004194:	d10c      	bne.n	80041b0 <HAL_RCC_OscConfig+0xc0>
 8004196:	4b78      	ldr	r3, [pc, #480]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a77      	ldr	r2, [pc, #476]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 800419c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	4b75      	ldr	r3, [pc, #468]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a74      	ldr	r2, [pc, #464]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 80041a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	e00b      	b.n	80041c8 <HAL_RCC_OscConfig+0xd8>
 80041b0:	4b71      	ldr	r3, [pc, #452]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a70      	ldr	r2, [pc, #448]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 80041b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	4b6e      	ldr	r3, [pc, #440]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a6d      	ldr	r2, [pc, #436]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 80041c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d013      	beq.n	80041f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7fd f838 	bl	8001244 <HAL_GetTick>
 80041d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d8:	f7fd f834 	bl	8001244 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b64      	cmp	r3, #100	; 0x64
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e3d4      	b.n	8004994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041ea:	4b63      	ldr	r3, [pc, #396]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0xe8>
 80041f6:	e014      	b.n	8004222 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f8:	f7fd f824 	bl	8001244 <HAL_GetTick>
 80041fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004200:	f7fd f820 	bl	8001244 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	; 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e3c0      	b.n	8004994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004212:	4b59      	ldr	r3, [pc, #356]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0x110>
 800421e:	e000      	b.n	8004222 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 80ca 	beq.w	80043c4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004230:	4b51      	ldr	r3, [pc, #324]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004238:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800423a:	4b4f      	ldr	r3, [pc, #316]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <HAL_RCC_OscConfig+0x166>
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	2b18      	cmp	r3, #24
 800424a:	d156      	bne.n	80042fa <HAL_RCC_OscConfig+0x20a>
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d151      	bne.n	80042fa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004256:	4b48      	ldr	r3, [pc, #288]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	d005      	beq.n	800426e <HAL_RCC_OscConfig+0x17e>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e392      	b.n	8004994 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800426e:	4b42      	ldr	r3, [pc, #264]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 0219 	bic.w	r2, r3, #25
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	493f      	ldr	r1, [pc, #252]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 800427c:	4313      	orrs	r3, r2
 800427e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004280:	f7fc ffe0 	bl	8001244 <HAL_GetTick>
 8004284:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004288:	f7fc ffdc 	bl	8001244 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e37c      	b.n	8004994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800429a:	4b37      	ldr	r3, [pc, #220]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a6:	f7fc fffd 	bl	80012a4 <HAL_GetREVID>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d817      	bhi.n	80042e4 <HAL_RCC_OscConfig+0x1f4>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	2b40      	cmp	r3, #64	; 0x40
 80042ba:	d108      	bne.n	80042ce <HAL_RCC_OscConfig+0x1de>
 80042bc:	4b2e      	ldr	r3, [pc, #184]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80042c4:	4a2c      	ldr	r2, [pc, #176]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 80042c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ca:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042cc:	e07a      	b.n	80043c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ce:	4b2a      	ldr	r3, [pc, #168]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	031b      	lsls	r3, r3, #12
 80042dc:	4926      	ldr	r1, [pc, #152]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042e2:	e06f      	b.n	80043c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e4:	4b24      	ldr	r3, [pc, #144]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	061b      	lsls	r3, r3, #24
 80042f2:	4921      	ldr	r1, [pc, #132]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042f8:	e064      	b.n	80043c4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d047      	beq.n	8004392 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004302:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 0219 	bic.w	r2, r3, #25
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	491a      	ldr	r1, [pc, #104]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 8004310:	4313      	orrs	r3, r2
 8004312:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fc ff96 	bl	8001244 <HAL_GetTick>
 8004318:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800431c:	f7fc ff92 	bl	8001244 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e332      	b.n	8004994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800432e:	4b12      	ldr	r3, [pc, #72]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433a:	f7fc ffb3 	bl	80012a4 <HAL_GetREVID>
 800433e:	4603      	mov	r3, r0
 8004340:	f241 0203 	movw	r2, #4099	; 0x1003
 8004344:	4293      	cmp	r3, r2
 8004346:	d819      	bhi.n	800437c <HAL_RCC_OscConfig+0x28c>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d108      	bne.n	8004362 <HAL_RCC_OscConfig+0x272>
 8004350:	4b09      	ldr	r3, [pc, #36]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004358:	4a07      	ldr	r2, [pc, #28]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 800435a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800435e:	6053      	str	r3, [r2, #4]
 8004360:	e030      	b.n	80043c4 <HAL_RCC_OscConfig+0x2d4>
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	031b      	lsls	r3, r3, #12
 8004370:	4901      	ldr	r1, [pc, #4]	; (8004378 <HAL_RCC_OscConfig+0x288>)
 8004372:	4313      	orrs	r3, r2
 8004374:	604b      	str	r3, [r1, #4]
 8004376:	e025      	b.n	80043c4 <HAL_RCC_OscConfig+0x2d4>
 8004378:	58024400 	.word	0x58024400
 800437c:	4b9a      	ldr	r3, [pc, #616]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	061b      	lsls	r3, r3, #24
 800438a:	4997      	ldr	r1, [pc, #604]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 800438c:	4313      	orrs	r3, r2
 800438e:	604b      	str	r3, [r1, #4]
 8004390:	e018      	b.n	80043c4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004392:	4b95      	ldr	r3, [pc, #596]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a94      	ldr	r2, [pc, #592]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 8004398:	f023 0301 	bic.w	r3, r3, #1
 800439c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439e:	f7fc ff51 	bl	8001244 <HAL_GetTick>
 80043a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a6:	f7fc ff4d 	bl	8001244 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e2ed      	b.n	8004994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043b8:	4b8b      	ldr	r3, [pc, #556]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1f0      	bne.n	80043a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 80a9 	beq.w	8004524 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043d2:	4b85      	ldr	r3, [pc, #532]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043dc:	4b82      	ldr	r3, [pc, #520]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 80043de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d007      	beq.n	80043f8 <HAL_RCC_OscConfig+0x308>
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2b18      	cmp	r3, #24
 80043ec:	d13a      	bne.n	8004464 <HAL_RCC_OscConfig+0x374>
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f003 0303 	and.w	r3, r3, #3
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d135      	bne.n	8004464 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043f8:	4b7b      	ldr	r3, [pc, #492]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004400:	2b00      	cmp	r3, #0
 8004402:	d005      	beq.n	8004410 <HAL_RCC_OscConfig+0x320>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	2b80      	cmp	r3, #128	; 0x80
 800440a:	d001      	beq.n	8004410 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e2c1      	b.n	8004994 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004410:	f7fc ff48 	bl	80012a4 <HAL_GetREVID>
 8004414:	4603      	mov	r3, r0
 8004416:	f241 0203 	movw	r2, #4099	; 0x1003
 800441a:	4293      	cmp	r3, r2
 800441c:	d817      	bhi.n	800444e <HAL_RCC_OscConfig+0x35e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	2b20      	cmp	r3, #32
 8004424:	d108      	bne.n	8004438 <HAL_RCC_OscConfig+0x348>
 8004426:	4b70      	ldr	r3, [pc, #448]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800442e:	4a6e      	ldr	r2, [pc, #440]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 8004430:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004434:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004436:	e075      	b.n	8004524 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004438:	4b6b      	ldr	r3, [pc, #428]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	069b      	lsls	r3, r3, #26
 8004446:	4968      	ldr	r1, [pc, #416]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 8004448:	4313      	orrs	r3, r2
 800444a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800444c:	e06a      	b.n	8004524 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800444e:	4b66      	ldr	r3, [pc, #408]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	061b      	lsls	r3, r3, #24
 800445c:	4962      	ldr	r1, [pc, #392]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 800445e:	4313      	orrs	r3, r2
 8004460:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004462:	e05f      	b.n	8004524 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d042      	beq.n	80044f2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800446c:	4b5e      	ldr	r3, [pc, #376]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a5d      	ldr	r2, [pc, #372]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 8004472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fc fee4 	bl	8001244 <HAL_GetTick>
 800447c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004480:	f7fc fee0 	bl	8001244 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e280      	b.n	8004994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004492:	4b55      	ldr	r3, [pc, #340]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0f0      	beq.n	8004480 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800449e:	f7fc ff01 	bl	80012a4 <HAL_GetREVID>
 80044a2:	4603      	mov	r3, r0
 80044a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d817      	bhi.n	80044dc <HAL_RCC_OscConfig+0x3ec>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d108      	bne.n	80044c6 <HAL_RCC_OscConfig+0x3d6>
 80044b4:	4b4c      	ldr	r3, [pc, #304]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80044bc:	4a4a      	ldr	r2, [pc, #296]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 80044be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044c2:	6053      	str	r3, [r2, #4]
 80044c4:	e02e      	b.n	8004524 <HAL_RCC_OscConfig+0x434>
 80044c6:	4b48      	ldr	r3, [pc, #288]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	069b      	lsls	r3, r3, #26
 80044d4:	4944      	ldr	r1, [pc, #272]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	604b      	str	r3, [r1, #4]
 80044da:	e023      	b.n	8004524 <HAL_RCC_OscConfig+0x434>
 80044dc:	4b42      	ldr	r3, [pc, #264]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	061b      	lsls	r3, r3, #24
 80044ea:	493f      	ldr	r1, [pc, #252]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60cb      	str	r3, [r1, #12]
 80044f0:	e018      	b.n	8004524 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80044f2:	4b3d      	ldr	r3, [pc, #244]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a3c      	ldr	r2, [pc, #240]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 80044f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fe:	f7fc fea1 	bl	8001244 <HAL_GetTick>
 8004502:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004506:	f7fc fe9d 	bl	8001244 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e23d      	b.n	8004994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004518:	4b33      	ldr	r3, [pc, #204]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f0      	bne.n	8004506 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d036      	beq.n	800459e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d019      	beq.n	800456c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004538:	4b2b      	ldr	r3, [pc, #172]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 800453a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453c:	4a2a      	ldr	r2, [pc, #168]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004544:	f7fc fe7e 	bl	8001244 <HAL_GetTick>
 8004548:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800454c:	f7fc fe7a 	bl	8001244 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e21a      	b.n	8004994 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800455e:	4b22      	ldr	r3, [pc, #136]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 8004560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x45c>
 800456a:	e018      	b.n	800459e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800456c:	4b1e      	ldr	r3, [pc, #120]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 800456e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004570:	4a1d      	ldr	r2, [pc, #116]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 8004572:	f023 0301 	bic.w	r3, r3, #1
 8004576:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004578:	f7fc fe64 	bl	8001244 <HAL_GetTick>
 800457c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004580:	f7fc fe60 	bl	8001244 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e200      	b.n	8004994 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004592:	4b15      	ldr	r3, [pc, #84]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 8004594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d039      	beq.n	800461e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d01c      	beq.n	80045ec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045b2:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a0c      	ldr	r2, [pc, #48]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 80045b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80045be:	f7fc fe41 	bl	8001244 <HAL_GetTick>
 80045c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045c6:	f7fc fe3d 	bl	8001244 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e1dd      	b.n	8004994 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045d8:	4b03      	ldr	r3, [pc, #12]	; (80045e8 <HAL_RCC_OscConfig+0x4f8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0f0      	beq.n	80045c6 <HAL_RCC_OscConfig+0x4d6>
 80045e4:	e01b      	b.n	800461e <HAL_RCC_OscConfig+0x52e>
 80045e6:	bf00      	nop
 80045e8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045ec:	4b9b      	ldr	r3, [pc, #620]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a9a      	ldr	r2, [pc, #616]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 80045f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80045f8:	f7fc fe24 	bl	8001244 <HAL_GetTick>
 80045fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004600:	f7fc fe20 	bl	8001244 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e1c0      	b.n	8004994 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004612:	4b92      	ldr	r3, [pc, #584]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f0      	bne.n	8004600 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 8081 	beq.w	800472e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800462c:	4b8c      	ldr	r3, [pc, #560]	; (8004860 <HAL_RCC_OscConfig+0x770>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a8b      	ldr	r2, [pc, #556]	; (8004860 <HAL_RCC_OscConfig+0x770>)
 8004632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004636:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004638:	f7fc fe04 	bl	8001244 <HAL_GetTick>
 800463c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004640:	f7fc fe00 	bl	8001244 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b64      	cmp	r3, #100	; 0x64
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e1a0      	b.n	8004994 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004652:	4b83      	ldr	r3, [pc, #524]	; (8004860 <HAL_RCC_OscConfig+0x770>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0f0      	beq.n	8004640 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d106      	bne.n	8004674 <HAL_RCC_OscConfig+0x584>
 8004666:	4b7d      	ldr	r3, [pc, #500]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466a:	4a7c      	ldr	r2, [pc, #496]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	6713      	str	r3, [r2, #112]	; 0x70
 8004672:	e02d      	b.n	80046d0 <HAL_RCC_OscConfig+0x5e0>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10c      	bne.n	8004696 <HAL_RCC_OscConfig+0x5a6>
 800467c:	4b77      	ldr	r3, [pc, #476]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 800467e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004680:	4a76      	ldr	r2, [pc, #472]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 8004682:	f023 0301 	bic.w	r3, r3, #1
 8004686:	6713      	str	r3, [r2, #112]	; 0x70
 8004688:	4b74      	ldr	r3, [pc, #464]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 800468a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468c:	4a73      	ldr	r2, [pc, #460]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 800468e:	f023 0304 	bic.w	r3, r3, #4
 8004692:	6713      	str	r3, [r2, #112]	; 0x70
 8004694:	e01c      	b.n	80046d0 <HAL_RCC_OscConfig+0x5e0>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b05      	cmp	r3, #5
 800469c:	d10c      	bne.n	80046b8 <HAL_RCC_OscConfig+0x5c8>
 800469e:	4b6f      	ldr	r3, [pc, #444]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a2:	4a6e      	ldr	r2, [pc, #440]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 80046a4:	f043 0304 	orr.w	r3, r3, #4
 80046a8:	6713      	str	r3, [r2, #112]	; 0x70
 80046aa:	4b6c      	ldr	r3, [pc, #432]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ae:	4a6b      	ldr	r2, [pc, #428]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	6713      	str	r3, [r2, #112]	; 0x70
 80046b6:	e00b      	b.n	80046d0 <HAL_RCC_OscConfig+0x5e0>
 80046b8:	4b68      	ldr	r3, [pc, #416]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046bc:	4a67      	ldr	r2, [pc, #412]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 80046be:	f023 0301 	bic.w	r3, r3, #1
 80046c2:	6713      	str	r3, [r2, #112]	; 0x70
 80046c4:	4b65      	ldr	r3, [pc, #404]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 80046c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c8:	4a64      	ldr	r2, [pc, #400]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 80046ca:	f023 0304 	bic.w	r3, r3, #4
 80046ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d015      	beq.n	8004704 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d8:	f7fc fdb4 	bl	8001244 <HAL_GetTick>
 80046dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046de:	e00a      	b.n	80046f6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e0:	f7fc fdb0 	bl	8001244 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e14e      	b.n	8004994 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046f6:	4b59      	ldr	r3, [pc, #356]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0ee      	beq.n	80046e0 <HAL_RCC_OscConfig+0x5f0>
 8004702:	e014      	b.n	800472e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004704:	f7fc fd9e 	bl	8001244 <HAL_GetTick>
 8004708:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800470a:	e00a      	b.n	8004722 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470c:	f7fc fd9a 	bl	8001244 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	f241 3288 	movw	r2, #5000	; 0x1388
 800471a:	4293      	cmp	r3, r2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e138      	b.n	8004994 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004722:	4b4e      	ldr	r3, [pc, #312]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 8004724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1ee      	bne.n	800470c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 812d 	beq.w	8004992 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004738:	4b48      	ldr	r3, [pc, #288]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004740:	2b18      	cmp	r3, #24
 8004742:	f000 80bd 	beq.w	80048c0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	2b02      	cmp	r3, #2
 800474c:	f040 809e 	bne.w	800488c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004750:	4b42      	ldr	r3, [pc, #264]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a41      	ldr	r2, [pc, #260]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 8004756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800475a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475c:	f7fc fd72 	bl	8001244 <HAL_GetTick>
 8004760:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004764:	f7fc fd6e 	bl	8001244 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e10e      	b.n	8004994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004776:	4b39      	ldr	r3, [pc, #228]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004782:	4b36      	ldr	r3, [pc, #216]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 8004784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004786:	4b37      	ldr	r3, [pc, #220]	; (8004864 <HAL_RCC_OscConfig+0x774>)
 8004788:	4013      	ands	r3, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004792:	0112      	lsls	r2, r2, #4
 8004794:	430a      	orrs	r2, r1
 8004796:	4931      	ldr	r1, [pc, #196]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 8004798:	4313      	orrs	r3, r2
 800479a:	628b      	str	r3, [r1, #40]	; 0x28
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a0:	3b01      	subs	r3, #1
 80047a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047aa:	3b01      	subs	r3, #1
 80047ac:	025b      	lsls	r3, r3, #9
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	3b01      	subs	r3, #1
 80047b8:	041b      	lsls	r3, r3, #16
 80047ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c4:	3b01      	subs	r3, #1
 80047c6:	061b      	lsls	r3, r3, #24
 80047c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047cc:	4923      	ldr	r1, [pc, #140]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80047d2:	4b22      	ldr	r3, [pc, #136]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 80047d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d6:	4a21      	ldr	r2, [pc, #132]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 80047d8:	f023 0301 	bic.w	r3, r3, #1
 80047dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80047de:	4b1f      	ldr	r3, [pc, #124]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 80047e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047e2:	4b21      	ldr	r3, [pc, #132]	; (8004868 <HAL_RCC_OscConfig+0x778>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047ea:	00d2      	lsls	r2, r2, #3
 80047ec:	491b      	ldr	r1, [pc, #108]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80047f2:	4b1a      	ldr	r3, [pc, #104]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	f023 020c 	bic.w	r2, r3, #12
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	4917      	ldr	r1, [pc, #92]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 8004800:	4313      	orrs	r3, r2
 8004802:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004804:	4b15      	ldr	r3, [pc, #84]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	f023 0202 	bic.w	r2, r3, #2
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004810:	4912      	ldr	r1, [pc, #72]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 8004812:	4313      	orrs	r3, r2
 8004814:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004816:	4b11      	ldr	r3, [pc, #68]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	4a10      	ldr	r2, [pc, #64]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 800481c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004820:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004822:	4b0e      	ldr	r3, [pc, #56]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	4a0d      	ldr	r2, [pc, #52]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 8004828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800482c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800482e:	4b0b      	ldr	r3, [pc, #44]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	4a0a      	ldr	r2, [pc, #40]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 8004834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004838:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800483a:	4b08      	ldr	r3, [pc, #32]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 800483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483e:	4a07      	ldr	r2, [pc, #28]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 8004840:	f043 0301 	orr.w	r3, r3, #1
 8004844:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004846:	4b05      	ldr	r3, [pc, #20]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a04      	ldr	r2, [pc, #16]	; (800485c <HAL_RCC_OscConfig+0x76c>)
 800484c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004852:	f7fc fcf7 	bl	8001244 <HAL_GetTick>
 8004856:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004858:	e011      	b.n	800487e <HAL_RCC_OscConfig+0x78e>
 800485a:	bf00      	nop
 800485c:	58024400 	.word	0x58024400
 8004860:	58024800 	.word	0x58024800
 8004864:	fffffc0c 	.word	0xfffffc0c
 8004868:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800486c:	f7fc fcea 	bl	8001244 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e08a      	b.n	8004994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800487e:	4b47      	ldr	r3, [pc, #284]	; (800499c <HAL_RCC_OscConfig+0x8ac>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCC_OscConfig+0x77c>
 800488a:	e082      	b.n	8004992 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488c:	4b43      	ldr	r3, [pc, #268]	; (800499c <HAL_RCC_OscConfig+0x8ac>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a42      	ldr	r2, [pc, #264]	; (800499c <HAL_RCC_OscConfig+0x8ac>)
 8004892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004898:	f7fc fcd4 	bl	8001244 <HAL_GetTick>
 800489c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a0:	f7fc fcd0 	bl	8001244 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e070      	b.n	8004994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048b2:	4b3a      	ldr	r3, [pc, #232]	; (800499c <HAL_RCC_OscConfig+0x8ac>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f0      	bne.n	80048a0 <HAL_RCC_OscConfig+0x7b0>
 80048be:	e068      	b.n	8004992 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80048c0:	4b36      	ldr	r3, [pc, #216]	; (800499c <HAL_RCC_OscConfig+0x8ac>)
 80048c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80048c6:	4b35      	ldr	r3, [pc, #212]	; (800499c <HAL_RCC_OscConfig+0x8ac>)
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d031      	beq.n	8004938 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f003 0203 	and.w	r2, r3, #3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048de:	429a      	cmp	r2, r3
 80048e0:	d12a      	bne.n	8004938 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d122      	bne.n	8004938 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80048fe:	429a      	cmp	r2, r3
 8004900:	d11a      	bne.n	8004938 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	0a5b      	lsrs	r3, r3, #9
 8004906:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004910:	429a      	cmp	r2, r3
 8004912:	d111      	bne.n	8004938 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	0c1b      	lsrs	r3, r3, #16
 8004918:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004922:	429a      	cmp	r2, r3
 8004924:	d108      	bne.n	8004938 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	0e1b      	lsrs	r3, r3, #24
 800492a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004932:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004934:	429a      	cmp	r2, r3
 8004936:	d001      	beq.n	800493c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e02b      	b.n	8004994 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800493c:	4b17      	ldr	r3, [pc, #92]	; (800499c <HAL_RCC_OscConfig+0x8ac>)
 800493e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004940:	08db      	lsrs	r3, r3, #3
 8004942:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004946:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	429a      	cmp	r2, r3
 8004950:	d01f      	beq.n	8004992 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004952:	4b12      	ldr	r3, [pc, #72]	; (800499c <HAL_RCC_OscConfig+0x8ac>)
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	4a11      	ldr	r2, [pc, #68]	; (800499c <HAL_RCC_OscConfig+0x8ac>)
 8004958:	f023 0301 	bic.w	r3, r3, #1
 800495c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800495e:	f7fc fc71 	bl	8001244 <HAL_GetTick>
 8004962:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004964:	bf00      	nop
 8004966:	f7fc fc6d 	bl	8001244 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	4293      	cmp	r3, r2
 8004970:	d0f9      	beq.n	8004966 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004972:	4b0a      	ldr	r3, [pc, #40]	; (800499c <HAL_RCC_OscConfig+0x8ac>)
 8004974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004976:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <HAL_RCC_OscConfig+0x8b0>)
 8004978:	4013      	ands	r3, r2
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800497e:	00d2      	lsls	r2, r2, #3
 8004980:	4906      	ldr	r1, [pc, #24]	; (800499c <HAL_RCC_OscConfig+0x8ac>)
 8004982:	4313      	orrs	r3, r2
 8004984:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004986:	4b05      	ldr	r3, [pc, #20]	; (800499c <HAL_RCC_OscConfig+0x8ac>)
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	4a04      	ldr	r2, [pc, #16]	; (800499c <HAL_RCC_OscConfig+0x8ac>)
 800498c:	f043 0301 	orr.w	r3, r3, #1
 8004990:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3730      	adds	r7, #48	; 0x30
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	58024400 	.word	0x58024400
 80049a0:	ffff0007 	.word	0xffff0007

080049a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e19c      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049b8:	4b8a      	ldr	r3, [pc, #552]	; (8004be4 <HAL_RCC_ClockConfig+0x240>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d910      	bls.n	80049e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c6:	4b87      	ldr	r3, [pc, #540]	; (8004be4 <HAL_RCC_ClockConfig+0x240>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f023 020f 	bic.w	r2, r3, #15
 80049ce:	4985      	ldr	r1, [pc, #532]	; (8004be4 <HAL_RCC_ClockConfig+0x240>)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d6:	4b83      	ldr	r3, [pc, #524]	; (8004be4 <HAL_RCC_ClockConfig+0x240>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d001      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e184      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d010      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	4b7b      	ldr	r3, [pc, #492]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d908      	bls.n	8004a16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a04:	4b78      	ldr	r3, [pc, #480]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	4975      	ldr	r1, [pc, #468]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d010      	beq.n	8004a44 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	695a      	ldr	r2, [r3, #20]
 8004a26:	4b70      	ldr	r3, [pc, #448]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d908      	bls.n	8004a44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a32:	4b6d      	ldr	r3, [pc, #436]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	496a      	ldr	r1, [pc, #424]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0310 	and.w	r3, r3, #16
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d010      	beq.n	8004a72 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699a      	ldr	r2, [r3, #24]
 8004a54:	4b64      	ldr	r3, [pc, #400]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d908      	bls.n	8004a72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a60:	4b61      	ldr	r3, [pc, #388]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	495e      	ldr	r1, [pc, #376]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d010      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69da      	ldr	r2, [r3, #28]
 8004a82:	4b59      	ldr	r3, [pc, #356]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d908      	bls.n	8004aa0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a8e:	4b56      	ldr	r3, [pc, #344]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	4953      	ldr	r1, [pc, #332]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d010      	beq.n	8004ace <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	4b4d      	ldr	r3, [pc, #308]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d908      	bls.n	8004ace <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004abc:	4b4a      	ldr	r3, [pc, #296]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	f023 020f 	bic.w	r2, r3, #15
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	4947      	ldr	r1, [pc, #284]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d055      	beq.n	8004b86 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ada:	4b43      	ldr	r3, [pc, #268]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	4940      	ldr	r1, [pc, #256]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d107      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004af4:	4b3c      	ldr	r3, [pc, #240]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d121      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0f6      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b03      	cmp	r3, #3
 8004b0a:	d107      	bne.n	8004b1c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b0c:	4b36      	ldr	r3, [pc, #216]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d115      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0ea      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b24:	4b30      	ldr	r3, [pc, #192]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d109      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e0de      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b34:	4b2c      	ldr	r3, [pc, #176]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0d6      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b44:	4b28      	ldr	r3, [pc, #160]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f023 0207 	bic.w	r2, r3, #7
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	4925      	ldr	r1, [pc, #148]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b56:	f7fc fb75 	bl	8001244 <HAL_GetTick>
 8004b5a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b5c:	e00a      	b.n	8004b74 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b5e:	f7fc fb71 	bl	8001244 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e0be      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b74:	4b1c      	ldr	r3, [pc, #112]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d1eb      	bne.n	8004b5e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d010      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68da      	ldr	r2, [r3, #12]
 8004b96:	4b14      	ldr	r3, [pc, #80]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d208      	bcs.n	8004bb4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ba2:	4b11      	ldr	r3, [pc, #68]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f023 020f 	bic.w	r2, r3, #15
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	490e      	ldr	r1, [pc, #56]	; (8004be8 <HAL_RCC_ClockConfig+0x244>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <HAL_RCC_ClockConfig+0x240>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d214      	bcs.n	8004bec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc2:	4b08      	ldr	r3, [pc, #32]	; (8004be4 <HAL_RCC_ClockConfig+0x240>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f023 020f 	bic.w	r2, r3, #15
 8004bca:	4906      	ldr	r1, [pc, #24]	; (8004be4 <HAL_RCC_ClockConfig+0x240>)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd2:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <HAL_RCC_ClockConfig+0x240>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d005      	beq.n	8004bec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e086      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x34e>
 8004be4:	52002000 	.word	0x52002000
 8004be8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d010      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	4b3f      	ldr	r3, [pc, #252]	; (8004cfc <HAL_RCC_ClockConfig+0x358>)
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d208      	bcs.n	8004c1a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c08:	4b3c      	ldr	r3, [pc, #240]	; (8004cfc <HAL_RCC_ClockConfig+0x358>)
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	4939      	ldr	r1, [pc, #228]	; (8004cfc <HAL_RCC_ClockConfig+0x358>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d010      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695a      	ldr	r2, [r3, #20]
 8004c2a:	4b34      	ldr	r3, [pc, #208]	; (8004cfc <HAL_RCC_ClockConfig+0x358>)
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d208      	bcs.n	8004c48 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c36:	4b31      	ldr	r3, [pc, #196]	; (8004cfc <HAL_RCC_ClockConfig+0x358>)
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	492e      	ldr	r1, [pc, #184]	; (8004cfc <HAL_RCC_ClockConfig+0x358>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0310 	and.w	r3, r3, #16
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d010      	beq.n	8004c76 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699a      	ldr	r2, [r3, #24]
 8004c58:	4b28      	ldr	r3, [pc, #160]	; (8004cfc <HAL_RCC_ClockConfig+0x358>)
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d208      	bcs.n	8004c76 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c64:	4b25      	ldr	r3, [pc, #148]	; (8004cfc <HAL_RCC_ClockConfig+0x358>)
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	4922      	ldr	r1, [pc, #136]	; (8004cfc <HAL_RCC_ClockConfig+0x358>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d010      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69da      	ldr	r2, [r3, #28]
 8004c86:	4b1d      	ldr	r3, [pc, #116]	; (8004cfc <HAL_RCC_ClockConfig+0x358>)
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d208      	bcs.n	8004ca4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c92:	4b1a      	ldr	r3, [pc, #104]	; (8004cfc <HAL_RCC_ClockConfig+0x358>)
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	4917      	ldr	r1, [pc, #92]	; (8004cfc <HAL_RCC_ClockConfig+0x358>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ca4:	f000 f834 	bl	8004d10 <HAL_RCC_GetSysClockFreq>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	4b14      	ldr	r3, [pc, #80]	; (8004cfc <HAL_RCC_ClockConfig+0x358>)
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	0a1b      	lsrs	r3, r3, #8
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	4912      	ldr	r1, [pc, #72]	; (8004d00 <HAL_RCC_ClockConfig+0x35c>)
 8004cb6:	5ccb      	ldrb	r3, [r1, r3]
 8004cb8:	f003 031f 	and.w	r3, r3, #31
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cc2:	4b0e      	ldr	r3, [pc, #56]	; (8004cfc <HAL_RCC_ClockConfig+0x358>)
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	4a0d      	ldr	r2, [pc, #52]	; (8004d00 <HAL_RCC_ClockConfig+0x35c>)
 8004ccc:	5cd3      	ldrb	r3, [r2, r3]
 8004cce:	f003 031f 	and.w	r3, r3, #31
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd8:	4a0a      	ldr	r2, [pc, #40]	; (8004d04 <HAL_RCC_ClockConfig+0x360>)
 8004cda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004cdc:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <HAL_RCC_ClockConfig+0x364>)
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <HAL_RCC_ClockConfig+0x368>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fc fa62 	bl	80011b0 <HAL_InitTick>
 8004cec:	4603      	mov	r3, r0
 8004cee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	58024400 	.word	0x58024400
 8004d00:	0800d504 	.word	0x0800d504
 8004d04:	24000004 	.word	0x24000004
 8004d08:	24000000 	.word	0x24000000
 8004d0c:	24000008 	.word	0x24000008

08004d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b089      	sub	sp, #36	; 0x24
 8004d14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d16:	4bb3      	ldr	r3, [pc, #716]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d1e:	2b18      	cmp	r3, #24
 8004d20:	f200 8155 	bhi.w	8004fce <HAL_RCC_GetSysClockFreq+0x2be>
 8004d24:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2a:	bf00      	nop
 8004d2c:	08004d91 	.word	0x08004d91
 8004d30:	08004fcf 	.word	0x08004fcf
 8004d34:	08004fcf 	.word	0x08004fcf
 8004d38:	08004fcf 	.word	0x08004fcf
 8004d3c:	08004fcf 	.word	0x08004fcf
 8004d40:	08004fcf 	.word	0x08004fcf
 8004d44:	08004fcf 	.word	0x08004fcf
 8004d48:	08004fcf 	.word	0x08004fcf
 8004d4c:	08004db7 	.word	0x08004db7
 8004d50:	08004fcf 	.word	0x08004fcf
 8004d54:	08004fcf 	.word	0x08004fcf
 8004d58:	08004fcf 	.word	0x08004fcf
 8004d5c:	08004fcf 	.word	0x08004fcf
 8004d60:	08004fcf 	.word	0x08004fcf
 8004d64:	08004fcf 	.word	0x08004fcf
 8004d68:	08004fcf 	.word	0x08004fcf
 8004d6c:	08004dbd 	.word	0x08004dbd
 8004d70:	08004fcf 	.word	0x08004fcf
 8004d74:	08004fcf 	.word	0x08004fcf
 8004d78:	08004fcf 	.word	0x08004fcf
 8004d7c:	08004fcf 	.word	0x08004fcf
 8004d80:	08004fcf 	.word	0x08004fcf
 8004d84:	08004fcf 	.word	0x08004fcf
 8004d88:	08004fcf 	.word	0x08004fcf
 8004d8c:	08004dc3 	.word	0x08004dc3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d90:	4b94      	ldr	r3, [pc, #592]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0320 	and.w	r3, r3, #32
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d009      	beq.n	8004db0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d9c:	4b91      	ldr	r3, [pc, #580]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	08db      	lsrs	r3, r3, #3
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	4a90      	ldr	r2, [pc, #576]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004da8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004dae:	e111      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004db0:	4b8d      	ldr	r3, [pc, #564]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004db2:	61bb      	str	r3, [r7, #24]
      break;
 8004db4:	e10e      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004db6:	4b8d      	ldr	r3, [pc, #564]	; (8004fec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004db8:	61bb      	str	r3, [r7, #24]
      break;
 8004dba:	e10b      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004dbc:	4b8c      	ldr	r3, [pc, #560]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004dbe:	61bb      	str	r3, [r7, #24]
      break;
 8004dc0:	e108      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004dc2:	4b88      	ldr	r3, [pc, #544]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004dcc:	4b85      	ldr	r3, [pc, #532]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd0:	091b      	lsrs	r3, r3, #4
 8004dd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dd6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004dd8:	4b82      	ldr	r3, [pc, #520]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004de2:	4b80      	ldr	r3, [pc, #512]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de6:	08db      	lsrs	r3, r3, #3
 8004de8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	fb02 f303 	mul.w	r3, r2, r3
 8004df2:	ee07 3a90 	vmov	s15, r3
 8004df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dfa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 80e1 	beq.w	8004fc8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	f000 8083 	beq.w	8004f14 <HAL_RCC_GetSysClockFreq+0x204>
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	f200 80a1 	bhi.w	8004f58 <HAL_RCC_GetSysClockFreq+0x248>
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <HAL_RCC_GetSysClockFreq+0x114>
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d056      	beq.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004e22:	e099      	b.n	8004f58 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e24:	4b6f      	ldr	r3, [pc, #444]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0320 	and.w	r3, r3, #32
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d02d      	beq.n	8004e8c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e30:	4b6c      	ldr	r3, [pc, #432]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	08db      	lsrs	r3, r3, #3
 8004e36:	f003 0303 	and.w	r3, r3, #3
 8004e3a:	4a6b      	ldr	r2, [pc, #428]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e40:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	ee07 3a90 	vmov	s15, r3
 8004e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e5a:	4b62      	ldr	r3, [pc, #392]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e6e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004ff4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e86:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004e8a:	e087      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e96:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004ff8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e9e:	4b51      	ldr	r3, [pc, #324]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea6:	ee07 3a90 	vmov	s15, r3
 8004eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eae:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eb2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004ff4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ece:	e065      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	ee07 3a90 	vmov	s15, r3
 8004ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eda:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004ffc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ee2:	4b40      	ldr	r3, [pc, #256]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ef6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004ff4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f12:	e043      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005000 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f26:	4b2f      	ldr	r3, [pc, #188]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2e:	ee07 3a90 	vmov	s15, r3
 8004f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f3a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004ff4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f56:	e021      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f62:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004ffc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f6a:	4b1e      	ldr	r3, [pc, #120]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f7e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004ff4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f9a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004f9c:	4b11      	ldr	r3, [pc, #68]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	0a5b      	lsrs	r3, r3, #9
 8004fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	ee07 3a90 	vmov	s15, r3
 8004fb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fc0:	ee17 3a90 	vmov	r3, s15
 8004fc4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004fc6:	e005      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	61bb      	str	r3, [r7, #24]
      break;
 8004fcc:	e002      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004fce:	4b07      	ldr	r3, [pc, #28]	; (8004fec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004fd0:	61bb      	str	r3, [r7, #24]
      break;
 8004fd2:	bf00      	nop
  }

  return sysclockfreq;
 8004fd4:	69bb      	ldr	r3, [r7, #24]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3724      	adds	r7, #36	; 0x24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	58024400 	.word	0x58024400
 8004fe8:	03d09000 	.word	0x03d09000
 8004fec:	003d0900 	.word	0x003d0900
 8004ff0:	017d7840 	.word	0x017d7840
 8004ff4:	46000000 	.word	0x46000000
 8004ff8:	4c742400 	.word	0x4c742400
 8004ffc:	4a742400 	.word	0x4a742400
 8005000:	4bbebc20 	.word	0x4bbebc20

08005004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800500a:	f7ff fe81 	bl	8004d10 <HAL_RCC_GetSysClockFreq>
 800500e:	4602      	mov	r2, r0
 8005010:	4b10      	ldr	r3, [pc, #64]	; (8005054 <HAL_RCC_GetHCLKFreq+0x50>)
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	0a1b      	lsrs	r3, r3, #8
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	490f      	ldr	r1, [pc, #60]	; (8005058 <HAL_RCC_GetHCLKFreq+0x54>)
 800501c:	5ccb      	ldrb	r3, [r1, r3]
 800501e:	f003 031f 	and.w	r3, r3, #31
 8005022:	fa22 f303 	lsr.w	r3, r2, r3
 8005026:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005028:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <HAL_RCC_GetHCLKFreq+0x50>)
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	4a09      	ldr	r2, [pc, #36]	; (8005058 <HAL_RCC_GetHCLKFreq+0x54>)
 8005032:	5cd3      	ldrb	r3, [r2, r3]
 8005034:	f003 031f 	and.w	r3, r3, #31
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	fa22 f303 	lsr.w	r3, r2, r3
 800503e:	4a07      	ldr	r2, [pc, #28]	; (800505c <HAL_RCC_GetHCLKFreq+0x58>)
 8005040:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005042:	4a07      	ldr	r2, [pc, #28]	; (8005060 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005048:	4b04      	ldr	r3, [pc, #16]	; (800505c <HAL_RCC_GetHCLKFreq+0x58>)
 800504a:	681b      	ldr	r3, [r3, #0]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	58024400 	.word	0x58024400
 8005058:	0800d504 	.word	0x0800d504
 800505c:	24000004 	.word	0x24000004
 8005060:	24000000 	.word	0x24000000

08005064 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005068:	b0ca      	sub	sp, #296	; 0x128
 800506a:	af00      	add	r7, sp, #0
 800506c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005070:	2300      	movs	r3, #0
 8005072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005076:	2300      	movs	r3, #0
 8005078:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800507c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005084:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005088:	2500      	movs	r5, #0
 800508a:	ea54 0305 	orrs.w	r3, r4, r5
 800508e:	d049      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005096:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800509a:	d02f      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800509c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050a0:	d828      	bhi.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80050a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050a6:	d01a      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80050a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050ac:	d822      	bhi.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 80050b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050b6:	d007      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050b8:	e01c      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050ba:	4bb8      	ldr	r3, [pc, #736]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050be:	4ab7      	ldr	r2, [pc, #732]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80050c6:	e01a      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050cc:	3308      	adds	r3, #8
 80050ce:	2102      	movs	r1, #2
 80050d0:	4618      	mov	r0, r3
 80050d2:	f001 f9d1 	bl	8006478 <RCCEx_PLL2_Config>
 80050d6:	4603      	mov	r3, r0
 80050d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80050dc:	e00f      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e2:	3328      	adds	r3, #40	; 0x28
 80050e4:	2102      	movs	r1, #2
 80050e6:	4618      	mov	r0, r3
 80050e8:	f001 fa78 	bl	80065dc <RCCEx_PLL3_Config>
 80050ec:	4603      	mov	r3, r0
 80050ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80050f2:	e004      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050fa:	e000      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80050fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10a      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005106:	4ba5      	ldr	r3, [pc, #660]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800510a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800510e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005114:	4aa1      	ldr	r2, [pc, #644]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005116:	430b      	orrs	r3, r1
 8005118:	6513      	str	r3, [r2, #80]	; 0x50
 800511a:	e003      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800511c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005120:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005130:	f04f 0900 	mov.w	r9, #0
 8005134:	ea58 0309 	orrs.w	r3, r8, r9
 8005138:	d047      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800513a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800513e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005140:	2b04      	cmp	r3, #4
 8005142:	d82a      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005144:	a201      	add	r2, pc, #4	; (adr r2, 800514c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514a:	bf00      	nop
 800514c:	08005161 	.word	0x08005161
 8005150:	0800516f 	.word	0x0800516f
 8005154:	08005185 	.word	0x08005185
 8005158:	080051a3 	.word	0x080051a3
 800515c:	080051a3 	.word	0x080051a3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005160:	4b8e      	ldr	r3, [pc, #568]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	4a8d      	ldr	r2, [pc, #564]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800516a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800516c:	e01a      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800516e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005172:	3308      	adds	r3, #8
 8005174:	2100      	movs	r1, #0
 8005176:	4618      	mov	r0, r3
 8005178:	f001 f97e 	bl	8006478 <RCCEx_PLL2_Config>
 800517c:	4603      	mov	r3, r0
 800517e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005182:	e00f      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005188:	3328      	adds	r3, #40	; 0x28
 800518a:	2100      	movs	r1, #0
 800518c:	4618      	mov	r0, r3
 800518e:	f001 fa25 	bl	80065dc <RCCEx_PLL3_Config>
 8005192:	4603      	mov	r3, r0
 8005194:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005198:	e004      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051a0:	e000      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80051a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10a      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051ac:	4b7b      	ldr	r3, [pc, #492]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b0:	f023 0107 	bic.w	r1, r3, #7
 80051b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ba:	4a78      	ldr	r2, [pc, #480]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051bc:	430b      	orrs	r3, r1
 80051be:	6513      	str	r3, [r2, #80]	; 0x50
 80051c0:	e003      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80051ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80051d6:	f04f 0b00 	mov.w	fp, #0
 80051da:	ea5a 030b 	orrs.w	r3, sl, fp
 80051de:	d04c      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80051e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ea:	d030      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80051ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051f0:	d829      	bhi.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80051f2:	2bc0      	cmp	r3, #192	; 0xc0
 80051f4:	d02d      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80051f6:	2bc0      	cmp	r3, #192	; 0xc0
 80051f8:	d825      	bhi.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80051fa:	2b80      	cmp	r3, #128	; 0x80
 80051fc:	d018      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80051fe:	2b80      	cmp	r3, #128	; 0x80
 8005200:	d821      	bhi.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005206:	2b40      	cmp	r3, #64	; 0x40
 8005208:	d007      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800520a:	e01c      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800520c:	4b63      	ldr	r3, [pc, #396]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	4a62      	ldr	r2, [pc, #392]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005216:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005218:	e01c      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800521a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800521e:	3308      	adds	r3, #8
 8005220:	2100      	movs	r1, #0
 8005222:	4618      	mov	r0, r3
 8005224:	f001 f928 	bl	8006478 <RCCEx_PLL2_Config>
 8005228:	4603      	mov	r3, r0
 800522a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800522e:	e011      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005234:	3328      	adds	r3, #40	; 0x28
 8005236:	2100      	movs	r1, #0
 8005238:	4618      	mov	r0, r3
 800523a:	f001 f9cf 	bl	80065dc <RCCEx_PLL3_Config>
 800523e:	4603      	mov	r3, r0
 8005240:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005244:	e006      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800524c:	e002      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800524e:	bf00      	nop
 8005250:	e000      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005252:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005254:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10a      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800525c:	4b4f      	ldr	r3, [pc, #316]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800525e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005260:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800526a:	4a4c      	ldr	r2, [pc, #304]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800526c:	430b      	orrs	r3, r1
 800526e:	6513      	str	r3, [r2, #80]	; 0x50
 8005270:	e003      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005272:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005276:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800527a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005282:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005286:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800528a:	2300      	movs	r3, #0
 800528c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005290:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005294:	460b      	mov	r3, r1
 8005296:	4313      	orrs	r3, r2
 8005298:	d053      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800529a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800529e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80052a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052a6:	d035      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80052a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052ac:	d82e      	bhi.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80052ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80052b2:	d031      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80052b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80052b8:	d828      	bhi.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80052ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052be:	d01a      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80052c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052c4:	d822      	bhi.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80052ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052ce:	d007      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80052d0:	e01c      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052d2:	4b32      	ldr	r3, [pc, #200]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d6:	4a31      	ldr	r2, [pc, #196]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052de:	e01c      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052e4:	3308      	adds	r3, #8
 80052e6:	2100      	movs	r1, #0
 80052e8:	4618      	mov	r0, r3
 80052ea:	f001 f8c5 	bl	8006478 <RCCEx_PLL2_Config>
 80052ee:	4603      	mov	r3, r0
 80052f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80052f4:	e011      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052fa:	3328      	adds	r3, #40	; 0x28
 80052fc:	2100      	movs	r1, #0
 80052fe:	4618      	mov	r0, r3
 8005300:	f001 f96c 	bl	80065dc <RCCEx_PLL3_Config>
 8005304:	4603      	mov	r3, r0
 8005306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800530a:	e006      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005312:	e002      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005314:	bf00      	nop
 8005316:	e000      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800531a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10b      	bne.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005322:	4b1e      	ldr	r3, [pc, #120]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005326:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800532a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800532e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005332:	4a1a      	ldr	r2, [pc, #104]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005334:	430b      	orrs	r3, r1
 8005336:	6593      	str	r3, [r2, #88]	; 0x58
 8005338:	e003      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800533e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800534e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005352:	2300      	movs	r3, #0
 8005354:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005358:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800535c:	460b      	mov	r3, r1
 800535e:	4313      	orrs	r3, r2
 8005360:	d056      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005366:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800536a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800536e:	d038      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005370:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005374:	d831      	bhi.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005376:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800537a:	d034      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800537c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005380:	d82b      	bhi.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005382:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005386:	d01d      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005388:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800538c:	d825      	bhi.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x376>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d006      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005392:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005396:	d00a      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005398:	e01f      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x376>
 800539a:	bf00      	nop
 800539c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053a0:	4ba2      	ldr	r3, [pc, #648]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a4:	4aa1      	ldr	r2, [pc, #644]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053ac:	e01c      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053b2:	3308      	adds	r3, #8
 80053b4:	2100      	movs	r1, #0
 80053b6:	4618      	mov	r0, r3
 80053b8:	f001 f85e 	bl	8006478 <RCCEx_PLL2_Config>
 80053bc:	4603      	mov	r3, r0
 80053be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80053c2:	e011      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053c8:	3328      	adds	r3, #40	; 0x28
 80053ca:	2100      	movs	r1, #0
 80053cc:	4618      	mov	r0, r3
 80053ce:	f001 f905 	bl	80065dc <RCCEx_PLL3_Config>
 80053d2:	4603      	mov	r3, r0
 80053d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053d8:	e006      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053e0:	e002      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80053e2:	bf00      	nop
 80053e4:	e000      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80053e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10b      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80053f0:	4b8e      	ldr	r3, [pc, #568]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80053f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005400:	4a8a      	ldr	r2, [pc, #552]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005402:	430b      	orrs	r3, r1
 8005404:	6593      	str	r3, [r2, #88]	; 0x58
 8005406:	e003      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005408:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800540c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005418:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800541c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005420:	2300      	movs	r3, #0
 8005422:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005426:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800542a:	460b      	mov	r3, r1
 800542c:	4313      	orrs	r3, r2
 800542e:	d03a      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005436:	2b30      	cmp	r3, #48	; 0x30
 8005438:	d01f      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800543a:	2b30      	cmp	r3, #48	; 0x30
 800543c:	d819      	bhi.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800543e:	2b20      	cmp	r3, #32
 8005440:	d00c      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005442:	2b20      	cmp	r3, #32
 8005444:	d815      	bhi.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005446:	2b00      	cmp	r3, #0
 8005448:	d019      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800544a:	2b10      	cmp	r3, #16
 800544c:	d111      	bne.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800544e:	4b77      	ldr	r3, [pc, #476]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005452:	4a76      	ldr	r2, [pc, #472]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005458:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800545a:	e011      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800545c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005460:	3308      	adds	r3, #8
 8005462:	2102      	movs	r1, #2
 8005464:	4618      	mov	r0, r3
 8005466:	f001 f807 	bl	8006478 <RCCEx_PLL2_Config>
 800546a:	4603      	mov	r3, r0
 800546c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005470:	e006      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005478:	e002      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800547a:	bf00      	nop
 800547c:	e000      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800547e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005480:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10a      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005488:	4b68      	ldr	r3, [pc, #416]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800548a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800548c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005496:	4a65      	ldr	r2, [pc, #404]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005498:	430b      	orrs	r3, r1
 800549a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800549c:	e003      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800549e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80054a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ae:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80054b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80054b6:	2300      	movs	r3, #0
 80054b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054bc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4313      	orrs	r3, r2
 80054c4:	d051      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80054c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054d0:	d035      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80054d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054d6:	d82e      	bhi.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80054d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054dc:	d031      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80054de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054e2:	d828      	bhi.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80054e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e8:	d01a      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80054ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ee:	d822      	bhi.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80054f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f8:	d007      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80054fa:	e01c      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054fc:	4b4b      	ldr	r3, [pc, #300]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	4a4a      	ldr	r2, [pc, #296]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005506:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005508:	e01c      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800550a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800550e:	3308      	adds	r3, #8
 8005510:	2100      	movs	r1, #0
 8005512:	4618      	mov	r0, r3
 8005514:	f000 ffb0 	bl	8006478 <RCCEx_PLL2_Config>
 8005518:	4603      	mov	r3, r0
 800551a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800551e:	e011      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005524:	3328      	adds	r3, #40	; 0x28
 8005526:	2100      	movs	r1, #0
 8005528:	4618      	mov	r0, r3
 800552a:	f001 f857 	bl	80065dc <RCCEx_PLL3_Config>
 800552e:	4603      	mov	r3, r0
 8005530:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005534:	e006      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800553c:	e002      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800553e:	bf00      	nop
 8005540:	e000      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005544:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10a      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800554c:	4b37      	ldr	r3, [pc, #220]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800554e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005550:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800555a:	4a34      	ldr	r2, [pc, #208]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800555c:	430b      	orrs	r3, r1
 800555e:	6513      	str	r3, [r2, #80]	; 0x50
 8005560:	e003      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005562:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005566:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800556a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005572:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005576:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800557a:	2300      	movs	r3, #0
 800557c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005580:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005584:	460b      	mov	r3, r1
 8005586:	4313      	orrs	r3, r2
 8005588:	d056      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800558a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800558e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005594:	d033      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005596:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800559a:	d82c      	bhi.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800559c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055a0:	d02f      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80055a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055a6:	d826      	bhi.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80055a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055ac:	d02b      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80055ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055b2:	d820      	bhi.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80055b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055b8:	d012      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80055ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055be:	d81a      	bhi.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d022      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80055c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c8:	d115      	bne.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ce:	3308      	adds	r3, #8
 80055d0:	2101      	movs	r1, #1
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 ff50 	bl	8006478 <RCCEx_PLL2_Config>
 80055d8:	4603      	mov	r3, r0
 80055da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80055de:	e015      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055e4:	3328      	adds	r3, #40	; 0x28
 80055e6:	2101      	movs	r1, #1
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 fff7 	bl	80065dc <RCCEx_PLL3_Config>
 80055ee:	4603      	mov	r3, r0
 80055f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80055f4:	e00a      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055fc:	e006      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055fe:	bf00      	nop
 8005600:	e004      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005602:	bf00      	nop
 8005604:	e002      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005606:	bf00      	nop
 8005608:	e000      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800560a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800560c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10d      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005614:	4b05      	ldr	r3, [pc, #20]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005618:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800561c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005622:	4a02      	ldr	r2, [pc, #8]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005624:	430b      	orrs	r3, r1
 8005626:	6513      	str	r3, [r2, #80]	; 0x50
 8005628:	e006      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800562a:	bf00      	nop
 800562c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005630:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005634:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005644:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005648:	2300      	movs	r3, #0
 800564a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800564e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005652:	460b      	mov	r3, r1
 8005654:	4313      	orrs	r3, r2
 8005656:	d055      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800565c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005660:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005664:	d033      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005666:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800566a:	d82c      	bhi.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800566c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005670:	d02f      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005676:	d826      	bhi.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005678:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800567c:	d02b      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800567e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005682:	d820      	bhi.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005688:	d012      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800568a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800568e:	d81a      	bhi.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005690:	2b00      	cmp	r3, #0
 8005692:	d022      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005694:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005698:	d115      	bne.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800569a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800569e:	3308      	adds	r3, #8
 80056a0:	2101      	movs	r1, #1
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 fee8 	bl	8006478 <RCCEx_PLL2_Config>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80056ae:	e015      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b4:	3328      	adds	r3, #40	; 0x28
 80056b6:	2101      	movs	r1, #1
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 ff8f 	bl	80065dc <RCCEx_PLL3_Config>
 80056be:	4603      	mov	r3, r0
 80056c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80056c4:	e00a      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056cc:	e006      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80056ce:	bf00      	nop
 80056d0:	e004      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80056d2:	bf00      	nop
 80056d4:	e002      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80056d6:	bf00      	nop
 80056d8:	e000      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80056da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10b      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80056e4:	4ba3      	ldr	r3, [pc, #652]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80056ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056f4:	4a9f      	ldr	r2, [pc, #636]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056f6:	430b      	orrs	r3, r1
 80056f8:	6593      	str	r3, [r2, #88]	; 0x58
 80056fa:	e003      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005700:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005710:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005714:	2300      	movs	r3, #0
 8005716:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800571a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800571e:	460b      	mov	r3, r1
 8005720:	4313      	orrs	r3, r2
 8005722:	d037      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800572e:	d00e      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005734:	d816      	bhi.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005736:	2b00      	cmp	r3, #0
 8005738:	d018      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800573a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800573e:	d111      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005740:	4b8c      	ldr	r3, [pc, #560]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005744:	4a8b      	ldr	r2, [pc, #556]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800574a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800574c:	e00f      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800574e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005752:	3308      	adds	r3, #8
 8005754:	2101      	movs	r1, #1
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fe8e 	bl	8006478 <RCCEx_PLL2_Config>
 800575c:	4603      	mov	r3, r0
 800575e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005762:	e004      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800576a:	e000      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800576c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800576e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10a      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005776:	4b7f      	ldr	r3, [pc, #508]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800577a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800577e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005784:	4a7b      	ldr	r2, [pc, #492]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005786:	430b      	orrs	r3, r1
 8005788:	6513      	str	r3, [r2, #80]	; 0x50
 800578a:	e003      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800578c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005790:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80057a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057a4:	2300      	movs	r3, #0
 80057a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80057aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4313      	orrs	r3, r2
 80057b2:	d039      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80057b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d81c      	bhi.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80057be:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80057c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c4:	08005801 	.word	0x08005801
 80057c8:	080057d5 	.word	0x080057d5
 80057cc:	080057e3 	.word	0x080057e3
 80057d0:	08005801 	.word	0x08005801
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057d4:	4b67      	ldr	r3, [pc, #412]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	4a66      	ldr	r2, [pc, #408]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80057e0:	e00f      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e6:	3308      	adds	r3, #8
 80057e8:	2102      	movs	r1, #2
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fe44 	bl	8006478 <RCCEx_PLL2_Config>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80057f6:	e004      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057fe:	e000      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005802:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10a      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800580a:	4b5a      	ldr	r3, [pc, #360]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800580c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800580e:	f023 0103 	bic.w	r1, r3, #3
 8005812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005818:	4a56      	ldr	r2, [pc, #344]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800581a:	430b      	orrs	r3, r1
 800581c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800581e:	e003      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005820:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005824:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005834:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005838:	2300      	movs	r3, #0
 800583a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800583e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005842:	460b      	mov	r3, r1
 8005844:	4313      	orrs	r3, r2
 8005846:	f000 809f 	beq.w	8005988 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800584a:	4b4b      	ldr	r3, [pc, #300]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a4a      	ldr	r2, [pc, #296]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005854:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005856:	f7fb fcf5 	bl	8001244 <HAL_GetTick>
 800585a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800585e:	e00b      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005860:	f7fb fcf0 	bl	8001244 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b64      	cmp	r3, #100	; 0x64
 800586e:	d903      	bls.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005876:	e005      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005878:	4b3f      	ldr	r3, [pc, #252]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0ed      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005884:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005888:	2b00      	cmp	r3, #0
 800588a:	d179      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800588c:	4b39      	ldr	r3, [pc, #228]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800588e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005894:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005898:	4053      	eors	r3, r2
 800589a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d015      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058a2:	4b34      	ldr	r3, [pc, #208]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058ae:	4b31      	ldr	r3, [pc, #196]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b2:	4a30      	ldr	r2, [pc, #192]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058b8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058ba:	4b2e      	ldr	r3, [pc, #184]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058be:	4a2d      	ldr	r2, [pc, #180]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058c4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80058c6:	4a2b      	ldr	r2, [pc, #172]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058cc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80058ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80058d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058da:	d118      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058dc:	f7fb fcb2 	bl	8001244 <HAL_GetTick>
 80058e0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058e4:	e00d      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e6:	f7fb fcad 	bl	8001244 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058f0:	1ad2      	subs	r2, r2, r3
 80058f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d903      	bls.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005900:	e005      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005902:	4b1c      	ldr	r3, [pc, #112]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0eb      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800590e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005912:	2b00      	cmp	r3, #0
 8005914:	d129      	bne.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800591a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800591e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005926:	d10e      	bne.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005928:	4b12      	ldr	r3, [pc, #72]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005934:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005938:	091a      	lsrs	r2, r3, #4
 800593a:	4b10      	ldr	r3, [pc, #64]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800593c:	4013      	ands	r3, r2
 800593e:	4a0d      	ldr	r2, [pc, #52]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005940:	430b      	orrs	r3, r1
 8005942:	6113      	str	r3, [r2, #16]
 8005944:	e005      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005946:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	4a0a      	ldr	r2, [pc, #40]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800594c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005950:	6113      	str	r3, [r2, #16]
 8005952:	4b08      	ldr	r3, [pc, #32]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005954:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800595a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800595e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005962:	4a04      	ldr	r2, [pc, #16]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005964:	430b      	orrs	r3, r1
 8005966:	6713      	str	r3, [r2, #112]	; 0x70
 8005968:	e00e      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800596a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800596e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005972:	e009      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005974:	58024400 	.word	0x58024400
 8005978:	58024800 	.word	0x58024800
 800597c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005980:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005984:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	f002 0301 	and.w	r3, r2, #1
 8005994:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005998:	2300      	movs	r3, #0
 800599a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800599e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4313      	orrs	r3, r2
 80059a6:	f000 8089 	beq.w	8005abc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80059aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059b0:	2b28      	cmp	r3, #40	; 0x28
 80059b2:	d86b      	bhi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80059b4:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80059b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ba:	bf00      	nop
 80059bc:	08005a95 	.word	0x08005a95
 80059c0:	08005a8d 	.word	0x08005a8d
 80059c4:	08005a8d 	.word	0x08005a8d
 80059c8:	08005a8d 	.word	0x08005a8d
 80059cc:	08005a8d 	.word	0x08005a8d
 80059d0:	08005a8d 	.word	0x08005a8d
 80059d4:	08005a8d 	.word	0x08005a8d
 80059d8:	08005a8d 	.word	0x08005a8d
 80059dc:	08005a61 	.word	0x08005a61
 80059e0:	08005a8d 	.word	0x08005a8d
 80059e4:	08005a8d 	.word	0x08005a8d
 80059e8:	08005a8d 	.word	0x08005a8d
 80059ec:	08005a8d 	.word	0x08005a8d
 80059f0:	08005a8d 	.word	0x08005a8d
 80059f4:	08005a8d 	.word	0x08005a8d
 80059f8:	08005a8d 	.word	0x08005a8d
 80059fc:	08005a77 	.word	0x08005a77
 8005a00:	08005a8d 	.word	0x08005a8d
 8005a04:	08005a8d 	.word	0x08005a8d
 8005a08:	08005a8d 	.word	0x08005a8d
 8005a0c:	08005a8d 	.word	0x08005a8d
 8005a10:	08005a8d 	.word	0x08005a8d
 8005a14:	08005a8d 	.word	0x08005a8d
 8005a18:	08005a8d 	.word	0x08005a8d
 8005a1c:	08005a95 	.word	0x08005a95
 8005a20:	08005a8d 	.word	0x08005a8d
 8005a24:	08005a8d 	.word	0x08005a8d
 8005a28:	08005a8d 	.word	0x08005a8d
 8005a2c:	08005a8d 	.word	0x08005a8d
 8005a30:	08005a8d 	.word	0x08005a8d
 8005a34:	08005a8d 	.word	0x08005a8d
 8005a38:	08005a8d 	.word	0x08005a8d
 8005a3c:	08005a95 	.word	0x08005a95
 8005a40:	08005a8d 	.word	0x08005a8d
 8005a44:	08005a8d 	.word	0x08005a8d
 8005a48:	08005a8d 	.word	0x08005a8d
 8005a4c:	08005a8d 	.word	0x08005a8d
 8005a50:	08005a8d 	.word	0x08005a8d
 8005a54:	08005a8d 	.word	0x08005a8d
 8005a58:	08005a8d 	.word	0x08005a8d
 8005a5c:	08005a95 	.word	0x08005a95
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a64:	3308      	adds	r3, #8
 8005a66:	2101      	movs	r1, #1
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fd05 	bl	8006478 <RCCEx_PLL2_Config>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005a74:	e00f      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a7a:	3328      	adds	r3, #40	; 0x28
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fdac 	bl	80065dc <RCCEx_PLL3_Config>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005a8a:	e004      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a92:	e000      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10a      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005a9e:	4bbf      	ldr	r3, [pc, #764]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aac:	4abb      	ldr	r2, [pc, #748]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005aae:	430b      	orrs	r3, r1
 8005ab0:	6553      	str	r3, [r2, #84]	; 0x54
 8005ab2:	e003      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ab8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	f002 0302 	and.w	r3, r2, #2
 8005ac8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005acc:	2300      	movs	r3, #0
 8005ace:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005ad2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	d041      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ae2:	2b05      	cmp	r3, #5
 8005ae4:	d824      	bhi.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005ae6:	a201      	add	r2, pc, #4	; (adr r2, 8005aec <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aec:	08005b39 	.word	0x08005b39
 8005af0:	08005b05 	.word	0x08005b05
 8005af4:	08005b1b 	.word	0x08005b1b
 8005af8:	08005b39 	.word	0x08005b39
 8005afc:	08005b39 	.word	0x08005b39
 8005b00:	08005b39 	.word	0x08005b39
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b08:	3308      	adds	r3, #8
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fcb3 	bl	8006478 <RCCEx_PLL2_Config>
 8005b12:	4603      	mov	r3, r0
 8005b14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b18:	e00f      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b1e:	3328      	adds	r3, #40	; 0x28
 8005b20:	2101      	movs	r1, #1
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 fd5a 	bl	80065dc <RCCEx_PLL3_Config>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b2e:	e004      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b36:	e000      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10a      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005b42:	4b96      	ldr	r3, [pc, #600]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b46:	f023 0107 	bic.w	r1, r3, #7
 8005b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b50:	4a92      	ldr	r2, [pc, #584]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b52:	430b      	orrs	r3, r1
 8005b54:	6553      	str	r3, [r2, #84]	; 0x54
 8005b56:	e003      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b68:	f002 0304 	and.w	r3, r2, #4
 8005b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b70:	2300      	movs	r3, #0
 8005b72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b76:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	d044      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b88:	2b05      	cmp	r3, #5
 8005b8a:	d825      	bhi.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005b8c:	a201      	add	r2, pc, #4	; (adr r2, 8005b94 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b92:	bf00      	nop
 8005b94:	08005be1 	.word	0x08005be1
 8005b98:	08005bad 	.word	0x08005bad
 8005b9c:	08005bc3 	.word	0x08005bc3
 8005ba0:	08005be1 	.word	0x08005be1
 8005ba4:	08005be1 	.word	0x08005be1
 8005ba8:	08005be1 	.word	0x08005be1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fc5f 	bl	8006478 <RCCEx_PLL2_Config>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005bc0:	e00f      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bc6:	3328      	adds	r3, #40	; 0x28
 8005bc8:	2101      	movs	r1, #1
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fd06 	bl	80065dc <RCCEx_PLL3_Config>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005bd6:	e004      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005bde:	e000      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005be2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10b      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005bea:	4b6c      	ldr	r3, [pc, #432]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bee:	f023 0107 	bic.w	r1, r3, #7
 8005bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bfa:	4a68      	ldr	r2, [pc, #416]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	6593      	str	r3, [r2, #88]	; 0x58
 8005c00:	e003      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c12:	f002 0320 	and.w	r3, r2, #32
 8005c16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c24:	460b      	mov	r3, r1
 8005c26:	4313      	orrs	r3, r2
 8005c28:	d055      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c36:	d033      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c3c:	d82c      	bhi.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c42:	d02f      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c48:	d826      	bhi.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c4e:	d02b      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005c50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c54:	d820      	bhi.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c5a:	d012      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005c5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c60:	d81a      	bhi.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d022      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005c66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c6a:	d115      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c70:	3308      	adds	r3, #8
 8005c72:	2100      	movs	r1, #0
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 fbff 	bl	8006478 <RCCEx_PLL2_Config>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005c80:	e015      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c86:	3328      	adds	r3, #40	; 0x28
 8005c88:	2102      	movs	r1, #2
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fca6 	bl	80065dc <RCCEx_PLL3_Config>
 8005c90:	4603      	mov	r3, r0
 8005c92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005c96:	e00a      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c9e:	e006      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005ca0:	bf00      	nop
 8005ca2:	e004      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005ca4:	bf00      	nop
 8005ca6:	e002      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005ca8:	bf00      	nop
 8005caa:	e000      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005cac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10b      	bne.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cb6:	4b39      	ldr	r3, [pc, #228]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cba:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc6:	4a35      	ldr	r2, [pc, #212]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cc8:	430b      	orrs	r3, r1
 8005cca:	6553      	str	r3, [r2, #84]	; 0x54
 8005ccc:	e003      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cde:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005cec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	d058      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cfe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d02:	d033      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005d04:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d08:	d82c      	bhi.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d0e:	d02f      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d14:	d826      	bhi.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005d16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d1a:	d02b      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005d1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d20:	d820      	bhi.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d26:	d012      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d2c:	d81a      	bhi.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d022      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d36:	d115      	bne.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d3c:	3308      	adds	r3, #8
 8005d3e:	2100      	movs	r1, #0
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 fb99 	bl	8006478 <RCCEx_PLL2_Config>
 8005d46:	4603      	mov	r3, r0
 8005d48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005d4c:	e015      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d52:	3328      	adds	r3, #40	; 0x28
 8005d54:	2102      	movs	r1, #2
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 fc40 	bl	80065dc <RCCEx_PLL3_Config>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005d62:	e00a      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d6a:	e006      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005d6c:	bf00      	nop
 8005d6e:	e004      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005d70:	bf00      	nop
 8005d72:	e002      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005d74:	bf00      	nop
 8005d76:	e000      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10e      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d82:	4b06      	ldr	r3, [pc, #24]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d86:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d92:	4a02      	ldr	r2, [pc, #8]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d94:	430b      	orrs	r3, r1
 8005d96:	6593      	str	r3, [r2, #88]	; 0x58
 8005d98:	e006      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005d9a:	bf00      	nop
 8005d9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005da4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005db4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005db8:	2300      	movs	r3, #0
 8005dba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005dbe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	d055      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dcc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005dd0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005dd4:	d033      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005dd6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005dda:	d82c      	bhi.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005de0:	d02f      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005de2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005de6:	d826      	bhi.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005de8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005dec:	d02b      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005dee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005df2:	d820      	bhi.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005df4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005df8:	d012      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005dfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dfe:	d81a      	bhi.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d022      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e08:	d115      	bne.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e0e:	3308      	adds	r3, #8
 8005e10:	2100      	movs	r1, #0
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 fb30 	bl	8006478 <RCCEx_PLL2_Config>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e1e:	e015      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e24:	3328      	adds	r3, #40	; 0x28
 8005e26:	2102      	movs	r1, #2
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 fbd7 	bl	80065dc <RCCEx_PLL3_Config>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e34:	e00a      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e3c:	e006      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e3e:	bf00      	nop
 8005e40:	e004      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e42:	bf00      	nop
 8005e44:	e002      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e46:	bf00      	nop
 8005e48:	e000      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10b      	bne.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005e54:	4ba1      	ldr	r3, [pc, #644]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e58:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e64:	4a9d      	ldr	r2, [pc, #628]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e66:	430b      	orrs	r3, r1
 8005e68:	6593      	str	r3, [r2, #88]	; 0x58
 8005e6a:	e003      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7c:	f002 0308 	and.w	r3, r2, #8
 8005e80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e84:	2300      	movs	r3, #0
 8005e86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e8a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4313      	orrs	r3, r2
 8005e92:	d01e      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea0:	d10c      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ea6:	3328      	adds	r3, #40	; 0x28
 8005ea8:	2102      	movs	r1, #2
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 fb96 	bl	80065dc <RCCEx_PLL3_Config>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005ebc:	4b87      	ldr	r3, [pc, #540]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ecc:	4a83      	ldr	r2, [pc, #524]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ece:	430b      	orrs	r3, r1
 8005ed0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eda:	f002 0310 	and.w	r3, r2, #16
 8005ede:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ee8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005eec:	460b      	mov	r3, r1
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	d01e      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ef6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005efe:	d10c      	bne.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f04:	3328      	adds	r3, #40	; 0x28
 8005f06:	2102      	movs	r1, #2
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 fb67 	bl	80065dc <RCCEx_PLL3_Config>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f1a:	4b70      	ldr	r3, [pc, #448]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f2a:	4a6c      	ldr	r2, [pc, #432]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f2c:	430b      	orrs	r3, r1
 8005f2e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f38:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005f3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f40:	2300      	movs	r3, #0
 8005f42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f46:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	d03e      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f5c:	d022      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005f5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f62:	d81b      	bhi.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f6c:	d00b      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005f6e:	e015      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f74:	3308      	adds	r3, #8
 8005f76:	2100      	movs	r1, #0
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 fa7d 	bl	8006478 <RCCEx_PLL2_Config>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005f84:	e00f      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f8a:	3328      	adds	r3, #40	; 0x28
 8005f8c:	2102      	movs	r1, #2
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 fb24 	bl	80065dc <RCCEx_PLL3_Config>
 8005f94:	4603      	mov	r3, r0
 8005f96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005f9a:	e004      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005fa2:	e000      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10b      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fae:	4b4b      	ldr	r3, [pc, #300]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005fbe:	4a47      	ldr	r2, [pc, #284]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fc0:	430b      	orrs	r3, r1
 8005fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8005fc4:	e003      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005fda:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fdc:	2300      	movs	r3, #0
 8005fde:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005fe0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	d03b      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ff6:	d01f      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005ff8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ffc:	d818      	bhi.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006002:	d003      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006004:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006008:	d007      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800600a:	e011      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800600c:	4b33      	ldr	r3, [pc, #204]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	4a32      	ldr	r2, [pc, #200]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006016:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006018:	e00f      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800601a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800601e:	3328      	adds	r3, #40	; 0x28
 8006020:	2101      	movs	r1, #1
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fada 	bl	80065dc <RCCEx_PLL3_Config>
 8006028:	4603      	mov	r3, r0
 800602a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800602e:	e004      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006036:	e000      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800603a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10b      	bne.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006042:	4b26      	ldr	r3, [pc, #152]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006046:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800604a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800604e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006052:	4a22      	ldr	r2, [pc, #136]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006054:	430b      	orrs	r3, r1
 8006056:	6553      	str	r3, [r2, #84]	; 0x54
 8006058:	e003      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800605a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800605e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800606e:	673b      	str	r3, [r7, #112]	; 0x70
 8006070:	2300      	movs	r3, #0
 8006072:	677b      	str	r3, [r7, #116]	; 0x74
 8006074:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006078:	460b      	mov	r3, r1
 800607a:	4313      	orrs	r3, r2
 800607c:	d034      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800607e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800608c:	d007      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800608e:	e011      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006090:	4b12      	ldr	r3, [pc, #72]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	4a11      	ldr	r2, [pc, #68]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800609a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800609c:	e00e      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800609e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a2:	3308      	adds	r3, #8
 80060a4:	2102      	movs	r1, #2
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 f9e6 	bl	8006478 <RCCEx_PLL2_Config>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80060b2:	e003      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10d      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80060c4:	4b05      	ldr	r3, [pc, #20]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d2:	4a02      	ldr	r2, [pc, #8]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060d4:	430b      	orrs	r3, r1
 80060d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060d8:	e006      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80060da:	bf00      	nop
 80060dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80060e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80060f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80060f6:	2300      	movs	r3, #0
 80060f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060fa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80060fe:	460b      	mov	r3, r1
 8006100:	4313      	orrs	r3, r2
 8006102:	d00c      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006108:	3328      	adds	r3, #40	; 0x28
 800610a:	2102      	movs	r1, #2
 800610c:	4618      	mov	r0, r3
 800610e:	f000 fa65 	bl	80065dc <RCCEx_PLL3_Config>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800611e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006126:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800612a:	663b      	str	r3, [r7, #96]	; 0x60
 800612c:	2300      	movs	r3, #0
 800612e:	667b      	str	r3, [r7, #100]	; 0x64
 8006130:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006134:	460b      	mov	r3, r1
 8006136:	4313      	orrs	r3, r2
 8006138:	d038      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800613a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800613e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006146:	d018      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800614c:	d811      	bhi.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800614e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006152:	d014      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006158:	d80b      	bhi.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800615a:	2b00      	cmp	r3, #0
 800615c:	d011      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800615e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006162:	d106      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006164:	4bc3      	ldr	r3, [pc, #780]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	4ac2      	ldr	r2, [pc, #776]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800616a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800616e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006170:	e008      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006178:	e004      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800617a:	bf00      	nop
 800617c:	e002      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800617e:	bf00      	nop
 8006180:	e000      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006182:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006184:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10b      	bne.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800618c:	4bb9      	ldr	r3, [pc, #740]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800618e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006190:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800619c:	4ab5      	ldr	r2, [pc, #724]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800619e:	430b      	orrs	r3, r1
 80061a0:	6553      	str	r3, [r2, #84]	; 0x54
 80061a2:	e003      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80061ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80061b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80061ba:	2300      	movs	r3, #0
 80061bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80061c2:	460b      	mov	r3, r1
 80061c4:	4313      	orrs	r3, r2
 80061c6:	d009      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80061c8:	4baa      	ldr	r3, [pc, #680]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80061d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061d6:	4aa7      	ldr	r2, [pc, #668]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061d8:	430b      	orrs	r3, r1
 80061da:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80061dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80061e8:	653b      	str	r3, [r7, #80]	; 0x50
 80061ea:	2300      	movs	r3, #0
 80061ec:	657b      	str	r3, [r7, #84]	; 0x54
 80061ee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80061f2:	460b      	mov	r3, r1
 80061f4:	4313      	orrs	r3, r2
 80061f6:	d00a      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80061f8:	4b9e      	ldr	r3, [pc, #632]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006204:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006208:	4a9a      	ldr	r2, [pc, #616]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800620a:	430b      	orrs	r3, r1
 800620c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800620e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006216:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800621a:	64bb      	str	r3, [r7, #72]	; 0x48
 800621c:	2300      	movs	r3, #0
 800621e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006220:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006224:	460b      	mov	r3, r1
 8006226:	4313      	orrs	r3, r2
 8006228:	d009      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800622a:	4b92      	ldr	r3, [pc, #584]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800622c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800622e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006238:	4a8e      	ldr	r2, [pc, #568]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800623a:	430b      	orrs	r3, r1
 800623c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800623e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800624a:	643b      	str	r3, [r7, #64]	; 0x40
 800624c:	2300      	movs	r3, #0
 800624e:	647b      	str	r3, [r7, #68]	; 0x44
 8006250:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006254:	460b      	mov	r3, r1
 8006256:	4313      	orrs	r3, r2
 8006258:	d00e      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800625a:	4b86      	ldr	r3, [pc, #536]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	4a85      	ldr	r2, [pc, #532]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006260:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006264:	6113      	str	r3, [r2, #16]
 8006266:	4b83      	ldr	r3, [pc, #524]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006268:	6919      	ldr	r1, [r3, #16]
 800626a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800626e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006272:	4a80      	ldr	r2, [pc, #512]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006274:	430b      	orrs	r3, r1
 8006276:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006284:	63bb      	str	r3, [r7, #56]	; 0x38
 8006286:	2300      	movs	r3, #0
 8006288:	63fb      	str	r3, [r7, #60]	; 0x3c
 800628a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800628e:	460b      	mov	r3, r1
 8006290:	4313      	orrs	r3, r2
 8006292:	d009      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006294:	4b77      	ldr	r3, [pc, #476]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006298:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800629c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a2:	4a74      	ldr	r2, [pc, #464]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062a4:	430b      	orrs	r3, r1
 80062a6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80062b4:	633b      	str	r3, [r7, #48]	; 0x30
 80062b6:	2300      	movs	r3, #0
 80062b8:	637b      	str	r3, [r7, #52]	; 0x34
 80062ba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80062be:	460b      	mov	r3, r1
 80062c0:	4313      	orrs	r3, r2
 80062c2:	d00a      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062c4:	4b6b      	ldr	r3, [pc, #428]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80062cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062d4:	4a67      	ldr	r2, [pc, #412]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062d6:	430b      	orrs	r3, r1
 80062d8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80062da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	2100      	movs	r1, #0
 80062e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80062f0:	460b      	mov	r3, r1
 80062f2:	4313      	orrs	r3, r2
 80062f4:	d011      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062fa:	3308      	adds	r3, #8
 80062fc:	2100      	movs	r1, #0
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 f8ba 	bl	8006478 <RCCEx_PLL2_Config>
 8006304:	4603      	mov	r3, r0
 8006306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800630a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006312:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006316:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800631a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	2100      	movs	r1, #0
 8006324:	6239      	str	r1, [r7, #32]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	627b      	str	r3, [r7, #36]	; 0x24
 800632c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006330:	460b      	mov	r3, r1
 8006332:	4313      	orrs	r3, r2
 8006334:	d011      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800633a:	3308      	adds	r3, #8
 800633c:	2101      	movs	r1, #1
 800633e:	4618      	mov	r0, r3
 8006340:	f000 f89a 	bl	8006478 <RCCEx_PLL2_Config>
 8006344:	4603      	mov	r3, r0
 8006346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800634a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006356:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800635a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	2100      	movs	r1, #0
 8006364:	61b9      	str	r1, [r7, #24]
 8006366:	f003 0304 	and.w	r3, r3, #4
 800636a:	61fb      	str	r3, [r7, #28]
 800636c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006370:	460b      	mov	r3, r1
 8006372:	4313      	orrs	r3, r2
 8006374:	d011      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800637a:	3308      	adds	r3, #8
 800637c:	2102      	movs	r1, #2
 800637e:	4618      	mov	r0, r3
 8006380:	f000 f87a 	bl	8006478 <RCCEx_PLL2_Config>
 8006384:	4603      	mov	r3, r0
 8006386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800638a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006396:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800639a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800639e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a2:	2100      	movs	r1, #0
 80063a4:	6139      	str	r1, [r7, #16]
 80063a6:	f003 0308 	and.w	r3, r3, #8
 80063aa:	617b      	str	r3, [r7, #20]
 80063ac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80063b0:	460b      	mov	r3, r1
 80063b2:	4313      	orrs	r3, r2
 80063b4:	d011      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ba:	3328      	adds	r3, #40	; 0x28
 80063bc:	2100      	movs	r1, #0
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 f90c 	bl	80065dc <RCCEx_PLL3_Config>
 80063c4:	4603      	mov	r3, r0
 80063c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80063ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80063da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e2:	2100      	movs	r1, #0
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	f003 0310 	and.w	r3, r3, #16
 80063ea:	60fb      	str	r3, [r7, #12]
 80063ec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80063f0:	460b      	mov	r3, r1
 80063f2:	4313      	orrs	r3, r2
 80063f4:	d011      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063fa:	3328      	adds	r3, #40	; 0x28
 80063fc:	2101      	movs	r1, #1
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 f8ec 	bl	80065dc <RCCEx_PLL3_Config>
 8006404:	4603      	mov	r3, r0
 8006406:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800640a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006416:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800641a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006422:	2100      	movs	r1, #0
 8006424:	6039      	str	r1, [r7, #0]
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	607b      	str	r3, [r7, #4]
 800642c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006430:	460b      	mov	r3, r1
 8006432:	4313      	orrs	r3, r2
 8006434:	d011      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800643a:	3328      	adds	r3, #40	; 0x28
 800643c:	2102      	movs	r1, #2
 800643e:	4618      	mov	r0, r3
 8006440:	f000 f8cc 	bl	80065dc <RCCEx_PLL3_Config>
 8006444:	4603      	mov	r3, r0
 8006446:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800644a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006456:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800645a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	e000      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
}
 8006468:	4618      	mov	r0, r3
 800646a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800646e:	46bd      	mov	sp, r7
 8006470:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006474:	58024400 	.word	0x58024400

08006478 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006486:	4b53      	ldr	r3, [pc, #332]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648a:	f003 0303 	and.w	r3, r3, #3
 800648e:	2b03      	cmp	r3, #3
 8006490:	d101      	bne.n	8006496 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e099      	b.n	80065ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006496:	4b4f      	ldr	r3, [pc, #316]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a4e      	ldr	r2, [pc, #312]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 800649c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064a2:	f7fa fecf 	bl	8001244 <HAL_GetTick>
 80064a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064a8:	e008      	b.n	80064bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80064aa:	f7fa fecb 	bl	8001244 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d901      	bls.n	80064bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e086      	b.n	80065ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064bc:	4b45      	ldr	r3, [pc, #276]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1f0      	bne.n	80064aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80064c8:	4b42      	ldr	r3, [pc, #264]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 80064ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	031b      	lsls	r3, r3, #12
 80064d6:	493f      	ldr	r1, [pc, #252]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	628b      	str	r3, [r1, #40]	; 0x28
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	025b      	lsls	r3, r3, #9
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	431a      	orrs	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	041b      	lsls	r3, r3, #16
 80064fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064fe:	431a      	orrs	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	3b01      	subs	r3, #1
 8006506:	061b      	lsls	r3, r3, #24
 8006508:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800650c:	4931      	ldr	r1, [pc, #196]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 800650e:	4313      	orrs	r3, r2
 8006510:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006512:	4b30      	ldr	r3, [pc, #192]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006516:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	492d      	ldr	r1, [pc, #180]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006520:	4313      	orrs	r3, r2
 8006522:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006524:	4b2b      	ldr	r3, [pc, #172]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006528:	f023 0220 	bic.w	r2, r3, #32
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	4928      	ldr	r1, [pc, #160]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006532:	4313      	orrs	r3, r2
 8006534:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006536:	4b27      	ldr	r3, [pc, #156]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	4a26      	ldr	r2, [pc, #152]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 800653c:	f023 0310 	bic.w	r3, r3, #16
 8006540:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006542:	4b24      	ldr	r3, [pc, #144]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006544:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006546:	4b24      	ldr	r3, [pc, #144]	; (80065d8 <RCCEx_PLL2_Config+0x160>)
 8006548:	4013      	ands	r3, r2
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	69d2      	ldr	r2, [r2, #28]
 800654e:	00d2      	lsls	r2, r2, #3
 8006550:	4920      	ldr	r1, [pc, #128]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006552:	4313      	orrs	r3, r2
 8006554:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006556:	4b1f      	ldr	r3, [pc, #124]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655a:	4a1e      	ldr	r2, [pc, #120]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 800655c:	f043 0310 	orr.w	r3, r3, #16
 8006560:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d106      	bne.n	8006576 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006568:	4b1a      	ldr	r3, [pc, #104]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 800656a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656c:	4a19      	ldr	r2, [pc, #100]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 800656e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006572:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006574:	e00f      	b.n	8006596 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d106      	bne.n	800658a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800657c:	4b15      	ldr	r3, [pc, #84]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	4a14      	ldr	r2, [pc, #80]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006586:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006588:	e005      	b.n	8006596 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800658a:	4b12      	ldr	r3, [pc, #72]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 800658c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658e:	4a11      	ldr	r2, [pc, #68]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006590:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006594:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006596:	4b0f      	ldr	r3, [pc, #60]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a0e      	ldr	r2, [pc, #56]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 800659c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065a2:	f7fa fe4f 	bl	8001244 <HAL_GetTick>
 80065a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065a8:	e008      	b.n	80065bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80065aa:	f7fa fe4b 	bl	8001244 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d901      	bls.n	80065bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e006      	b.n	80065ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065bc:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0f0      	beq.n	80065aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	58024400 	.word	0x58024400
 80065d8:	ffff0007 	.word	0xffff0007

080065dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80065ea:	4b53      	ldr	r3, [pc, #332]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80065ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d101      	bne.n	80065fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e099      	b.n	800672e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80065fa:	4b4f      	ldr	r3, [pc, #316]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a4e      	ldr	r2, [pc, #312]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 8006600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006606:	f7fa fe1d 	bl	8001244 <HAL_GetTick>
 800660a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800660c:	e008      	b.n	8006620 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800660e:	f7fa fe19 	bl	8001244 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d901      	bls.n	8006620 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e086      	b.n	800672e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006620:	4b45      	ldr	r3, [pc, #276]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1f0      	bne.n	800660e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800662c:	4b42      	ldr	r3, [pc, #264]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 800662e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006630:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	051b      	lsls	r3, r3, #20
 800663a:	493f      	ldr	r1, [pc, #252]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 800663c:	4313      	orrs	r3, r2
 800663e:	628b      	str	r3, [r1, #40]	; 0x28
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	3b01      	subs	r3, #1
 8006646:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	3b01      	subs	r3, #1
 8006650:	025b      	lsls	r3, r3, #9
 8006652:	b29b      	uxth	r3, r3
 8006654:	431a      	orrs	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	3b01      	subs	r3, #1
 800665c:	041b      	lsls	r3, r3, #16
 800665e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006662:	431a      	orrs	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	3b01      	subs	r3, #1
 800666a:	061b      	lsls	r3, r3, #24
 800666c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006670:	4931      	ldr	r1, [pc, #196]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 8006672:	4313      	orrs	r3, r2
 8006674:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006676:	4b30      	ldr	r3, [pc, #192]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 8006678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	492d      	ldr	r1, [pc, #180]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 8006684:	4313      	orrs	r3, r2
 8006686:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006688:	4b2b      	ldr	r3, [pc, #172]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	4928      	ldr	r1, [pc, #160]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 8006696:	4313      	orrs	r3, r2
 8006698:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800669a:	4b27      	ldr	r3, [pc, #156]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 800669c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669e:	4a26      	ldr	r2, [pc, #152]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80066a6:	4b24      	ldr	r3, [pc, #144]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066aa:	4b24      	ldr	r3, [pc, #144]	; (800673c <RCCEx_PLL3_Config+0x160>)
 80066ac:	4013      	ands	r3, r2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	69d2      	ldr	r2, [r2, #28]
 80066b2:	00d2      	lsls	r2, r2, #3
 80066b4:	4920      	ldr	r1, [pc, #128]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80066ba:	4b1f      	ldr	r3, [pc, #124]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066be:	4a1e      	ldr	r2, [pc, #120]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d106      	bne.n	80066da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80066cc:	4b1a      	ldr	r3, [pc, #104]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d0:	4a19      	ldr	r2, [pc, #100]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80066d8:	e00f      	b.n	80066fa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d106      	bne.n	80066ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80066e0:	4b15      	ldr	r3, [pc, #84]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	4a14      	ldr	r2, [pc, #80]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80066ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80066ec:	e005      	b.n	80066fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80066ee:	4b12      	ldr	r3, [pc, #72]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f2:	4a11      	ldr	r2, [pc, #68]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80066fa:	4b0f      	ldr	r3, [pc, #60]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a0e      	ldr	r2, [pc, #56]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 8006700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006704:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006706:	f7fa fd9d 	bl	8001244 <HAL_GetTick>
 800670a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800670c:	e008      	b.n	8006720 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800670e:	f7fa fd99 	bl	8001244 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	d901      	bls.n	8006720 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e006      	b.n	800672e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006720:	4b05      	ldr	r3, [pc, #20]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0f0      	beq.n	800670e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800672c:	7bfb      	ldrb	r3, [r7, #15]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	58024400 	.word	0x58024400
 800673c:	ffff0007 	.word	0xffff0007

08006740 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006740:	b084      	sub	sp, #16
 8006742:	b580      	push	{r7, lr}
 8006744:	b084      	sub	sp, #16
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	f107 001c 	add.w	r0, r7, #28
 800674e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006754:	2b01      	cmp	r3, #1
 8006756:	d120      	bne.n	800679a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68da      	ldr	r2, [r3, #12]
 8006768:	4b2a      	ldr	r3, [pc, #168]	; (8006814 <USB_CoreInit+0xd4>)
 800676a:	4013      	ands	r3, r2
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800677c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800677e:	2b01      	cmp	r3, #1
 8006780:	d105      	bne.n	800678e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f001 faf8 	bl	8007d84 <USB_CoreReset>
 8006794:	4603      	mov	r3, r0
 8006796:	73fb      	strb	r3, [r7, #15]
 8006798:	e01a      	b.n	80067d0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f001 faec 	bl	8007d84 <USB_CoreReset>
 80067ac:	4603      	mov	r3, r0
 80067ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80067b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d106      	bne.n	80067c4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	639a      	str	r2, [r3, #56]	; 0x38
 80067c2:	e005      	b.n	80067d0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d116      	bne.n	8006804 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067da:	b29a      	uxth	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80067e4:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <USB_CoreInit+0xd8>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f043 0206 	orr.w	r2, r3, #6
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f043 0220 	orr.w	r2, r3, #32
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006804:	7bfb      	ldrb	r3, [r7, #15]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006810:	b004      	add	sp, #16
 8006812:	4770      	bx	lr
 8006814:	ffbdffbf 	.word	0xffbdffbf
 8006818:	03ee0000 	.word	0x03ee0000

0800681c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	4613      	mov	r3, r2
 8006828:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800682a:	79fb      	ldrb	r3, [r7, #7]
 800682c:	2b02      	cmp	r3, #2
 800682e:	d165      	bne.n	80068fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	4a41      	ldr	r2, [pc, #260]	; (8006938 <USB_SetTurnaroundTime+0x11c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d906      	bls.n	8006846 <USB_SetTurnaroundTime+0x2a>
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	4a40      	ldr	r2, [pc, #256]	; (800693c <USB_SetTurnaroundTime+0x120>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d202      	bcs.n	8006846 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006840:	230f      	movs	r3, #15
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	e062      	b.n	800690c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	4a3c      	ldr	r2, [pc, #240]	; (800693c <USB_SetTurnaroundTime+0x120>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d306      	bcc.n	800685c <USB_SetTurnaroundTime+0x40>
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	4a3b      	ldr	r2, [pc, #236]	; (8006940 <USB_SetTurnaroundTime+0x124>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d202      	bcs.n	800685c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006856:	230e      	movs	r3, #14
 8006858:	617b      	str	r3, [r7, #20]
 800685a:	e057      	b.n	800690c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	4a38      	ldr	r2, [pc, #224]	; (8006940 <USB_SetTurnaroundTime+0x124>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d306      	bcc.n	8006872 <USB_SetTurnaroundTime+0x56>
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	4a37      	ldr	r2, [pc, #220]	; (8006944 <USB_SetTurnaroundTime+0x128>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d202      	bcs.n	8006872 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800686c:	230d      	movs	r3, #13
 800686e:	617b      	str	r3, [r7, #20]
 8006870:	e04c      	b.n	800690c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	4a33      	ldr	r2, [pc, #204]	; (8006944 <USB_SetTurnaroundTime+0x128>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d306      	bcc.n	8006888 <USB_SetTurnaroundTime+0x6c>
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	4a32      	ldr	r2, [pc, #200]	; (8006948 <USB_SetTurnaroundTime+0x12c>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d802      	bhi.n	8006888 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006882:	230c      	movs	r3, #12
 8006884:	617b      	str	r3, [r7, #20]
 8006886:	e041      	b.n	800690c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	4a2f      	ldr	r2, [pc, #188]	; (8006948 <USB_SetTurnaroundTime+0x12c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d906      	bls.n	800689e <USB_SetTurnaroundTime+0x82>
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	4a2e      	ldr	r2, [pc, #184]	; (800694c <USB_SetTurnaroundTime+0x130>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d802      	bhi.n	800689e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006898:	230b      	movs	r3, #11
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	e036      	b.n	800690c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	4a2a      	ldr	r2, [pc, #168]	; (800694c <USB_SetTurnaroundTime+0x130>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d906      	bls.n	80068b4 <USB_SetTurnaroundTime+0x98>
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	4a29      	ldr	r2, [pc, #164]	; (8006950 <USB_SetTurnaroundTime+0x134>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d802      	bhi.n	80068b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80068ae:	230a      	movs	r3, #10
 80068b0:	617b      	str	r3, [r7, #20]
 80068b2:	e02b      	b.n	800690c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4a26      	ldr	r2, [pc, #152]	; (8006950 <USB_SetTurnaroundTime+0x134>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d906      	bls.n	80068ca <USB_SetTurnaroundTime+0xae>
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	4a25      	ldr	r2, [pc, #148]	; (8006954 <USB_SetTurnaroundTime+0x138>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d202      	bcs.n	80068ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80068c4:	2309      	movs	r3, #9
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	e020      	b.n	800690c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	4a21      	ldr	r2, [pc, #132]	; (8006954 <USB_SetTurnaroundTime+0x138>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d306      	bcc.n	80068e0 <USB_SetTurnaroundTime+0xc4>
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	4a20      	ldr	r2, [pc, #128]	; (8006958 <USB_SetTurnaroundTime+0x13c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d802      	bhi.n	80068e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80068da:	2308      	movs	r3, #8
 80068dc:	617b      	str	r3, [r7, #20]
 80068de:	e015      	b.n	800690c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	4a1d      	ldr	r2, [pc, #116]	; (8006958 <USB_SetTurnaroundTime+0x13c>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d906      	bls.n	80068f6 <USB_SetTurnaroundTime+0xda>
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	4a1c      	ldr	r2, [pc, #112]	; (800695c <USB_SetTurnaroundTime+0x140>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d202      	bcs.n	80068f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80068f0:	2307      	movs	r3, #7
 80068f2:	617b      	str	r3, [r7, #20]
 80068f4:	e00a      	b.n	800690c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80068f6:	2306      	movs	r3, #6
 80068f8:	617b      	str	r3, [r7, #20]
 80068fa:	e007      	b.n	800690c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80068fc:	79fb      	ldrb	r3, [r7, #7]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d102      	bne.n	8006908 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006902:	2309      	movs	r3, #9
 8006904:	617b      	str	r3, [r7, #20]
 8006906:	e001      	b.n	800690c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006908:	2309      	movs	r3, #9
 800690a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	029b      	lsls	r3, r3, #10
 8006920:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006924:	431a      	orrs	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	371c      	adds	r7, #28
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	00d8acbf 	.word	0x00d8acbf
 800693c:	00e4e1c0 	.word	0x00e4e1c0
 8006940:	00f42400 	.word	0x00f42400
 8006944:	01067380 	.word	0x01067380
 8006948:	011a499f 	.word	0x011a499f
 800694c:	01312cff 	.word	0x01312cff
 8006950:	014ca43f 	.word	0x014ca43f
 8006954:	016e3600 	.word	0x016e3600
 8006958:	01a6ab1f 	.word	0x01a6ab1f
 800695c:	01e84800 	.word	0x01e84800

08006960 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f043 0201 	orr.w	r2, r3, #1
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006982:	b480      	push	{r7}
 8006984:	b083      	sub	sp, #12
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f023 0201 	bic.w	r2, r3, #1
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	460b      	mov	r3, r1
 80069ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80069c0:	78fb      	ldrb	r3, [r7, #3]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d115      	bne.n	80069f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80069d2:	2001      	movs	r0, #1
 80069d4:	f7fa fc42 	bl	800125c <HAL_Delay>
      ms++;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	3301      	adds	r3, #1
 80069dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f001 f93f 	bl	8007c62 <USB_GetMode>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d01e      	beq.n	8006a28 <USB_SetCurrentMode+0x84>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2b31      	cmp	r3, #49	; 0x31
 80069ee:	d9f0      	bls.n	80069d2 <USB_SetCurrentMode+0x2e>
 80069f0:	e01a      	b.n	8006a28 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80069f2:	78fb      	ldrb	r3, [r7, #3]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d115      	bne.n	8006a24 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a04:	2001      	movs	r0, #1
 8006a06:	f7fa fc29 	bl	800125c <HAL_Delay>
      ms++;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f001 f926 	bl	8007c62 <USB_GetMode>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d005      	beq.n	8006a28 <USB_SetCurrentMode+0x84>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b31      	cmp	r3, #49	; 0x31
 8006a20:	d9f0      	bls.n	8006a04 <USB_SetCurrentMode+0x60>
 8006a22:	e001      	b.n	8006a28 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e005      	b.n	8006a34 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2b32      	cmp	r3, #50	; 0x32
 8006a2c:	d101      	bne.n	8006a32 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e000      	b.n	8006a34 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a3c:	b084      	sub	sp, #16
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b086      	sub	sp, #24
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a56:	2300      	movs	r3, #0
 8006a58:	613b      	str	r3, [r7, #16]
 8006a5a:	e009      	b.n	8006a70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	3340      	adds	r3, #64	; 0x40
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	2200      	movs	r2, #0
 8006a68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	613b      	str	r3, [r7, #16]
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	2b0e      	cmp	r3, #14
 8006a74:	d9f2      	bls.n	8006a5c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d11c      	bne.n	8006ab6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a8a:	f043 0302 	orr.w	r3, r3, #2
 8006a8e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a94:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	e005      	b.n	8006ac2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ac8:	461a      	mov	r2, r3
 8006aca:	2300      	movs	r3, #0
 8006acc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006adc:	461a      	mov	r2, r3
 8006ade:	680b      	ldr	r3, [r1, #0]
 8006ae0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d10c      	bne.n	8006b02 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d104      	bne.n	8006af8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006aee:	2100      	movs	r1, #0
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f965 	bl	8006dc0 <USB_SetDevSpeed>
 8006af6:	e008      	b.n	8006b0a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006af8:	2101      	movs	r1, #1
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f960 	bl	8006dc0 <USB_SetDevSpeed>
 8006b00:	e003      	b.n	8006b0a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b02:	2103      	movs	r1, #3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f95b 	bl	8006dc0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b0a:	2110      	movs	r1, #16
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 f8f3 	bl	8006cf8 <USB_FlushTxFifo>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f91f 	bl	8006d60 <USB_FlushRxFifo>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b32:	461a      	mov	r2, r3
 8006b34:	2300      	movs	r3, #0
 8006b36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b3e:	461a      	mov	r2, r3
 8006b40:	2300      	movs	r3, #0
 8006b42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b50:	2300      	movs	r3, #0
 8006b52:	613b      	str	r3, [r7, #16]
 8006b54:	e043      	b.n	8006bde <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b6c:	d118      	bne.n	8006ba0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10a      	bne.n	8006b8a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b80:	461a      	mov	r2, r3
 8006b82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b86:	6013      	str	r3, [r2, #0]
 8006b88:	e013      	b.n	8006bb2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	015a      	lsls	r2, r3, #5
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b96:	461a      	mov	r2, r3
 8006b98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b9c:	6013      	str	r3, [r2, #0]
 8006b9e:	e008      	b.n	8006bb2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bac:	461a      	mov	r2, r3
 8006bae:	2300      	movs	r3, #0
 8006bb0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006bd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	613b      	str	r3, [r7, #16]
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d3b7      	bcc.n	8006b56 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006be6:	2300      	movs	r3, #0
 8006be8:	613b      	str	r3, [r7, #16]
 8006bea:	e043      	b.n	8006c74 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c02:	d118      	bne.n	8006c36 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10a      	bne.n	8006c20 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c16:	461a      	mov	r2, r3
 8006c18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	e013      	b.n	8006c48 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c32:	6013      	str	r3, [r2, #0]
 8006c34:	e008      	b.n	8006c48 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c42:	461a      	mov	r2, r3
 8006c44:	2300      	movs	r3, #0
 8006c46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c54:	461a      	mov	r2, r3
 8006c56:	2300      	movs	r3, #0
 8006c58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c66:	461a      	mov	r2, r3
 8006c68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	3301      	adds	r3, #1
 8006c72:	613b      	str	r3, [r7, #16]
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d3b7      	bcc.n	8006bec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006c9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d105      	bne.n	8006cb0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	f043 0210 	orr.w	r2, r3, #16
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	699a      	ldr	r2, [r3, #24]
 8006cb4:	4b0e      	ldr	r3, [pc, #56]	; (8006cf0 <USB_DevInit+0x2b4>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d005      	beq.n	8006cce <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	f043 0208 	orr.w	r2, r3, #8
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d105      	bne.n	8006ce0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	699a      	ldr	r2, [r3, #24]
 8006cd8:	4b06      	ldr	r3, [pc, #24]	; (8006cf4 <USB_DevInit+0x2b8>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3718      	adds	r7, #24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cec:	b004      	add	sp, #16
 8006cee:	4770      	bx	lr
 8006cf0:	803c3800 	.word	0x803c3800
 8006cf4:	40000004 	.word	0x40000004

08006cf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4a13      	ldr	r2, [pc, #76]	; (8006d5c <USB_FlushTxFifo+0x64>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d901      	bls.n	8006d18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e01b      	b.n	8006d50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	daf2      	bge.n	8006d06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	019b      	lsls	r3, r3, #6
 8006d28:	f043 0220 	orr.w	r2, r3, #32
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	3301      	adds	r3, #1
 8006d34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	4a08      	ldr	r2, [pc, #32]	; (8006d5c <USB_FlushTxFifo+0x64>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d901      	bls.n	8006d42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e006      	b.n	8006d50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f003 0320 	and.w	r3, r3, #32
 8006d4a:	2b20      	cmp	r3, #32
 8006d4c:	d0f0      	beq.n	8006d30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	00030d40 	.word	0x00030d40

08006d60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4a11      	ldr	r2, [pc, #68]	; (8006dbc <USB_FlushRxFifo+0x5c>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d901      	bls.n	8006d7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e018      	b.n	8006db0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	daf2      	bge.n	8006d6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2210      	movs	r2, #16
 8006d8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	3301      	adds	r3, #1
 8006d94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4a08      	ldr	r2, [pc, #32]	; (8006dbc <USB_FlushRxFifo+0x5c>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d901      	bls.n	8006da2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e006      	b.n	8006db0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f003 0310 	and.w	r3, r3, #16
 8006daa:	2b10      	cmp	r3, #16
 8006dac:	d0f0      	beq.n	8006d90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	00030d40 	.word	0x00030d40

08006dc0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	78fb      	ldrb	r3, [r7, #3]
 8006dda:	68f9      	ldr	r1, [r7, #12]
 8006ddc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006de0:	4313      	orrs	r3, r2
 8006de2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b087      	sub	sp, #28
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f003 0306 	and.w	r3, r3, #6
 8006e0a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d102      	bne.n	8006e18 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006e12:	2300      	movs	r3, #0
 8006e14:	75fb      	strb	r3, [r7, #23]
 8006e16:	e00a      	b.n	8006e2e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d002      	beq.n	8006e24 <USB_GetDevSpeed+0x32>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b06      	cmp	r3, #6
 8006e22:	d102      	bne.n	8006e2a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006e24:	2302      	movs	r3, #2
 8006e26:	75fb      	strb	r3, [r7, #23]
 8006e28:	e001      	b.n	8006e2e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006e2a:	230f      	movs	r3, #15
 8006e2c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	371c      	adds	r7, #28
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	785b      	ldrb	r3, [r3, #1]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d139      	bne.n	8006ecc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5e:	69da      	ldr	r2, [r3, #28]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	f003 030f 	and.w	r3, r3, #15
 8006e68:	2101      	movs	r1, #1
 8006e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	68f9      	ldr	r1, [r7, #12]
 8006e72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e76:	4313      	orrs	r3, r2
 8006e78:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	015a      	lsls	r2, r3, #5
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	4413      	add	r3, r2
 8006e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d153      	bne.n	8006f38 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	791b      	ldrb	r3, [r3, #4]
 8006eaa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006eac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	059b      	lsls	r3, r3, #22
 8006eb2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	0159      	lsls	r1, r3, #5
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	440b      	add	r3, r1
 8006ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	4b20      	ldr	r3, [pc, #128]	; (8006f48 <USB_ActivateEndpoint+0x10c>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	600b      	str	r3, [r1, #0]
 8006eca:	e035      	b.n	8006f38 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed2:	69da      	ldr	r2, [r3, #28]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	f003 030f 	and.w	r3, r3, #15
 8006edc:	2101      	movs	r1, #1
 8006ede:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee2:	041b      	lsls	r3, r3, #16
 8006ee4:	68f9      	ldr	r1, [r7, #12]
 8006ee6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eea:	4313      	orrs	r3, r2
 8006eec:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d119      	bne.n	8006f38 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	791b      	ldrb	r3, [r3, #4]
 8006f1e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f20:	430b      	orrs	r3, r1
 8006f22:	431a      	orrs	r2, r3
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	0159      	lsls	r1, r3, #5
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	440b      	add	r3, r1
 8006f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f30:	4619      	mov	r1, r3
 8006f32:	4b05      	ldr	r3, [pc, #20]	; (8006f48 <USB_ActivateEndpoint+0x10c>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	10008000 	.word	0x10008000

08006f4c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	785b      	ldrb	r3, [r3, #1]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d161      	bne.n	800702c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f7e:	d11f      	bne.n	8006fc0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	0151      	lsls	r1, r2, #5
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	440a      	add	r2, r1
 8006f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f9e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	0151      	lsls	r1, r2, #5
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	440a      	add	r2, r1
 8006fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	f003 030f 	and.w	r3, r3, #15
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	43db      	mvns	r3, r3
 8006fda:	68f9      	ldr	r1, [r7, #12]
 8006fdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fea:	69da      	ldr	r2, [r3, #28]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	f003 030f 	and.w	r3, r3, #15
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	43db      	mvns	r3, r3
 8006ffe:	68f9      	ldr	r1, [r7, #12]
 8007000:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007004:	4013      	ands	r3, r2
 8007006:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	4413      	add	r3, r2
 8007010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	0159      	lsls	r1, r3, #5
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	440b      	add	r3, r1
 800701e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007022:	4619      	mov	r1, r3
 8007024:	4b35      	ldr	r3, [pc, #212]	; (80070fc <USB_DeactivateEndpoint+0x1b0>)
 8007026:	4013      	ands	r3, r2
 8007028:	600b      	str	r3, [r1, #0]
 800702a:	e060      	b.n	80070ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800703e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007042:	d11f      	bne.n	8007084 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	0151      	lsls	r1, r2, #5
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	440a      	add	r2, r1
 800705a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800705e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007062:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	0151      	lsls	r1, r2, #5
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	440a      	add	r2, r1
 800707a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800707e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007082:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800708a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	f003 030f 	and.w	r3, r3, #15
 8007094:	2101      	movs	r1, #1
 8007096:	fa01 f303 	lsl.w	r3, r1, r3
 800709a:	041b      	lsls	r3, r3, #16
 800709c:	43db      	mvns	r3, r3
 800709e:	68f9      	ldr	r1, [r7, #12]
 80070a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070a4:	4013      	ands	r3, r2
 80070a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ae:	69da      	ldr	r2, [r3, #28]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	f003 030f 	and.w	r3, r3, #15
 80070b8:	2101      	movs	r1, #1
 80070ba:	fa01 f303 	lsl.w	r3, r1, r3
 80070be:	041b      	lsls	r3, r3, #16
 80070c0:	43db      	mvns	r3, r3
 80070c2:	68f9      	ldr	r1, [r7, #12]
 80070c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070c8:	4013      	ands	r3, r2
 80070ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	0159      	lsls	r1, r3, #5
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	440b      	add	r3, r1
 80070e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e6:	4619      	mov	r1, r3
 80070e8:	4b05      	ldr	r3, [pc, #20]	; (8007100 <USB_DeactivateEndpoint+0x1b4>)
 80070ea:	4013      	ands	r3, r2
 80070ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	ec337800 	.word	0xec337800
 8007100:	eff37800 	.word	0xeff37800

08007104 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b08a      	sub	sp, #40	; 0x28
 8007108:	af02      	add	r7, sp, #8
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	4613      	mov	r3, r2
 8007110:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	785b      	ldrb	r3, [r3, #1]
 8007120:	2b01      	cmp	r3, #1
 8007122:	f040 8181 	bne.w	8007428 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d132      	bne.n	8007194 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	4413      	add	r3, r2
 8007136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800713a:	691a      	ldr	r2, [r3, #16]
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	0159      	lsls	r1, r3, #5
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	440b      	add	r3, r1
 8007144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007148:	4619      	mov	r1, r3
 800714a:	4ba5      	ldr	r3, [pc, #660]	; (80073e0 <USB_EPStartXfer+0x2dc>)
 800714c:	4013      	ands	r3, r2
 800714e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	4413      	add	r3, r2
 8007158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	0151      	lsls	r1, r2, #5
 8007162:	69fa      	ldr	r2, [r7, #28]
 8007164:	440a      	add	r2, r1
 8007166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800716a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800716e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800717c:	691a      	ldr	r2, [r3, #16]
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	0159      	lsls	r1, r3, #5
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	440b      	add	r3, r1
 8007186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718a:	4619      	mov	r1, r3
 800718c:	4b95      	ldr	r3, [pc, #596]	; (80073e4 <USB_EPStartXfer+0x2e0>)
 800718e:	4013      	ands	r3, r2
 8007190:	610b      	str	r3, [r1, #16]
 8007192:	e092      	b.n	80072ba <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	4413      	add	r3, r2
 800719c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a0:	691a      	ldr	r2, [r3, #16]
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	0159      	lsls	r1, r3, #5
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	440b      	add	r3, r1
 80071aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ae:	4619      	mov	r1, r3
 80071b0:	4b8c      	ldr	r3, [pc, #560]	; (80073e4 <USB_EPStartXfer+0x2e0>)
 80071b2:	4013      	ands	r3, r2
 80071b4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	015a      	lsls	r2, r3, #5
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	4413      	add	r3, r2
 80071be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c2:	691a      	ldr	r2, [r3, #16]
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	0159      	lsls	r1, r3, #5
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	440b      	add	r3, r1
 80071cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d0:	4619      	mov	r1, r3
 80071d2:	4b83      	ldr	r3, [pc, #524]	; (80073e0 <USB_EPStartXfer+0x2dc>)
 80071d4:	4013      	ands	r3, r2
 80071d6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d11a      	bne.n	8007214 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	691a      	ldr	r2, [r3, #16]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d903      	bls.n	80071f2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	689a      	ldr	r2, [r3, #8]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	015a      	lsls	r2, r3, #5
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	4413      	add	r3, r2
 80071fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	0151      	lsls	r1, r2, #5
 8007204:	69fa      	ldr	r2, [r7, #28]
 8007206:	440a      	add	r2, r1
 8007208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800720c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007210:	6113      	str	r3, [r2, #16]
 8007212:	e01b      	b.n	800724c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007220:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	6919      	ldr	r1, [r3, #16]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	440b      	add	r3, r1
 800722c:	1e59      	subs	r1, r3, #1
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	fbb1 f3f3 	udiv	r3, r1, r3
 8007236:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007238:	4b6b      	ldr	r3, [pc, #428]	; (80073e8 <USB_EPStartXfer+0x2e4>)
 800723a:	400b      	ands	r3, r1
 800723c:	69b9      	ldr	r1, [r7, #24]
 800723e:	0148      	lsls	r0, r1, #5
 8007240:	69f9      	ldr	r1, [r7, #28]
 8007242:	4401      	add	r1, r0
 8007244:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007248:	4313      	orrs	r3, r2
 800724a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	015a      	lsls	r2, r3, #5
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	4413      	add	r3, r2
 8007254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007258:	691a      	ldr	r2, [r3, #16]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007262:	69b9      	ldr	r1, [r7, #24]
 8007264:	0148      	lsls	r0, r1, #5
 8007266:	69f9      	ldr	r1, [r7, #28]
 8007268:	4401      	add	r1, r0
 800726a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800726e:	4313      	orrs	r3, r2
 8007270:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	791b      	ldrb	r3, [r3, #4]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d11f      	bne.n	80072ba <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	0151      	lsls	r1, r2, #5
 800728c:	69fa      	ldr	r2, [r7, #28]
 800728e:	440a      	add	r2, r1
 8007290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007294:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007298:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	015a      	lsls	r2, r3, #5
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	0151      	lsls	r1, r2, #5
 80072ac:	69fa      	ldr	r2, [r7, #28]
 80072ae:	440a      	add	r2, r1
 80072b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80072ba:	79fb      	ldrb	r3, [r7, #7]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d14b      	bne.n	8007358 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	69db      	ldr	r3, [r3, #28]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d009      	beq.n	80072dc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d4:	461a      	mov	r2, r3
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	791b      	ldrb	r3, [r3, #4]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d128      	bne.n	8007336 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d110      	bne.n	8007316 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	69ba      	ldr	r2, [r7, #24]
 8007304:	0151      	lsls	r1, r2, #5
 8007306:	69fa      	ldr	r2, [r7, #28]
 8007308:	440a      	add	r2, r1
 800730a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800730e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007312:	6013      	str	r3, [r2, #0]
 8007314:	e00f      	b.n	8007336 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	015a      	lsls	r2, r3, #5
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	4413      	add	r3, r2
 800731e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	69ba      	ldr	r2, [r7, #24]
 8007326:	0151      	lsls	r1, r2, #5
 8007328:	69fa      	ldr	r2, [r7, #28]
 800732a:	440a      	add	r2, r1
 800732c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007334:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	69ba      	ldr	r2, [r7, #24]
 8007346:	0151      	lsls	r1, r2, #5
 8007348:	69fa      	ldr	r2, [r7, #28]
 800734a:	440a      	add	r2, r1
 800734c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007350:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	e16a      	b.n	800762e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	4413      	add	r3, r2
 8007360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	69ba      	ldr	r2, [r7, #24]
 8007368:	0151      	lsls	r1, r2, #5
 800736a:	69fa      	ldr	r2, [r7, #28]
 800736c:	440a      	add	r2, r1
 800736e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007372:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007376:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	791b      	ldrb	r3, [r3, #4]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d015      	beq.n	80073ac <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 8152 	beq.w	800762e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	f003 030f 	and.w	r3, r3, #15
 800739a:	2101      	movs	r1, #1
 800739c:	fa01 f303 	lsl.w	r3, r1, r3
 80073a0:	69f9      	ldr	r1, [r7, #28]
 80073a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073a6:	4313      	orrs	r3, r2
 80073a8:	634b      	str	r3, [r1, #52]	; 0x34
 80073aa:	e140      	b.n	800762e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d117      	bne.n	80073ec <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	0151      	lsls	r1, r2, #5
 80073ce:	69fa      	ldr	r2, [r7, #28]
 80073d0:	440a      	add	r2, r1
 80073d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	e016      	b.n	800740c <USB_EPStartXfer+0x308>
 80073de:	bf00      	nop
 80073e0:	e007ffff 	.word	0xe007ffff
 80073e4:	fff80000 	.word	0xfff80000
 80073e8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	015a      	lsls	r2, r3, #5
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	4413      	add	r3, r2
 80073f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	69ba      	ldr	r2, [r7, #24]
 80073fc:	0151      	lsls	r1, r2, #5
 80073fe:	69fa      	ldr	r2, [r7, #28]
 8007400:	440a      	add	r2, r1
 8007402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800740a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	68d9      	ldr	r1, [r3, #12]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	781a      	ldrb	r2, [r3, #0]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	b298      	uxth	r0, r3
 800741a:	79fb      	ldrb	r3, [r7, #7]
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	4603      	mov	r3, r0
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 f9b9 	bl	8007798 <USB_WritePacket>
 8007426:	e102      	b.n	800762e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007434:	691a      	ldr	r2, [r3, #16]
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	0159      	lsls	r1, r3, #5
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	440b      	add	r3, r1
 800743e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007442:	4619      	mov	r1, r3
 8007444:	4b7c      	ldr	r3, [pc, #496]	; (8007638 <USB_EPStartXfer+0x534>)
 8007446:	4013      	ands	r3, r2
 8007448:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	4413      	add	r3, r2
 8007452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007456:	691a      	ldr	r2, [r3, #16]
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	0159      	lsls	r1, r3, #5
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	440b      	add	r3, r1
 8007460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007464:	4619      	mov	r1, r3
 8007466:	4b75      	ldr	r3, [pc, #468]	; (800763c <USB_EPStartXfer+0x538>)
 8007468:	4013      	ands	r3, r2
 800746a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d12f      	bne.n	80074d2 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	689a      	ldr	r2, [r3, #8]
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	015a      	lsls	r2, r3, #5
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	4413      	add	r3, r2
 8007492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007496:	691a      	ldr	r2, [r3, #16]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074a0:	69b9      	ldr	r1, [r7, #24]
 80074a2:	0148      	lsls	r0, r1, #5
 80074a4:	69f9      	ldr	r1, [r7, #28]
 80074a6:	4401      	add	r1, r0
 80074a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074ac:	4313      	orrs	r3, r2
 80074ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	0151      	lsls	r1, r2, #5
 80074c2:	69fa      	ldr	r2, [r7, #28]
 80074c4:	440a      	add	r2, r1
 80074c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074ce:	6113      	str	r3, [r2, #16]
 80074d0:	e05f      	b.n	8007592 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d123      	bne.n	8007522 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	015a      	lsls	r2, r3, #5
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e6:	691a      	ldr	r2, [r3, #16]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074f0:	69b9      	ldr	r1, [r7, #24]
 80074f2:	0148      	lsls	r0, r1, #5
 80074f4:	69f9      	ldr	r1, [r7, #28]
 80074f6:	4401      	add	r1, r0
 80074f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074fc:	4313      	orrs	r3, r2
 80074fe:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	0151      	lsls	r1, r2, #5
 8007512:	69fa      	ldr	r2, [r7, #28]
 8007514:	440a      	add	r2, r1
 8007516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800751a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800751e:	6113      	str	r3, [r2, #16]
 8007520:	e037      	b.n	8007592 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	691a      	ldr	r2, [r3, #16]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	4413      	add	r3, r2
 800752c:	1e5a      	subs	r2, r3, #1
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	fbb2 f3f3 	udiv	r3, r2, r3
 8007536:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	8afa      	ldrh	r2, [r7, #22]
 800753e:	fb03 f202 	mul.w	r2, r3, r2
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	015a      	lsls	r2, r3, #5
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	4413      	add	r3, r2
 800754e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007552:	691a      	ldr	r2, [r3, #16]
 8007554:	8afb      	ldrh	r3, [r7, #22]
 8007556:	04d9      	lsls	r1, r3, #19
 8007558:	4b39      	ldr	r3, [pc, #228]	; (8007640 <USB_EPStartXfer+0x53c>)
 800755a:	400b      	ands	r3, r1
 800755c:	69b9      	ldr	r1, [r7, #24]
 800755e:	0148      	lsls	r0, r1, #5
 8007560:	69f9      	ldr	r1, [r7, #28]
 8007562:	4401      	add	r1, r0
 8007564:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007568:	4313      	orrs	r3, r2
 800756a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007578:	691a      	ldr	r2, [r3, #16]
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007582:	69b9      	ldr	r1, [r7, #24]
 8007584:	0148      	lsls	r0, r1, #5
 8007586:	69f9      	ldr	r1, [r7, #28]
 8007588:	4401      	add	r1, r0
 800758a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800758e:	4313      	orrs	r3, r2
 8007590:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007592:	79fb      	ldrb	r3, [r7, #7]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d10d      	bne.n	80075b4 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d009      	beq.n	80075b4 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	68d9      	ldr	r1, [r3, #12]
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	015a      	lsls	r2, r3, #5
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b0:	460a      	mov	r2, r1
 80075b2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	791b      	ldrb	r3, [r3, #4]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d128      	bne.n	800760e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d110      	bne.n	80075ee <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	015a      	lsls	r2, r3, #5
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69ba      	ldr	r2, [r7, #24]
 80075dc:	0151      	lsls	r1, r2, #5
 80075de:	69fa      	ldr	r2, [r7, #28]
 80075e0:	440a      	add	r2, r1
 80075e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075ea:	6013      	str	r3, [r2, #0]
 80075ec:	e00f      	b.n	800760e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	015a      	lsls	r2, r3, #5
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	69ba      	ldr	r2, [r7, #24]
 80075fe:	0151      	lsls	r1, r2, #5
 8007600:	69fa      	ldr	r2, [r7, #28]
 8007602:	440a      	add	r2, r1
 8007604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800760c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	4413      	add	r3, r2
 8007616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	69ba      	ldr	r2, [r7, #24]
 800761e:	0151      	lsls	r1, r2, #5
 8007620:	69fa      	ldr	r2, [r7, #28]
 8007622:	440a      	add	r2, r1
 8007624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007628:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800762c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3720      	adds	r7, #32
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	fff80000 	.word	0xfff80000
 800763c:	e007ffff 	.word	0xe007ffff
 8007640:	1ff80000 	.word	0x1ff80000

08007644 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007644:	b480      	push	{r7}
 8007646:	b087      	sub	sp, #28
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800764e:	2300      	movs	r3, #0
 8007650:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	785b      	ldrb	r3, [r3, #1]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d14a      	bne.n	80076f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800767a:	f040 8086 	bne.w	800778a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	7812      	ldrb	r2, [r2, #0]
 8007692:	0151      	lsls	r1, r2, #5
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	440a      	add	r2, r1
 8007698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800769c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	7812      	ldrb	r2, [r2, #0]
 80076b6:	0151      	lsls	r1, r2, #5
 80076b8:	693a      	ldr	r2, [r7, #16]
 80076ba:	440a      	add	r2, r1
 80076bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	3301      	adds	r3, #1
 80076ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d902      	bls.n	80076dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	75fb      	strb	r3, [r7, #23]
          break;
 80076da:	e056      	b.n	800778a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076f4:	d0e7      	beq.n	80076c6 <USB_EPStopXfer+0x82>
 80076f6:	e048      	b.n	800778a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	4413      	add	r3, r2
 8007702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800770c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007710:	d13b      	bne.n	800778a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	7812      	ldrb	r2, [r2, #0]
 8007726:	0151      	lsls	r1, r2, #5
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	440a      	add	r2, r1
 800772c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007730:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007734:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	015a      	lsls	r2, r3, #5
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	4413      	add	r3, r2
 8007740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	7812      	ldrb	r2, [r2, #0]
 800774a:	0151      	lsls	r1, r2, #5
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	440a      	add	r2, r1
 8007750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007754:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007758:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	3301      	adds	r3, #1
 800775e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f242 7210 	movw	r2, #10000	; 0x2710
 8007766:	4293      	cmp	r3, r2
 8007768:	d902      	bls.n	8007770 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	75fb      	strb	r3, [r7, #23]
          break;
 800776e:	e00c      	b.n	800778a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	4413      	add	r3, r2
 800777a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007788:	d0e7      	beq.n	800775a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800778a:	7dfb      	ldrb	r3, [r7, #23]
}
 800778c:	4618      	mov	r0, r3
 800778e:	371c      	adds	r7, #28
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007798:	b480      	push	{r7}
 800779a:	b089      	sub	sp, #36	; 0x24
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	4611      	mov	r1, r2
 80077a4:	461a      	mov	r2, r3
 80077a6:	460b      	mov	r3, r1
 80077a8:	71fb      	strb	r3, [r7, #7]
 80077aa:	4613      	mov	r3, r2
 80077ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80077b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d123      	bne.n	8007806 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80077be:	88bb      	ldrh	r3, [r7, #4]
 80077c0:	3303      	adds	r3, #3
 80077c2:	089b      	lsrs	r3, r3, #2
 80077c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80077c6:	2300      	movs	r3, #0
 80077c8:	61bb      	str	r3, [r7, #24]
 80077ca:	e018      	b.n	80077fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80077cc:	79fb      	ldrb	r3, [r7, #7]
 80077ce:	031a      	lsls	r2, r3, #12
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077d8:	461a      	mov	r2, r3
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	3301      	adds	r3, #1
 80077e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	3301      	adds	r3, #1
 80077ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	3301      	adds	r3, #1
 80077f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	3301      	adds	r3, #1
 80077f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	3301      	adds	r3, #1
 80077fc:	61bb      	str	r3, [r7, #24]
 80077fe:	69ba      	ldr	r2, [r7, #24]
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	429a      	cmp	r2, r3
 8007804:	d3e2      	bcc.n	80077cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3724      	adds	r7, #36	; 0x24
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007814:	b480      	push	{r7}
 8007816:	b08b      	sub	sp, #44	; 0x2c
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	4613      	mov	r3, r2
 8007820:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800782a:	88fb      	ldrh	r3, [r7, #6]
 800782c:	089b      	lsrs	r3, r3, #2
 800782e:	b29b      	uxth	r3, r3
 8007830:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007832:	88fb      	ldrh	r3, [r7, #6]
 8007834:	f003 0303 	and.w	r3, r3, #3
 8007838:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800783a:	2300      	movs	r3, #0
 800783c:	623b      	str	r3, [r7, #32]
 800783e:	e014      	b.n	800786a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	601a      	str	r2, [r3, #0]
    pDest++;
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	3301      	adds	r3, #1
 8007850:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007854:	3301      	adds	r3, #1
 8007856:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	3301      	adds	r3, #1
 800785c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	3301      	adds	r3, #1
 8007862:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	3301      	adds	r3, #1
 8007868:	623b      	str	r3, [r7, #32]
 800786a:	6a3a      	ldr	r2, [r7, #32]
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	429a      	cmp	r2, r3
 8007870:	d3e6      	bcc.n	8007840 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007872:	8bfb      	ldrh	r3, [r7, #30]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d01e      	beq.n	80078b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007882:	461a      	mov	r2, r3
 8007884:	f107 0310 	add.w	r3, r7, #16
 8007888:	6812      	ldr	r2, [r2, #0]
 800788a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	6a3b      	ldr	r3, [r7, #32]
 8007890:	b2db      	uxtb	r3, r3
 8007892:	00db      	lsls	r3, r3, #3
 8007894:	fa22 f303 	lsr.w	r3, r2, r3
 8007898:	b2da      	uxtb	r2, r3
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	701a      	strb	r2, [r3, #0]
      i++;
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	3301      	adds	r3, #1
 80078a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	3301      	adds	r3, #1
 80078a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80078aa:	8bfb      	ldrh	r3, [r7, #30]
 80078ac:	3b01      	subs	r3, #1
 80078ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80078b0:	8bfb      	ldrh	r3, [r7, #30]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1ea      	bne.n	800788c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	372c      	adds	r7, #44	; 0x2c
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	785b      	ldrb	r3, [r3, #1]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d12c      	bne.n	800793a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	015a      	lsls	r2, r3, #5
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	db12      	blt.n	8007918 <USB_EPSetStall+0x54>
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00f      	beq.n	8007918 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	015a      	lsls	r2, r3, #5
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4413      	add	r3, r2
 8007900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	0151      	lsls	r1, r2, #5
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	440a      	add	r2, r1
 800790e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007912:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007916:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	0151      	lsls	r1, r2, #5
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	440a      	add	r2, r1
 800792e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007932:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007936:	6013      	str	r3, [r2, #0]
 8007938:	e02b      	b.n	8007992 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	db12      	blt.n	8007972 <USB_EPSetStall+0xae>
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00f      	beq.n	8007972 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	0151      	lsls	r1, r2, #5
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	440a      	add	r2, r1
 8007968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800796c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007970:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4413      	add	r3, r2
 800797a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	0151      	lsls	r1, r2, #5
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	440a      	add	r2, r1
 8007988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800798c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007990:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	785b      	ldrb	r3, [r3, #1]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d128      	bne.n	8007a0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	0151      	lsls	r1, r2, #5
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	440a      	add	r2, r1
 80079d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	791b      	ldrb	r3, [r3, #4]
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d003      	beq.n	80079ec <USB_EPClearStall+0x4c>
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	791b      	ldrb	r3, [r3, #4]
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d138      	bne.n	8007a5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	0151      	lsls	r1, r2, #5
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	440a      	add	r2, r1
 8007a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a0a:	6013      	str	r3, [r2, #0]
 8007a0c:	e027      	b.n	8007a5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	015a      	lsls	r2, r3, #5
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	4413      	add	r3, r2
 8007a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	0151      	lsls	r1, r2, #5
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	440a      	add	r2, r1
 8007a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	791b      	ldrb	r3, [r3, #4]
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d003      	beq.n	8007a3e <USB_EPClearStall+0x9e>
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	791b      	ldrb	r3, [r3, #4]
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d10f      	bne.n	8007a5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	015a      	lsls	r2, r3, #5
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	4413      	add	r3, r2
 8007a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	0151      	lsls	r1, r2, #5
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	440a      	add	r2, r1
 8007a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	460b      	mov	r3, r1
 8007a76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007a8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	78fb      	ldrb	r3, [r7, #3]
 8007a9a:	011b      	lsls	r3, r3, #4
 8007a9c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007aa0:	68f9      	ldr	r1, [r7, #12]
 8007aa2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3714      	adds	r7, #20
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ad2:	f023 0303 	bic.w	r3, r3, #3
 8007ad6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ae6:	f023 0302 	bic.w	r3, r3, #2
 8007aea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b085      	sub	sp, #20
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b14:	f023 0303 	bic.w	r3, r3, #3
 8007b18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b28:	f043 0302 	orr.w	r3, r3, #2
 8007b2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	4013      	ands	r3, r2
 8007b52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b54:	68fb      	ldr	r3, [r7, #12]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b085      	sub	sp, #20
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b7e:	69db      	ldr	r3, [r3, #28]
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	4013      	ands	r3, r2
 8007b84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	0c1b      	lsrs	r3, r3, #16
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b085      	sub	sp, #20
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb2:	69db      	ldr	r3, [r3, #28]
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	b29b      	uxth	r3, r3
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3714      	adds	r7, #20
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b085      	sub	sp, #20
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007bda:	78fb      	ldrb	r3, [r7, #3]
 8007bdc:	015a      	lsls	r2, r3, #5
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007bf8:	68bb      	ldr	r3, [r7, #8]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b087      	sub	sp, #28
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	460b      	mov	r3, r1
 8007c10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007c2a:	78fb      	ldrb	r3, [r7, #3]
 8007c2c:	f003 030f 	and.w	r3, r3, #15
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	fa22 f303 	lsr.w	r3, r2, r3
 8007c36:	01db      	lsls	r3, r3, #7
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007c40:	78fb      	ldrb	r3, [r7, #3]
 8007c42:	015a      	lsls	r2, r3, #5
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	4013      	ands	r3, r2
 8007c52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c54:	68bb      	ldr	r3, [r7, #8]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	371c      	adds	r7, #28
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b083      	sub	sp, #12
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	f003 0301 	and.w	r3, r3, #1
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	370c      	adds	r7, #12
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
	...

08007c80 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	4b09      	ldr	r3, [pc, #36]	; (8007cc4 <USB_ActivateSetup+0x44>)
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	fffff800 	.word	0xfffff800

08007cc8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b087      	sub	sp, #28
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	607a      	str	r2, [r7, #4]
 8007cd4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	333c      	adds	r3, #60	; 0x3c
 8007cde:	3304      	adds	r3, #4
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	4a26      	ldr	r2, [pc, #152]	; (8007d80 <USB_EP0_OutStart+0xb8>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d90a      	bls.n	8007d02 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cfc:	d101      	bne.n	8007d02 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	e037      	b.n	8007d72 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d08:	461a      	mov	r2, r3
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d30:	f043 0318 	orr.w	r3, r3, #24
 8007d34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d44:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007d48:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007d4a:	7afb      	ldrb	r3, [r7, #11]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d10f      	bne.n	8007d70 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d56:	461a      	mov	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d6a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007d6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	371c      	adds	r7, #28
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	4f54300a 	.word	0x4f54300a

08007d84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	3301      	adds	r3, #1
 8007d94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	4a13      	ldr	r2, [pc, #76]	; (8007de8 <USB_CoreReset+0x64>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d901      	bls.n	8007da2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e01b      	b.n	8007dda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	daf2      	bge.n	8007d90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007daa:	2300      	movs	r3, #0
 8007dac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	f043 0201 	orr.w	r2, r3, #1
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	4a09      	ldr	r2, [pc, #36]	; (8007de8 <USB_CoreReset+0x64>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d901      	bls.n	8007dcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e006      	b.n	8007dda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	f003 0301 	and.w	r3, r3, #1
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d0f0      	beq.n	8007dba <USB_CoreReset+0x36>

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	00030d40 	.word	0x00030d40

08007dec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007df8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007dfc:	f002 fdb4 	bl	800a968 <USBD_static_malloc>
 8007e00:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d109      	bne.n	8007e1c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	32b0      	adds	r2, #176	; 0xb0
 8007e12:	2100      	movs	r1, #0
 8007e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007e18:	2302      	movs	r3, #2
 8007e1a:	e0d4      	b.n	8007fc6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007e1c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007e20:	2100      	movs	r1, #0
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f003 fc3a 	bl	800b69c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	32b0      	adds	r2, #176	; 0xb0
 8007e32:	68f9      	ldr	r1, [r7, #12]
 8007e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	32b0      	adds	r2, #176	; 0xb0
 8007e42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	7c1b      	ldrb	r3, [r3, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d138      	bne.n	8007ec6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007e54:	4b5e      	ldr	r3, [pc, #376]	; (8007fd0 <USBD_CDC_Init+0x1e4>)
 8007e56:	7819      	ldrb	r1, [r3, #0]
 8007e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e5c:	2202      	movs	r2, #2
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f002 fc5f 	bl	800a722 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007e64:	4b5a      	ldr	r3, [pc, #360]	; (8007fd0 <USBD_CDC_Init+0x1e4>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	f003 020f 	and.w	r2, r3, #15
 8007e6c:	6879      	ldr	r1, [r7, #4]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	440b      	add	r3, r1
 8007e78:	3324      	adds	r3, #36	; 0x24
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007e7e:	4b55      	ldr	r3, [pc, #340]	; (8007fd4 <USBD_CDC_Init+0x1e8>)
 8007e80:	7819      	ldrb	r1, [r3, #0]
 8007e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e86:	2202      	movs	r2, #2
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f002 fc4a 	bl	800a722 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007e8e:	4b51      	ldr	r3, [pc, #324]	; (8007fd4 <USBD_CDC_Init+0x1e8>)
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	f003 020f 	and.w	r2, r3, #15
 8007e96:	6879      	ldr	r1, [r7, #4]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	4413      	add	r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	440b      	add	r3, r1
 8007ea2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007eaa:	4b4b      	ldr	r3, [pc, #300]	; (8007fd8 <USBD_CDC_Init+0x1ec>)
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	f003 020f 	and.w	r2, r3, #15
 8007eb2:	6879      	ldr	r1, [r7, #4]
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	440b      	add	r3, r1
 8007ebe:	3326      	adds	r3, #38	; 0x26
 8007ec0:	2210      	movs	r2, #16
 8007ec2:	801a      	strh	r2, [r3, #0]
 8007ec4:	e035      	b.n	8007f32 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007ec6:	4b42      	ldr	r3, [pc, #264]	; (8007fd0 <USBD_CDC_Init+0x1e4>)
 8007ec8:	7819      	ldrb	r1, [r3, #0]
 8007eca:	2340      	movs	r3, #64	; 0x40
 8007ecc:	2202      	movs	r2, #2
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f002 fc27 	bl	800a722 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007ed4:	4b3e      	ldr	r3, [pc, #248]	; (8007fd0 <USBD_CDC_Init+0x1e4>)
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	f003 020f 	and.w	r2, r3, #15
 8007edc:	6879      	ldr	r1, [r7, #4]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	440b      	add	r3, r1
 8007ee8:	3324      	adds	r3, #36	; 0x24
 8007eea:	2201      	movs	r2, #1
 8007eec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007eee:	4b39      	ldr	r3, [pc, #228]	; (8007fd4 <USBD_CDC_Init+0x1e8>)
 8007ef0:	7819      	ldrb	r1, [r3, #0]
 8007ef2:	2340      	movs	r3, #64	; 0x40
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f002 fc13 	bl	800a722 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007efc:	4b35      	ldr	r3, [pc, #212]	; (8007fd4 <USBD_CDC_Init+0x1e8>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	f003 020f 	and.w	r2, r3, #15
 8007f04:	6879      	ldr	r1, [r7, #4]
 8007f06:	4613      	mov	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	4413      	add	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	440b      	add	r3, r1
 8007f10:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f14:	2201      	movs	r2, #1
 8007f16:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007f18:	4b2f      	ldr	r3, [pc, #188]	; (8007fd8 <USBD_CDC_Init+0x1ec>)
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	f003 020f 	and.w	r2, r3, #15
 8007f20:	6879      	ldr	r1, [r7, #4]
 8007f22:	4613      	mov	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	440b      	add	r3, r1
 8007f2c:	3326      	adds	r3, #38	; 0x26
 8007f2e:	2210      	movs	r2, #16
 8007f30:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f32:	4b29      	ldr	r3, [pc, #164]	; (8007fd8 <USBD_CDC_Init+0x1ec>)
 8007f34:	7819      	ldrb	r1, [r3, #0]
 8007f36:	2308      	movs	r3, #8
 8007f38:	2203      	movs	r2, #3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f002 fbf1 	bl	800a722 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007f40:	4b25      	ldr	r3, [pc, #148]	; (8007fd8 <USBD_CDC_Init+0x1ec>)
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	f003 020f 	and.w	r2, r3, #15
 8007f48:	6879      	ldr	r1, [r7, #4]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	440b      	add	r3, r1
 8007f54:	3324      	adds	r3, #36	; 0x24
 8007f56:	2201      	movs	r2, #1
 8007f58:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	33b0      	adds	r3, #176	; 0xb0
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007f90:	2302      	movs	r3, #2
 8007f92:	e018      	b.n	8007fc6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	7c1b      	ldrb	r3, [r3, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10a      	bne.n	8007fb2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f9c:	4b0d      	ldr	r3, [pc, #52]	; (8007fd4 <USBD_CDC_Init+0x1e8>)
 8007f9e:	7819      	ldrb	r1, [r3, #0]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f002 fca8 	bl	800a900 <USBD_LL_PrepareReceive>
 8007fb0:	e008      	b.n	8007fc4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007fb2:	4b08      	ldr	r3, [pc, #32]	; (8007fd4 <USBD_CDC_Init+0x1e8>)
 8007fb4:	7819      	ldrb	r1, [r3, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fbc:	2340      	movs	r3, #64	; 0x40
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f002 fc9e 	bl	800a900 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	240000af 	.word	0x240000af
 8007fd4:	240000b0 	.word	0x240000b0
 8007fd8:	240000b1 	.word	0x240000b1

08007fdc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007fe8:	4b3a      	ldr	r3, [pc, #232]	; (80080d4 <USBD_CDC_DeInit+0xf8>)
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	4619      	mov	r1, r3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f002 fbbd 	bl	800a76e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007ff4:	4b37      	ldr	r3, [pc, #220]	; (80080d4 <USBD_CDC_DeInit+0xf8>)
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	f003 020f 	and.w	r2, r3, #15
 8007ffc:	6879      	ldr	r1, [r7, #4]
 8007ffe:	4613      	mov	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	440b      	add	r3, r1
 8008008:	3324      	adds	r3, #36	; 0x24
 800800a:	2200      	movs	r2, #0
 800800c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800800e:	4b32      	ldr	r3, [pc, #200]	; (80080d8 <USBD_CDC_DeInit+0xfc>)
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f002 fbaa 	bl	800a76e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800801a:	4b2f      	ldr	r3, [pc, #188]	; (80080d8 <USBD_CDC_DeInit+0xfc>)
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	f003 020f 	and.w	r2, r3, #15
 8008022:	6879      	ldr	r1, [r7, #4]
 8008024:	4613      	mov	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	440b      	add	r3, r1
 800802e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008032:	2200      	movs	r2, #0
 8008034:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008036:	4b29      	ldr	r3, [pc, #164]	; (80080dc <USBD_CDC_DeInit+0x100>)
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f002 fb96 	bl	800a76e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008042:	4b26      	ldr	r3, [pc, #152]	; (80080dc <USBD_CDC_DeInit+0x100>)
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	f003 020f 	and.w	r2, r3, #15
 800804a:	6879      	ldr	r1, [r7, #4]
 800804c:	4613      	mov	r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4413      	add	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	440b      	add	r3, r1
 8008056:	3324      	adds	r3, #36	; 0x24
 8008058:	2200      	movs	r2, #0
 800805a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800805c:	4b1f      	ldr	r3, [pc, #124]	; (80080dc <USBD_CDC_DeInit+0x100>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	f003 020f 	and.w	r2, r3, #15
 8008064:	6879      	ldr	r1, [r7, #4]
 8008066:	4613      	mov	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	440b      	add	r3, r1
 8008070:	3326      	adds	r3, #38	; 0x26
 8008072:	2200      	movs	r2, #0
 8008074:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	32b0      	adds	r2, #176	; 0xb0
 8008080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d01f      	beq.n	80080c8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	33b0      	adds	r3, #176	; 0xb0
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	32b0      	adds	r2, #176	; 0xb0
 80080a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f002 fc6a 	bl	800a984 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	32b0      	adds	r2, #176	; 0xb0
 80080ba:	2100      	movs	r1, #0
 80080bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	240000af 	.word	0x240000af
 80080d8:	240000b0 	.word	0x240000b0
 80080dc:	240000b1 	.word	0x240000b1

080080e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	32b0      	adds	r2, #176	; 0xb0
 80080f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80080fa:	2300      	movs	r3, #0
 80080fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80080fe:	2300      	movs	r3, #0
 8008100:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800810c:	2303      	movs	r3, #3
 800810e:	e0bf      	b.n	8008290 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008118:	2b00      	cmp	r3, #0
 800811a:	d050      	beq.n	80081be <USBD_CDC_Setup+0xde>
 800811c:	2b20      	cmp	r3, #32
 800811e:	f040 80af 	bne.w	8008280 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	88db      	ldrh	r3, [r3, #6]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d03a      	beq.n	80081a0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	b25b      	sxtb	r3, r3
 8008130:	2b00      	cmp	r3, #0
 8008132:	da1b      	bge.n	800816c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	33b0      	adds	r3, #176	; 0xb0
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800814a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	88d2      	ldrh	r2, [r2, #6]
 8008150:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	88db      	ldrh	r3, [r3, #6]
 8008156:	2b07      	cmp	r3, #7
 8008158:	bf28      	it	cs
 800815a:	2307      	movcs	r3, #7
 800815c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	89fa      	ldrh	r2, [r7, #14]
 8008162:	4619      	mov	r1, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f001 fdcf 	bl	8009d08 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800816a:	e090      	b.n	800828e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	785a      	ldrb	r2, [r3, #1]
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	88db      	ldrh	r3, [r3, #6]
 800817a:	2b3f      	cmp	r3, #63	; 0x3f
 800817c:	d803      	bhi.n	8008186 <USBD_CDC_Setup+0xa6>
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	88db      	ldrh	r3, [r3, #6]
 8008182:	b2da      	uxtb	r2, r3
 8008184:	e000      	b.n	8008188 <USBD_CDC_Setup+0xa8>
 8008186:	2240      	movs	r2, #64	; 0x40
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800818e:	6939      	ldr	r1, [r7, #16]
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008196:	461a      	mov	r2, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 fde1 	bl	8009d60 <USBD_CtlPrepareRx>
      break;
 800819e:	e076      	b.n	800828e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	33b0      	adds	r3, #176	; 0xb0
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	7850      	ldrb	r0, [r2, #1]
 80081b6:	2200      	movs	r2, #0
 80081b8:	6839      	ldr	r1, [r7, #0]
 80081ba:	4798      	blx	r3
      break;
 80081bc:	e067      	b.n	800828e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	785b      	ldrb	r3, [r3, #1]
 80081c2:	2b0b      	cmp	r3, #11
 80081c4:	d851      	bhi.n	800826a <USBD_CDC_Setup+0x18a>
 80081c6:	a201      	add	r2, pc, #4	; (adr r2, 80081cc <USBD_CDC_Setup+0xec>)
 80081c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081cc:	080081fd 	.word	0x080081fd
 80081d0:	08008279 	.word	0x08008279
 80081d4:	0800826b 	.word	0x0800826b
 80081d8:	0800826b 	.word	0x0800826b
 80081dc:	0800826b 	.word	0x0800826b
 80081e0:	0800826b 	.word	0x0800826b
 80081e4:	0800826b 	.word	0x0800826b
 80081e8:	0800826b 	.word	0x0800826b
 80081ec:	0800826b 	.word	0x0800826b
 80081f0:	0800826b 	.word	0x0800826b
 80081f4:	08008227 	.word	0x08008227
 80081f8:	08008251 	.word	0x08008251
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b03      	cmp	r3, #3
 8008206:	d107      	bne.n	8008218 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008208:	f107 030a 	add.w	r3, r7, #10
 800820c:	2202      	movs	r2, #2
 800820e:	4619      	mov	r1, r3
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f001 fd79 	bl	8009d08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008216:	e032      	b.n	800827e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008218:	6839      	ldr	r1, [r7, #0]
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f001 fd03 	bl	8009c26 <USBD_CtlError>
            ret = USBD_FAIL;
 8008220:	2303      	movs	r3, #3
 8008222:	75fb      	strb	r3, [r7, #23]
          break;
 8008224:	e02b      	b.n	800827e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b03      	cmp	r3, #3
 8008230:	d107      	bne.n	8008242 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008232:	f107 030d 	add.w	r3, r7, #13
 8008236:	2201      	movs	r2, #1
 8008238:	4619      	mov	r1, r3
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f001 fd64 	bl	8009d08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008240:	e01d      	b.n	800827e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008242:	6839      	ldr	r1, [r7, #0]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f001 fcee 	bl	8009c26 <USBD_CtlError>
            ret = USBD_FAIL;
 800824a:	2303      	movs	r3, #3
 800824c:	75fb      	strb	r3, [r7, #23]
          break;
 800824e:	e016      	b.n	800827e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b03      	cmp	r3, #3
 800825a:	d00f      	beq.n	800827c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f001 fce1 	bl	8009c26 <USBD_CtlError>
            ret = USBD_FAIL;
 8008264:	2303      	movs	r3, #3
 8008266:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008268:	e008      	b.n	800827c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f001 fcda 	bl	8009c26 <USBD_CtlError>
          ret = USBD_FAIL;
 8008272:	2303      	movs	r3, #3
 8008274:	75fb      	strb	r3, [r7, #23]
          break;
 8008276:	e002      	b.n	800827e <USBD_CDC_Setup+0x19e>
          break;
 8008278:	bf00      	nop
 800827a:	e008      	b.n	800828e <USBD_CDC_Setup+0x1ae>
          break;
 800827c:	bf00      	nop
      }
      break;
 800827e:	e006      	b.n	800828e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f001 fccf 	bl	8009c26 <USBD_CtlError>
      ret = USBD_FAIL;
 8008288:	2303      	movs	r3, #3
 800828a:	75fb      	strb	r3, [r7, #23]
      break;
 800828c:	bf00      	nop
  }

  return (uint8_t)ret;
 800828e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3718      	adds	r7, #24
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	460b      	mov	r3, r1
 80082a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80082aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	32b0      	adds	r2, #176	; 0xb0
 80082b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d101      	bne.n	80082c2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80082be:	2303      	movs	r3, #3
 80082c0:	e065      	b.n	800838e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	32b0      	adds	r2, #176	; 0xb0
 80082cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80082d2:	78fb      	ldrb	r3, [r7, #3]
 80082d4:	f003 020f 	and.w	r2, r3, #15
 80082d8:	6879      	ldr	r1, [r7, #4]
 80082da:	4613      	mov	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	440b      	add	r3, r1
 80082e4:	3318      	adds	r3, #24
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d02f      	beq.n	800834c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80082ec:	78fb      	ldrb	r3, [r7, #3]
 80082ee:	f003 020f 	and.w	r2, r3, #15
 80082f2:	6879      	ldr	r1, [r7, #4]
 80082f4:	4613      	mov	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4413      	add	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	440b      	add	r3, r1
 80082fe:	3318      	adds	r3, #24
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	78fb      	ldrb	r3, [r7, #3]
 8008304:	f003 010f 	and.w	r1, r3, #15
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	460b      	mov	r3, r1
 800830c:	00db      	lsls	r3, r3, #3
 800830e:	440b      	add	r3, r1
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4403      	add	r3, r0
 8008314:	3344      	adds	r3, #68	; 0x44
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	fbb2 f1f3 	udiv	r1, r2, r3
 800831c:	fb01 f303 	mul.w	r3, r1, r3
 8008320:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008322:	2b00      	cmp	r3, #0
 8008324:	d112      	bne.n	800834c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008326:	78fb      	ldrb	r3, [r7, #3]
 8008328:	f003 020f 	and.w	r2, r3, #15
 800832c:	6879      	ldr	r1, [r7, #4]
 800832e:	4613      	mov	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	440b      	add	r3, r1
 8008338:	3318      	adds	r3, #24
 800833a:	2200      	movs	r2, #0
 800833c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800833e:	78f9      	ldrb	r1, [r7, #3]
 8008340:	2300      	movs	r3, #0
 8008342:	2200      	movs	r2, #0
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f002 faba 	bl	800a8be <USBD_LL_Transmit>
 800834a:	e01f      	b.n	800838c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	2200      	movs	r2, #0
 8008350:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	33b0      	adds	r3, #176	; 0xb0
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4413      	add	r3, r2
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d010      	beq.n	800838c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	33b0      	adds	r3, #176	; 0xb0
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008388:	78fa      	ldrb	r2, [r7, #3]
 800838a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	460b      	mov	r3, r1
 80083a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	32b0      	adds	r2, #176	; 0xb0
 80083ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	32b0      	adds	r2, #176	; 0xb0
 80083bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d101      	bne.n	80083c8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e01a      	b.n	80083fe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80083c8:	78fb      	ldrb	r3, [r7, #3]
 80083ca:	4619      	mov	r1, r3
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f002 fab8 	bl	800a942 <USBD_LL_GetRxDataSize>
 80083d2:	4602      	mov	r2, r0
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	33b0      	adds	r3, #176	; 0xb0
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4413      	add	r3, r2
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80083f8:	4611      	mov	r1, r2
 80083fa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b084      	sub	sp, #16
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	32b0      	adds	r2, #176	; 0xb0
 8008418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d101      	bne.n	8008428 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008424:	2303      	movs	r3, #3
 8008426:	e025      	b.n	8008474 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	33b0      	adds	r3, #176	; 0xb0
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d01a      	beq.n	8008472 <USBD_CDC_EP0_RxReady+0x6c>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008442:	2bff      	cmp	r3, #255	; 0xff
 8008444:	d015      	beq.n	8008472 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	33b0      	adds	r3, #176	; 0xb0
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800845e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008466:	b292      	uxth	r2, r2
 8008468:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	22ff      	movs	r2, #255	; 0xff
 800846e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008484:	2182      	movs	r1, #130	; 0x82
 8008486:	4818      	ldr	r0, [pc, #96]	; (80084e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008488:	f000 fd6b 	bl	8008f62 <USBD_GetEpDesc>
 800848c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800848e:	2101      	movs	r1, #1
 8008490:	4815      	ldr	r0, [pc, #84]	; (80084e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008492:	f000 fd66 	bl	8008f62 <USBD_GetEpDesc>
 8008496:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008498:	2181      	movs	r1, #129	; 0x81
 800849a:	4813      	ldr	r0, [pc, #76]	; (80084e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800849c:	f000 fd61 	bl	8008f62 <USBD_GetEpDesc>
 80084a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d002      	beq.n	80084ae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	2210      	movs	r2, #16
 80084ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d006      	beq.n	80084c2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084bc:	711a      	strb	r2, [r3, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d006      	beq.n	80084d6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084d0:	711a      	strb	r2, [r3, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2243      	movs	r2, #67	; 0x43
 80084da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80084dc:	4b02      	ldr	r3, [pc, #8]	; (80084e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3718      	adds	r7, #24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	2400006c 	.word	0x2400006c

080084ec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80084f4:	2182      	movs	r1, #130	; 0x82
 80084f6:	4818      	ldr	r0, [pc, #96]	; (8008558 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80084f8:	f000 fd33 	bl	8008f62 <USBD_GetEpDesc>
 80084fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80084fe:	2101      	movs	r1, #1
 8008500:	4815      	ldr	r0, [pc, #84]	; (8008558 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008502:	f000 fd2e 	bl	8008f62 <USBD_GetEpDesc>
 8008506:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008508:	2181      	movs	r1, #129	; 0x81
 800850a:	4813      	ldr	r0, [pc, #76]	; (8008558 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800850c:	f000 fd29 	bl	8008f62 <USBD_GetEpDesc>
 8008510:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	2210      	movs	r2, #16
 800851c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d006      	beq.n	8008532 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	2200      	movs	r2, #0
 8008528:	711a      	strb	r2, [r3, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	f042 0202 	orr.w	r2, r2, #2
 8008530:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d006      	beq.n	8008546 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	711a      	strb	r2, [r3, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	f042 0202 	orr.w	r2, r2, #2
 8008544:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2243      	movs	r2, #67	; 0x43
 800854a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800854c:	4b02      	ldr	r3, [pc, #8]	; (8008558 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800854e:	4618      	mov	r0, r3
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	2400006c 	.word	0x2400006c

0800855c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008564:	2182      	movs	r1, #130	; 0x82
 8008566:	4818      	ldr	r0, [pc, #96]	; (80085c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008568:	f000 fcfb 	bl	8008f62 <USBD_GetEpDesc>
 800856c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800856e:	2101      	movs	r1, #1
 8008570:	4815      	ldr	r0, [pc, #84]	; (80085c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008572:	f000 fcf6 	bl	8008f62 <USBD_GetEpDesc>
 8008576:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008578:	2181      	movs	r1, #129	; 0x81
 800857a:	4813      	ldr	r0, [pc, #76]	; (80085c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800857c:	f000 fcf1 	bl	8008f62 <USBD_GetEpDesc>
 8008580:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d002      	beq.n	800858e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	2210      	movs	r2, #16
 800858c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d006      	beq.n	80085a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	2200      	movs	r2, #0
 8008598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800859c:	711a      	strb	r2, [r3, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d006      	beq.n	80085b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085b0:	711a      	strb	r2, [r3, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2243      	movs	r2, #67	; 0x43
 80085ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80085bc:	4b02      	ldr	r3, [pc, #8]	; (80085c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3718      	adds	r7, #24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	2400006c 	.word	0x2400006c

080085cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	220a      	movs	r2, #10
 80085d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80085da:	4b03      	ldr	r3, [pc, #12]	; (80085e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80085dc:	4618      	mov	r0, r3
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr
 80085e8:	24000028 	.word	0x24000028

080085ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e009      	b.n	8008614 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	33b0      	adds	r3, #176	; 0xb0
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	4413      	add	r3, r2
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008620:	b480      	push	{r7}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	32b0      	adds	r2, #176	; 0xb0
 8008636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800863a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008642:	2303      	movs	r3, #3
 8008644:	e008      	b.n	8008658 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	371c      	adds	r7, #28
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	32b0      	adds	r2, #176	; 0xb0
 8008678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800867c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d101      	bne.n	8008688 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008684:	2303      	movs	r3, #3
 8008686:	e004      	b.n	8008692 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
	...

080086a0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	32b0      	adds	r2, #176	; 0xb0
 80086b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80086b8:	2301      	movs	r3, #1
 80086ba:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d101      	bne.n	80086c6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e025      	b.n	8008712 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d11f      	bne.n	8008710 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80086d8:	4b10      	ldr	r3, [pc, #64]	; (800871c <USBD_CDC_TransmitPacket+0x7c>)
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	f003 020f 	and.w	r2, r3, #15
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	4613      	mov	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	4403      	add	r3, r0
 80086f2:	3318      	adds	r3, #24
 80086f4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80086f6:	4b09      	ldr	r3, [pc, #36]	; (800871c <USBD_CDC_TransmitPacket+0x7c>)
 80086f8:	7819      	ldrb	r1, [r3, #0]
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f002 f8d9 	bl	800a8be <USBD_LL_Transmit>

    ret = USBD_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008710:	7bfb      	ldrb	r3, [r7, #15]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	240000af 	.word	0x240000af

08008720 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	32b0      	adds	r2, #176	; 0xb0
 8008732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008736:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	32b0      	adds	r2, #176	; 0xb0
 8008742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d101      	bne.n	800874e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800874a:	2303      	movs	r3, #3
 800874c:	e018      	b.n	8008780 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	7c1b      	ldrb	r3, [r3, #16]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10a      	bne.n	800876c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008756:	4b0c      	ldr	r3, [pc, #48]	; (8008788 <USBD_CDC_ReceivePacket+0x68>)
 8008758:	7819      	ldrb	r1, [r3, #0]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f002 f8cb 	bl	800a900 <USBD_LL_PrepareReceive>
 800876a:	e008      	b.n	800877e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800876c:	4b06      	ldr	r3, [pc, #24]	; (8008788 <USBD_CDC_ReceivePacket+0x68>)
 800876e:	7819      	ldrb	r1, [r3, #0]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008776:	2340      	movs	r3, #64	; 0x40
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f002 f8c1 	bl	800a900 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	240000b0 	.word	0x240000b0

0800878c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	4613      	mov	r3, r2
 8008798:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10a      	bne.n	80087b6 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 80087a0:	4817      	ldr	r0, [pc, #92]	; (8008800 <USBD_Init+0x74>)
 80087a2:	f002 fe21 	bl	800b3e8 <iprintf>
 80087a6:	4817      	ldr	r0, [pc, #92]	; (8008804 <USBD_Init+0x78>)
 80087a8:	f002 fe1e 	bl	800b3e8 <iprintf>
 80087ac:	200a      	movs	r0, #10
 80087ae:	f002 fe2d 	bl	800b40c <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80087b2:	2303      	movs	r3, #3
 80087b4:	e01f      	b.n	80087f6 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d003      	beq.n	80087dc <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	79fa      	ldrb	r2, [r7, #7]
 80087e8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f001 ff2c 	bl	800a648 <USBD_LL_Init>
 80087f0:	4603      	mov	r3, r0
 80087f2:	75fb      	strb	r3, [r7, #23]

  return ret;
 80087f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3718      	adds	r7, #24
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	0800d484 	.word	0x0800d484
 8008804:	0800d48c 	.word	0x0800d48c

08008808 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008812:	2300      	movs	r3, #0
 8008814:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10a      	bne.n	8008832 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800881c:	481a      	ldr	r0, [pc, #104]	; (8008888 <USBD_RegisterClass+0x80>)
 800881e:	f002 fde3 	bl	800b3e8 <iprintf>
 8008822:	481a      	ldr	r0, [pc, #104]	; (800888c <USBD_RegisterClass+0x84>)
 8008824:	f002 fde0 	bl	800b3e8 <iprintf>
 8008828:	200a      	movs	r0, #10
 800882a:	f002 fdef 	bl	800b40c <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800882e:	2303      	movs	r3, #3
 8008830:	e025      	b.n	800887e <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	32ae      	adds	r2, #174	; 0xae
 8008844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00f      	beq.n	800886e <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	32ae      	adds	r2, #174	; 0xae
 8008858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800885c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885e:	f107 020e 	add.w	r2, r7, #14
 8008862:	4610      	mov	r0, r2
 8008864:	4798      	blx	r3
 8008866:	4602      	mov	r2, r0
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008874:	1c5a      	adds	r2, r3, #1
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	0800d484 	.word	0x0800d484
 800888c:	0800d4a4 	.word	0x0800d4a4

08008890 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f001 ff27 	bl	800a6ec <USBD_LL_Start>
 800889e:	4603      	mov	r3, r0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	370c      	adds	r7, #12
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b084      	sub	sp, #16
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	460b      	mov	r3, r1
 80088c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80088ca:	2300      	movs	r3, #0
 80088cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d009      	beq.n	80088ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	78fa      	ldrb	r2, [r7, #3]
 80088e2:	4611      	mov	r1, r2
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	4798      	blx	r3
 80088e8:	4603      	mov	r3, r0
 80088ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80088ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b084      	sub	sp, #16
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	460b      	mov	r3, r1
 8008900:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	78fa      	ldrb	r2, [r7, #3]
 8008910:	4611      	mov	r1, r2
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	4798      	blx	r3
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800891c:	2303      	movs	r3, #3
 800891e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008920:	7bfb      	ldrb	r3, [r7, #15]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b084      	sub	sp, #16
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	4618      	mov	r0, r3
 800893e:	f001 f938 	bl	8009bb2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2201      	movs	r2, #1
 8008946:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008950:	461a      	mov	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800895e:	f003 031f 	and.w	r3, r3, #31
 8008962:	2b02      	cmp	r3, #2
 8008964:	d01a      	beq.n	800899c <USBD_LL_SetupStage+0x72>
 8008966:	2b02      	cmp	r3, #2
 8008968:	d822      	bhi.n	80089b0 <USBD_LL_SetupStage+0x86>
 800896a:	2b00      	cmp	r3, #0
 800896c:	d002      	beq.n	8008974 <USBD_LL_SetupStage+0x4a>
 800896e:	2b01      	cmp	r3, #1
 8008970:	d00a      	beq.n	8008988 <USBD_LL_SetupStage+0x5e>
 8008972:	e01d      	b.n	80089b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fb65 	bl	800904c <USBD_StdDevReq>
 8008982:	4603      	mov	r3, r0
 8008984:	73fb      	strb	r3, [r7, #15]
      break;
 8008986:	e020      	b.n	80089ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800898e:	4619      	mov	r1, r3
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fbcd 	bl	8009130 <USBD_StdItfReq>
 8008996:	4603      	mov	r3, r0
 8008998:	73fb      	strb	r3, [r7, #15]
      break;
 800899a:	e016      	b.n	80089ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fc2f 	bl	8009208 <USBD_StdEPReq>
 80089aa:	4603      	mov	r3, r0
 80089ac:	73fb      	strb	r3, [r7, #15]
      break;
 80089ae:	e00c      	b.n	80089ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80089b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f001 fef4 	bl	800a7ac <USBD_LL_StallEP>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73fb      	strb	r3, [r7, #15]
      break;
 80089c8:	bf00      	nop
  }

  return ret;
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	460b      	mov	r3, r1
 80089de:	607a      	str	r2, [r7, #4]
 80089e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80089e6:	7afb      	ldrb	r3, [r7, #11]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d16e      	bne.n	8008aca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80089f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	f040 8098 	bne.w	8008b30 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	689a      	ldr	r2, [r3, #8]
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d913      	bls.n	8008a34 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	689a      	ldr	r2, [r3, #8]
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	1ad2      	subs	r2, r2, r3
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	68da      	ldr	r2, [r3, #12]
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	4293      	cmp	r3, r2
 8008a24:	bf28      	it	cs
 8008a26:	4613      	movcs	r3, r2
 8008a28:	461a      	mov	r2, r3
 8008a2a:	6879      	ldr	r1, [r7, #4]
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f001 f9b4 	bl	8009d9a <USBD_CtlContinueRx>
 8008a32:	e07d      	b.n	8008b30 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a3a:	f003 031f 	and.w	r3, r3, #31
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d014      	beq.n	8008a6c <USBD_LL_DataOutStage+0x98>
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d81d      	bhi.n	8008a82 <USBD_LL_DataOutStage+0xae>
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <USBD_LL_DataOutStage+0x7c>
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d003      	beq.n	8008a56 <USBD_LL_DataOutStage+0x82>
 8008a4e:	e018      	b.n	8008a82 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008a50:	2300      	movs	r3, #0
 8008a52:	75bb      	strb	r3, [r7, #22]
            break;
 8008a54:	e018      	b.n	8008a88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	4619      	mov	r1, r3
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f000 fa64 	bl	8008f2e <USBD_CoreFindIF>
 8008a66:	4603      	mov	r3, r0
 8008a68:	75bb      	strb	r3, [r7, #22]
            break;
 8008a6a:	e00d      	b.n	8008a88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	4619      	mov	r1, r3
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f000 fa66 	bl	8008f48 <USBD_CoreFindEP>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	75bb      	strb	r3, [r7, #22]
            break;
 8008a80:	e002      	b.n	8008a88 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	75bb      	strb	r3, [r7, #22]
            break;
 8008a86:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008a88:	7dbb      	ldrb	r3, [r7, #22]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d119      	bne.n	8008ac2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d113      	bne.n	8008ac2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008a9a:	7dba      	ldrb	r2, [r7, #22]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	32ae      	adds	r2, #174	; 0xae
 8008aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00b      	beq.n	8008ac2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008aaa:	7dba      	ldrb	r2, [r7, #22]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008ab2:	7dba      	ldrb	r2, [r7, #22]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	32ae      	adds	r2, #174	; 0xae
 8008ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f001 f97a 	bl	8009dbc <USBD_CtlSendStatus>
 8008ac8:	e032      	b.n	8008b30 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008aca:	7afb      	ldrb	r3, [r7, #11]
 8008acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f000 fa37 	bl	8008f48 <USBD_CoreFindEP>
 8008ada:	4603      	mov	r3, r0
 8008adc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ade:	7dbb      	ldrb	r3, [r7, #22]
 8008ae0:	2bff      	cmp	r3, #255	; 0xff
 8008ae2:	d025      	beq.n	8008b30 <USBD_LL_DataOutStage+0x15c>
 8008ae4:	7dbb      	ldrb	r3, [r7, #22]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d122      	bne.n	8008b30 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d117      	bne.n	8008b26 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008af6:	7dba      	ldrb	r2, [r7, #22]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	32ae      	adds	r2, #174	; 0xae
 8008afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00f      	beq.n	8008b26 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008b06:	7dba      	ldrb	r2, [r7, #22]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008b0e:	7dba      	ldrb	r2, [r7, #22]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	32ae      	adds	r2, #174	; 0xae
 8008b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	7afa      	ldrb	r2, [r7, #11]
 8008b1c:	4611      	mov	r1, r2
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	4798      	blx	r3
 8008b22:	4603      	mov	r3, r0
 8008b24:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008b26:	7dfb      	ldrb	r3, [r7, #23]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d001      	beq.n	8008b30 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008b2c:	7dfb      	ldrb	r3, [r7, #23]
 8008b2e:	e000      	b.n	8008b32 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3718      	adds	r7, #24
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b086      	sub	sp, #24
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	60f8      	str	r0, [r7, #12]
 8008b42:	460b      	mov	r3, r1
 8008b44:	607a      	str	r2, [r7, #4]
 8008b46:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008b48:	7afb      	ldrb	r3, [r7, #11]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d16f      	bne.n	8008c2e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	3314      	adds	r3, #20
 8008b52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d15a      	bne.n	8008c14 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	689a      	ldr	r2, [r3, #8]
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d914      	bls.n	8008b94 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	689a      	ldr	r2, [r3, #8]
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	1ad2      	subs	r2, r2, r3
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	6879      	ldr	r1, [r7, #4]
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f001 f8dc 	bl	8009d3e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b86:	2300      	movs	r3, #0
 8008b88:	2200      	movs	r2, #0
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f001 feb7 	bl	800a900 <USBD_LL_PrepareReceive>
 8008b92:	e03f      	b.n	8008c14 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	68da      	ldr	r2, [r3, #12]
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d11c      	bne.n	8008bda <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	685a      	ldr	r2, [r3, #4]
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d316      	bcc.n	8008bda <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	685a      	ldr	r2, [r3, #4]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d20f      	bcs.n	8008bda <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008bba:	2200      	movs	r2, #0
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f001 f8bd 	bl	8009d3e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bcc:	2300      	movs	r3, #0
 8008bce:	2200      	movs	r2, #0
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f001 fe94 	bl	800a900 <USBD_LL_PrepareReceive>
 8008bd8:	e01c      	b.n	8008c14 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	d10f      	bne.n	8008c06 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d009      	beq.n	8008c06 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c06:	2180      	movs	r1, #128	; 0x80
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f001 fdcf 	bl	800a7ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	f001 f8e7 	bl	8009de2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d03a      	beq.n	8008c94 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f7ff fe42 	bl	80088a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008c2c:	e032      	b.n	8008c94 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008c2e:	7afb      	ldrb	r3, [r7, #11]
 8008c30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	4619      	mov	r1, r3
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f000 f985 	bl	8008f48 <USBD_CoreFindEP>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c42:	7dfb      	ldrb	r3, [r7, #23]
 8008c44:	2bff      	cmp	r3, #255	; 0xff
 8008c46:	d025      	beq.n	8008c94 <USBD_LL_DataInStage+0x15a>
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d122      	bne.n	8008c94 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	2b03      	cmp	r3, #3
 8008c58:	d11c      	bne.n	8008c94 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008c5a:	7dfa      	ldrb	r2, [r7, #23]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	32ae      	adds	r2, #174	; 0xae
 8008c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d014      	beq.n	8008c94 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008c6a:	7dfa      	ldrb	r2, [r7, #23]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008c72:	7dfa      	ldrb	r2, [r7, #23]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	32ae      	adds	r2, #174	; 0xae
 8008c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c7c:	695b      	ldr	r3, [r3, #20]
 8008c7e:	7afa      	ldrb	r2, [r7, #11]
 8008c80:	4611      	mov	r1, r2
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	4798      	blx	r3
 8008c86:	4603      	mov	r3, r0
 8008c88:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008c8a:	7dbb      	ldrb	r3, [r7, #22]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d001      	beq.n	8008c94 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008c90:	7dbb      	ldrb	r3, [r7, #22]
 8008c92:	e000      	b.n	8008c96 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3718      	adds	r7, #24
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b084      	sub	sp, #16
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d014      	beq.n	8008d04 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00e      	beq.n	8008d04 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	6852      	ldr	r2, [r2, #4]
 8008cf2:	b2d2      	uxtb	r2, r2
 8008cf4:	4611      	mov	r1, r2
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	4798      	blx	r3
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d001      	beq.n	8008d04 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008d00:	2303      	movs	r3, #3
 8008d02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d04:	2340      	movs	r3, #64	; 0x40
 8008d06:	2200      	movs	r2, #0
 8008d08:	2100      	movs	r1, #0
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f001 fd09 	bl	800a722 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2240      	movs	r2, #64	; 0x40
 8008d1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d20:	2340      	movs	r3, #64	; 0x40
 8008d22:	2200      	movs	r2, #0
 8008d24:	2180      	movs	r1, #128	; 0x80
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f001 fcfb 	bl	800a722 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2240      	movs	r2, #64	; 0x40
 8008d36:	621a      	str	r2, [r3, #32]

  return ret;
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008d42:	b480      	push	{r7}
 8008d44:	b083      	sub	sp, #12
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	78fa      	ldrb	r2, [r7, #3]
 8008d52:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	370c      	adds	r7, #12
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b083      	sub	sp, #12
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2b04      	cmp	r3, #4
 8008d74:	d006      	beq.n	8008d84 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d7c:	b2da      	uxtb	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2204      	movs	r2, #4
 8008d88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	370c      	adds	r7, #12
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr

08008d9a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b083      	sub	sp, #12
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b04      	cmp	r3, #4
 8008dac:	d106      	bne.n	8008dbc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008db4:	b2da      	uxtb	r2, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b082      	sub	sp, #8
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d110      	bne.n	8008e00 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00b      	beq.n	8008e00 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dee:	69db      	ldr	r3, [r3, #28]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d005      	beq.n	8008e00 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dfa:	69db      	ldr	r3, [r3, #28]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b082      	sub	sp, #8
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	460b      	mov	r3, r1
 8008e14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	32ae      	adds	r2, #174	; 0xae
 8008e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d101      	bne.n	8008e2c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	e01c      	b.n	8008e66 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	2b03      	cmp	r3, #3
 8008e36:	d115      	bne.n	8008e64 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	32ae      	adds	r2, #174	; 0xae
 8008e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e46:	6a1b      	ldr	r3, [r3, #32]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00b      	beq.n	8008e64 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	32ae      	adds	r2, #174	; 0xae
 8008e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e5a:	6a1b      	ldr	r3, [r3, #32]
 8008e5c:	78fa      	ldrb	r2, [r7, #3]
 8008e5e:	4611      	mov	r1, r2
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b082      	sub	sp, #8
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	460b      	mov	r3, r1
 8008e78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	32ae      	adds	r2, #174	; 0xae
 8008e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e01c      	b.n	8008eca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	2b03      	cmp	r3, #3
 8008e9a:	d115      	bne.n	8008ec8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	32ae      	adds	r2, #174	; 0xae
 8008ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00b      	beq.n	8008ec8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	32ae      	adds	r2, #174	; 0xae
 8008eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec0:	78fa      	ldrb	r2, [r7, #3]
 8008ec2:	4611      	mov	r1, r2
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	b083      	sub	sp, #12
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00e      	beq.n	8008f24 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	6852      	ldr	r2, [r2, #4]
 8008f12:	b2d2      	uxtb	r2, r2
 8008f14:	4611      	mov	r1, r2
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	4798      	blx	r3
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008f20:	2303      	movs	r3, #3
 8008f22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b083      	sub	sp, #12
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	460b      	mov	r3, r1
 8008f38:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008f3a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	460b      	mov	r3, r1
 8008f52:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008f54:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	370c      	adds	r7, #12
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b086      	sub	sp, #24
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008f76:	2300      	movs	r3, #0
 8008f78:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	885b      	ldrh	r3, [r3, #2]
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d920      	bls.n	8008fcc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008f92:	e013      	b.n	8008fbc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008f94:	f107 030a 	add.w	r3, r7, #10
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6978      	ldr	r0, [r7, #20]
 8008f9c:	f000 f81b 	bl	8008fd6 <USBD_GetNextDesc>
 8008fa0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	785b      	ldrb	r3, [r3, #1]
 8008fa6:	2b05      	cmp	r3, #5
 8008fa8:	d108      	bne.n	8008fbc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	789b      	ldrb	r3, [r3, #2]
 8008fb2:	78fa      	ldrb	r2, [r7, #3]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d008      	beq.n	8008fca <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	885b      	ldrh	r3, [r3, #2]
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	897b      	ldrh	r3, [r7, #10]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d8e5      	bhi.n	8008f94 <USBD_GetEpDesc+0x32>
 8008fc8:	e000      	b.n	8008fcc <USBD_GetEpDesc+0x6a>
          break;
 8008fca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008fcc:	693b      	ldr	r3, [r7, #16]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008fd6:	b480      	push	{r7}
 8008fd8:	b085      	sub	sp, #20
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	881a      	ldrh	r2, [r3, #0]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	4413      	add	r3, r2
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4413      	add	r3, r2
 8009000:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009002:	68fb      	ldr	r3, [r7, #12]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3714      	adds	r7, #20
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009010:	b480      	push	{r7}
 8009012:	b087      	sub	sp, #28
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	3301      	adds	r3, #1
 8009026:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800902e:	8a3b      	ldrh	r3, [r7, #16]
 8009030:	021b      	lsls	r3, r3, #8
 8009032:	b21a      	sxth	r2, r3
 8009034:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009038:	4313      	orrs	r3, r2
 800903a:	b21b      	sxth	r3, r3
 800903c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800903e:	89fb      	ldrh	r3, [r7, #14]
}
 8009040:	4618      	mov	r0, r3
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009056:	2300      	movs	r3, #0
 8009058:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009062:	2b40      	cmp	r3, #64	; 0x40
 8009064:	d005      	beq.n	8009072 <USBD_StdDevReq+0x26>
 8009066:	2b40      	cmp	r3, #64	; 0x40
 8009068:	d857      	bhi.n	800911a <USBD_StdDevReq+0xce>
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00f      	beq.n	800908e <USBD_StdDevReq+0x42>
 800906e:	2b20      	cmp	r3, #32
 8009070:	d153      	bne.n	800911a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	32ae      	adds	r2, #174	; 0xae
 800907c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	6839      	ldr	r1, [r7, #0]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	4798      	blx	r3
 8009088:	4603      	mov	r3, r0
 800908a:	73fb      	strb	r3, [r7, #15]
      break;
 800908c:	e04a      	b.n	8009124 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	785b      	ldrb	r3, [r3, #1]
 8009092:	2b09      	cmp	r3, #9
 8009094:	d83b      	bhi.n	800910e <USBD_StdDevReq+0xc2>
 8009096:	a201      	add	r2, pc, #4	; (adr r2, 800909c <USBD_StdDevReq+0x50>)
 8009098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909c:	080090f1 	.word	0x080090f1
 80090a0:	08009105 	.word	0x08009105
 80090a4:	0800910f 	.word	0x0800910f
 80090a8:	080090fb 	.word	0x080090fb
 80090ac:	0800910f 	.word	0x0800910f
 80090b0:	080090cf 	.word	0x080090cf
 80090b4:	080090c5 	.word	0x080090c5
 80090b8:	0800910f 	.word	0x0800910f
 80090bc:	080090e7 	.word	0x080090e7
 80090c0:	080090d9 	.word	0x080090d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80090c4:	6839      	ldr	r1, [r7, #0]
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fa3c 	bl	8009544 <USBD_GetDescriptor>
          break;
 80090cc:	e024      	b.n	8009118 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fbcb 	bl	800986c <USBD_SetAddress>
          break;
 80090d6:	e01f      	b.n	8009118 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80090d8:	6839      	ldr	r1, [r7, #0]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fc0a 	bl	80098f4 <USBD_SetConfig>
 80090e0:	4603      	mov	r3, r0
 80090e2:	73fb      	strb	r3, [r7, #15]
          break;
 80090e4:	e018      	b.n	8009118 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fcad 	bl	8009a48 <USBD_GetConfig>
          break;
 80090ee:	e013      	b.n	8009118 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fcde 	bl	8009ab4 <USBD_GetStatus>
          break;
 80090f8:	e00e      	b.n	8009118 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80090fa:	6839      	ldr	r1, [r7, #0]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fd0d 	bl	8009b1c <USBD_SetFeature>
          break;
 8009102:	e009      	b.n	8009118 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fd31 	bl	8009b6e <USBD_ClrFeature>
          break;
 800910c:	e004      	b.n	8009118 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800910e:	6839      	ldr	r1, [r7, #0]
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fd88 	bl	8009c26 <USBD_CtlError>
          break;
 8009116:	bf00      	nop
      }
      break;
 8009118:	e004      	b.n	8009124 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fd82 	bl	8009c26 <USBD_CtlError>
      break;
 8009122:	bf00      	nop
  }

  return ret;
 8009124:	7bfb      	ldrb	r3, [r7, #15]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop

08009130 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800913a:	2300      	movs	r3, #0
 800913c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009146:	2b40      	cmp	r3, #64	; 0x40
 8009148:	d005      	beq.n	8009156 <USBD_StdItfReq+0x26>
 800914a:	2b40      	cmp	r3, #64	; 0x40
 800914c:	d852      	bhi.n	80091f4 <USBD_StdItfReq+0xc4>
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <USBD_StdItfReq+0x26>
 8009152:	2b20      	cmp	r3, #32
 8009154:	d14e      	bne.n	80091f4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800915c:	b2db      	uxtb	r3, r3
 800915e:	3b01      	subs	r3, #1
 8009160:	2b02      	cmp	r3, #2
 8009162:	d840      	bhi.n	80091e6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	889b      	ldrh	r3, [r3, #4]
 8009168:	b2db      	uxtb	r3, r3
 800916a:	2b01      	cmp	r3, #1
 800916c:	d836      	bhi.n	80091dc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	889b      	ldrh	r3, [r3, #4]
 8009172:	b2db      	uxtb	r3, r3
 8009174:	4619      	mov	r1, r3
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f7ff fed9 	bl	8008f2e <USBD_CoreFindIF>
 800917c:	4603      	mov	r3, r0
 800917e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009180:	7bbb      	ldrb	r3, [r7, #14]
 8009182:	2bff      	cmp	r3, #255	; 0xff
 8009184:	d01d      	beq.n	80091c2 <USBD_StdItfReq+0x92>
 8009186:	7bbb      	ldrb	r3, [r7, #14]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d11a      	bne.n	80091c2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800918c:	7bba      	ldrb	r2, [r7, #14]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	32ae      	adds	r2, #174	; 0xae
 8009192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00f      	beq.n	80091bc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800919c:	7bba      	ldrb	r2, [r7, #14]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80091a4:	7bba      	ldrb	r2, [r7, #14]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	32ae      	adds	r2, #174	; 0xae
 80091aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	6839      	ldr	r1, [r7, #0]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	4798      	blx	r3
 80091b6:	4603      	mov	r3, r0
 80091b8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80091ba:	e004      	b.n	80091c6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80091bc:	2303      	movs	r3, #3
 80091be:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80091c0:	e001      	b.n	80091c6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80091c2:	2303      	movs	r3, #3
 80091c4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	88db      	ldrh	r3, [r3, #6]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d110      	bne.n	80091f0 <USBD_StdItfReq+0xc0>
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10d      	bne.n	80091f0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fdf1 	bl	8009dbc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80091da:	e009      	b.n	80091f0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80091dc:	6839      	ldr	r1, [r7, #0]
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fd21 	bl	8009c26 <USBD_CtlError>
          break;
 80091e4:	e004      	b.n	80091f0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 fd1c 	bl	8009c26 <USBD_CtlError>
          break;
 80091ee:	e000      	b.n	80091f2 <USBD_StdItfReq+0xc2>
          break;
 80091f0:	bf00      	nop
      }
      break;
 80091f2:	e004      	b.n	80091fe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80091f4:	6839      	ldr	r1, [r7, #0]
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fd15 	bl	8009c26 <USBD_CtlError>
      break;
 80091fc:	bf00      	nop
  }

  return ret;
 80091fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009200:	4618      	mov	r0, r3
 8009202:	3710      	adds	r7, #16
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009212:	2300      	movs	r3, #0
 8009214:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	889b      	ldrh	r3, [r3, #4]
 800921a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009224:	2b40      	cmp	r3, #64	; 0x40
 8009226:	d007      	beq.n	8009238 <USBD_StdEPReq+0x30>
 8009228:	2b40      	cmp	r3, #64	; 0x40
 800922a:	f200 817f 	bhi.w	800952c <USBD_StdEPReq+0x324>
 800922e:	2b00      	cmp	r3, #0
 8009230:	d02a      	beq.n	8009288 <USBD_StdEPReq+0x80>
 8009232:	2b20      	cmp	r3, #32
 8009234:	f040 817a 	bne.w	800952c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009238:	7bbb      	ldrb	r3, [r7, #14]
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f7ff fe83 	bl	8008f48 <USBD_CoreFindEP>
 8009242:	4603      	mov	r3, r0
 8009244:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009246:	7b7b      	ldrb	r3, [r7, #13]
 8009248:	2bff      	cmp	r3, #255	; 0xff
 800924a:	f000 8174 	beq.w	8009536 <USBD_StdEPReq+0x32e>
 800924e:	7b7b      	ldrb	r3, [r7, #13]
 8009250:	2b00      	cmp	r3, #0
 8009252:	f040 8170 	bne.w	8009536 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009256:	7b7a      	ldrb	r2, [r7, #13]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800925e:	7b7a      	ldrb	r2, [r7, #13]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	32ae      	adds	r2, #174	; 0xae
 8009264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	2b00      	cmp	r3, #0
 800926c:	f000 8163 	beq.w	8009536 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009270:	7b7a      	ldrb	r2, [r7, #13]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	32ae      	adds	r2, #174	; 0xae
 8009276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	4798      	blx	r3
 8009282:	4603      	mov	r3, r0
 8009284:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009286:	e156      	b.n	8009536 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	785b      	ldrb	r3, [r3, #1]
 800928c:	2b03      	cmp	r3, #3
 800928e:	d008      	beq.n	80092a2 <USBD_StdEPReq+0x9a>
 8009290:	2b03      	cmp	r3, #3
 8009292:	f300 8145 	bgt.w	8009520 <USBD_StdEPReq+0x318>
 8009296:	2b00      	cmp	r3, #0
 8009298:	f000 809b 	beq.w	80093d2 <USBD_StdEPReq+0x1ca>
 800929c:	2b01      	cmp	r3, #1
 800929e:	d03c      	beq.n	800931a <USBD_StdEPReq+0x112>
 80092a0:	e13e      	b.n	8009520 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d002      	beq.n	80092b4 <USBD_StdEPReq+0xac>
 80092ae:	2b03      	cmp	r3, #3
 80092b0:	d016      	beq.n	80092e0 <USBD_StdEPReq+0xd8>
 80092b2:	e02c      	b.n	800930e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092b4:	7bbb      	ldrb	r3, [r7, #14]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00d      	beq.n	80092d6 <USBD_StdEPReq+0xce>
 80092ba:	7bbb      	ldrb	r3, [r7, #14]
 80092bc:	2b80      	cmp	r3, #128	; 0x80
 80092be:	d00a      	beq.n	80092d6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80092c0:	7bbb      	ldrb	r3, [r7, #14]
 80092c2:	4619      	mov	r1, r3
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f001 fa71 	bl	800a7ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80092ca:	2180      	movs	r1, #128	; 0x80
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f001 fa6d 	bl	800a7ac <USBD_LL_StallEP>
 80092d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092d4:	e020      	b.n	8009318 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fca4 	bl	8009c26 <USBD_CtlError>
              break;
 80092de:	e01b      	b.n	8009318 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	885b      	ldrh	r3, [r3, #2]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10e      	bne.n	8009306 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80092e8:	7bbb      	ldrb	r3, [r7, #14]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d00b      	beq.n	8009306 <USBD_StdEPReq+0xfe>
 80092ee:	7bbb      	ldrb	r3, [r7, #14]
 80092f0:	2b80      	cmp	r3, #128	; 0x80
 80092f2:	d008      	beq.n	8009306 <USBD_StdEPReq+0xfe>
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	88db      	ldrh	r3, [r3, #6]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d104      	bne.n	8009306 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80092fc:	7bbb      	ldrb	r3, [r7, #14]
 80092fe:	4619      	mov	r1, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f001 fa53 	bl	800a7ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 fd58 	bl	8009dbc <USBD_CtlSendStatus>

              break;
 800930c:	e004      	b.n	8009318 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800930e:	6839      	ldr	r1, [r7, #0]
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 fc88 	bl	8009c26 <USBD_CtlError>
              break;
 8009316:	bf00      	nop
          }
          break;
 8009318:	e107      	b.n	800952a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b02      	cmp	r3, #2
 8009324:	d002      	beq.n	800932c <USBD_StdEPReq+0x124>
 8009326:	2b03      	cmp	r3, #3
 8009328:	d016      	beq.n	8009358 <USBD_StdEPReq+0x150>
 800932a:	e04b      	b.n	80093c4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800932c:	7bbb      	ldrb	r3, [r7, #14]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00d      	beq.n	800934e <USBD_StdEPReq+0x146>
 8009332:	7bbb      	ldrb	r3, [r7, #14]
 8009334:	2b80      	cmp	r3, #128	; 0x80
 8009336:	d00a      	beq.n	800934e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009338:	7bbb      	ldrb	r3, [r7, #14]
 800933a:	4619      	mov	r1, r3
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f001 fa35 	bl	800a7ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009342:	2180      	movs	r1, #128	; 0x80
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f001 fa31 	bl	800a7ac <USBD_LL_StallEP>
 800934a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800934c:	e040      	b.n	80093d0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800934e:	6839      	ldr	r1, [r7, #0]
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fc68 	bl	8009c26 <USBD_CtlError>
              break;
 8009356:	e03b      	b.n	80093d0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	885b      	ldrh	r3, [r3, #2]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d136      	bne.n	80093ce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009360:	7bbb      	ldrb	r3, [r7, #14]
 8009362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009366:	2b00      	cmp	r3, #0
 8009368:	d004      	beq.n	8009374 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800936a:	7bbb      	ldrb	r3, [r7, #14]
 800936c:	4619      	mov	r1, r3
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f001 fa3b 	bl	800a7ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fd21 	bl	8009dbc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800937a:	7bbb      	ldrb	r3, [r7, #14]
 800937c:	4619      	mov	r1, r3
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7ff fde2 	bl	8008f48 <USBD_CoreFindEP>
 8009384:	4603      	mov	r3, r0
 8009386:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009388:	7b7b      	ldrb	r3, [r7, #13]
 800938a:	2bff      	cmp	r3, #255	; 0xff
 800938c:	d01f      	beq.n	80093ce <USBD_StdEPReq+0x1c6>
 800938e:	7b7b      	ldrb	r3, [r7, #13]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d11c      	bne.n	80093ce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009394:	7b7a      	ldrb	r2, [r7, #13]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800939c:	7b7a      	ldrb	r2, [r7, #13]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	32ae      	adds	r2, #174	; 0xae
 80093a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d010      	beq.n	80093ce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80093ac:	7b7a      	ldrb	r2, [r7, #13]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	32ae      	adds	r2, #174	; 0xae
 80093b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	4798      	blx	r3
 80093be:	4603      	mov	r3, r0
 80093c0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80093c2:	e004      	b.n	80093ce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fc2d 	bl	8009c26 <USBD_CtlError>
              break;
 80093cc:	e000      	b.n	80093d0 <USBD_StdEPReq+0x1c8>
              break;
 80093ce:	bf00      	nop
          }
          break;
 80093d0:	e0ab      	b.n	800952a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d002      	beq.n	80093e4 <USBD_StdEPReq+0x1dc>
 80093de:	2b03      	cmp	r3, #3
 80093e0:	d032      	beq.n	8009448 <USBD_StdEPReq+0x240>
 80093e2:	e097      	b.n	8009514 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d007      	beq.n	80093fa <USBD_StdEPReq+0x1f2>
 80093ea:	7bbb      	ldrb	r3, [r7, #14]
 80093ec:	2b80      	cmp	r3, #128	; 0x80
 80093ee:	d004      	beq.n	80093fa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80093f0:	6839      	ldr	r1, [r7, #0]
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fc17 	bl	8009c26 <USBD_CtlError>
                break;
 80093f8:	e091      	b.n	800951e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	da0b      	bge.n	800941a <USBD_StdEPReq+0x212>
 8009402:	7bbb      	ldrb	r3, [r7, #14]
 8009404:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009408:	4613      	mov	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	3310      	adds	r3, #16
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	4413      	add	r3, r2
 8009416:	3304      	adds	r3, #4
 8009418:	e00b      	b.n	8009432 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800941a:	7bbb      	ldrb	r3, [r7, #14]
 800941c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009420:	4613      	mov	r3, r2
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	4413      	add	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	4413      	add	r3, r2
 8009430:	3304      	adds	r3, #4
 8009432:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	2200      	movs	r2, #0
 8009438:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	2202      	movs	r2, #2
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 fc61 	bl	8009d08 <USBD_CtlSendData>
              break;
 8009446:	e06a      	b.n	800951e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009448:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800944c:	2b00      	cmp	r3, #0
 800944e:	da11      	bge.n	8009474 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009450:	7bbb      	ldrb	r3, [r7, #14]
 8009452:	f003 020f 	and.w	r2, r3, #15
 8009456:	6879      	ldr	r1, [r7, #4]
 8009458:	4613      	mov	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	4413      	add	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	440b      	add	r3, r1
 8009462:	3324      	adds	r3, #36	; 0x24
 8009464:	881b      	ldrh	r3, [r3, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d117      	bne.n	800949a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fbda 	bl	8009c26 <USBD_CtlError>
                  break;
 8009472:	e054      	b.n	800951e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009474:	7bbb      	ldrb	r3, [r7, #14]
 8009476:	f003 020f 	and.w	r2, r3, #15
 800947a:	6879      	ldr	r1, [r7, #4]
 800947c:	4613      	mov	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4413      	add	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	440b      	add	r3, r1
 8009486:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800948a:	881b      	ldrh	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d104      	bne.n	800949a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009490:	6839      	ldr	r1, [r7, #0]
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fbc7 	bl	8009c26 <USBD_CtlError>
                  break;
 8009498:	e041      	b.n	800951e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800949a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	da0b      	bge.n	80094ba <USBD_StdEPReq+0x2b2>
 80094a2:	7bbb      	ldrb	r3, [r7, #14]
 80094a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094a8:	4613      	mov	r3, r2
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	4413      	add	r3, r2
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	3310      	adds	r3, #16
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	4413      	add	r3, r2
 80094b6:	3304      	adds	r3, #4
 80094b8:	e00b      	b.n	80094d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094ba:	7bbb      	ldrb	r3, [r7, #14]
 80094bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094c0:	4613      	mov	r3, r2
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	4413      	add	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	4413      	add	r3, r2
 80094d0:	3304      	adds	r3, #4
 80094d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094d4:	7bbb      	ldrb	r3, [r7, #14]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d002      	beq.n	80094e0 <USBD_StdEPReq+0x2d8>
 80094da:	7bbb      	ldrb	r3, [r7, #14]
 80094dc:	2b80      	cmp	r3, #128	; 0x80
 80094de:	d103      	bne.n	80094e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	2200      	movs	r2, #0
 80094e4:	601a      	str	r2, [r3, #0]
 80094e6:	e00e      	b.n	8009506 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80094e8:	7bbb      	ldrb	r3, [r7, #14]
 80094ea:	4619      	mov	r1, r3
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f001 f99b 	bl	800a828 <USBD_LL_IsStallEP>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d003      	beq.n	8009500 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	2201      	movs	r2, #1
 80094fc:	601a      	str	r2, [r3, #0]
 80094fe:	e002      	b.n	8009506 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	2202      	movs	r2, #2
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fbfb 	bl	8009d08 <USBD_CtlSendData>
              break;
 8009512:	e004      	b.n	800951e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009514:	6839      	ldr	r1, [r7, #0]
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fb85 	bl	8009c26 <USBD_CtlError>
              break;
 800951c:	bf00      	nop
          }
          break;
 800951e:	e004      	b.n	800952a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fb7f 	bl	8009c26 <USBD_CtlError>
          break;
 8009528:	bf00      	nop
      }
      break;
 800952a:	e005      	b.n	8009538 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fb79 	bl	8009c26 <USBD_CtlError>
      break;
 8009534:	e000      	b.n	8009538 <USBD_StdEPReq+0x330>
      break;
 8009536:	bf00      	nop
  }

  return ret;
 8009538:	7bfb      	ldrb	r3, [r7, #15]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
	...

08009544 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800954e:	2300      	movs	r3, #0
 8009550:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009552:	2300      	movs	r3, #0
 8009554:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009556:	2300      	movs	r3, #0
 8009558:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	885b      	ldrh	r3, [r3, #2]
 800955e:	0a1b      	lsrs	r3, r3, #8
 8009560:	b29b      	uxth	r3, r3
 8009562:	3b01      	subs	r3, #1
 8009564:	2b0e      	cmp	r3, #14
 8009566:	f200 8152 	bhi.w	800980e <USBD_GetDescriptor+0x2ca>
 800956a:	a201      	add	r2, pc, #4	; (adr r2, 8009570 <USBD_GetDescriptor+0x2c>)
 800956c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009570:	080095e1 	.word	0x080095e1
 8009574:	080095f9 	.word	0x080095f9
 8009578:	08009639 	.word	0x08009639
 800957c:	0800980f 	.word	0x0800980f
 8009580:	0800980f 	.word	0x0800980f
 8009584:	080097af 	.word	0x080097af
 8009588:	080097db 	.word	0x080097db
 800958c:	0800980f 	.word	0x0800980f
 8009590:	0800980f 	.word	0x0800980f
 8009594:	0800980f 	.word	0x0800980f
 8009598:	0800980f 	.word	0x0800980f
 800959c:	0800980f 	.word	0x0800980f
 80095a0:	0800980f 	.word	0x0800980f
 80095a4:	0800980f 	.word	0x0800980f
 80095a8:	080095ad 	.word	0x080095ad
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095b2:	69db      	ldr	r3, [r3, #28]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00b      	beq.n	80095d0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095be:	69db      	ldr	r3, [r3, #28]
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	7c12      	ldrb	r2, [r2, #16]
 80095c4:	f107 0108 	add.w	r1, r7, #8
 80095c8:	4610      	mov	r0, r2
 80095ca:	4798      	blx	r3
 80095cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095ce:	e126      	b.n	800981e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80095d0:	6839      	ldr	r1, [r7, #0]
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 fb27 	bl	8009c26 <USBD_CtlError>
        err++;
 80095d8:	7afb      	ldrb	r3, [r7, #11]
 80095da:	3301      	adds	r3, #1
 80095dc:	72fb      	strb	r3, [r7, #11]
      break;
 80095de:	e11e      	b.n	800981e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	7c12      	ldrb	r2, [r2, #16]
 80095ec:	f107 0108 	add.w	r1, r7, #8
 80095f0:	4610      	mov	r0, r2
 80095f2:	4798      	blx	r3
 80095f4:	60f8      	str	r0, [r7, #12]
      break;
 80095f6:	e112      	b.n	800981e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	7c1b      	ldrb	r3, [r3, #16]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10d      	bne.n	800961c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009608:	f107 0208 	add.w	r2, r7, #8
 800960c:	4610      	mov	r0, r2
 800960e:	4798      	blx	r3
 8009610:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	3301      	adds	r3, #1
 8009616:	2202      	movs	r2, #2
 8009618:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800961a:	e100      	b.n	800981e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009624:	f107 0208 	add.w	r2, r7, #8
 8009628:	4610      	mov	r0, r2
 800962a:	4798      	blx	r3
 800962c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	3301      	adds	r3, #1
 8009632:	2202      	movs	r2, #2
 8009634:	701a      	strb	r2, [r3, #0]
      break;
 8009636:	e0f2      	b.n	800981e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	885b      	ldrh	r3, [r3, #2]
 800963c:	b2db      	uxtb	r3, r3
 800963e:	2b05      	cmp	r3, #5
 8009640:	f200 80ac 	bhi.w	800979c <USBD_GetDescriptor+0x258>
 8009644:	a201      	add	r2, pc, #4	; (adr r2, 800964c <USBD_GetDescriptor+0x108>)
 8009646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964a:	bf00      	nop
 800964c:	08009665 	.word	0x08009665
 8009650:	08009699 	.word	0x08009699
 8009654:	080096cd 	.word	0x080096cd
 8009658:	08009701 	.word	0x08009701
 800965c:	08009735 	.word	0x08009735
 8009660:	08009769 	.word	0x08009769
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00b      	beq.n	8009688 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	7c12      	ldrb	r2, [r2, #16]
 800967c:	f107 0108 	add.w	r1, r7, #8
 8009680:	4610      	mov	r0, r2
 8009682:	4798      	blx	r3
 8009684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009686:	e091      	b.n	80097ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009688:	6839      	ldr	r1, [r7, #0]
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 facb 	bl	8009c26 <USBD_CtlError>
            err++;
 8009690:	7afb      	ldrb	r3, [r7, #11]
 8009692:	3301      	adds	r3, #1
 8009694:	72fb      	strb	r3, [r7, #11]
          break;
 8009696:	e089      	b.n	80097ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00b      	beq.n	80096bc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	7c12      	ldrb	r2, [r2, #16]
 80096b0:	f107 0108 	add.w	r1, r7, #8
 80096b4:	4610      	mov	r0, r2
 80096b6:	4798      	blx	r3
 80096b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096ba:	e077      	b.n	80097ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80096bc:	6839      	ldr	r1, [r7, #0]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 fab1 	bl	8009c26 <USBD_CtlError>
            err++;
 80096c4:	7afb      	ldrb	r3, [r7, #11]
 80096c6:	3301      	adds	r3, #1
 80096c8:	72fb      	strb	r3, [r7, #11]
          break;
 80096ca:	e06f      	b.n	80097ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00b      	beq.n	80096f0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	7c12      	ldrb	r2, [r2, #16]
 80096e4:	f107 0108 	add.w	r1, r7, #8
 80096e8:	4610      	mov	r0, r2
 80096ea:	4798      	blx	r3
 80096ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096ee:	e05d      	b.n	80097ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fa97 	bl	8009c26 <USBD_CtlError>
            err++;
 80096f8:	7afb      	ldrb	r3, [r7, #11]
 80096fa:	3301      	adds	r3, #1
 80096fc:	72fb      	strb	r3, [r7, #11]
          break;
 80096fe:	e055      	b.n	80097ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00b      	beq.n	8009724 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	7c12      	ldrb	r2, [r2, #16]
 8009718:	f107 0108 	add.w	r1, r7, #8
 800971c:	4610      	mov	r0, r2
 800971e:	4798      	blx	r3
 8009720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009722:	e043      	b.n	80097ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fa7d 	bl	8009c26 <USBD_CtlError>
            err++;
 800972c:	7afb      	ldrb	r3, [r7, #11]
 800972e:	3301      	adds	r3, #1
 8009730:	72fb      	strb	r3, [r7, #11]
          break;
 8009732:	e03b      	b.n	80097ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800973a:	695b      	ldr	r3, [r3, #20]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d00b      	beq.n	8009758 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009746:	695b      	ldr	r3, [r3, #20]
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	7c12      	ldrb	r2, [r2, #16]
 800974c:	f107 0108 	add.w	r1, r7, #8
 8009750:	4610      	mov	r0, r2
 8009752:	4798      	blx	r3
 8009754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009756:	e029      	b.n	80097ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fa63 	bl	8009c26 <USBD_CtlError>
            err++;
 8009760:	7afb      	ldrb	r3, [r7, #11]
 8009762:	3301      	adds	r3, #1
 8009764:	72fb      	strb	r3, [r7, #11]
          break;
 8009766:	e021      	b.n	80097ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800976e:	699b      	ldr	r3, [r3, #24]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d00b      	beq.n	800978c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	7c12      	ldrb	r2, [r2, #16]
 8009780:	f107 0108 	add.w	r1, r7, #8
 8009784:	4610      	mov	r0, r2
 8009786:	4798      	blx	r3
 8009788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800978a:	e00f      	b.n	80097ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800978c:	6839      	ldr	r1, [r7, #0]
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fa49 	bl	8009c26 <USBD_CtlError>
            err++;
 8009794:	7afb      	ldrb	r3, [r7, #11]
 8009796:	3301      	adds	r3, #1
 8009798:	72fb      	strb	r3, [r7, #11]
          break;
 800979a:	e007      	b.n	80097ac <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800979c:	6839      	ldr	r1, [r7, #0]
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fa41 	bl	8009c26 <USBD_CtlError>
          err++;
 80097a4:	7afb      	ldrb	r3, [r7, #11]
 80097a6:	3301      	adds	r3, #1
 80097a8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80097aa:	bf00      	nop
      }
      break;
 80097ac:	e037      	b.n	800981e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	7c1b      	ldrb	r3, [r3, #16]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d109      	bne.n	80097ca <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097be:	f107 0208 	add.w	r2, r7, #8
 80097c2:	4610      	mov	r0, r2
 80097c4:	4798      	blx	r3
 80097c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097c8:	e029      	b.n	800981e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80097ca:	6839      	ldr	r1, [r7, #0]
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 fa2a 	bl	8009c26 <USBD_CtlError>
        err++;
 80097d2:	7afb      	ldrb	r3, [r7, #11]
 80097d4:	3301      	adds	r3, #1
 80097d6:	72fb      	strb	r3, [r7, #11]
      break;
 80097d8:	e021      	b.n	800981e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	7c1b      	ldrb	r3, [r3, #16]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d10d      	bne.n	80097fe <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ea:	f107 0208 	add.w	r2, r7, #8
 80097ee:	4610      	mov	r0, r2
 80097f0:	4798      	blx	r3
 80097f2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	3301      	adds	r3, #1
 80097f8:	2207      	movs	r2, #7
 80097fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097fc:	e00f      	b.n	800981e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80097fe:	6839      	ldr	r1, [r7, #0]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 fa10 	bl	8009c26 <USBD_CtlError>
        err++;
 8009806:	7afb      	ldrb	r3, [r7, #11]
 8009808:	3301      	adds	r3, #1
 800980a:	72fb      	strb	r3, [r7, #11]
      break;
 800980c:	e007      	b.n	800981e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fa08 	bl	8009c26 <USBD_CtlError>
      err++;
 8009816:	7afb      	ldrb	r3, [r7, #11]
 8009818:	3301      	adds	r3, #1
 800981a:	72fb      	strb	r3, [r7, #11]
      break;
 800981c:	bf00      	nop
  }

  if (err != 0U)
 800981e:	7afb      	ldrb	r3, [r7, #11]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d11e      	bne.n	8009862 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	88db      	ldrh	r3, [r3, #6]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d016      	beq.n	800985a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800982c:	893b      	ldrh	r3, [r7, #8]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00e      	beq.n	8009850 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	88da      	ldrh	r2, [r3, #6]
 8009836:	893b      	ldrh	r3, [r7, #8]
 8009838:	4293      	cmp	r3, r2
 800983a:	bf28      	it	cs
 800983c:	4613      	movcs	r3, r2
 800983e:	b29b      	uxth	r3, r3
 8009840:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009842:	893b      	ldrh	r3, [r7, #8]
 8009844:	461a      	mov	r2, r3
 8009846:	68f9      	ldr	r1, [r7, #12]
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 fa5d 	bl	8009d08 <USBD_CtlSendData>
 800984e:	e009      	b.n	8009864 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 f9e7 	bl	8009c26 <USBD_CtlError>
 8009858:	e004      	b.n	8009864 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 faae 	bl	8009dbc <USBD_CtlSendStatus>
 8009860:	e000      	b.n	8009864 <USBD_GetDescriptor+0x320>
    return;
 8009862:	bf00      	nop
  }
}
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop

0800986c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	889b      	ldrh	r3, [r3, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d131      	bne.n	80098e2 <USBD_SetAddress+0x76>
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	88db      	ldrh	r3, [r3, #6]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d12d      	bne.n	80098e2 <USBD_SetAddress+0x76>
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	885b      	ldrh	r3, [r3, #2]
 800988a:	2b7f      	cmp	r3, #127	; 0x7f
 800988c:	d829      	bhi.n	80098e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	885b      	ldrh	r3, [r3, #2]
 8009892:	b2db      	uxtb	r3, r3
 8009894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009898:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	2b03      	cmp	r3, #3
 80098a4:	d104      	bne.n	80098b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f9bc 	bl	8009c26 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ae:	e01d      	b.n	80098ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	7bfa      	ldrb	r2, [r7, #15]
 80098b4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80098b8:	7bfb      	ldrb	r3, [r7, #15]
 80098ba:	4619      	mov	r1, r3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 ffdf 	bl	800a880 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 fa7a 	bl	8009dbc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80098c8:	7bfb      	ldrb	r3, [r7, #15]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d004      	beq.n	80098d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2202      	movs	r2, #2
 80098d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098d6:	e009      	b.n	80098ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098e0:	e004      	b.n	80098ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80098e2:	6839      	ldr	r1, [r7, #0]
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 f99e 	bl	8009c26 <USBD_CtlError>
  }
}
 80098ea:	bf00      	nop
 80098ec:	bf00      	nop
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098fe:	2300      	movs	r3, #0
 8009900:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	885b      	ldrh	r3, [r3, #2]
 8009906:	b2da      	uxtb	r2, r3
 8009908:	4b4e      	ldr	r3, [pc, #312]	; (8009a44 <USBD_SetConfig+0x150>)
 800990a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800990c:	4b4d      	ldr	r3, [pc, #308]	; (8009a44 <USBD_SetConfig+0x150>)
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d905      	bls.n	8009920 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009914:	6839      	ldr	r1, [r7, #0]
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f985 	bl	8009c26 <USBD_CtlError>
    return USBD_FAIL;
 800991c:	2303      	movs	r3, #3
 800991e:	e08c      	b.n	8009a3a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009926:	b2db      	uxtb	r3, r3
 8009928:	2b02      	cmp	r3, #2
 800992a:	d002      	beq.n	8009932 <USBD_SetConfig+0x3e>
 800992c:	2b03      	cmp	r3, #3
 800992e:	d029      	beq.n	8009984 <USBD_SetConfig+0x90>
 8009930:	e075      	b.n	8009a1e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009932:	4b44      	ldr	r3, [pc, #272]	; (8009a44 <USBD_SetConfig+0x150>)
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d020      	beq.n	800997c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800993a:	4b42      	ldr	r3, [pc, #264]	; (8009a44 <USBD_SetConfig+0x150>)
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	461a      	mov	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009944:	4b3f      	ldr	r3, [pc, #252]	; (8009a44 <USBD_SetConfig+0x150>)
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	4619      	mov	r1, r3
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7fe ffb7 	bl	80088be <USBD_SetClassConfig>
 8009950:	4603      	mov	r3, r0
 8009952:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009954:	7bfb      	ldrb	r3, [r7, #15]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d008      	beq.n	800996c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800995a:	6839      	ldr	r1, [r7, #0]
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 f962 	bl	8009c26 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2202      	movs	r2, #2
 8009966:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800996a:	e065      	b.n	8009a38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 fa25 	bl	8009dbc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2203      	movs	r2, #3
 8009976:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800997a:	e05d      	b.n	8009a38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fa1d 	bl	8009dbc <USBD_CtlSendStatus>
      break;
 8009982:	e059      	b.n	8009a38 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009984:	4b2f      	ldr	r3, [pc, #188]	; (8009a44 <USBD_SetConfig+0x150>)
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d112      	bne.n	80099b2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2202      	movs	r2, #2
 8009990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009994:	4b2b      	ldr	r3, [pc, #172]	; (8009a44 <USBD_SetConfig+0x150>)
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	461a      	mov	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800999e:	4b29      	ldr	r3, [pc, #164]	; (8009a44 <USBD_SetConfig+0x150>)
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	4619      	mov	r1, r3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7fe ffa6 	bl	80088f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fa06 	bl	8009dbc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099b0:	e042      	b.n	8009a38 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80099b2:	4b24      	ldr	r3, [pc, #144]	; (8009a44 <USBD_SetConfig+0x150>)
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	461a      	mov	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d02a      	beq.n	8009a16 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7fe ff94 	bl	80088f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80099ce:	4b1d      	ldr	r3, [pc, #116]	; (8009a44 <USBD_SetConfig+0x150>)
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	461a      	mov	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099d8:	4b1a      	ldr	r3, [pc, #104]	; (8009a44 <USBD_SetConfig+0x150>)
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	4619      	mov	r1, r3
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f7fe ff6d 	bl	80088be <USBD_SetClassConfig>
 80099e4:	4603      	mov	r3, r0
 80099e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80099e8:	7bfb      	ldrb	r3, [r7, #15]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00f      	beq.n	8009a0e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80099ee:	6839      	ldr	r1, [r7, #0]
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 f918 	bl	8009c26 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7fe ff79 	bl	80088f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2202      	movs	r2, #2
 8009a08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009a0c:	e014      	b.n	8009a38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f9d4 	bl	8009dbc <USBD_CtlSendStatus>
      break;
 8009a14:	e010      	b.n	8009a38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 f9d0 	bl	8009dbc <USBD_CtlSendStatus>
      break;
 8009a1c:	e00c      	b.n	8009a38 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009a1e:	6839      	ldr	r1, [r7, #0]
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f900 	bl	8009c26 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a26:	4b07      	ldr	r3, [pc, #28]	; (8009a44 <USBD_SetConfig+0x150>)
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7fe ff62 	bl	80088f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009a32:	2303      	movs	r3, #3
 8009a34:	73fb      	strb	r3, [r7, #15]
      break;
 8009a36:	bf00      	nop
  }

  return ret;
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	24000c0c 	.word	0x24000c0c

08009a48 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	88db      	ldrh	r3, [r3, #6]
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d004      	beq.n	8009a64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 f8e2 	bl	8009c26 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009a62:	e023      	b.n	8009aac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	dc02      	bgt.n	8009a76 <USBD_GetConfig+0x2e>
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	dc03      	bgt.n	8009a7c <USBD_GetConfig+0x34>
 8009a74:	e015      	b.n	8009aa2 <USBD_GetConfig+0x5a>
 8009a76:	2b03      	cmp	r3, #3
 8009a78:	d00b      	beq.n	8009a92 <USBD_GetConfig+0x4a>
 8009a7a:	e012      	b.n	8009aa2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	3308      	adds	r3, #8
 8009a86:	2201      	movs	r2, #1
 8009a88:	4619      	mov	r1, r3
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f93c 	bl	8009d08 <USBD_CtlSendData>
        break;
 8009a90:	e00c      	b.n	8009aac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	3304      	adds	r3, #4
 8009a96:	2201      	movs	r2, #1
 8009a98:	4619      	mov	r1, r3
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f934 	bl	8009d08 <USBD_CtlSendData>
        break;
 8009aa0:	e004      	b.n	8009aac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 f8be 	bl	8009c26 <USBD_CtlError>
        break;
 8009aaa:	bf00      	nop
}
 8009aac:	bf00      	nop
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d81e      	bhi.n	8009b0a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	88db      	ldrh	r3, [r3, #6]
 8009ad0:	2b02      	cmp	r3, #2
 8009ad2:	d004      	beq.n	8009ade <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009ad4:	6839      	ldr	r1, [r7, #0]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 f8a5 	bl	8009c26 <USBD_CtlError>
        break;
 8009adc:	e01a      	b.n	8009b14 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d005      	beq.n	8009afa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	f043 0202 	orr.w	r2, r3, #2
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	330c      	adds	r3, #12
 8009afe:	2202      	movs	r2, #2
 8009b00:	4619      	mov	r1, r3
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 f900 	bl	8009d08 <USBD_CtlSendData>
      break;
 8009b08:	e004      	b.n	8009b14 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009b0a:	6839      	ldr	r1, [r7, #0]
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 f88a 	bl	8009c26 <USBD_CtlError>
      break;
 8009b12:	bf00      	nop
  }
}
 8009b14:	bf00      	nop
 8009b16:	3708      	adds	r7, #8
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	885b      	ldrh	r3, [r3, #2]
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d107      	bne.n	8009b3e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2201      	movs	r2, #1
 8009b32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 f940 	bl	8009dbc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009b3c:	e013      	b.n	8009b66 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	885b      	ldrh	r3, [r3, #2]
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d10b      	bne.n	8009b5e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	889b      	ldrh	r3, [r3, #4]
 8009b4a:	0a1b      	lsrs	r3, r3, #8
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	b2da      	uxtb	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f930 	bl	8009dbc <USBD_CtlSendStatus>
}
 8009b5c:	e003      	b.n	8009b66 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009b5e:	6839      	ldr	r1, [r7, #0]
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 f860 	bl	8009c26 <USBD_CtlError>
}
 8009b66:	bf00      	nop
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b082      	sub	sp, #8
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	3b01      	subs	r3, #1
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	d80b      	bhi.n	8009b9e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	885b      	ldrh	r3, [r3, #2]
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d10c      	bne.n	8009ba8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f910 	bl	8009dbc <USBD_CtlSendStatus>
      }
      break;
 8009b9c:	e004      	b.n	8009ba8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009b9e:	6839      	ldr	r1, [r7, #0]
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 f840 	bl	8009c26 <USBD_CtlError>
      break;
 8009ba6:	e000      	b.n	8009baa <USBD_ClrFeature+0x3c>
      break;
 8009ba8:	bf00      	nop
  }
}
 8009baa:	bf00      	nop
 8009bac:	3708      	adds	r7, #8
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b084      	sub	sp, #16
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
 8009bba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	781a      	ldrb	r2, [r3, #0]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	781a      	ldrb	r2, [r3, #0]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f7ff fa17 	bl	8009010 <SWAPBYTE>
 8009be2:	4603      	mov	r3, r0
 8009be4:	461a      	mov	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	3301      	adds	r3, #1
 8009bee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f7ff fa0a 	bl	8009010 <SWAPBYTE>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	461a      	mov	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	3301      	adds	r3, #1
 8009c08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f7ff f9fd 	bl	8009010 <SWAPBYTE>
 8009c16:	4603      	mov	r3, r0
 8009c18:	461a      	mov	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	80da      	strh	r2, [r3, #6]
}
 8009c1e:	bf00      	nop
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b082      	sub	sp, #8
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c30:	2180      	movs	r1, #128	; 0x80
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fdba 	bl	800a7ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009c38:	2100      	movs	r1, #0
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 fdb6 	bl	800a7ac <USBD_LL_StallEP>
}
 8009c40:	bf00      	nop
 8009c42:	3708      	adds	r7, #8
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b086      	sub	sp, #24
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c54:	2300      	movs	r3, #0
 8009c56:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d036      	beq.n	8009ccc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009c62:	6938      	ldr	r0, [r7, #16]
 8009c64:	f000 f836 	bl	8009cd4 <USBD_GetLen>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	005b      	lsls	r3, r3, #1
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009c76:	7dfb      	ldrb	r3, [r7, #23]
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	7812      	ldrb	r2, [r2, #0]
 8009c80:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c82:	7dfb      	ldrb	r3, [r7, #23]
 8009c84:	3301      	adds	r3, #1
 8009c86:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009c88:	7dfb      	ldrb	r3, [r7, #23]
 8009c8a:	68ba      	ldr	r2, [r7, #8]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	2203      	movs	r2, #3
 8009c90:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c92:	7dfb      	ldrb	r3, [r7, #23]
 8009c94:	3301      	adds	r3, #1
 8009c96:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009c98:	e013      	b.n	8009cc2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009c9a:	7dfb      	ldrb	r3, [r7, #23]
 8009c9c:	68ba      	ldr	r2, [r7, #8]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	7812      	ldrb	r2, [r2, #0]
 8009ca4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	613b      	str	r3, [r7, #16]
    idx++;
 8009cac:	7dfb      	ldrb	r3, [r7, #23]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009cb2:	7dfb      	ldrb	r3, [r7, #23]
 8009cb4:	68ba      	ldr	r2, [r7, #8]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	2200      	movs	r2, #0
 8009cba:	701a      	strb	r2, [r3, #0]
    idx++;
 8009cbc:	7dfb      	ldrb	r3, [r7, #23]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1e7      	bne.n	8009c9a <USBD_GetString+0x52>
 8009cca:	e000      	b.n	8009cce <USBD_GetString+0x86>
    return;
 8009ccc:	bf00      	nop
  }
}
 8009cce:	3718      	adds	r7, #24
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009ce4:	e005      	b.n	8009cf2 <USBD_GetLen+0x1e>
  {
    len++;
 8009ce6:	7bfb      	ldrb	r3, [r7, #15]
 8009ce8:	3301      	adds	r3, #1
 8009cea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1f5      	bne.n	8009ce6 <USBD_GetLen+0x12>
  }

  return len;
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3714      	adds	r7, #20
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2202      	movs	r2, #2
 8009d18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f000 fdc5 	bl	800a8be <USBD_LL_Transmit>

  return USBD_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b084      	sub	sp, #16
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	60f8      	str	r0, [r7, #12]
 8009d46:	60b9      	str	r1, [r7, #8]
 8009d48:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	2100      	movs	r1, #0
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f000 fdb4 	bl	800a8be <USBD_LL_Transmit>

  return USBD_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3710      	adds	r7, #16
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2203      	movs	r2, #3
 8009d70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	68ba      	ldr	r2, [r7, #8]
 8009d88:	2100      	movs	r1, #0
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	f000 fdb8 	bl	800a900 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3710      	adds	r7, #16
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b084      	sub	sp, #16
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	60f8      	str	r0, [r7, #12]
 8009da2:	60b9      	str	r1, [r7, #8]
 8009da4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	2100      	movs	r1, #0
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f000 fda7 	bl	800a900 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009db2:	2300      	movs	r3, #0
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2204      	movs	r2, #4
 8009dc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009dcc:	2300      	movs	r3, #0
 8009dce:	2200      	movs	r2, #0
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 fd73 	bl	800a8be <USBD_LL_Transmit>

  return USBD_OK;
 8009dd8:	2300      	movs	r3, #0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b082      	sub	sp, #8
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2205      	movs	r2, #5
 8009dee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009df2:	2300      	movs	r3, #0
 8009df4:	2200      	movs	r2, #0
 8009df6:	2100      	movs	r1, #0
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fd81 	bl	800a900 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3708      	adds	r7, #8
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <CDC_OTG_Send>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */


uint16_t CDC_OTG_Send(uint8_t *Buf, uint16_t Len){
 8009e08:	b590      	push	{r4, r7, lr}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	460b      	mov	r3, r1
 8009e12:	807b      	strh	r3, [r7, #2]
	  uint8_t result = USBD_OK;
 8009e14:	2300      	movs	r3, #0
 8009e16:	73fb      	strb	r3, [r7, #15]
	  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009e18:	4b30      	ldr	r3, [pc, #192]	; (8009edc <CDC_OTG_Send+0xd4>)
 8009e1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e1e:	60bb      	str	r3, [r7, #8]
	  if (USB_OTG_FS_State != 0){
 8009e20:	4b2f      	ldr	r3, [pc, #188]	; (8009ee0 <CDC_OTG_Send+0xd8>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d005      	beq.n	8009e34 <CDC_OTG_Send+0x2c>
		  GPIOB->BSRR = (1<<16);
 8009e28:	4b2e      	ldr	r3, [pc, #184]	; (8009ee4 <CDC_OTG_Send+0xdc>)
 8009e2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009e2e:	619a      	str	r2, [r3, #24]
		  return USBD_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	e04e      	b.n	8009ed2 <CDC_OTG_Send+0xca>
	  }

	  if (hcdc->TxState != 0 && hcdc->TxState != USBD_BUSY){
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d033      	beq.n	8009ea6 <CDC_OTG_Send+0x9e>
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d02e      	beq.n	8009ea6 <CDC_OTG_Send+0x9e>
		  GPIOB->BSRR = (1<<16);
 8009e48:	4b26      	ldr	r3, [pc, #152]	; (8009ee4 <CDC_OTG_Send+0xdc>)
 8009e4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009e4e:	619a      	str	r2, [r3, #24]
	      return hcdc->TxState;
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	e03b      	b.n	8009ed2 <CDC_OTG_Send+0xca>
	  }

	  while(hcdc->TxState == USBD_BUSY){
		  GPIOB->BSRR = ((1<<0) << (16*flag));
 8009e5a:	4b23      	ldr	r3, [pc, #140]	; (8009ee8 <CDC_OTG_Send+0xe0>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	011b      	lsls	r3, r3, #4
 8009e60:	2201      	movs	r2, #1
 8009e62:	409a      	lsls	r2, r3
 8009e64:	4b1f      	ldr	r3, [pc, #124]	; (8009ee4 <CDC_OTG_Send+0xdc>)
 8009e66:	619a      	str	r2, [r3, #24]
		  if(tick + 25 < HAL_GetTick()){
 8009e68:	4b20      	ldr	r3, [pc, #128]	; (8009eec <CDC_OTG_Send+0xe4>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	3319      	adds	r3, #25
 8009e6e:	461c      	mov	r4, r3
 8009e70:	f7f7 f9e8 	bl	8001244 <HAL_GetTick>
 8009e74:	4603      	mov	r3, r0
 8009e76:	429c      	cmp	r4, r3
 8009e78:	d20f      	bcs.n	8009e9a <CDC_OTG_Send+0x92>
			  flag = flag?0:1;
 8009e7a:	4b1b      	ldr	r3, [pc, #108]	; (8009ee8 <CDC_OTG_Send+0xe0>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	bf0c      	ite	eq
 8009e82:	2301      	moveq	r3, #1
 8009e84:	2300      	movne	r3, #0
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	461a      	mov	r2, r3
 8009e8a:	4b17      	ldr	r3, [pc, #92]	; (8009ee8 <CDC_OTG_Send+0xe0>)
 8009e8c:	601a      	str	r2, [r3, #0]
			  tick = HAL_GetTick();
 8009e8e:	f7f7 f9d9 	bl	8001244 <HAL_GetTick>
 8009e92:	4603      	mov	r3, r0
 8009e94:	461a      	mov	r2, r3
 8009e96:	4b15      	ldr	r3, [pc, #84]	; (8009eec <CDC_OTG_Send+0xe4>)
 8009e98:	601a      	str	r2, [r3, #0]
		  }
		  if (USB_OTG_FS_State != 0){
 8009e9a:	4b11      	ldr	r3, [pc, #68]	; (8009ee0 <CDC_OTG_Send+0xd8>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d001      	beq.n	8009ea6 <CDC_OTG_Send+0x9e>
			  return USBD_OK;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	e015      	b.n	8009ed2 <CDC_OTG_Send+0xca>
	  while(hcdc->TxState == USBD_BUSY){
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d0d4      	beq.n	8009e5a <CDC_OTG_Send+0x52>
		  }
	  }
	  GPIOB->BSRR = (1<<16);
 8009eb0:	4b0c      	ldr	r3, [pc, #48]	; (8009ee4 <CDC_OTG_Send+0xdc>)
 8009eb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009eb6:	619a      	str	r2, [r3, #24]

	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009eb8:	887b      	ldrh	r3, [r7, #2]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	6879      	ldr	r1, [r7, #4]
 8009ebe:	4807      	ldr	r0, [pc, #28]	; (8009edc <CDC_OTG_Send+0xd4>)
 8009ec0:	f7fe fbae 	bl	8008620 <USBD_CDC_SetTxBuffer>
	  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009ec4:	4805      	ldr	r0, [pc, #20]	; (8009edc <CDC_OTG_Send+0xd4>)
 8009ec6:	f7fe fbeb 	bl	80086a0 <USBD_CDC_TransmitPacket>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	73fb      	strb	r3, [r7, #15]
	  return result;
 8009ece:	7bfb      	ldrb	r3, [r7, #15]
 8009ed0:	b29b      	uxth	r3, r3
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3714      	adds	r7, #20
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd90      	pop	{r4, r7, pc}
 8009eda:	bf00      	nop
 8009edc:	24000c18 	.word	0x24000c18
 8009ee0:	240020fc 	.word	0x240020fc
 8009ee4:	58020400 	.word	0x58020400
 8009ee8:	24000c10 	.word	0x24000c10
 8009eec:	24000c14 	.word	0x24000c14

08009ef0 <CDC_OTG_Recv>:

uint16_t CDC_OTG_Recv(uint8_t *Buf){
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]

	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 8009ef8:	6879      	ldr	r1, [r7, #4]
 8009efa:	4805      	ldr	r0, [pc, #20]	; (8009f10 <CDC_OTG_Recv+0x20>)
 8009efc:	f7fe fbb2 	bl	8008664 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009f00:	4803      	ldr	r0, [pc, #12]	; (8009f10 <CDC_OTG_Recv+0x20>)
 8009f02:	f7fe fc0d 	bl	8008720 <USBD_CDC_ReceivePacket>
	  return (USBD_OK);
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3708      	adds	r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	24000c18 	.word	0x24000c18

08009f14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009f18:	2200      	movs	r2, #0
 8009f1a:	4913      	ldr	r1, [pc, #76]	; (8009f68 <MX_USB_DEVICE_Init+0x54>)
 8009f1c:	4813      	ldr	r0, [pc, #76]	; (8009f6c <MX_USB_DEVICE_Init+0x58>)
 8009f1e:	f7fe fc35 	bl	800878c <USBD_Init>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d001      	beq.n	8009f2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f28:	f7f6 fec6 	bl	8000cb8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f2c:	4910      	ldr	r1, [pc, #64]	; (8009f70 <MX_USB_DEVICE_Init+0x5c>)
 8009f2e:	480f      	ldr	r0, [pc, #60]	; (8009f6c <MX_USB_DEVICE_Init+0x58>)
 8009f30:	f7fe fc6a 	bl	8008808 <USBD_RegisterClass>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d001      	beq.n	8009f3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f3a:	f7f6 febd 	bl	8000cb8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009f3e:	490d      	ldr	r1, [pc, #52]	; (8009f74 <MX_USB_DEVICE_Init+0x60>)
 8009f40:	480a      	ldr	r0, [pc, #40]	; (8009f6c <MX_USB_DEVICE_Init+0x58>)
 8009f42:	f7fe fb53 	bl	80085ec <USBD_CDC_RegisterInterface>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009f4c:	f7f6 feb4 	bl	8000cb8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f50:	4806      	ldr	r0, [pc, #24]	; (8009f6c <MX_USB_DEVICE_Init+0x58>)
 8009f52:	f7fe fc9d 	bl	8008890 <USBD_Start>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d001      	beq.n	8009f60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009f5c:	f7f6 feac 	bl	8000cb8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8009f60:	f7fa f8b6 	bl	80040d0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f64:	bf00      	nop
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	240000c8 	.word	0x240000c8
 8009f6c:	24000c18 	.word	0x24000c18
 8009f70:	24000034 	.word	0x24000034
 8009f74:	240000b4 	.word	0x240000b4

08009f78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	4905      	ldr	r1, [pc, #20]	; (8009f94 <CDC_Init_FS+0x1c>)
 8009f80:	4805      	ldr	r0, [pc, #20]	; (8009f98 <CDC_Init_FS+0x20>)
 8009f82:	f7fe fb4d 	bl	8008620 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009f86:	4905      	ldr	r1, [pc, #20]	; (8009f9c <CDC_Init_FS+0x24>)
 8009f88:	4803      	ldr	r0, [pc, #12]	; (8009f98 <CDC_Init_FS+0x20>)
 8009f8a:	f7fe fb6b 	bl	8008664 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009f8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	240016fc 	.word	0x240016fc
 8009f98:	24000c18 	.word	0x24000c18
 8009f9c:	24000efc 	.word	0x24000efc

08009fa0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009fa4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	6039      	str	r1, [r7, #0]
 8009fba:	71fb      	strb	r3, [r7, #7]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009fc0:	79fb      	ldrb	r3, [r7, #7]
 8009fc2:	2b23      	cmp	r3, #35	; 0x23
 8009fc4:	f200 8092 	bhi.w	800a0ec <CDC_Control_FS+0x13c>
 8009fc8:	a201      	add	r2, pc, #4	; (adr r2, 8009fd0 <CDC_Control_FS+0x20>)
 8009fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fce:	bf00      	nop
 8009fd0:	0800a0ed 	.word	0x0800a0ed
 8009fd4:	0800a0ed 	.word	0x0800a0ed
 8009fd8:	0800a0ed 	.word	0x0800a0ed
 8009fdc:	0800a0ed 	.word	0x0800a0ed
 8009fe0:	0800a0ed 	.word	0x0800a0ed
 8009fe4:	0800a0ed 	.word	0x0800a0ed
 8009fe8:	0800a0ed 	.word	0x0800a0ed
 8009fec:	0800a0ed 	.word	0x0800a0ed
 8009ff0:	0800a0ed 	.word	0x0800a0ed
 8009ff4:	0800a0ed 	.word	0x0800a0ed
 8009ff8:	0800a0ed 	.word	0x0800a0ed
 8009ffc:	0800a0ed 	.word	0x0800a0ed
 800a000:	0800a0ed 	.word	0x0800a0ed
 800a004:	0800a0ed 	.word	0x0800a0ed
 800a008:	0800a0ed 	.word	0x0800a0ed
 800a00c:	0800a0ed 	.word	0x0800a0ed
 800a010:	0800a0ed 	.word	0x0800a0ed
 800a014:	0800a0ed 	.word	0x0800a0ed
 800a018:	0800a0ed 	.word	0x0800a0ed
 800a01c:	0800a0ed 	.word	0x0800a0ed
 800a020:	0800a0ed 	.word	0x0800a0ed
 800a024:	0800a0ed 	.word	0x0800a0ed
 800a028:	0800a0ed 	.word	0x0800a0ed
 800a02c:	0800a0ed 	.word	0x0800a0ed
 800a030:	0800a0ed 	.word	0x0800a0ed
 800a034:	0800a0ed 	.word	0x0800a0ed
 800a038:	0800a0ed 	.word	0x0800a0ed
 800a03c:	0800a0ed 	.word	0x0800a0ed
 800a040:	0800a0ed 	.word	0x0800a0ed
 800a044:	0800a0ed 	.word	0x0800a0ed
 800a048:	0800a0ed 	.word	0x0800a0ed
 800a04c:	0800a0ed 	.word	0x0800a0ed
 800a050:	0800a061 	.word	0x0800a061
 800a054:	0800a0a7 	.word	0x0800a0a7
 800a058:	0800a0ed 	.word	0x0800a0ed
 800a05c:	0800a0ed 	.word	0x0800a0ed
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      tempbuf[0]=pbuf[0];
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	781a      	ldrb	r2, [r3, #0]
 800a064:	4b25      	ldr	r3, [pc, #148]	; (800a0fc <CDC_Control_FS+0x14c>)
 800a066:	701a      	strb	r2, [r3, #0]
      tempbuf[1]=pbuf[1];
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	3301      	adds	r3, #1
 800a06c:	781a      	ldrb	r2, [r3, #0]
 800a06e:	4b23      	ldr	r3, [pc, #140]	; (800a0fc <CDC_Control_FS+0x14c>)
 800a070:	705a      	strb	r2, [r3, #1]
      tempbuf[2]=pbuf[2];
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	3302      	adds	r3, #2
 800a076:	781a      	ldrb	r2, [r3, #0]
 800a078:	4b20      	ldr	r3, [pc, #128]	; (800a0fc <CDC_Control_FS+0x14c>)
 800a07a:	709a      	strb	r2, [r3, #2]
      tempbuf[3]=pbuf[3];
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	3303      	adds	r3, #3
 800a080:	781a      	ldrb	r2, [r3, #0]
 800a082:	4b1e      	ldr	r3, [pc, #120]	; (800a0fc <CDC_Control_FS+0x14c>)
 800a084:	70da      	strb	r2, [r3, #3]
      tempbuf[4]=pbuf[4];
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	3304      	adds	r3, #4
 800a08a:	781a      	ldrb	r2, [r3, #0]
 800a08c:	4b1b      	ldr	r3, [pc, #108]	; (800a0fc <CDC_Control_FS+0x14c>)
 800a08e:	711a      	strb	r2, [r3, #4]
      tempbuf[5]=pbuf[5];
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	3305      	adds	r3, #5
 800a094:	781a      	ldrb	r2, [r3, #0]
 800a096:	4b19      	ldr	r3, [pc, #100]	; (800a0fc <CDC_Control_FS+0x14c>)
 800a098:	715a      	strb	r2, [r3, #5]
      tempbuf[6]=pbuf[6];
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	3306      	adds	r3, #6
 800a09e:	781a      	ldrb	r2, [r3, #0]
 800a0a0:	4b16      	ldr	r3, [pc, #88]	; (800a0fc <CDC_Control_FS+0x14c>)
 800a0a2:	719a      	strb	r2, [r3, #6]
      break;
 800a0a4:	e023      	b.n	800a0ee <CDC_Control_FS+0x13e>
    case CDC_GET_LINE_CODING:
      pbuf[0]=tempbuf[0];
 800a0a6:	4b15      	ldr	r3, [pc, #84]	; (800a0fc <CDC_Control_FS+0x14c>)
 800a0a8:	781a      	ldrb	r2, [r3, #0]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	701a      	strb	r2, [r3, #0]
      pbuf[1]=tempbuf[1];
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	4a12      	ldr	r2, [pc, #72]	; (800a0fc <CDC_Control_FS+0x14c>)
 800a0b4:	7852      	ldrb	r2, [r2, #1]
 800a0b6:	701a      	strb	r2, [r3, #0]
      pbuf[2]=tempbuf[2];
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	3302      	adds	r3, #2
 800a0bc:	4a0f      	ldr	r2, [pc, #60]	; (800a0fc <CDC_Control_FS+0x14c>)
 800a0be:	7892      	ldrb	r2, [r2, #2]
 800a0c0:	701a      	strb	r2, [r3, #0]
      pbuf[3]=tempbuf[3];
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	3303      	adds	r3, #3
 800a0c6:	4a0d      	ldr	r2, [pc, #52]	; (800a0fc <CDC_Control_FS+0x14c>)
 800a0c8:	78d2      	ldrb	r2, [r2, #3]
 800a0ca:	701a      	strb	r2, [r3, #0]
      pbuf[4]=tempbuf[4];
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	4a0a      	ldr	r2, [pc, #40]	; (800a0fc <CDC_Control_FS+0x14c>)
 800a0d2:	7912      	ldrb	r2, [r2, #4]
 800a0d4:	701a      	strb	r2, [r3, #0]
      pbuf[5]=tempbuf[5];
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	3305      	adds	r3, #5
 800a0da:	4a08      	ldr	r2, [pc, #32]	; (800a0fc <CDC_Control_FS+0x14c>)
 800a0dc:	7952      	ldrb	r2, [r2, #5]
 800a0de:	701a      	strb	r2, [r3, #0]
      pbuf[6]=tempbuf[6];
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	3306      	adds	r3, #6
 800a0e4:	4a05      	ldr	r2, [pc, #20]	; (800a0fc <CDC_Control_FS+0x14c>)
 800a0e6:	7992      	ldrb	r2, [r2, #6]
 800a0e8:	701a      	strb	r2, [r3, #0]
      break;
 800a0ea:	e000      	b.n	800a0ee <CDC_Control_FS+0x13e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a0ec:	bf00      	nop
  }

  return (USBD_OK);
 800a0ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	24000ef4 	.word	0x24000ef4

0800a100 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800a10a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a118:	b480      	push	{r7}
 800a11a:	b087      	sub	sp, #28
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	4613      	mov	r3, r2
 800a124:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a126:	2300      	movs	r3, #0
 800a128:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a12a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a12e:	4618      	mov	r0, r3
 800a130:	371c      	adds	r7, #28
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
	...

0800a13c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	4603      	mov	r3, r0
 800a144:	6039      	str	r1, [r7, #0]
 800a146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	2212      	movs	r2, #18
 800a14c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a14e:	4b03      	ldr	r3, [pc, #12]	; (800a15c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a150:	4618      	mov	r0, r3
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr
 800a15c:	240000e8 	.word	0x240000e8

0800a160 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	4603      	mov	r3, r0
 800a168:	6039      	str	r1, [r7, #0]
 800a16a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	2204      	movs	r2, #4
 800a170:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a172:	4b03      	ldr	r3, [pc, #12]	; (800a180 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a174:	4618      	mov	r0, r3
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	240000fc 	.word	0x240000fc

0800a184 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	4603      	mov	r3, r0
 800a18c:	6039      	str	r1, [r7, #0]
 800a18e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a190:	79fb      	ldrb	r3, [r7, #7]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d105      	bne.n	800a1a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a196:	683a      	ldr	r2, [r7, #0]
 800a198:	4907      	ldr	r1, [pc, #28]	; (800a1b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a19a:	4808      	ldr	r0, [pc, #32]	; (800a1bc <USBD_FS_ProductStrDescriptor+0x38>)
 800a19c:	f7ff fd54 	bl	8009c48 <USBD_GetString>
 800a1a0:	e004      	b.n	800a1ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1a2:	683a      	ldr	r2, [r7, #0]
 800a1a4:	4904      	ldr	r1, [pc, #16]	; (800a1b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a1a6:	4805      	ldr	r0, [pc, #20]	; (800a1bc <USBD_FS_ProductStrDescriptor+0x38>)
 800a1a8:	f7ff fd4e 	bl	8009c48 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1ac:	4b02      	ldr	r3, [pc, #8]	; (800a1b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3708      	adds	r7, #8
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	24001efc 	.word	0x24001efc
 800a1bc:	0800d4bc 	.word	0x0800d4bc

0800a1c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	6039      	str	r1, [r7, #0]
 800a1ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a1cc:	683a      	ldr	r2, [r7, #0]
 800a1ce:	4904      	ldr	r1, [pc, #16]	; (800a1e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a1d0:	4804      	ldr	r0, [pc, #16]	; (800a1e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a1d2:	f7ff fd39 	bl	8009c48 <USBD_GetString>
  return USBD_StrDesc;
 800a1d6:	4b02      	ldr	r3, [pc, #8]	; (800a1e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	24001efc 	.word	0x24001efc
 800a1e4:	0800d4d4 	.word	0x0800d4d4

0800a1e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	6039      	str	r1, [r7, #0]
 800a1f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	221a      	movs	r2, #26
 800a1f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a1fa:	f000 f843 	bl	800a284 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a1fe:	4b02      	ldr	r3, [pc, #8]	; (800a208 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a200:	4618      	mov	r0, r3
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	24000100 	.word	0x24000100

0800a20c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	4603      	mov	r3, r0
 800a214:	6039      	str	r1, [r7, #0]
 800a216:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a218:	79fb      	ldrb	r3, [r7, #7]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d105      	bne.n	800a22a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a21e:	683a      	ldr	r2, [r7, #0]
 800a220:	4907      	ldr	r1, [pc, #28]	; (800a240 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a222:	4808      	ldr	r0, [pc, #32]	; (800a244 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a224:	f7ff fd10 	bl	8009c48 <USBD_GetString>
 800a228:	e004      	b.n	800a234 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	4904      	ldr	r1, [pc, #16]	; (800a240 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a22e:	4805      	ldr	r0, [pc, #20]	; (800a244 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a230:	f7ff fd0a 	bl	8009c48 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a234:	4b02      	ldr	r3, [pc, #8]	; (800a240 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a236:	4618      	mov	r0, r3
 800a238:	3708      	adds	r7, #8
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	24001efc 	.word	0x24001efc
 800a244:	0800d4e8 	.word	0x0800d4e8

0800a248 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	4603      	mov	r3, r0
 800a250:	6039      	str	r1, [r7, #0]
 800a252:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a254:	79fb      	ldrb	r3, [r7, #7]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d105      	bne.n	800a266 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	4907      	ldr	r1, [pc, #28]	; (800a27c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a25e:	4808      	ldr	r0, [pc, #32]	; (800a280 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a260:	f7ff fcf2 	bl	8009c48 <USBD_GetString>
 800a264:	e004      	b.n	800a270 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a266:	683a      	ldr	r2, [r7, #0]
 800a268:	4904      	ldr	r1, [pc, #16]	; (800a27c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a26a:	4805      	ldr	r0, [pc, #20]	; (800a280 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a26c:	f7ff fcec 	bl	8009c48 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a270:	4b02      	ldr	r3, [pc, #8]	; (800a27c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a272:	4618      	mov	r0, r3
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	24001efc 	.word	0x24001efc
 800a280:	0800d4f4 	.word	0x0800d4f4

0800a284 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a28a:	4b0f      	ldr	r3, [pc, #60]	; (800a2c8 <Get_SerialNum+0x44>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a290:	4b0e      	ldr	r3, [pc, #56]	; (800a2cc <Get_SerialNum+0x48>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a296:	4b0e      	ldr	r3, [pc, #56]	; (800a2d0 <Get_SerialNum+0x4c>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a29c:	68fa      	ldr	r2, [r7, #12]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d009      	beq.n	800a2be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a2aa:	2208      	movs	r2, #8
 800a2ac:	4909      	ldr	r1, [pc, #36]	; (800a2d4 <Get_SerialNum+0x50>)
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f000 f814 	bl	800a2dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a2b4:	2204      	movs	r2, #4
 800a2b6:	4908      	ldr	r1, [pc, #32]	; (800a2d8 <Get_SerialNum+0x54>)
 800a2b8:	68b8      	ldr	r0, [r7, #8]
 800a2ba:	f000 f80f 	bl	800a2dc <IntToUnicode>
  }
}
 800a2be:	bf00      	nop
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	1ff1e800 	.word	0x1ff1e800
 800a2cc:	1ff1e804 	.word	0x1ff1e804
 800a2d0:	1ff1e808 	.word	0x1ff1e808
 800a2d4:	24000102 	.word	0x24000102
 800a2d8:	24000112 	.word	0x24000112

0800a2dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b087      	sub	sp, #28
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	75fb      	strb	r3, [r7, #23]
 800a2f2:	e027      	b.n	800a344 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	0f1b      	lsrs	r3, r3, #28
 800a2f8:	2b09      	cmp	r3, #9
 800a2fa:	d80b      	bhi.n	800a314 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	0f1b      	lsrs	r3, r3, #28
 800a300:	b2da      	uxtb	r2, r3
 800a302:	7dfb      	ldrb	r3, [r7, #23]
 800a304:	005b      	lsls	r3, r3, #1
 800a306:	4619      	mov	r1, r3
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	440b      	add	r3, r1
 800a30c:	3230      	adds	r2, #48	; 0x30
 800a30e:	b2d2      	uxtb	r2, r2
 800a310:	701a      	strb	r2, [r3, #0]
 800a312:	e00a      	b.n	800a32a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	0f1b      	lsrs	r3, r3, #28
 800a318:	b2da      	uxtb	r2, r3
 800a31a:	7dfb      	ldrb	r3, [r7, #23]
 800a31c:	005b      	lsls	r3, r3, #1
 800a31e:	4619      	mov	r1, r3
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	440b      	add	r3, r1
 800a324:	3237      	adds	r2, #55	; 0x37
 800a326:	b2d2      	uxtb	r2, r2
 800a328:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	011b      	lsls	r3, r3, #4
 800a32e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a330:	7dfb      	ldrb	r3, [r7, #23]
 800a332:	005b      	lsls	r3, r3, #1
 800a334:	3301      	adds	r3, #1
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	4413      	add	r3, r2
 800a33a:	2200      	movs	r2, #0
 800a33c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a33e:	7dfb      	ldrb	r3, [r7, #23]
 800a340:	3301      	adds	r3, #1
 800a342:	75fb      	strb	r3, [r7, #23]
 800a344:	7dfa      	ldrb	r2, [r7, #23]
 800a346:	79fb      	ldrb	r3, [r7, #7]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d3d3      	bcc.n	800a2f4 <IntToUnicode+0x18>
  }
}
 800a34c:	bf00      	nop
 800a34e:	bf00      	nop
 800a350:	371c      	adds	r7, #28
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr
	...

0800a35c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b0ba      	sub	sp, #232	; 0xe8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a364:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800a368:	2200      	movs	r2, #0
 800a36a:	601a      	str	r2, [r3, #0]
 800a36c:	605a      	str	r2, [r3, #4]
 800a36e:	609a      	str	r2, [r3, #8]
 800a370:	60da      	str	r2, [r3, #12]
 800a372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a374:	f107 0310 	add.w	r3, r7, #16
 800a378:	22c0      	movs	r2, #192	; 0xc0
 800a37a:	2100      	movs	r1, #0
 800a37c:	4618      	mov	r0, r3
 800a37e:	f001 f98d 	bl	800b69c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a34      	ldr	r2, [pc, #208]	; (800a458 <HAL_PCD_MspInit+0xfc>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d161      	bne.n	800a450 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a38c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a390:	f04f 0300 	mov.w	r3, #0
 800a394:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a398:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800a39c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a3a0:	f107 0310 	add.w	r3, r7, #16
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7fa fe5d 	bl	8005064 <HAL_RCCEx_PeriphCLKConfig>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d001      	beq.n	800a3b4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800a3b0:	f7f6 fc82 	bl	8000cb8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800a3b4:	f7f9 fe8c 	bl	80040d0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3b8:	4b28      	ldr	r3, [pc, #160]	; (800a45c <HAL_PCD_MspInit+0x100>)
 800a3ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3be:	4a27      	ldr	r2, [pc, #156]	; (800a45c <HAL_PCD_MspInit+0x100>)
 800a3c0:	f043 0301 	orr.w	r3, r3, #1
 800a3c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a3c8:	4b24      	ldr	r3, [pc, #144]	; (800a45c <HAL_PCD_MspInit+0x100>)
 800a3ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3ce:	f003 0301 	and.w	r3, r3, #1
 800a3d2:	60fb      	str	r3, [r7, #12]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a3d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	481b      	ldr	r0, [pc, #108]	; (800a460 <HAL_PCD_MspInit+0x104>)
 800a3f2:	f7f7 f873 	bl	80014dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a3f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a3fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3fe:	2302      	movs	r3, #2
 800a400:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a404:	2300      	movs	r3, #0
 800a406:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a40a:	2300      	movs	r3, #0
 800a40c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800a410:	230a      	movs	r3, #10
 800a412:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a416:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800a41a:	4619      	mov	r1, r3
 800a41c:	4810      	ldr	r0, [pc, #64]	; (800a460 <HAL_PCD_MspInit+0x104>)
 800a41e:	f7f7 f85d 	bl	80014dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a422:	4b0e      	ldr	r3, [pc, #56]	; (800a45c <HAL_PCD_MspInit+0x100>)
 800a424:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a428:	4a0c      	ldr	r2, [pc, #48]	; (800a45c <HAL_PCD_MspInit+0x100>)
 800a42a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a42e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a432:	4b0a      	ldr	r3, [pc, #40]	; (800a45c <HAL_PCD_MspInit+0x100>)
 800a434:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a43c:	60bb      	str	r3, [r7, #8]
 800a43e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a440:	2200      	movs	r2, #0
 800a442:	2100      	movs	r1, #0
 800a444:	2065      	movs	r0, #101	; 0x65
 800a446:	f7f7 f814 	bl	8001472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a44a:	2065      	movs	r0, #101	; 0x65
 800a44c:	f7f7 f82b 	bl	80014a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a450:	bf00      	nop
 800a452:	37e8      	adds	r7, #232	; 0xe8
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	40080000 	.word	0x40080000
 800a45c:	58024400 	.word	0x58024400
 800a460:	58020000 	.word	0x58020000

0800a464 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a478:	4619      	mov	r1, r3
 800a47a:	4610      	mov	r0, r2
 800a47c:	f7fe fa55 	bl	800892a <USBD_LL_SetupStage>
}
 800a480:	bf00      	nop
 800a482:	3708      	adds	r7, #8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	460b      	mov	r3, r1
 800a492:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a49a:	78fa      	ldrb	r2, [r7, #3]
 800a49c:	6879      	ldr	r1, [r7, #4]
 800a49e:	4613      	mov	r3, r2
 800a4a0:	00db      	lsls	r3, r3, #3
 800a4a2:	4413      	add	r3, r2
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	440b      	add	r3, r1
 800a4a8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	78fb      	ldrb	r3, [r7, #3]
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	f7fe fa8f 	bl	80089d4 <USBD_LL_DataOutStage>
}
 800a4b6:	bf00      	nop
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b082      	sub	sp, #8
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a4d0:	78fa      	ldrb	r2, [r7, #3]
 800a4d2:	6879      	ldr	r1, [r7, #4]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	00db      	lsls	r3, r3, #3
 800a4d8:	4413      	add	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	440b      	add	r3, r1
 800a4de:	3348      	adds	r3, #72	; 0x48
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	78fb      	ldrb	r3, [r7, #3]
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	f7fe fb28 	bl	8008b3a <USBD_LL_DataInStage>
}
 800a4ea:	bf00      	nop
 800a4ec:	3708      	adds	r7, #8
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b082      	sub	sp, #8
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a500:	4618      	mov	r0, r3
 800a502:	f7fe fc62 	bl	8008dca <USBD_LL_SOF>
}
 800a506:	bf00      	nop
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b084      	sub	sp, #16
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a516:	2301      	movs	r3, #1
 800a518:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d102      	bne.n	800a528 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a522:	2300      	movs	r3, #0
 800a524:	73fb      	strb	r3, [r7, #15]
 800a526:	e008      	b.n	800a53a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d102      	bne.n	800a536 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a530:	2301      	movs	r3, #1
 800a532:	73fb      	strb	r3, [r7, #15]
 800a534:	e001      	b.n	800a53a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a536:	f7f6 fbbf 	bl	8000cb8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a540:	7bfa      	ldrb	r2, [r7, #15]
 800a542:	4611      	mov	r1, r2
 800a544:	4618      	mov	r0, r3
 800a546:	f7fe fbfc 	bl	8008d42 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a550:	4618      	mov	r0, r3
 800a552:	f7fe fba4 	bl	8008c9e <USBD_LL_Reset>
}
 800a556:	bf00      	nop
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
	...

0800a560 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a56e:	4618      	mov	r0, r3
 800a570:	f7fe fbf7 	bl	8008d62 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	6812      	ldr	r2, [r2, #0]
 800a582:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a586:	f043 0301 	orr.w	r3, r3, #1
 800a58a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a1b      	ldr	r3, [r3, #32]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d005      	beq.n	800a5a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a594:	4b04      	ldr	r3, [pc, #16]	; (800a5a8 <HAL_PCD_SuspendCallback+0x48>)
 800a596:	691b      	ldr	r3, [r3, #16]
 800a598:	4a03      	ldr	r2, [pc, #12]	; (800a5a8 <HAL_PCD_SuspendCallback+0x48>)
 800a59a:	f043 0306 	orr.w	r3, r3, #6
 800a59e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a5a0:	bf00      	nop
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	e000ed00 	.word	0xe000ed00

0800a5ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fe fbed 	bl	8008d9a <USBD_LL_Resume>
}
 800a5c0:	bf00      	nop
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a5da:	78fa      	ldrb	r2, [r7, #3]
 800a5dc:	4611      	mov	r1, r2
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7fe fc45 	bl	8008e6e <USBD_LL_IsoOUTIncomplete>
}
 800a5e4:	bf00      	nop
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a5fe:	78fa      	ldrb	r2, [r7, #3]
 800a600:	4611      	mov	r1, r2
 800a602:	4618      	mov	r0, r3
 800a604:	f7fe fc01 	bl	8008e0a <USBD_LL_IsoINIncomplete>
}
 800a608:	bf00      	nop
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a61e:	4618      	mov	r0, r3
 800a620:	f7fe fc57 	bl	8008ed2 <USBD_LL_DevConnected>
}
 800a624:	bf00      	nop
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7fe fc54 	bl	8008ee8 <USBD_LL_DevDisconnected>
}
 800a640:	bf00      	nop
 800a642:	3708      	adds	r7, #8
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d140      	bne.n	800a6da <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a658:	4a22      	ldr	r2, [pc, #136]	; (800a6e4 <USBD_LL_Init+0x9c>)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4a20      	ldr	r2, [pc, #128]	; (800a6e4 <USBD_LL_Init+0x9c>)
 800a664:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a668:	4b1e      	ldr	r3, [pc, #120]	; (800a6e4 <USBD_LL_Init+0x9c>)
 800a66a:	4a1f      	ldr	r2, [pc, #124]	; (800a6e8 <USBD_LL_Init+0xa0>)
 800a66c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800a66e:	4b1d      	ldr	r3, [pc, #116]	; (800a6e4 <USBD_LL_Init+0x9c>)
 800a670:	2209      	movs	r2, #9
 800a672:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a674:	4b1b      	ldr	r3, [pc, #108]	; (800a6e4 <USBD_LL_Init+0x9c>)
 800a676:	2202      	movs	r2, #2
 800a678:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a67a:	4b1a      	ldr	r3, [pc, #104]	; (800a6e4 <USBD_LL_Init+0x9c>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a680:	4b18      	ldr	r3, [pc, #96]	; (800a6e4 <USBD_LL_Init+0x9c>)
 800a682:	2202      	movs	r2, #2
 800a684:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a686:	4b17      	ldr	r3, [pc, #92]	; (800a6e4 <USBD_LL_Init+0x9c>)
 800a688:	2200      	movs	r2, #0
 800a68a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a68c:	4b15      	ldr	r3, [pc, #84]	; (800a6e4 <USBD_LL_Init+0x9c>)
 800a68e:	2200      	movs	r2, #0
 800a690:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a692:	4b14      	ldr	r3, [pc, #80]	; (800a6e4 <USBD_LL_Init+0x9c>)
 800a694:	2200      	movs	r2, #0
 800a696:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800a698:	4b12      	ldr	r3, [pc, #72]	; (800a6e4 <USBD_LL_Init+0x9c>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a69e:	4b11      	ldr	r3, [pc, #68]	; (800a6e4 <USBD_LL_Init+0x9c>)
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a6a4:	4b0f      	ldr	r3, [pc, #60]	; (800a6e4 <USBD_LL_Init+0x9c>)
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a6aa:	480e      	ldr	r0, [pc, #56]	; (800a6e4 <USBD_LL_Init+0x9c>)
 800a6ac:	f7f8 fa1c 	bl	8002ae8 <HAL_PCD_Init>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a6b6:	f7f6 faff 	bl	8000cb8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x200);
 800a6ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6be:	4809      	ldr	r0, [pc, #36]	; (800a6e4 <USBD_LL_Init+0x9c>)
 800a6c0:	f7f9 fc8b 	bl	8003fda <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x80);
 800a6c4:	2280      	movs	r2, #128	; 0x80
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	4806      	ldr	r0, [pc, #24]	; (800a6e4 <USBD_LL_Init+0x9c>)
 800a6ca:	f7f9 fc3f 	bl	8003f4c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x200);
 800a6ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6d2:	2101      	movs	r1, #1
 800a6d4:	4803      	ldr	r0, [pc, #12]	; (800a6e4 <USBD_LL_Init+0x9c>)
 800a6d6:	f7f9 fc39 	bl	8003f4c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	24002100 	.word	0x24002100
 800a6e8:	40080000 	.word	0x40080000

0800a6ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a702:	4618      	mov	r0, r3
 800a704:	f7f8 fb14 	bl	8002d30 <HAL_PCD_Start>
 800a708:	4603      	mov	r3, r0
 800a70a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a70c:	7bfb      	ldrb	r3, [r7, #15]
 800a70e:	4618      	mov	r0, r3
 800a710:	f000 f942 	bl	800a998 <USBD_Get_USB_Status>
 800a714:	4603      	mov	r3, r0
 800a716:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a718:	7bbb      	ldrb	r3, [r7, #14]
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b084      	sub	sp, #16
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
 800a72a:	4608      	mov	r0, r1
 800a72c:	4611      	mov	r1, r2
 800a72e:	461a      	mov	r2, r3
 800a730:	4603      	mov	r3, r0
 800a732:	70fb      	strb	r3, [r7, #3]
 800a734:	460b      	mov	r3, r1
 800a736:	70bb      	strb	r3, [r7, #2]
 800a738:	4613      	mov	r3, r2
 800a73a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a73c:	2300      	movs	r3, #0
 800a73e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a740:	2300      	movs	r3, #0
 800a742:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a74a:	78bb      	ldrb	r3, [r7, #2]
 800a74c:	883a      	ldrh	r2, [r7, #0]
 800a74e:	78f9      	ldrb	r1, [r7, #3]
 800a750:	f7f9 f814 	bl	800377c <HAL_PCD_EP_Open>
 800a754:	4603      	mov	r3, r0
 800a756:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a758:	7bfb      	ldrb	r3, [r7, #15]
 800a75a:	4618      	mov	r0, r3
 800a75c:	f000 f91c 	bl	800a998 <USBD_Get_USB_Status>
 800a760:	4603      	mov	r3, r0
 800a762:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a764:	7bbb      	ldrb	r3, [r7, #14]
}
 800a766:	4618      	mov	r0, r3
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b084      	sub	sp, #16
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
 800a776:	460b      	mov	r3, r1
 800a778:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a77e:	2300      	movs	r3, #0
 800a780:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a788:	78fa      	ldrb	r2, [r7, #3]
 800a78a:	4611      	mov	r1, r2
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7f9 f85d 	bl	800384c <HAL_PCD_EP_Close>
 800a792:	4603      	mov	r3, r0
 800a794:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a796:	7bfb      	ldrb	r3, [r7, #15]
 800a798:	4618      	mov	r0, r3
 800a79a:	f000 f8fd 	bl	800a998 <USBD_Get_USB_Status>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a7c6:	78fa      	ldrb	r2, [r7, #3]
 800a7c8:	4611      	mov	r1, r2
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7f9 f917 	bl	80039fe <HAL_PCD_EP_SetStall>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7d4:	7bfb      	ldrb	r3, [r7, #15]
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f000 f8de 	bl	800a998 <USBD_Get_USB_Status>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b084      	sub	sp, #16
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a804:	78fa      	ldrb	r2, [r7, #3]
 800a806:	4611      	mov	r1, r2
 800a808:	4618      	mov	r0, r3
 800a80a:	f7f9 f95c 	bl	8003ac6 <HAL_PCD_EP_ClrStall>
 800a80e:	4603      	mov	r3, r0
 800a810:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a812:	7bfb      	ldrb	r3, [r7, #15]
 800a814:	4618      	mov	r0, r3
 800a816:	f000 f8bf 	bl	800a998 <USBD_Get_USB_Status>
 800a81a:	4603      	mov	r3, r0
 800a81c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a81e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a820:	4618      	mov	r0, r3
 800a822:	3710      	adds	r7, #16
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	460b      	mov	r3, r1
 800a832:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a83a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a83c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a840:	2b00      	cmp	r3, #0
 800a842:	da0b      	bge.n	800a85c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a844:	78fb      	ldrb	r3, [r7, #3]
 800a846:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a84a:	68f9      	ldr	r1, [r7, #12]
 800a84c:	4613      	mov	r3, r2
 800a84e:	00db      	lsls	r3, r3, #3
 800a850:	4413      	add	r3, r2
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	440b      	add	r3, r1
 800a856:	333e      	adds	r3, #62	; 0x3e
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	e00b      	b.n	800a874 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a85c:	78fb      	ldrb	r3, [r7, #3]
 800a85e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a862:	68f9      	ldr	r1, [r7, #12]
 800a864:	4613      	mov	r3, r2
 800a866:	00db      	lsls	r3, r3, #3
 800a868:	4413      	add	r3, r2
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	440b      	add	r3, r1
 800a86e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a872:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a874:	4618      	mov	r0, r3
 800a876:	3714      	adds	r7, #20
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	460b      	mov	r3, r1
 800a88a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a88c:	2300      	movs	r3, #0
 800a88e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a890:	2300      	movs	r3, #0
 800a892:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a89a:	78fa      	ldrb	r2, [r7, #3]
 800a89c:	4611      	mov	r1, r2
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7f8 ff47 	bl	8003732 <HAL_PCD_SetAddress>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f000 f874 	bl	800a998 <USBD_Get_USB_Status>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b086      	sub	sp, #24
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	60f8      	str	r0, [r7, #12]
 800a8c6:	607a      	str	r2, [r7, #4]
 800a8c8:	603b      	str	r3, [r7, #0]
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a8dc:	7af9      	ldrb	r1, [r7, #11]
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	f7f9 f851 	bl	8003988 <HAL_PCD_EP_Transmit>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8ea:	7dfb      	ldrb	r3, [r7, #23]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f000 f853 	bl	800a998 <USBD_Get_USB_Status>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8f6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3718      	adds	r7, #24
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b086      	sub	sp, #24
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	607a      	str	r2, [r7, #4]
 800a90a:	603b      	str	r3, [r7, #0]
 800a90c:	460b      	mov	r3, r1
 800a90e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a910:	2300      	movs	r3, #0
 800a912:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a91e:	7af9      	ldrb	r1, [r7, #11]
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	f7f8 ffdc 	bl	80038e0 <HAL_PCD_EP_Receive>
 800a928:	4603      	mov	r3, r0
 800a92a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a92c:	7dfb      	ldrb	r3, [r7, #23]
 800a92e:	4618      	mov	r0, r3
 800a930:	f000 f832 	bl	800a998 <USBD_Get_USB_Status>
 800a934:	4603      	mov	r3, r0
 800a936:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a938:	7dbb      	ldrb	r3, [r7, #22]
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3718      	adds	r7, #24
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}

0800a942 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b082      	sub	sp, #8
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	460b      	mov	r3, r1
 800a94c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a954:	78fa      	ldrb	r2, [r7, #3]
 800a956:	4611      	mov	r1, r2
 800a958:	4618      	mov	r0, r3
 800a95a:	f7f8 fffd 	bl	8003958 <HAL_PCD_EP_GetRxCount>
 800a95e:	4603      	mov	r3, r0
}
 800a960:	4618      	mov	r0, r3
 800a962:	3708      	adds	r7, #8
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a970:	4b03      	ldr	r3, [pc, #12]	; (800a980 <USBD_static_malloc+0x18>)
}
 800a972:	4618      	mov	r0, r3
 800a974:	370c      	adds	r7, #12
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	2400260c 	.word	0x2400260c

0800a984 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800a98c:	bf00      	nop
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	4603      	mov	r3, r0
 800a9a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a9a6:	79fb      	ldrb	r3, [r7, #7]
 800a9a8:	2b03      	cmp	r3, #3
 800a9aa:	d817      	bhi.n	800a9dc <USBD_Get_USB_Status+0x44>
 800a9ac:	a201      	add	r2, pc, #4	; (adr r2, 800a9b4 <USBD_Get_USB_Status+0x1c>)
 800a9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b2:	bf00      	nop
 800a9b4:	0800a9c5 	.word	0x0800a9c5
 800a9b8:	0800a9cb 	.word	0x0800a9cb
 800a9bc:	0800a9d1 	.word	0x0800a9d1
 800a9c0:	0800a9d7 	.word	0x0800a9d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a9c8:	e00b      	b.n	800a9e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a9ce:	e008      	b.n	800a9e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a9d4:	e005      	b.n	800a9e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	73fb      	strb	r3, [r7, #15]
    break;
 800a9da:	e002      	b.n	800a9e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a9dc:	2303      	movs	r3, #3
 800a9de:	73fb      	strb	r3, [r7, #15]
    break;
 800a9e0:	bf00      	nop
  }
  return usb_status;
 800a9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3714      	adds	r7, #20
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <__cvt>:
 800a9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9f2:	ed2d 8b02 	vpush	{d8}
 800a9f6:	eeb0 8b40 	vmov.f64	d8, d0
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	4617      	mov	r7, r2
 800a9fe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800aa00:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aa02:	ee18 2a90 	vmov	r2, s17
 800aa06:	f025 0520 	bic.w	r5, r5, #32
 800aa0a:	2a00      	cmp	r2, #0
 800aa0c:	bfb6      	itet	lt
 800aa0e:	222d      	movlt	r2, #45	; 0x2d
 800aa10:	2200      	movge	r2, #0
 800aa12:	eeb1 8b40 	vneglt.f64	d8, d0
 800aa16:	2d46      	cmp	r5, #70	; 0x46
 800aa18:	460c      	mov	r4, r1
 800aa1a:	701a      	strb	r2, [r3, #0]
 800aa1c:	d004      	beq.n	800aa28 <__cvt+0x38>
 800aa1e:	2d45      	cmp	r5, #69	; 0x45
 800aa20:	d100      	bne.n	800aa24 <__cvt+0x34>
 800aa22:	3401      	adds	r4, #1
 800aa24:	2102      	movs	r1, #2
 800aa26:	e000      	b.n	800aa2a <__cvt+0x3a>
 800aa28:	2103      	movs	r1, #3
 800aa2a:	ab03      	add	r3, sp, #12
 800aa2c:	9301      	str	r3, [sp, #4]
 800aa2e:	ab02      	add	r3, sp, #8
 800aa30:	9300      	str	r3, [sp, #0]
 800aa32:	4622      	mov	r2, r4
 800aa34:	4633      	mov	r3, r6
 800aa36:	eeb0 0b48 	vmov.f64	d0, d8
 800aa3a:	f000 ff39 	bl	800b8b0 <_dtoa_r>
 800aa3e:	2d47      	cmp	r5, #71	; 0x47
 800aa40:	d101      	bne.n	800aa46 <__cvt+0x56>
 800aa42:	07fb      	lsls	r3, r7, #31
 800aa44:	d51a      	bpl.n	800aa7c <__cvt+0x8c>
 800aa46:	2d46      	cmp	r5, #70	; 0x46
 800aa48:	eb00 0204 	add.w	r2, r0, r4
 800aa4c:	d10c      	bne.n	800aa68 <__cvt+0x78>
 800aa4e:	7803      	ldrb	r3, [r0, #0]
 800aa50:	2b30      	cmp	r3, #48	; 0x30
 800aa52:	d107      	bne.n	800aa64 <__cvt+0x74>
 800aa54:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aa58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa5c:	bf1c      	itt	ne
 800aa5e:	f1c4 0401 	rsbne	r4, r4, #1
 800aa62:	6034      	strne	r4, [r6, #0]
 800aa64:	6833      	ldr	r3, [r6, #0]
 800aa66:	441a      	add	r2, r3
 800aa68:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aa6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa70:	bf08      	it	eq
 800aa72:	9203      	streq	r2, [sp, #12]
 800aa74:	2130      	movs	r1, #48	; 0x30
 800aa76:	9b03      	ldr	r3, [sp, #12]
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d307      	bcc.n	800aa8c <__cvt+0x9c>
 800aa7c:	9b03      	ldr	r3, [sp, #12]
 800aa7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa80:	1a1b      	subs	r3, r3, r0
 800aa82:	6013      	str	r3, [r2, #0]
 800aa84:	b005      	add	sp, #20
 800aa86:	ecbd 8b02 	vpop	{d8}
 800aa8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa8c:	1c5c      	adds	r4, r3, #1
 800aa8e:	9403      	str	r4, [sp, #12]
 800aa90:	7019      	strb	r1, [r3, #0]
 800aa92:	e7f0      	b.n	800aa76 <__cvt+0x86>

0800aa94 <__exponent>:
 800aa94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa96:	4603      	mov	r3, r0
 800aa98:	2900      	cmp	r1, #0
 800aa9a:	bfb8      	it	lt
 800aa9c:	4249      	neglt	r1, r1
 800aa9e:	f803 2b02 	strb.w	r2, [r3], #2
 800aaa2:	bfb4      	ite	lt
 800aaa4:	222d      	movlt	r2, #45	; 0x2d
 800aaa6:	222b      	movge	r2, #43	; 0x2b
 800aaa8:	2909      	cmp	r1, #9
 800aaaa:	7042      	strb	r2, [r0, #1]
 800aaac:	dd2a      	ble.n	800ab04 <__exponent+0x70>
 800aaae:	f10d 0207 	add.w	r2, sp, #7
 800aab2:	4617      	mov	r7, r2
 800aab4:	260a      	movs	r6, #10
 800aab6:	4694      	mov	ip, r2
 800aab8:	fb91 f5f6 	sdiv	r5, r1, r6
 800aabc:	fb06 1415 	mls	r4, r6, r5, r1
 800aac0:	3430      	adds	r4, #48	; 0x30
 800aac2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800aac6:	460c      	mov	r4, r1
 800aac8:	2c63      	cmp	r4, #99	; 0x63
 800aaca:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800aace:	4629      	mov	r1, r5
 800aad0:	dcf1      	bgt.n	800aab6 <__exponent+0x22>
 800aad2:	3130      	adds	r1, #48	; 0x30
 800aad4:	f1ac 0402 	sub.w	r4, ip, #2
 800aad8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aadc:	1c41      	adds	r1, r0, #1
 800aade:	4622      	mov	r2, r4
 800aae0:	42ba      	cmp	r2, r7
 800aae2:	d30a      	bcc.n	800aafa <__exponent+0x66>
 800aae4:	f10d 0209 	add.w	r2, sp, #9
 800aae8:	eba2 020c 	sub.w	r2, r2, ip
 800aaec:	42bc      	cmp	r4, r7
 800aaee:	bf88      	it	hi
 800aaf0:	2200      	movhi	r2, #0
 800aaf2:	4413      	add	r3, r2
 800aaf4:	1a18      	subs	r0, r3, r0
 800aaf6:	b003      	add	sp, #12
 800aaf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aafa:	f812 5b01 	ldrb.w	r5, [r2], #1
 800aafe:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ab02:	e7ed      	b.n	800aae0 <__exponent+0x4c>
 800ab04:	2330      	movs	r3, #48	; 0x30
 800ab06:	3130      	adds	r1, #48	; 0x30
 800ab08:	7083      	strb	r3, [r0, #2]
 800ab0a:	70c1      	strb	r1, [r0, #3]
 800ab0c:	1d03      	adds	r3, r0, #4
 800ab0e:	e7f1      	b.n	800aaf4 <__exponent+0x60>

0800ab10 <_printf_float>:
 800ab10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab14:	b08b      	sub	sp, #44	; 0x2c
 800ab16:	460c      	mov	r4, r1
 800ab18:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ab1c:	4616      	mov	r6, r2
 800ab1e:	461f      	mov	r7, r3
 800ab20:	4605      	mov	r5, r0
 800ab22:	f000 fdc3 	bl	800b6ac <_localeconv_r>
 800ab26:	f8d0 b000 	ldr.w	fp, [r0]
 800ab2a:	4658      	mov	r0, fp
 800ab2c:	f7f5 fc38 	bl	80003a0 <strlen>
 800ab30:	2300      	movs	r3, #0
 800ab32:	9308      	str	r3, [sp, #32]
 800ab34:	f8d8 3000 	ldr.w	r3, [r8]
 800ab38:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ab3c:	6822      	ldr	r2, [r4, #0]
 800ab3e:	3307      	adds	r3, #7
 800ab40:	f023 0307 	bic.w	r3, r3, #7
 800ab44:	f103 0108 	add.w	r1, r3, #8
 800ab48:	f8c8 1000 	str.w	r1, [r8]
 800ab4c:	ed93 0b00 	vldr	d0, [r3]
 800ab50:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800adb0 <_printf_float+0x2a0>
 800ab54:	eeb0 7bc0 	vabs.f64	d7, d0
 800ab58:	eeb4 7b46 	vcmp.f64	d7, d6
 800ab5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab60:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800ab64:	4682      	mov	sl, r0
 800ab66:	dd24      	ble.n	800abb2 <_printf_float+0xa2>
 800ab68:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ab6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab70:	d502      	bpl.n	800ab78 <_printf_float+0x68>
 800ab72:	232d      	movs	r3, #45	; 0x2d
 800ab74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab78:	498f      	ldr	r1, [pc, #572]	; (800adb8 <_printf_float+0x2a8>)
 800ab7a:	4b90      	ldr	r3, [pc, #576]	; (800adbc <_printf_float+0x2ac>)
 800ab7c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ab80:	bf94      	ite	ls
 800ab82:	4688      	movls	r8, r1
 800ab84:	4698      	movhi	r8, r3
 800ab86:	2303      	movs	r3, #3
 800ab88:	6123      	str	r3, [r4, #16]
 800ab8a:	f022 0204 	bic.w	r2, r2, #4
 800ab8e:	2300      	movs	r3, #0
 800ab90:	6022      	str	r2, [r4, #0]
 800ab92:	9304      	str	r3, [sp, #16]
 800ab94:	9700      	str	r7, [sp, #0]
 800ab96:	4633      	mov	r3, r6
 800ab98:	aa09      	add	r2, sp, #36	; 0x24
 800ab9a:	4621      	mov	r1, r4
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	f000 f9d1 	bl	800af44 <_printf_common>
 800aba2:	3001      	adds	r0, #1
 800aba4:	f040 808a 	bne.w	800acbc <_printf_float+0x1ac>
 800aba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abac:	b00b      	add	sp, #44	; 0x2c
 800abae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb2:	eeb4 0b40 	vcmp.f64	d0, d0
 800abb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abba:	d709      	bvc.n	800abd0 <_printf_float+0xc0>
 800abbc:	ee10 3a90 	vmov	r3, s1
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	bfbc      	itt	lt
 800abc4:	232d      	movlt	r3, #45	; 0x2d
 800abc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800abca:	497d      	ldr	r1, [pc, #500]	; (800adc0 <_printf_float+0x2b0>)
 800abcc:	4b7d      	ldr	r3, [pc, #500]	; (800adc4 <_printf_float+0x2b4>)
 800abce:	e7d5      	b.n	800ab7c <_printf_float+0x6c>
 800abd0:	6863      	ldr	r3, [r4, #4]
 800abd2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800abd6:	9104      	str	r1, [sp, #16]
 800abd8:	1c59      	adds	r1, r3, #1
 800abda:	d13c      	bne.n	800ac56 <_printf_float+0x146>
 800abdc:	2306      	movs	r3, #6
 800abde:	6063      	str	r3, [r4, #4]
 800abe0:	2300      	movs	r3, #0
 800abe2:	9303      	str	r3, [sp, #12]
 800abe4:	ab08      	add	r3, sp, #32
 800abe6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800abea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800abee:	ab07      	add	r3, sp, #28
 800abf0:	6861      	ldr	r1, [r4, #4]
 800abf2:	9300      	str	r3, [sp, #0]
 800abf4:	6022      	str	r2, [r4, #0]
 800abf6:	f10d 031b 	add.w	r3, sp, #27
 800abfa:	4628      	mov	r0, r5
 800abfc:	f7ff fef8 	bl	800a9f0 <__cvt>
 800ac00:	9b04      	ldr	r3, [sp, #16]
 800ac02:	9907      	ldr	r1, [sp, #28]
 800ac04:	2b47      	cmp	r3, #71	; 0x47
 800ac06:	4680      	mov	r8, r0
 800ac08:	d108      	bne.n	800ac1c <_printf_float+0x10c>
 800ac0a:	1cc8      	adds	r0, r1, #3
 800ac0c:	db02      	blt.n	800ac14 <_printf_float+0x104>
 800ac0e:	6863      	ldr	r3, [r4, #4]
 800ac10:	4299      	cmp	r1, r3
 800ac12:	dd41      	ble.n	800ac98 <_printf_float+0x188>
 800ac14:	f1a9 0902 	sub.w	r9, r9, #2
 800ac18:	fa5f f989 	uxtb.w	r9, r9
 800ac1c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ac20:	d820      	bhi.n	800ac64 <_printf_float+0x154>
 800ac22:	3901      	subs	r1, #1
 800ac24:	464a      	mov	r2, r9
 800ac26:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ac2a:	9107      	str	r1, [sp, #28]
 800ac2c:	f7ff ff32 	bl	800aa94 <__exponent>
 800ac30:	9a08      	ldr	r2, [sp, #32]
 800ac32:	9004      	str	r0, [sp, #16]
 800ac34:	1813      	adds	r3, r2, r0
 800ac36:	2a01      	cmp	r2, #1
 800ac38:	6123      	str	r3, [r4, #16]
 800ac3a:	dc02      	bgt.n	800ac42 <_printf_float+0x132>
 800ac3c:	6822      	ldr	r2, [r4, #0]
 800ac3e:	07d2      	lsls	r2, r2, #31
 800ac40:	d501      	bpl.n	800ac46 <_printf_float+0x136>
 800ac42:	3301      	adds	r3, #1
 800ac44:	6123      	str	r3, [r4, #16]
 800ac46:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d0a2      	beq.n	800ab94 <_printf_float+0x84>
 800ac4e:	232d      	movs	r3, #45	; 0x2d
 800ac50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac54:	e79e      	b.n	800ab94 <_printf_float+0x84>
 800ac56:	9904      	ldr	r1, [sp, #16]
 800ac58:	2947      	cmp	r1, #71	; 0x47
 800ac5a:	d1c1      	bne.n	800abe0 <_printf_float+0xd0>
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d1bf      	bne.n	800abe0 <_printf_float+0xd0>
 800ac60:	2301      	movs	r3, #1
 800ac62:	e7bc      	b.n	800abde <_printf_float+0xce>
 800ac64:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ac68:	d118      	bne.n	800ac9c <_printf_float+0x18c>
 800ac6a:	2900      	cmp	r1, #0
 800ac6c:	6863      	ldr	r3, [r4, #4]
 800ac6e:	dd0b      	ble.n	800ac88 <_printf_float+0x178>
 800ac70:	6121      	str	r1, [r4, #16]
 800ac72:	b913      	cbnz	r3, 800ac7a <_printf_float+0x16a>
 800ac74:	6822      	ldr	r2, [r4, #0]
 800ac76:	07d0      	lsls	r0, r2, #31
 800ac78:	d502      	bpl.n	800ac80 <_printf_float+0x170>
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	440b      	add	r3, r1
 800ac7e:	6123      	str	r3, [r4, #16]
 800ac80:	2300      	movs	r3, #0
 800ac82:	65a1      	str	r1, [r4, #88]	; 0x58
 800ac84:	9304      	str	r3, [sp, #16]
 800ac86:	e7de      	b.n	800ac46 <_printf_float+0x136>
 800ac88:	b913      	cbnz	r3, 800ac90 <_printf_float+0x180>
 800ac8a:	6822      	ldr	r2, [r4, #0]
 800ac8c:	07d2      	lsls	r2, r2, #31
 800ac8e:	d501      	bpl.n	800ac94 <_printf_float+0x184>
 800ac90:	3302      	adds	r3, #2
 800ac92:	e7f4      	b.n	800ac7e <_printf_float+0x16e>
 800ac94:	2301      	movs	r3, #1
 800ac96:	e7f2      	b.n	800ac7e <_printf_float+0x16e>
 800ac98:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ac9c:	9b08      	ldr	r3, [sp, #32]
 800ac9e:	4299      	cmp	r1, r3
 800aca0:	db05      	blt.n	800acae <_printf_float+0x19e>
 800aca2:	6823      	ldr	r3, [r4, #0]
 800aca4:	6121      	str	r1, [r4, #16]
 800aca6:	07d8      	lsls	r0, r3, #31
 800aca8:	d5ea      	bpl.n	800ac80 <_printf_float+0x170>
 800acaa:	1c4b      	adds	r3, r1, #1
 800acac:	e7e7      	b.n	800ac7e <_printf_float+0x16e>
 800acae:	2900      	cmp	r1, #0
 800acb0:	bfd4      	ite	le
 800acb2:	f1c1 0202 	rsble	r2, r1, #2
 800acb6:	2201      	movgt	r2, #1
 800acb8:	4413      	add	r3, r2
 800acba:	e7e0      	b.n	800ac7e <_printf_float+0x16e>
 800acbc:	6823      	ldr	r3, [r4, #0]
 800acbe:	055a      	lsls	r2, r3, #21
 800acc0:	d407      	bmi.n	800acd2 <_printf_float+0x1c2>
 800acc2:	6923      	ldr	r3, [r4, #16]
 800acc4:	4642      	mov	r2, r8
 800acc6:	4631      	mov	r1, r6
 800acc8:	4628      	mov	r0, r5
 800acca:	47b8      	blx	r7
 800accc:	3001      	adds	r0, #1
 800acce:	d12a      	bne.n	800ad26 <_printf_float+0x216>
 800acd0:	e76a      	b.n	800aba8 <_printf_float+0x98>
 800acd2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800acd6:	f240 80e0 	bls.w	800ae9a <_printf_float+0x38a>
 800acda:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800acde:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ace2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ace6:	d133      	bne.n	800ad50 <_printf_float+0x240>
 800ace8:	4a37      	ldr	r2, [pc, #220]	; (800adc8 <_printf_float+0x2b8>)
 800acea:	2301      	movs	r3, #1
 800acec:	4631      	mov	r1, r6
 800acee:	4628      	mov	r0, r5
 800acf0:	47b8      	blx	r7
 800acf2:	3001      	adds	r0, #1
 800acf4:	f43f af58 	beq.w	800aba8 <_printf_float+0x98>
 800acf8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	db02      	blt.n	800ad06 <_printf_float+0x1f6>
 800ad00:	6823      	ldr	r3, [r4, #0]
 800ad02:	07d8      	lsls	r0, r3, #31
 800ad04:	d50f      	bpl.n	800ad26 <_printf_float+0x216>
 800ad06:	4653      	mov	r3, sl
 800ad08:	465a      	mov	r2, fp
 800ad0a:	4631      	mov	r1, r6
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	47b8      	blx	r7
 800ad10:	3001      	adds	r0, #1
 800ad12:	f43f af49 	beq.w	800aba8 <_printf_float+0x98>
 800ad16:	f04f 0800 	mov.w	r8, #0
 800ad1a:	f104 091a 	add.w	r9, r4, #26
 800ad1e:	9b08      	ldr	r3, [sp, #32]
 800ad20:	3b01      	subs	r3, #1
 800ad22:	4543      	cmp	r3, r8
 800ad24:	dc09      	bgt.n	800ad3a <_printf_float+0x22a>
 800ad26:	6823      	ldr	r3, [r4, #0]
 800ad28:	079b      	lsls	r3, r3, #30
 800ad2a:	f100 8106 	bmi.w	800af3a <_printf_float+0x42a>
 800ad2e:	68e0      	ldr	r0, [r4, #12]
 800ad30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad32:	4298      	cmp	r0, r3
 800ad34:	bfb8      	it	lt
 800ad36:	4618      	movlt	r0, r3
 800ad38:	e738      	b.n	800abac <_printf_float+0x9c>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	464a      	mov	r2, r9
 800ad3e:	4631      	mov	r1, r6
 800ad40:	4628      	mov	r0, r5
 800ad42:	47b8      	blx	r7
 800ad44:	3001      	adds	r0, #1
 800ad46:	f43f af2f 	beq.w	800aba8 <_printf_float+0x98>
 800ad4a:	f108 0801 	add.w	r8, r8, #1
 800ad4e:	e7e6      	b.n	800ad1e <_printf_float+0x20e>
 800ad50:	9b07      	ldr	r3, [sp, #28]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	dc3a      	bgt.n	800adcc <_printf_float+0x2bc>
 800ad56:	4a1c      	ldr	r2, [pc, #112]	; (800adc8 <_printf_float+0x2b8>)
 800ad58:	2301      	movs	r3, #1
 800ad5a:	4631      	mov	r1, r6
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	47b8      	blx	r7
 800ad60:	3001      	adds	r0, #1
 800ad62:	f43f af21 	beq.w	800aba8 <_printf_float+0x98>
 800ad66:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	d102      	bne.n	800ad74 <_printf_float+0x264>
 800ad6e:	6823      	ldr	r3, [r4, #0]
 800ad70:	07d9      	lsls	r1, r3, #31
 800ad72:	d5d8      	bpl.n	800ad26 <_printf_float+0x216>
 800ad74:	4653      	mov	r3, sl
 800ad76:	465a      	mov	r2, fp
 800ad78:	4631      	mov	r1, r6
 800ad7a:	4628      	mov	r0, r5
 800ad7c:	47b8      	blx	r7
 800ad7e:	3001      	adds	r0, #1
 800ad80:	f43f af12 	beq.w	800aba8 <_printf_float+0x98>
 800ad84:	f04f 0900 	mov.w	r9, #0
 800ad88:	f104 0a1a 	add.w	sl, r4, #26
 800ad8c:	9b07      	ldr	r3, [sp, #28]
 800ad8e:	425b      	negs	r3, r3
 800ad90:	454b      	cmp	r3, r9
 800ad92:	dc01      	bgt.n	800ad98 <_printf_float+0x288>
 800ad94:	9b08      	ldr	r3, [sp, #32]
 800ad96:	e795      	b.n	800acc4 <_printf_float+0x1b4>
 800ad98:	2301      	movs	r3, #1
 800ad9a:	4652      	mov	r2, sl
 800ad9c:	4631      	mov	r1, r6
 800ad9e:	4628      	mov	r0, r5
 800ada0:	47b8      	blx	r7
 800ada2:	3001      	adds	r0, #1
 800ada4:	f43f af00 	beq.w	800aba8 <_printf_float+0x98>
 800ada8:	f109 0901 	add.w	r9, r9, #1
 800adac:	e7ee      	b.n	800ad8c <_printf_float+0x27c>
 800adae:	bf00      	nop
 800adb0:	ffffffff 	.word	0xffffffff
 800adb4:	7fefffff 	.word	0x7fefffff
 800adb8:	0800d514 	.word	0x0800d514
 800adbc:	0800d518 	.word	0x0800d518
 800adc0:	0800d51c 	.word	0x0800d51c
 800adc4:	0800d520 	.word	0x0800d520
 800adc8:	0800d524 	.word	0x0800d524
 800adcc:	9a08      	ldr	r2, [sp, #32]
 800adce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800add0:	429a      	cmp	r2, r3
 800add2:	bfa8      	it	ge
 800add4:	461a      	movge	r2, r3
 800add6:	2a00      	cmp	r2, #0
 800add8:	4691      	mov	r9, r2
 800adda:	dc38      	bgt.n	800ae4e <_printf_float+0x33e>
 800addc:	2300      	movs	r3, #0
 800adde:	9305      	str	r3, [sp, #20]
 800ade0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ade4:	f104 021a 	add.w	r2, r4, #26
 800ade8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800adea:	9905      	ldr	r1, [sp, #20]
 800adec:	9304      	str	r3, [sp, #16]
 800adee:	eba3 0309 	sub.w	r3, r3, r9
 800adf2:	428b      	cmp	r3, r1
 800adf4:	dc33      	bgt.n	800ae5e <_printf_float+0x34e>
 800adf6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	db3c      	blt.n	800ae78 <_printf_float+0x368>
 800adfe:	6823      	ldr	r3, [r4, #0]
 800ae00:	07da      	lsls	r2, r3, #31
 800ae02:	d439      	bmi.n	800ae78 <_printf_float+0x368>
 800ae04:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800ae08:	eba2 0903 	sub.w	r9, r2, r3
 800ae0c:	9b04      	ldr	r3, [sp, #16]
 800ae0e:	1ad2      	subs	r2, r2, r3
 800ae10:	4591      	cmp	r9, r2
 800ae12:	bfa8      	it	ge
 800ae14:	4691      	movge	r9, r2
 800ae16:	f1b9 0f00 	cmp.w	r9, #0
 800ae1a:	dc35      	bgt.n	800ae88 <_printf_float+0x378>
 800ae1c:	f04f 0800 	mov.w	r8, #0
 800ae20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae24:	f104 0a1a 	add.w	sl, r4, #26
 800ae28:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ae2c:	1a9b      	subs	r3, r3, r2
 800ae2e:	eba3 0309 	sub.w	r3, r3, r9
 800ae32:	4543      	cmp	r3, r8
 800ae34:	f77f af77 	ble.w	800ad26 <_printf_float+0x216>
 800ae38:	2301      	movs	r3, #1
 800ae3a:	4652      	mov	r2, sl
 800ae3c:	4631      	mov	r1, r6
 800ae3e:	4628      	mov	r0, r5
 800ae40:	47b8      	blx	r7
 800ae42:	3001      	adds	r0, #1
 800ae44:	f43f aeb0 	beq.w	800aba8 <_printf_float+0x98>
 800ae48:	f108 0801 	add.w	r8, r8, #1
 800ae4c:	e7ec      	b.n	800ae28 <_printf_float+0x318>
 800ae4e:	4613      	mov	r3, r2
 800ae50:	4631      	mov	r1, r6
 800ae52:	4642      	mov	r2, r8
 800ae54:	4628      	mov	r0, r5
 800ae56:	47b8      	blx	r7
 800ae58:	3001      	adds	r0, #1
 800ae5a:	d1bf      	bne.n	800addc <_printf_float+0x2cc>
 800ae5c:	e6a4      	b.n	800aba8 <_printf_float+0x98>
 800ae5e:	2301      	movs	r3, #1
 800ae60:	4631      	mov	r1, r6
 800ae62:	4628      	mov	r0, r5
 800ae64:	9204      	str	r2, [sp, #16]
 800ae66:	47b8      	blx	r7
 800ae68:	3001      	adds	r0, #1
 800ae6a:	f43f ae9d 	beq.w	800aba8 <_printf_float+0x98>
 800ae6e:	9b05      	ldr	r3, [sp, #20]
 800ae70:	9a04      	ldr	r2, [sp, #16]
 800ae72:	3301      	adds	r3, #1
 800ae74:	9305      	str	r3, [sp, #20]
 800ae76:	e7b7      	b.n	800ade8 <_printf_float+0x2d8>
 800ae78:	4653      	mov	r3, sl
 800ae7a:	465a      	mov	r2, fp
 800ae7c:	4631      	mov	r1, r6
 800ae7e:	4628      	mov	r0, r5
 800ae80:	47b8      	blx	r7
 800ae82:	3001      	adds	r0, #1
 800ae84:	d1be      	bne.n	800ae04 <_printf_float+0x2f4>
 800ae86:	e68f      	b.n	800aba8 <_printf_float+0x98>
 800ae88:	9a04      	ldr	r2, [sp, #16]
 800ae8a:	464b      	mov	r3, r9
 800ae8c:	4442      	add	r2, r8
 800ae8e:	4631      	mov	r1, r6
 800ae90:	4628      	mov	r0, r5
 800ae92:	47b8      	blx	r7
 800ae94:	3001      	adds	r0, #1
 800ae96:	d1c1      	bne.n	800ae1c <_printf_float+0x30c>
 800ae98:	e686      	b.n	800aba8 <_printf_float+0x98>
 800ae9a:	9a08      	ldr	r2, [sp, #32]
 800ae9c:	2a01      	cmp	r2, #1
 800ae9e:	dc01      	bgt.n	800aea4 <_printf_float+0x394>
 800aea0:	07db      	lsls	r3, r3, #31
 800aea2:	d537      	bpl.n	800af14 <_printf_float+0x404>
 800aea4:	2301      	movs	r3, #1
 800aea6:	4642      	mov	r2, r8
 800aea8:	4631      	mov	r1, r6
 800aeaa:	4628      	mov	r0, r5
 800aeac:	47b8      	blx	r7
 800aeae:	3001      	adds	r0, #1
 800aeb0:	f43f ae7a 	beq.w	800aba8 <_printf_float+0x98>
 800aeb4:	4653      	mov	r3, sl
 800aeb6:	465a      	mov	r2, fp
 800aeb8:	4631      	mov	r1, r6
 800aeba:	4628      	mov	r0, r5
 800aebc:	47b8      	blx	r7
 800aebe:	3001      	adds	r0, #1
 800aec0:	f43f ae72 	beq.w	800aba8 <_printf_float+0x98>
 800aec4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800aec8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed0:	9b08      	ldr	r3, [sp, #32]
 800aed2:	d01a      	beq.n	800af0a <_printf_float+0x3fa>
 800aed4:	3b01      	subs	r3, #1
 800aed6:	f108 0201 	add.w	r2, r8, #1
 800aeda:	4631      	mov	r1, r6
 800aedc:	4628      	mov	r0, r5
 800aede:	47b8      	blx	r7
 800aee0:	3001      	adds	r0, #1
 800aee2:	d10e      	bne.n	800af02 <_printf_float+0x3f2>
 800aee4:	e660      	b.n	800aba8 <_printf_float+0x98>
 800aee6:	2301      	movs	r3, #1
 800aee8:	464a      	mov	r2, r9
 800aeea:	4631      	mov	r1, r6
 800aeec:	4628      	mov	r0, r5
 800aeee:	47b8      	blx	r7
 800aef0:	3001      	adds	r0, #1
 800aef2:	f43f ae59 	beq.w	800aba8 <_printf_float+0x98>
 800aef6:	f108 0801 	add.w	r8, r8, #1
 800aefa:	9b08      	ldr	r3, [sp, #32]
 800aefc:	3b01      	subs	r3, #1
 800aefe:	4543      	cmp	r3, r8
 800af00:	dcf1      	bgt.n	800aee6 <_printf_float+0x3d6>
 800af02:	9b04      	ldr	r3, [sp, #16]
 800af04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800af08:	e6dd      	b.n	800acc6 <_printf_float+0x1b6>
 800af0a:	f04f 0800 	mov.w	r8, #0
 800af0e:	f104 091a 	add.w	r9, r4, #26
 800af12:	e7f2      	b.n	800aefa <_printf_float+0x3ea>
 800af14:	2301      	movs	r3, #1
 800af16:	4642      	mov	r2, r8
 800af18:	e7df      	b.n	800aeda <_printf_float+0x3ca>
 800af1a:	2301      	movs	r3, #1
 800af1c:	464a      	mov	r2, r9
 800af1e:	4631      	mov	r1, r6
 800af20:	4628      	mov	r0, r5
 800af22:	47b8      	blx	r7
 800af24:	3001      	adds	r0, #1
 800af26:	f43f ae3f 	beq.w	800aba8 <_printf_float+0x98>
 800af2a:	f108 0801 	add.w	r8, r8, #1
 800af2e:	68e3      	ldr	r3, [r4, #12]
 800af30:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af32:	1a5b      	subs	r3, r3, r1
 800af34:	4543      	cmp	r3, r8
 800af36:	dcf0      	bgt.n	800af1a <_printf_float+0x40a>
 800af38:	e6f9      	b.n	800ad2e <_printf_float+0x21e>
 800af3a:	f04f 0800 	mov.w	r8, #0
 800af3e:	f104 0919 	add.w	r9, r4, #25
 800af42:	e7f4      	b.n	800af2e <_printf_float+0x41e>

0800af44 <_printf_common>:
 800af44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af48:	4616      	mov	r6, r2
 800af4a:	4699      	mov	r9, r3
 800af4c:	688a      	ldr	r2, [r1, #8]
 800af4e:	690b      	ldr	r3, [r1, #16]
 800af50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af54:	4293      	cmp	r3, r2
 800af56:	bfb8      	it	lt
 800af58:	4613      	movlt	r3, r2
 800af5a:	6033      	str	r3, [r6, #0]
 800af5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af60:	4607      	mov	r7, r0
 800af62:	460c      	mov	r4, r1
 800af64:	b10a      	cbz	r2, 800af6a <_printf_common+0x26>
 800af66:	3301      	adds	r3, #1
 800af68:	6033      	str	r3, [r6, #0]
 800af6a:	6823      	ldr	r3, [r4, #0]
 800af6c:	0699      	lsls	r1, r3, #26
 800af6e:	bf42      	ittt	mi
 800af70:	6833      	ldrmi	r3, [r6, #0]
 800af72:	3302      	addmi	r3, #2
 800af74:	6033      	strmi	r3, [r6, #0]
 800af76:	6825      	ldr	r5, [r4, #0]
 800af78:	f015 0506 	ands.w	r5, r5, #6
 800af7c:	d106      	bne.n	800af8c <_printf_common+0x48>
 800af7e:	f104 0a19 	add.w	sl, r4, #25
 800af82:	68e3      	ldr	r3, [r4, #12]
 800af84:	6832      	ldr	r2, [r6, #0]
 800af86:	1a9b      	subs	r3, r3, r2
 800af88:	42ab      	cmp	r3, r5
 800af8a:	dc26      	bgt.n	800afda <_printf_common+0x96>
 800af8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af90:	1e13      	subs	r3, r2, #0
 800af92:	6822      	ldr	r2, [r4, #0]
 800af94:	bf18      	it	ne
 800af96:	2301      	movne	r3, #1
 800af98:	0692      	lsls	r2, r2, #26
 800af9a:	d42b      	bmi.n	800aff4 <_printf_common+0xb0>
 800af9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afa0:	4649      	mov	r1, r9
 800afa2:	4638      	mov	r0, r7
 800afa4:	47c0      	blx	r8
 800afa6:	3001      	adds	r0, #1
 800afa8:	d01e      	beq.n	800afe8 <_printf_common+0xa4>
 800afaa:	6823      	ldr	r3, [r4, #0]
 800afac:	6922      	ldr	r2, [r4, #16]
 800afae:	f003 0306 	and.w	r3, r3, #6
 800afb2:	2b04      	cmp	r3, #4
 800afb4:	bf02      	ittt	eq
 800afb6:	68e5      	ldreq	r5, [r4, #12]
 800afb8:	6833      	ldreq	r3, [r6, #0]
 800afba:	1aed      	subeq	r5, r5, r3
 800afbc:	68a3      	ldr	r3, [r4, #8]
 800afbe:	bf0c      	ite	eq
 800afc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afc4:	2500      	movne	r5, #0
 800afc6:	4293      	cmp	r3, r2
 800afc8:	bfc4      	itt	gt
 800afca:	1a9b      	subgt	r3, r3, r2
 800afcc:	18ed      	addgt	r5, r5, r3
 800afce:	2600      	movs	r6, #0
 800afd0:	341a      	adds	r4, #26
 800afd2:	42b5      	cmp	r5, r6
 800afd4:	d11a      	bne.n	800b00c <_printf_common+0xc8>
 800afd6:	2000      	movs	r0, #0
 800afd8:	e008      	b.n	800afec <_printf_common+0xa8>
 800afda:	2301      	movs	r3, #1
 800afdc:	4652      	mov	r2, sl
 800afde:	4649      	mov	r1, r9
 800afe0:	4638      	mov	r0, r7
 800afe2:	47c0      	blx	r8
 800afe4:	3001      	adds	r0, #1
 800afe6:	d103      	bne.n	800aff0 <_printf_common+0xac>
 800afe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aff0:	3501      	adds	r5, #1
 800aff2:	e7c6      	b.n	800af82 <_printf_common+0x3e>
 800aff4:	18e1      	adds	r1, r4, r3
 800aff6:	1c5a      	adds	r2, r3, #1
 800aff8:	2030      	movs	r0, #48	; 0x30
 800affa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800affe:	4422      	add	r2, r4
 800b000:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b004:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b008:	3302      	adds	r3, #2
 800b00a:	e7c7      	b.n	800af9c <_printf_common+0x58>
 800b00c:	2301      	movs	r3, #1
 800b00e:	4622      	mov	r2, r4
 800b010:	4649      	mov	r1, r9
 800b012:	4638      	mov	r0, r7
 800b014:	47c0      	blx	r8
 800b016:	3001      	adds	r0, #1
 800b018:	d0e6      	beq.n	800afe8 <_printf_common+0xa4>
 800b01a:	3601      	adds	r6, #1
 800b01c:	e7d9      	b.n	800afd2 <_printf_common+0x8e>
	...

0800b020 <_printf_i>:
 800b020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b024:	7e0f      	ldrb	r7, [r1, #24]
 800b026:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b028:	2f78      	cmp	r7, #120	; 0x78
 800b02a:	4691      	mov	r9, r2
 800b02c:	4680      	mov	r8, r0
 800b02e:	460c      	mov	r4, r1
 800b030:	469a      	mov	sl, r3
 800b032:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b036:	d807      	bhi.n	800b048 <_printf_i+0x28>
 800b038:	2f62      	cmp	r7, #98	; 0x62
 800b03a:	d80a      	bhi.n	800b052 <_printf_i+0x32>
 800b03c:	2f00      	cmp	r7, #0
 800b03e:	f000 80d4 	beq.w	800b1ea <_printf_i+0x1ca>
 800b042:	2f58      	cmp	r7, #88	; 0x58
 800b044:	f000 80c0 	beq.w	800b1c8 <_printf_i+0x1a8>
 800b048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b04c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b050:	e03a      	b.n	800b0c8 <_printf_i+0xa8>
 800b052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b056:	2b15      	cmp	r3, #21
 800b058:	d8f6      	bhi.n	800b048 <_printf_i+0x28>
 800b05a:	a101      	add	r1, pc, #4	; (adr r1, 800b060 <_printf_i+0x40>)
 800b05c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b060:	0800b0b9 	.word	0x0800b0b9
 800b064:	0800b0cd 	.word	0x0800b0cd
 800b068:	0800b049 	.word	0x0800b049
 800b06c:	0800b049 	.word	0x0800b049
 800b070:	0800b049 	.word	0x0800b049
 800b074:	0800b049 	.word	0x0800b049
 800b078:	0800b0cd 	.word	0x0800b0cd
 800b07c:	0800b049 	.word	0x0800b049
 800b080:	0800b049 	.word	0x0800b049
 800b084:	0800b049 	.word	0x0800b049
 800b088:	0800b049 	.word	0x0800b049
 800b08c:	0800b1d1 	.word	0x0800b1d1
 800b090:	0800b0f9 	.word	0x0800b0f9
 800b094:	0800b18b 	.word	0x0800b18b
 800b098:	0800b049 	.word	0x0800b049
 800b09c:	0800b049 	.word	0x0800b049
 800b0a0:	0800b1f3 	.word	0x0800b1f3
 800b0a4:	0800b049 	.word	0x0800b049
 800b0a8:	0800b0f9 	.word	0x0800b0f9
 800b0ac:	0800b049 	.word	0x0800b049
 800b0b0:	0800b049 	.word	0x0800b049
 800b0b4:	0800b193 	.word	0x0800b193
 800b0b8:	682b      	ldr	r3, [r5, #0]
 800b0ba:	1d1a      	adds	r2, r3, #4
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	602a      	str	r2, [r5, #0]
 800b0c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	e09f      	b.n	800b20c <_printf_i+0x1ec>
 800b0cc:	6820      	ldr	r0, [r4, #0]
 800b0ce:	682b      	ldr	r3, [r5, #0]
 800b0d0:	0607      	lsls	r7, r0, #24
 800b0d2:	f103 0104 	add.w	r1, r3, #4
 800b0d6:	6029      	str	r1, [r5, #0]
 800b0d8:	d501      	bpl.n	800b0de <_printf_i+0xbe>
 800b0da:	681e      	ldr	r6, [r3, #0]
 800b0dc:	e003      	b.n	800b0e6 <_printf_i+0xc6>
 800b0de:	0646      	lsls	r6, r0, #25
 800b0e0:	d5fb      	bpl.n	800b0da <_printf_i+0xba>
 800b0e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b0e6:	2e00      	cmp	r6, #0
 800b0e8:	da03      	bge.n	800b0f2 <_printf_i+0xd2>
 800b0ea:	232d      	movs	r3, #45	; 0x2d
 800b0ec:	4276      	negs	r6, r6
 800b0ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0f2:	485a      	ldr	r0, [pc, #360]	; (800b25c <_printf_i+0x23c>)
 800b0f4:	230a      	movs	r3, #10
 800b0f6:	e012      	b.n	800b11e <_printf_i+0xfe>
 800b0f8:	682b      	ldr	r3, [r5, #0]
 800b0fa:	6820      	ldr	r0, [r4, #0]
 800b0fc:	1d19      	adds	r1, r3, #4
 800b0fe:	6029      	str	r1, [r5, #0]
 800b100:	0605      	lsls	r5, r0, #24
 800b102:	d501      	bpl.n	800b108 <_printf_i+0xe8>
 800b104:	681e      	ldr	r6, [r3, #0]
 800b106:	e002      	b.n	800b10e <_printf_i+0xee>
 800b108:	0641      	lsls	r1, r0, #25
 800b10a:	d5fb      	bpl.n	800b104 <_printf_i+0xe4>
 800b10c:	881e      	ldrh	r6, [r3, #0]
 800b10e:	4853      	ldr	r0, [pc, #332]	; (800b25c <_printf_i+0x23c>)
 800b110:	2f6f      	cmp	r7, #111	; 0x6f
 800b112:	bf0c      	ite	eq
 800b114:	2308      	moveq	r3, #8
 800b116:	230a      	movne	r3, #10
 800b118:	2100      	movs	r1, #0
 800b11a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b11e:	6865      	ldr	r5, [r4, #4]
 800b120:	60a5      	str	r5, [r4, #8]
 800b122:	2d00      	cmp	r5, #0
 800b124:	bfa2      	ittt	ge
 800b126:	6821      	ldrge	r1, [r4, #0]
 800b128:	f021 0104 	bicge.w	r1, r1, #4
 800b12c:	6021      	strge	r1, [r4, #0]
 800b12e:	b90e      	cbnz	r6, 800b134 <_printf_i+0x114>
 800b130:	2d00      	cmp	r5, #0
 800b132:	d04b      	beq.n	800b1cc <_printf_i+0x1ac>
 800b134:	4615      	mov	r5, r2
 800b136:	fbb6 f1f3 	udiv	r1, r6, r3
 800b13a:	fb03 6711 	mls	r7, r3, r1, r6
 800b13e:	5dc7      	ldrb	r7, [r0, r7]
 800b140:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b144:	4637      	mov	r7, r6
 800b146:	42bb      	cmp	r3, r7
 800b148:	460e      	mov	r6, r1
 800b14a:	d9f4      	bls.n	800b136 <_printf_i+0x116>
 800b14c:	2b08      	cmp	r3, #8
 800b14e:	d10b      	bne.n	800b168 <_printf_i+0x148>
 800b150:	6823      	ldr	r3, [r4, #0]
 800b152:	07de      	lsls	r6, r3, #31
 800b154:	d508      	bpl.n	800b168 <_printf_i+0x148>
 800b156:	6923      	ldr	r3, [r4, #16]
 800b158:	6861      	ldr	r1, [r4, #4]
 800b15a:	4299      	cmp	r1, r3
 800b15c:	bfde      	ittt	le
 800b15e:	2330      	movle	r3, #48	; 0x30
 800b160:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b164:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b168:	1b52      	subs	r2, r2, r5
 800b16a:	6122      	str	r2, [r4, #16]
 800b16c:	f8cd a000 	str.w	sl, [sp]
 800b170:	464b      	mov	r3, r9
 800b172:	aa03      	add	r2, sp, #12
 800b174:	4621      	mov	r1, r4
 800b176:	4640      	mov	r0, r8
 800b178:	f7ff fee4 	bl	800af44 <_printf_common>
 800b17c:	3001      	adds	r0, #1
 800b17e:	d14a      	bne.n	800b216 <_printf_i+0x1f6>
 800b180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b184:	b004      	add	sp, #16
 800b186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b18a:	6823      	ldr	r3, [r4, #0]
 800b18c:	f043 0320 	orr.w	r3, r3, #32
 800b190:	6023      	str	r3, [r4, #0]
 800b192:	4833      	ldr	r0, [pc, #204]	; (800b260 <_printf_i+0x240>)
 800b194:	2778      	movs	r7, #120	; 0x78
 800b196:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b19a:	6823      	ldr	r3, [r4, #0]
 800b19c:	6829      	ldr	r1, [r5, #0]
 800b19e:	061f      	lsls	r7, r3, #24
 800b1a0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b1a4:	d402      	bmi.n	800b1ac <_printf_i+0x18c>
 800b1a6:	065f      	lsls	r7, r3, #25
 800b1a8:	bf48      	it	mi
 800b1aa:	b2b6      	uxthmi	r6, r6
 800b1ac:	07df      	lsls	r7, r3, #31
 800b1ae:	bf48      	it	mi
 800b1b0:	f043 0320 	orrmi.w	r3, r3, #32
 800b1b4:	6029      	str	r1, [r5, #0]
 800b1b6:	bf48      	it	mi
 800b1b8:	6023      	strmi	r3, [r4, #0]
 800b1ba:	b91e      	cbnz	r6, 800b1c4 <_printf_i+0x1a4>
 800b1bc:	6823      	ldr	r3, [r4, #0]
 800b1be:	f023 0320 	bic.w	r3, r3, #32
 800b1c2:	6023      	str	r3, [r4, #0]
 800b1c4:	2310      	movs	r3, #16
 800b1c6:	e7a7      	b.n	800b118 <_printf_i+0xf8>
 800b1c8:	4824      	ldr	r0, [pc, #144]	; (800b25c <_printf_i+0x23c>)
 800b1ca:	e7e4      	b.n	800b196 <_printf_i+0x176>
 800b1cc:	4615      	mov	r5, r2
 800b1ce:	e7bd      	b.n	800b14c <_printf_i+0x12c>
 800b1d0:	682b      	ldr	r3, [r5, #0]
 800b1d2:	6826      	ldr	r6, [r4, #0]
 800b1d4:	6961      	ldr	r1, [r4, #20]
 800b1d6:	1d18      	adds	r0, r3, #4
 800b1d8:	6028      	str	r0, [r5, #0]
 800b1da:	0635      	lsls	r5, r6, #24
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	d501      	bpl.n	800b1e4 <_printf_i+0x1c4>
 800b1e0:	6019      	str	r1, [r3, #0]
 800b1e2:	e002      	b.n	800b1ea <_printf_i+0x1ca>
 800b1e4:	0670      	lsls	r0, r6, #25
 800b1e6:	d5fb      	bpl.n	800b1e0 <_printf_i+0x1c0>
 800b1e8:	8019      	strh	r1, [r3, #0]
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	6123      	str	r3, [r4, #16]
 800b1ee:	4615      	mov	r5, r2
 800b1f0:	e7bc      	b.n	800b16c <_printf_i+0x14c>
 800b1f2:	682b      	ldr	r3, [r5, #0]
 800b1f4:	1d1a      	adds	r2, r3, #4
 800b1f6:	602a      	str	r2, [r5, #0]
 800b1f8:	681d      	ldr	r5, [r3, #0]
 800b1fa:	6862      	ldr	r2, [r4, #4]
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	4628      	mov	r0, r5
 800b200:	f7f5 f87e 	bl	8000300 <memchr>
 800b204:	b108      	cbz	r0, 800b20a <_printf_i+0x1ea>
 800b206:	1b40      	subs	r0, r0, r5
 800b208:	6060      	str	r0, [r4, #4]
 800b20a:	6863      	ldr	r3, [r4, #4]
 800b20c:	6123      	str	r3, [r4, #16]
 800b20e:	2300      	movs	r3, #0
 800b210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b214:	e7aa      	b.n	800b16c <_printf_i+0x14c>
 800b216:	6923      	ldr	r3, [r4, #16]
 800b218:	462a      	mov	r2, r5
 800b21a:	4649      	mov	r1, r9
 800b21c:	4640      	mov	r0, r8
 800b21e:	47d0      	blx	sl
 800b220:	3001      	adds	r0, #1
 800b222:	d0ad      	beq.n	800b180 <_printf_i+0x160>
 800b224:	6823      	ldr	r3, [r4, #0]
 800b226:	079b      	lsls	r3, r3, #30
 800b228:	d413      	bmi.n	800b252 <_printf_i+0x232>
 800b22a:	68e0      	ldr	r0, [r4, #12]
 800b22c:	9b03      	ldr	r3, [sp, #12]
 800b22e:	4298      	cmp	r0, r3
 800b230:	bfb8      	it	lt
 800b232:	4618      	movlt	r0, r3
 800b234:	e7a6      	b.n	800b184 <_printf_i+0x164>
 800b236:	2301      	movs	r3, #1
 800b238:	4632      	mov	r2, r6
 800b23a:	4649      	mov	r1, r9
 800b23c:	4640      	mov	r0, r8
 800b23e:	47d0      	blx	sl
 800b240:	3001      	adds	r0, #1
 800b242:	d09d      	beq.n	800b180 <_printf_i+0x160>
 800b244:	3501      	adds	r5, #1
 800b246:	68e3      	ldr	r3, [r4, #12]
 800b248:	9903      	ldr	r1, [sp, #12]
 800b24a:	1a5b      	subs	r3, r3, r1
 800b24c:	42ab      	cmp	r3, r5
 800b24e:	dcf2      	bgt.n	800b236 <_printf_i+0x216>
 800b250:	e7eb      	b.n	800b22a <_printf_i+0x20a>
 800b252:	2500      	movs	r5, #0
 800b254:	f104 0619 	add.w	r6, r4, #25
 800b258:	e7f5      	b.n	800b246 <_printf_i+0x226>
 800b25a:	bf00      	nop
 800b25c:	0800d526 	.word	0x0800d526
 800b260:	0800d537 	.word	0x0800d537

0800b264 <std>:
 800b264:	2300      	movs	r3, #0
 800b266:	b510      	push	{r4, lr}
 800b268:	4604      	mov	r4, r0
 800b26a:	e9c0 3300 	strd	r3, r3, [r0]
 800b26e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b272:	6083      	str	r3, [r0, #8]
 800b274:	8181      	strh	r1, [r0, #12]
 800b276:	6643      	str	r3, [r0, #100]	; 0x64
 800b278:	81c2      	strh	r2, [r0, #14]
 800b27a:	6183      	str	r3, [r0, #24]
 800b27c:	4619      	mov	r1, r3
 800b27e:	2208      	movs	r2, #8
 800b280:	305c      	adds	r0, #92	; 0x5c
 800b282:	f000 fa0b 	bl	800b69c <memset>
 800b286:	4b0d      	ldr	r3, [pc, #52]	; (800b2bc <std+0x58>)
 800b288:	6263      	str	r3, [r4, #36]	; 0x24
 800b28a:	4b0d      	ldr	r3, [pc, #52]	; (800b2c0 <std+0x5c>)
 800b28c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b28e:	4b0d      	ldr	r3, [pc, #52]	; (800b2c4 <std+0x60>)
 800b290:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b292:	4b0d      	ldr	r3, [pc, #52]	; (800b2c8 <std+0x64>)
 800b294:	6323      	str	r3, [r4, #48]	; 0x30
 800b296:	4b0d      	ldr	r3, [pc, #52]	; (800b2cc <std+0x68>)
 800b298:	6224      	str	r4, [r4, #32]
 800b29a:	429c      	cmp	r4, r3
 800b29c:	d006      	beq.n	800b2ac <std+0x48>
 800b29e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b2a2:	4294      	cmp	r4, r2
 800b2a4:	d002      	beq.n	800b2ac <std+0x48>
 800b2a6:	33d0      	adds	r3, #208	; 0xd0
 800b2a8:	429c      	cmp	r4, r3
 800b2aa:	d105      	bne.n	800b2b8 <std+0x54>
 800b2ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b2b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2b4:	f000 ba6e 	b.w	800b794 <__retarget_lock_init_recursive>
 800b2b8:	bd10      	pop	{r4, pc}
 800b2ba:	bf00      	nop
 800b2bc:	0800b4d5 	.word	0x0800b4d5
 800b2c0:	0800b4f7 	.word	0x0800b4f7
 800b2c4:	0800b52f 	.word	0x0800b52f
 800b2c8:	0800b553 	.word	0x0800b553
 800b2cc:	2400282c 	.word	0x2400282c

0800b2d0 <stdio_exit_handler>:
 800b2d0:	4a02      	ldr	r2, [pc, #8]	; (800b2dc <stdio_exit_handler+0xc>)
 800b2d2:	4903      	ldr	r1, [pc, #12]	; (800b2e0 <stdio_exit_handler+0x10>)
 800b2d4:	4803      	ldr	r0, [pc, #12]	; (800b2e4 <stdio_exit_handler+0x14>)
 800b2d6:	f000 b869 	b.w	800b3ac <_fwalk_sglue>
 800b2da:	bf00      	nop
 800b2dc:	2400011c 	.word	0x2400011c
 800b2e0:	0800d015 	.word	0x0800d015
 800b2e4:	24000128 	.word	0x24000128

0800b2e8 <cleanup_stdio>:
 800b2e8:	6841      	ldr	r1, [r0, #4]
 800b2ea:	4b0c      	ldr	r3, [pc, #48]	; (800b31c <cleanup_stdio+0x34>)
 800b2ec:	4299      	cmp	r1, r3
 800b2ee:	b510      	push	{r4, lr}
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	d001      	beq.n	800b2f8 <cleanup_stdio+0x10>
 800b2f4:	f001 fe8e 	bl	800d014 <_fflush_r>
 800b2f8:	68a1      	ldr	r1, [r4, #8]
 800b2fa:	4b09      	ldr	r3, [pc, #36]	; (800b320 <cleanup_stdio+0x38>)
 800b2fc:	4299      	cmp	r1, r3
 800b2fe:	d002      	beq.n	800b306 <cleanup_stdio+0x1e>
 800b300:	4620      	mov	r0, r4
 800b302:	f001 fe87 	bl	800d014 <_fflush_r>
 800b306:	68e1      	ldr	r1, [r4, #12]
 800b308:	4b06      	ldr	r3, [pc, #24]	; (800b324 <cleanup_stdio+0x3c>)
 800b30a:	4299      	cmp	r1, r3
 800b30c:	d004      	beq.n	800b318 <cleanup_stdio+0x30>
 800b30e:	4620      	mov	r0, r4
 800b310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b314:	f001 be7e 	b.w	800d014 <_fflush_r>
 800b318:	bd10      	pop	{r4, pc}
 800b31a:	bf00      	nop
 800b31c:	2400282c 	.word	0x2400282c
 800b320:	24002894 	.word	0x24002894
 800b324:	240028fc 	.word	0x240028fc

0800b328 <global_stdio_init.part.0>:
 800b328:	b510      	push	{r4, lr}
 800b32a:	4b0b      	ldr	r3, [pc, #44]	; (800b358 <global_stdio_init.part.0+0x30>)
 800b32c:	4c0b      	ldr	r4, [pc, #44]	; (800b35c <global_stdio_init.part.0+0x34>)
 800b32e:	4a0c      	ldr	r2, [pc, #48]	; (800b360 <global_stdio_init.part.0+0x38>)
 800b330:	601a      	str	r2, [r3, #0]
 800b332:	4620      	mov	r0, r4
 800b334:	2200      	movs	r2, #0
 800b336:	2104      	movs	r1, #4
 800b338:	f7ff ff94 	bl	800b264 <std>
 800b33c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b340:	2201      	movs	r2, #1
 800b342:	2109      	movs	r1, #9
 800b344:	f7ff ff8e 	bl	800b264 <std>
 800b348:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b34c:	2202      	movs	r2, #2
 800b34e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b352:	2112      	movs	r1, #18
 800b354:	f7ff bf86 	b.w	800b264 <std>
 800b358:	24002964 	.word	0x24002964
 800b35c:	2400282c 	.word	0x2400282c
 800b360:	0800b2d1 	.word	0x0800b2d1

0800b364 <__sfp_lock_acquire>:
 800b364:	4801      	ldr	r0, [pc, #4]	; (800b36c <__sfp_lock_acquire+0x8>)
 800b366:	f000 ba16 	b.w	800b796 <__retarget_lock_acquire_recursive>
 800b36a:	bf00      	nop
 800b36c:	2400296d 	.word	0x2400296d

0800b370 <__sfp_lock_release>:
 800b370:	4801      	ldr	r0, [pc, #4]	; (800b378 <__sfp_lock_release+0x8>)
 800b372:	f000 ba11 	b.w	800b798 <__retarget_lock_release_recursive>
 800b376:	bf00      	nop
 800b378:	2400296d 	.word	0x2400296d

0800b37c <__sinit>:
 800b37c:	b510      	push	{r4, lr}
 800b37e:	4604      	mov	r4, r0
 800b380:	f7ff fff0 	bl	800b364 <__sfp_lock_acquire>
 800b384:	6a23      	ldr	r3, [r4, #32]
 800b386:	b11b      	cbz	r3, 800b390 <__sinit+0x14>
 800b388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b38c:	f7ff bff0 	b.w	800b370 <__sfp_lock_release>
 800b390:	4b04      	ldr	r3, [pc, #16]	; (800b3a4 <__sinit+0x28>)
 800b392:	6223      	str	r3, [r4, #32]
 800b394:	4b04      	ldr	r3, [pc, #16]	; (800b3a8 <__sinit+0x2c>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d1f5      	bne.n	800b388 <__sinit+0xc>
 800b39c:	f7ff ffc4 	bl	800b328 <global_stdio_init.part.0>
 800b3a0:	e7f2      	b.n	800b388 <__sinit+0xc>
 800b3a2:	bf00      	nop
 800b3a4:	0800b2e9 	.word	0x0800b2e9
 800b3a8:	24002964 	.word	0x24002964

0800b3ac <_fwalk_sglue>:
 800b3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3b0:	4607      	mov	r7, r0
 800b3b2:	4688      	mov	r8, r1
 800b3b4:	4614      	mov	r4, r2
 800b3b6:	2600      	movs	r6, #0
 800b3b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b3bc:	f1b9 0901 	subs.w	r9, r9, #1
 800b3c0:	d505      	bpl.n	800b3ce <_fwalk_sglue+0x22>
 800b3c2:	6824      	ldr	r4, [r4, #0]
 800b3c4:	2c00      	cmp	r4, #0
 800b3c6:	d1f7      	bne.n	800b3b8 <_fwalk_sglue+0xc>
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ce:	89ab      	ldrh	r3, [r5, #12]
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d907      	bls.n	800b3e4 <_fwalk_sglue+0x38>
 800b3d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	d003      	beq.n	800b3e4 <_fwalk_sglue+0x38>
 800b3dc:	4629      	mov	r1, r5
 800b3de:	4638      	mov	r0, r7
 800b3e0:	47c0      	blx	r8
 800b3e2:	4306      	orrs	r6, r0
 800b3e4:	3568      	adds	r5, #104	; 0x68
 800b3e6:	e7e9      	b.n	800b3bc <_fwalk_sglue+0x10>

0800b3e8 <iprintf>:
 800b3e8:	b40f      	push	{r0, r1, r2, r3}
 800b3ea:	b507      	push	{r0, r1, r2, lr}
 800b3ec:	4906      	ldr	r1, [pc, #24]	; (800b408 <iprintf+0x20>)
 800b3ee:	ab04      	add	r3, sp, #16
 800b3f0:	6808      	ldr	r0, [r1, #0]
 800b3f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3f6:	6881      	ldr	r1, [r0, #8]
 800b3f8:	9301      	str	r3, [sp, #4]
 800b3fa:	f001 fc6b 	bl	800ccd4 <_vfiprintf_r>
 800b3fe:	b003      	add	sp, #12
 800b400:	f85d eb04 	ldr.w	lr, [sp], #4
 800b404:	b004      	add	sp, #16
 800b406:	4770      	bx	lr
 800b408:	24000174 	.word	0x24000174

0800b40c <putchar>:
 800b40c:	4b02      	ldr	r3, [pc, #8]	; (800b418 <putchar+0xc>)
 800b40e:	4601      	mov	r1, r0
 800b410:	6818      	ldr	r0, [r3, #0]
 800b412:	6882      	ldr	r2, [r0, #8]
 800b414:	f001 be88 	b.w	800d128 <_putc_r>
 800b418:	24000174 	.word	0x24000174

0800b41c <_puts_r>:
 800b41c:	6a03      	ldr	r3, [r0, #32]
 800b41e:	b570      	push	{r4, r5, r6, lr}
 800b420:	6884      	ldr	r4, [r0, #8]
 800b422:	4605      	mov	r5, r0
 800b424:	460e      	mov	r6, r1
 800b426:	b90b      	cbnz	r3, 800b42c <_puts_r+0x10>
 800b428:	f7ff ffa8 	bl	800b37c <__sinit>
 800b42c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b42e:	07db      	lsls	r3, r3, #31
 800b430:	d405      	bmi.n	800b43e <_puts_r+0x22>
 800b432:	89a3      	ldrh	r3, [r4, #12]
 800b434:	0598      	lsls	r0, r3, #22
 800b436:	d402      	bmi.n	800b43e <_puts_r+0x22>
 800b438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b43a:	f000 f9ac 	bl	800b796 <__retarget_lock_acquire_recursive>
 800b43e:	89a3      	ldrh	r3, [r4, #12]
 800b440:	0719      	lsls	r1, r3, #28
 800b442:	d513      	bpl.n	800b46c <_puts_r+0x50>
 800b444:	6923      	ldr	r3, [r4, #16]
 800b446:	b18b      	cbz	r3, 800b46c <_puts_r+0x50>
 800b448:	3e01      	subs	r6, #1
 800b44a:	68a3      	ldr	r3, [r4, #8]
 800b44c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b450:	3b01      	subs	r3, #1
 800b452:	60a3      	str	r3, [r4, #8]
 800b454:	b9e9      	cbnz	r1, 800b492 <_puts_r+0x76>
 800b456:	2b00      	cmp	r3, #0
 800b458:	da2e      	bge.n	800b4b8 <_puts_r+0x9c>
 800b45a:	4622      	mov	r2, r4
 800b45c:	210a      	movs	r1, #10
 800b45e:	4628      	mov	r0, r5
 800b460:	f000 f886 	bl	800b570 <__swbuf_r>
 800b464:	3001      	adds	r0, #1
 800b466:	d007      	beq.n	800b478 <_puts_r+0x5c>
 800b468:	250a      	movs	r5, #10
 800b46a:	e007      	b.n	800b47c <_puts_r+0x60>
 800b46c:	4621      	mov	r1, r4
 800b46e:	4628      	mov	r0, r5
 800b470:	f000 f8bc 	bl	800b5ec <__swsetup_r>
 800b474:	2800      	cmp	r0, #0
 800b476:	d0e7      	beq.n	800b448 <_puts_r+0x2c>
 800b478:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b47c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b47e:	07da      	lsls	r2, r3, #31
 800b480:	d405      	bmi.n	800b48e <_puts_r+0x72>
 800b482:	89a3      	ldrh	r3, [r4, #12]
 800b484:	059b      	lsls	r3, r3, #22
 800b486:	d402      	bmi.n	800b48e <_puts_r+0x72>
 800b488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b48a:	f000 f985 	bl	800b798 <__retarget_lock_release_recursive>
 800b48e:	4628      	mov	r0, r5
 800b490:	bd70      	pop	{r4, r5, r6, pc}
 800b492:	2b00      	cmp	r3, #0
 800b494:	da04      	bge.n	800b4a0 <_puts_r+0x84>
 800b496:	69a2      	ldr	r2, [r4, #24]
 800b498:	429a      	cmp	r2, r3
 800b49a:	dc06      	bgt.n	800b4aa <_puts_r+0x8e>
 800b49c:	290a      	cmp	r1, #10
 800b49e:	d004      	beq.n	800b4aa <_puts_r+0x8e>
 800b4a0:	6823      	ldr	r3, [r4, #0]
 800b4a2:	1c5a      	adds	r2, r3, #1
 800b4a4:	6022      	str	r2, [r4, #0]
 800b4a6:	7019      	strb	r1, [r3, #0]
 800b4a8:	e7cf      	b.n	800b44a <_puts_r+0x2e>
 800b4aa:	4622      	mov	r2, r4
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	f000 f85f 	bl	800b570 <__swbuf_r>
 800b4b2:	3001      	adds	r0, #1
 800b4b4:	d1c9      	bne.n	800b44a <_puts_r+0x2e>
 800b4b6:	e7df      	b.n	800b478 <_puts_r+0x5c>
 800b4b8:	6823      	ldr	r3, [r4, #0]
 800b4ba:	250a      	movs	r5, #10
 800b4bc:	1c5a      	adds	r2, r3, #1
 800b4be:	6022      	str	r2, [r4, #0]
 800b4c0:	701d      	strb	r5, [r3, #0]
 800b4c2:	e7db      	b.n	800b47c <_puts_r+0x60>

0800b4c4 <puts>:
 800b4c4:	4b02      	ldr	r3, [pc, #8]	; (800b4d0 <puts+0xc>)
 800b4c6:	4601      	mov	r1, r0
 800b4c8:	6818      	ldr	r0, [r3, #0]
 800b4ca:	f7ff bfa7 	b.w	800b41c <_puts_r>
 800b4ce:	bf00      	nop
 800b4d0:	24000174 	.word	0x24000174

0800b4d4 <__sread>:
 800b4d4:	b510      	push	{r4, lr}
 800b4d6:	460c      	mov	r4, r1
 800b4d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4dc:	f000 f90c 	bl	800b6f8 <_read_r>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	bfab      	itete	ge
 800b4e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b4e6:	89a3      	ldrhlt	r3, [r4, #12]
 800b4e8:	181b      	addge	r3, r3, r0
 800b4ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b4ee:	bfac      	ite	ge
 800b4f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b4f2:	81a3      	strhlt	r3, [r4, #12]
 800b4f4:	bd10      	pop	{r4, pc}

0800b4f6 <__swrite>:
 800b4f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4fa:	461f      	mov	r7, r3
 800b4fc:	898b      	ldrh	r3, [r1, #12]
 800b4fe:	05db      	lsls	r3, r3, #23
 800b500:	4605      	mov	r5, r0
 800b502:	460c      	mov	r4, r1
 800b504:	4616      	mov	r6, r2
 800b506:	d505      	bpl.n	800b514 <__swrite+0x1e>
 800b508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b50c:	2302      	movs	r3, #2
 800b50e:	2200      	movs	r2, #0
 800b510:	f000 f8e0 	bl	800b6d4 <_lseek_r>
 800b514:	89a3      	ldrh	r3, [r4, #12]
 800b516:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b51a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b51e:	81a3      	strh	r3, [r4, #12]
 800b520:	4632      	mov	r2, r6
 800b522:	463b      	mov	r3, r7
 800b524:	4628      	mov	r0, r5
 800b526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b52a:	f000 b8f7 	b.w	800b71c <_write_r>

0800b52e <__sseek>:
 800b52e:	b510      	push	{r4, lr}
 800b530:	460c      	mov	r4, r1
 800b532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b536:	f000 f8cd 	bl	800b6d4 <_lseek_r>
 800b53a:	1c43      	adds	r3, r0, #1
 800b53c:	89a3      	ldrh	r3, [r4, #12]
 800b53e:	bf15      	itete	ne
 800b540:	6560      	strne	r0, [r4, #84]	; 0x54
 800b542:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b546:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b54a:	81a3      	strheq	r3, [r4, #12]
 800b54c:	bf18      	it	ne
 800b54e:	81a3      	strhne	r3, [r4, #12]
 800b550:	bd10      	pop	{r4, pc}

0800b552 <__sclose>:
 800b552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b556:	f000 b8ad 	b.w	800b6b4 <_close_r>
	...

0800b55c <viprintf>:
 800b55c:	460b      	mov	r3, r1
 800b55e:	4903      	ldr	r1, [pc, #12]	; (800b56c <viprintf+0x10>)
 800b560:	4602      	mov	r2, r0
 800b562:	6808      	ldr	r0, [r1, #0]
 800b564:	6881      	ldr	r1, [r0, #8]
 800b566:	f001 bbb5 	b.w	800ccd4 <_vfiprintf_r>
 800b56a:	bf00      	nop
 800b56c:	24000174 	.word	0x24000174

0800b570 <__swbuf_r>:
 800b570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b572:	460e      	mov	r6, r1
 800b574:	4614      	mov	r4, r2
 800b576:	4605      	mov	r5, r0
 800b578:	b118      	cbz	r0, 800b582 <__swbuf_r+0x12>
 800b57a:	6a03      	ldr	r3, [r0, #32]
 800b57c:	b90b      	cbnz	r3, 800b582 <__swbuf_r+0x12>
 800b57e:	f7ff fefd 	bl	800b37c <__sinit>
 800b582:	69a3      	ldr	r3, [r4, #24]
 800b584:	60a3      	str	r3, [r4, #8]
 800b586:	89a3      	ldrh	r3, [r4, #12]
 800b588:	071a      	lsls	r2, r3, #28
 800b58a:	d525      	bpl.n	800b5d8 <__swbuf_r+0x68>
 800b58c:	6923      	ldr	r3, [r4, #16]
 800b58e:	b31b      	cbz	r3, 800b5d8 <__swbuf_r+0x68>
 800b590:	6823      	ldr	r3, [r4, #0]
 800b592:	6922      	ldr	r2, [r4, #16]
 800b594:	1a98      	subs	r0, r3, r2
 800b596:	6963      	ldr	r3, [r4, #20]
 800b598:	b2f6      	uxtb	r6, r6
 800b59a:	4283      	cmp	r3, r0
 800b59c:	4637      	mov	r7, r6
 800b59e:	dc04      	bgt.n	800b5aa <__swbuf_r+0x3a>
 800b5a0:	4621      	mov	r1, r4
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	f001 fd36 	bl	800d014 <_fflush_r>
 800b5a8:	b9e0      	cbnz	r0, 800b5e4 <__swbuf_r+0x74>
 800b5aa:	68a3      	ldr	r3, [r4, #8]
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	60a3      	str	r3, [r4, #8]
 800b5b0:	6823      	ldr	r3, [r4, #0]
 800b5b2:	1c5a      	adds	r2, r3, #1
 800b5b4:	6022      	str	r2, [r4, #0]
 800b5b6:	701e      	strb	r6, [r3, #0]
 800b5b8:	6962      	ldr	r2, [r4, #20]
 800b5ba:	1c43      	adds	r3, r0, #1
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d004      	beq.n	800b5ca <__swbuf_r+0x5a>
 800b5c0:	89a3      	ldrh	r3, [r4, #12]
 800b5c2:	07db      	lsls	r3, r3, #31
 800b5c4:	d506      	bpl.n	800b5d4 <__swbuf_r+0x64>
 800b5c6:	2e0a      	cmp	r6, #10
 800b5c8:	d104      	bne.n	800b5d4 <__swbuf_r+0x64>
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	f001 fd21 	bl	800d014 <_fflush_r>
 800b5d2:	b938      	cbnz	r0, 800b5e4 <__swbuf_r+0x74>
 800b5d4:	4638      	mov	r0, r7
 800b5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5d8:	4621      	mov	r1, r4
 800b5da:	4628      	mov	r0, r5
 800b5dc:	f000 f806 	bl	800b5ec <__swsetup_r>
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	d0d5      	beq.n	800b590 <__swbuf_r+0x20>
 800b5e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b5e8:	e7f4      	b.n	800b5d4 <__swbuf_r+0x64>
	...

0800b5ec <__swsetup_r>:
 800b5ec:	b538      	push	{r3, r4, r5, lr}
 800b5ee:	4b2a      	ldr	r3, [pc, #168]	; (800b698 <__swsetup_r+0xac>)
 800b5f0:	4605      	mov	r5, r0
 800b5f2:	6818      	ldr	r0, [r3, #0]
 800b5f4:	460c      	mov	r4, r1
 800b5f6:	b118      	cbz	r0, 800b600 <__swsetup_r+0x14>
 800b5f8:	6a03      	ldr	r3, [r0, #32]
 800b5fa:	b90b      	cbnz	r3, 800b600 <__swsetup_r+0x14>
 800b5fc:	f7ff febe 	bl	800b37c <__sinit>
 800b600:	89a3      	ldrh	r3, [r4, #12]
 800b602:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b606:	0718      	lsls	r0, r3, #28
 800b608:	d422      	bmi.n	800b650 <__swsetup_r+0x64>
 800b60a:	06d9      	lsls	r1, r3, #27
 800b60c:	d407      	bmi.n	800b61e <__swsetup_r+0x32>
 800b60e:	2309      	movs	r3, #9
 800b610:	602b      	str	r3, [r5, #0]
 800b612:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b616:	81a3      	strh	r3, [r4, #12]
 800b618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b61c:	e034      	b.n	800b688 <__swsetup_r+0x9c>
 800b61e:	0758      	lsls	r0, r3, #29
 800b620:	d512      	bpl.n	800b648 <__swsetup_r+0x5c>
 800b622:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b624:	b141      	cbz	r1, 800b638 <__swsetup_r+0x4c>
 800b626:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b62a:	4299      	cmp	r1, r3
 800b62c:	d002      	beq.n	800b634 <__swsetup_r+0x48>
 800b62e:	4628      	mov	r0, r5
 800b630:	f000 feaa 	bl	800c388 <_free_r>
 800b634:	2300      	movs	r3, #0
 800b636:	6363      	str	r3, [r4, #52]	; 0x34
 800b638:	89a3      	ldrh	r3, [r4, #12]
 800b63a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b63e:	81a3      	strh	r3, [r4, #12]
 800b640:	2300      	movs	r3, #0
 800b642:	6063      	str	r3, [r4, #4]
 800b644:	6923      	ldr	r3, [r4, #16]
 800b646:	6023      	str	r3, [r4, #0]
 800b648:	89a3      	ldrh	r3, [r4, #12]
 800b64a:	f043 0308 	orr.w	r3, r3, #8
 800b64e:	81a3      	strh	r3, [r4, #12]
 800b650:	6923      	ldr	r3, [r4, #16]
 800b652:	b94b      	cbnz	r3, 800b668 <__swsetup_r+0x7c>
 800b654:	89a3      	ldrh	r3, [r4, #12]
 800b656:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b65a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b65e:	d003      	beq.n	800b668 <__swsetup_r+0x7c>
 800b660:	4621      	mov	r1, r4
 800b662:	4628      	mov	r0, r5
 800b664:	f001 fd24 	bl	800d0b0 <__smakebuf_r>
 800b668:	89a0      	ldrh	r0, [r4, #12]
 800b66a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b66e:	f010 0301 	ands.w	r3, r0, #1
 800b672:	d00a      	beq.n	800b68a <__swsetup_r+0x9e>
 800b674:	2300      	movs	r3, #0
 800b676:	60a3      	str	r3, [r4, #8]
 800b678:	6963      	ldr	r3, [r4, #20]
 800b67a:	425b      	negs	r3, r3
 800b67c:	61a3      	str	r3, [r4, #24]
 800b67e:	6923      	ldr	r3, [r4, #16]
 800b680:	b943      	cbnz	r3, 800b694 <__swsetup_r+0xa8>
 800b682:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b686:	d1c4      	bne.n	800b612 <__swsetup_r+0x26>
 800b688:	bd38      	pop	{r3, r4, r5, pc}
 800b68a:	0781      	lsls	r1, r0, #30
 800b68c:	bf58      	it	pl
 800b68e:	6963      	ldrpl	r3, [r4, #20]
 800b690:	60a3      	str	r3, [r4, #8]
 800b692:	e7f4      	b.n	800b67e <__swsetup_r+0x92>
 800b694:	2000      	movs	r0, #0
 800b696:	e7f7      	b.n	800b688 <__swsetup_r+0x9c>
 800b698:	24000174 	.word	0x24000174

0800b69c <memset>:
 800b69c:	4402      	add	r2, r0
 800b69e:	4603      	mov	r3, r0
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d100      	bne.n	800b6a6 <memset+0xa>
 800b6a4:	4770      	bx	lr
 800b6a6:	f803 1b01 	strb.w	r1, [r3], #1
 800b6aa:	e7f9      	b.n	800b6a0 <memset+0x4>

0800b6ac <_localeconv_r>:
 800b6ac:	4800      	ldr	r0, [pc, #0]	; (800b6b0 <_localeconv_r+0x4>)
 800b6ae:	4770      	bx	lr
 800b6b0:	24000268 	.word	0x24000268

0800b6b4 <_close_r>:
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	4d06      	ldr	r5, [pc, #24]	; (800b6d0 <_close_r+0x1c>)
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	4608      	mov	r0, r1
 800b6be:	602b      	str	r3, [r5, #0]
 800b6c0:	f7f5 fc1d 	bl	8000efe <_close>
 800b6c4:	1c43      	adds	r3, r0, #1
 800b6c6:	d102      	bne.n	800b6ce <_close_r+0x1a>
 800b6c8:	682b      	ldr	r3, [r5, #0]
 800b6ca:	b103      	cbz	r3, 800b6ce <_close_r+0x1a>
 800b6cc:	6023      	str	r3, [r4, #0]
 800b6ce:	bd38      	pop	{r3, r4, r5, pc}
 800b6d0:	24002968 	.word	0x24002968

0800b6d4 <_lseek_r>:
 800b6d4:	b538      	push	{r3, r4, r5, lr}
 800b6d6:	4d07      	ldr	r5, [pc, #28]	; (800b6f4 <_lseek_r+0x20>)
 800b6d8:	4604      	mov	r4, r0
 800b6da:	4608      	mov	r0, r1
 800b6dc:	4611      	mov	r1, r2
 800b6de:	2200      	movs	r2, #0
 800b6e0:	602a      	str	r2, [r5, #0]
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	f7f5 fc32 	bl	8000f4c <_lseek>
 800b6e8:	1c43      	adds	r3, r0, #1
 800b6ea:	d102      	bne.n	800b6f2 <_lseek_r+0x1e>
 800b6ec:	682b      	ldr	r3, [r5, #0]
 800b6ee:	b103      	cbz	r3, 800b6f2 <_lseek_r+0x1e>
 800b6f0:	6023      	str	r3, [r4, #0]
 800b6f2:	bd38      	pop	{r3, r4, r5, pc}
 800b6f4:	24002968 	.word	0x24002968

0800b6f8 <_read_r>:
 800b6f8:	b538      	push	{r3, r4, r5, lr}
 800b6fa:	4d07      	ldr	r5, [pc, #28]	; (800b718 <_read_r+0x20>)
 800b6fc:	4604      	mov	r4, r0
 800b6fe:	4608      	mov	r0, r1
 800b700:	4611      	mov	r1, r2
 800b702:	2200      	movs	r2, #0
 800b704:	602a      	str	r2, [r5, #0]
 800b706:	461a      	mov	r2, r3
 800b708:	f7f5 fbba 	bl	8000e80 <_read>
 800b70c:	1c43      	adds	r3, r0, #1
 800b70e:	d102      	bne.n	800b716 <_read_r+0x1e>
 800b710:	682b      	ldr	r3, [r5, #0]
 800b712:	b103      	cbz	r3, 800b716 <_read_r+0x1e>
 800b714:	6023      	str	r3, [r4, #0]
 800b716:	bd38      	pop	{r3, r4, r5, pc}
 800b718:	24002968 	.word	0x24002968

0800b71c <_write_r>:
 800b71c:	b538      	push	{r3, r4, r5, lr}
 800b71e:	4d07      	ldr	r5, [pc, #28]	; (800b73c <_write_r+0x20>)
 800b720:	4604      	mov	r4, r0
 800b722:	4608      	mov	r0, r1
 800b724:	4611      	mov	r1, r2
 800b726:	2200      	movs	r2, #0
 800b728:	602a      	str	r2, [r5, #0]
 800b72a:	461a      	mov	r2, r3
 800b72c:	f7f5 fbc5 	bl	8000eba <_write>
 800b730:	1c43      	adds	r3, r0, #1
 800b732:	d102      	bne.n	800b73a <_write_r+0x1e>
 800b734:	682b      	ldr	r3, [r5, #0]
 800b736:	b103      	cbz	r3, 800b73a <_write_r+0x1e>
 800b738:	6023      	str	r3, [r4, #0]
 800b73a:	bd38      	pop	{r3, r4, r5, pc}
 800b73c:	24002968 	.word	0x24002968

0800b740 <__errno>:
 800b740:	4b01      	ldr	r3, [pc, #4]	; (800b748 <__errno+0x8>)
 800b742:	6818      	ldr	r0, [r3, #0]
 800b744:	4770      	bx	lr
 800b746:	bf00      	nop
 800b748:	24000174 	.word	0x24000174

0800b74c <__libc_init_array>:
 800b74c:	b570      	push	{r4, r5, r6, lr}
 800b74e:	4d0d      	ldr	r5, [pc, #52]	; (800b784 <__libc_init_array+0x38>)
 800b750:	4c0d      	ldr	r4, [pc, #52]	; (800b788 <__libc_init_array+0x3c>)
 800b752:	1b64      	subs	r4, r4, r5
 800b754:	10a4      	asrs	r4, r4, #2
 800b756:	2600      	movs	r6, #0
 800b758:	42a6      	cmp	r6, r4
 800b75a:	d109      	bne.n	800b770 <__libc_init_array+0x24>
 800b75c:	4d0b      	ldr	r5, [pc, #44]	; (800b78c <__libc_init_array+0x40>)
 800b75e:	4c0c      	ldr	r4, [pc, #48]	; (800b790 <__libc_init_array+0x44>)
 800b760:	f001 fe08 	bl	800d374 <_init>
 800b764:	1b64      	subs	r4, r4, r5
 800b766:	10a4      	asrs	r4, r4, #2
 800b768:	2600      	movs	r6, #0
 800b76a:	42a6      	cmp	r6, r4
 800b76c:	d105      	bne.n	800b77a <__libc_init_array+0x2e>
 800b76e:	bd70      	pop	{r4, r5, r6, pc}
 800b770:	f855 3b04 	ldr.w	r3, [r5], #4
 800b774:	4798      	blx	r3
 800b776:	3601      	adds	r6, #1
 800b778:	e7ee      	b.n	800b758 <__libc_init_array+0xc>
 800b77a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b77e:	4798      	blx	r3
 800b780:	3601      	adds	r6, #1
 800b782:	e7f2      	b.n	800b76a <__libc_init_array+0x1e>
 800b784:	0800d884 	.word	0x0800d884
 800b788:	0800d884 	.word	0x0800d884
 800b78c:	0800d884 	.word	0x0800d884
 800b790:	0800d888 	.word	0x0800d888

0800b794 <__retarget_lock_init_recursive>:
 800b794:	4770      	bx	lr

0800b796 <__retarget_lock_acquire_recursive>:
 800b796:	4770      	bx	lr

0800b798 <__retarget_lock_release_recursive>:
 800b798:	4770      	bx	lr

0800b79a <quorem>:
 800b79a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b79e:	6903      	ldr	r3, [r0, #16]
 800b7a0:	690c      	ldr	r4, [r1, #16]
 800b7a2:	42a3      	cmp	r3, r4
 800b7a4:	4607      	mov	r7, r0
 800b7a6:	db7e      	blt.n	800b8a6 <quorem+0x10c>
 800b7a8:	3c01      	subs	r4, #1
 800b7aa:	f101 0814 	add.w	r8, r1, #20
 800b7ae:	f100 0514 	add.w	r5, r0, #20
 800b7b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7b6:	9301      	str	r3, [sp, #4]
 800b7b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b7bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b7c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b7cc:	fbb2 f6f3 	udiv	r6, r2, r3
 800b7d0:	d331      	bcc.n	800b836 <quorem+0x9c>
 800b7d2:	f04f 0e00 	mov.w	lr, #0
 800b7d6:	4640      	mov	r0, r8
 800b7d8:	46ac      	mov	ip, r5
 800b7da:	46f2      	mov	sl, lr
 800b7dc:	f850 2b04 	ldr.w	r2, [r0], #4
 800b7e0:	b293      	uxth	r3, r2
 800b7e2:	fb06 e303 	mla	r3, r6, r3, lr
 800b7e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b7ea:	0c1a      	lsrs	r2, r3, #16
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	ebaa 0303 	sub.w	r3, sl, r3
 800b7f2:	f8dc a000 	ldr.w	sl, [ip]
 800b7f6:	fa13 f38a 	uxtah	r3, r3, sl
 800b7fa:	fb06 220e 	mla	r2, r6, lr, r2
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	9b00      	ldr	r3, [sp, #0]
 800b802:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b806:	b292      	uxth	r2, r2
 800b808:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b80c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b810:	f8bd 3000 	ldrh.w	r3, [sp]
 800b814:	4581      	cmp	r9, r0
 800b816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b81a:	f84c 3b04 	str.w	r3, [ip], #4
 800b81e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b822:	d2db      	bcs.n	800b7dc <quorem+0x42>
 800b824:	f855 300b 	ldr.w	r3, [r5, fp]
 800b828:	b92b      	cbnz	r3, 800b836 <quorem+0x9c>
 800b82a:	9b01      	ldr	r3, [sp, #4]
 800b82c:	3b04      	subs	r3, #4
 800b82e:	429d      	cmp	r5, r3
 800b830:	461a      	mov	r2, r3
 800b832:	d32c      	bcc.n	800b88e <quorem+0xf4>
 800b834:	613c      	str	r4, [r7, #16]
 800b836:	4638      	mov	r0, r7
 800b838:	f001 f922 	bl	800ca80 <__mcmp>
 800b83c:	2800      	cmp	r0, #0
 800b83e:	db22      	blt.n	800b886 <quorem+0xec>
 800b840:	3601      	adds	r6, #1
 800b842:	4629      	mov	r1, r5
 800b844:	2000      	movs	r0, #0
 800b846:	f858 2b04 	ldr.w	r2, [r8], #4
 800b84a:	f8d1 c000 	ldr.w	ip, [r1]
 800b84e:	b293      	uxth	r3, r2
 800b850:	1ac3      	subs	r3, r0, r3
 800b852:	0c12      	lsrs	r2, r2, #16
 800b854:	fa13 f38c 	uxtah	r3, r3, ip
 800b858:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b85c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b860:	b29b      	uxth	r3, r3
 800b862:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b866:	45c1      	cmp	r9, r8
 800b868:	f841 3b04 	str.w	r3, [r1], #4
 800b86c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b870:	d2e9      	bcs.n	800b846 <quorem+0xac>
 800b872:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b876:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b87a:	b922      	cbnz	r2, 800b886 <quorem+0xec>
 800b87c:	3b04      	subs	r3, #4
 800b87e:	429d      	cmp	r5, r3
 800b880:	461a      	mov	r2, r3
 800b882:	d30a      	bcc.n	800b89a <quorem+0x100>
 800b884:	613c      	str	r4, [r7, #16]
 800b886:	4630      	mov	r0, r6
 800b888:	b003      	add	sp, #12
 800b88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b88e:	6812      	ldr	r2, [r2, #0]
 800b890:	3b04      	subs	r3, #4
 800b892:	2a00      	cmp	r2, #0
 800b894:	d1ce      	bne.n	800b834 <quorem+0x9a>
 800b896:	3c01      	subs	r4, #1
 800b898:	e7c9      	b.n	800b82e <quorem+0x94>
 800b89a:	6812      	ldr	r2, [r2, #0]
 800b89c:	3b04      	subs	r3, #4
 800b89e:	2a00      	cmp	r2, #0
 800b8a0:	d1f0      	bne.n	800b884 <quorem+0xea>
 800b8a2:	3c01      	subs	r4, #1
 800b8a4:	e7eb      	b.n	800b87e <quorem+0xe4>
 800b8a6:	2000      	movs	r0, #0
 800b8a8:	e7ee      	b.n	800b888 <quorem+0xee>
 800b8aa:	0000      	movs	r0, r0
 800b8ac:	0000      	movs	r0, r0
	...

0800b8b0 <_dtoa_r>:
 800b8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b4:	ed2d 8b02 	vpush	{d8}
 800b8b8:	69c5      	ldr	r5, [r0, #28]
 800b8ba:	b091      	sub	sp, #68	; 0x44
 800b8bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b8c0:	ec59 8b10 	vmov	r8, r9, d0
 800b8c4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800b8c6:	9106      	str	r1, [sp, #24]
 800b8c8:	4606      	mov	r6, r0
 800b8ca:	9208      	str	r2, [sp, #32]
 800b8cc:	930c      	str	r3, [sp, #48]	; 0x30
 800b8ce:	b975      	cbnz	r5, 800b8ee <_dtoa_r+0x3e>
 800b8d0:	2010      	movs	r0, #16
 800b8d2:	f000 fda5 	bl	800c420 <malloc>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	61f0      	str	r0, [r6, #28]
 800b8da:	b920      	cbnz	r0, 800b8e6 <_dtoa_r+0x36>
 800b8dc:	4ba6      	ldr	r3, [pc, #664]	; (800bb78 <_dtoa_r+0x2c8>)
 800b8de:	21ef      	movs	r1, #239	; 0xef
 800b8e0:	48a6      	ldr	r0, [pc, #664]	; (800bb7c <_dtoa_r+0x2cc>)
 800b8e2:	f001 fc95 	bl	800d210 <__assert_func>
 800b8e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b8ea:	6005      	str	r5, [r0, #0]
 800b8ec:	60c5      	str	r5, [r0, #12]
 800b8ee:	69f3      	ldr	r3, [r6, #28]
 800b8f0:	6819      	ldr	r1, [r3, #0]
 800b8f2:	b151      	cbz	r1, 800b90a <_dtoa_r+0x5a>
 800b8f4:	685a      	ldr	r2, [r3, #4]
 800b8f6:	604a      	str	r2, [r1, #4]
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	4093      	lsls	r3, r2
 800b8fc:	608b      	str	r3, [r1, #8]
 800b8fe:	4630      	mov	r0, r6
 800b900:	f000 fe82 	bl	800c608 <_Bfree>
 800b904:	69f3      	ldr	r3, [r6, #28]
 800b906:	2200      	movs	r2, #0
 800b908:	601a      	str	r2, [r3, #0]
 800b90a:	f1b9 0300 	subs.w	r3, r9, #0
 800b90e:	bfbb      	ittet	lt
 800b910:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b914:	9303      	strlt	r3, [sp, #12]
 800b916:	2300      	movge	r3, #0
 800b918:	2201      	movlt	r2, #1
 800b91a:	bfac      	ite	ge
 800b91c:	6023      	strge	r3, [r4, #0]
 800b91e:	6022      	strlt	r2, [r4, #0]
 800b920:	4b97      	ldr	r3, [pc, #604]	; (800bb80 <_dtoa_r+0x2d0>)
 800b922:	9c03      	ldr	r4, [sp, #12]
 800b924:	43a3      	bics	r3, r4
 800b926:	d11c      	bne.n	800b962 <_dtoa_r+0xb2>
 800b928:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b92a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b92e:	6013      	str	r3, [r2, #0]
 800b930:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b934:	ea53 0308 	orrs.w	r3, r3, r8
 800b938:	f000 84fb 	beq.w	800c332 <_dtoa_r+0xa82>
 800b93c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b93e:	b963      	cbnz	r3, 800b95a <_dtoa_r+0xaa>
 800b940:	4b90      	ldr	r3, [pc, #576]	; (800bb84 <_dtoa_r+0x2d4>)
 800b942:	e020      	b.n	800b986 <_dtoa_r+0xd6>
 800b944:	4b90      	ldr	r3, [pc, #576]	; (800bb88 <_dtoa_r+0x2d8>)
 800b946:	9301      	str	r3, [sp, #4]
 800b948:	3308      	adds	r3, #8
 800b94a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b94c:	6013      	str	r3, [r2, #0]
 800b94e:	9801      	ldr	r0, [sp, #4]
 800b950:	b011      	add	sp, #68	; 0x44
 800b952:	ecbd 8b02 	vpop	{d8}
 800b956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b95a:	4b8a      	ldr	r3, [pc, #552]	; (800bb84 <_dtoa_r+0x2d4>)
 800b95c:	9301      	str	r3, [sp, #4]
 800b95e:	3303      	adds	r3, #3
 800b960:	e7f3      	b.n	800b94a <_dtoa_r+0x9a>
 800b962:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b966:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b96e:	d10c      	bne.n	800b98a <_dtoa_r+0xda>
 800b970:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b972:	2301      	movs	r3, #1
 800b974:	6013      	str	r3, [r2, #0]
 800b976:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f000 84d7 	beq.w	800c32c <_dtoa_r+0xa7c>
 800b97e:	4b83      	ldr	r3, [pc, #524]	; (800bb8c <_dtoa_r+0x2dc>)
 800b980:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b982:	6013      	str	r3, [r2, #0]
 800b984:	3b01      	subs	r3, #1
 800b986:	9301      	str	r3, [sp, #4]
 800b988:	e7e1      	b.n	800b94e <_dtoa_r+0x9e>
 800b98a:	aa0e      	add	r2, sp, #56	; 0x38
 800b98c:	a90f      	add	r1, sp, #60	; 0x3c
 800b98e:	4630      	mov	r0, r6
 800b990:	eeb0 0b48 	vmov.f64	d0, d8
 800b994:	f001 f91a 	bl	800cbcc <__d2b>
 800b998:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800b99c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b99e:	4605      	mov	r5, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d046      	beq.n	800ba32 <_dtoa_r+0x182>
 800b9a4:	eeb0 7b48 	vmov.f64	d7, d8
 800b9a8:	ee18 1a90 	vmov	r1, s17
 800b9ac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b9b0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800b9b4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b9b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b9bc:	2000      	movs	r0, #0
 800b9be:	ee07 1a90 	vmov	s15, r1
 800b9c2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800b9c6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800bb60 <_dtoa_r+0x2b0>
 800b9ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b9ce:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800bb68 <_dtoa_r+0x2b8>
 800b9d2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b9d6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800bb70 <_dtoa_r+0x2c0>
 800b9da:	ee07 3a90 	vmov	s15, r3
 800b9de:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b9e2:	eeb0 7b46 	vmov.f64	d7, d6
 800b9e6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b9ea:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b9ee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b9f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9f6:	ee16 ba90 	vmov	fp, s13
 800b9fa:	9009      	str	r0, [sp, #36]	; 0x24
 800b9fc:	d508      	bpl.n	800ba10 <_dtoa_r+0x160>
 800b9fe:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ba02:	eeb4 6b47 	vcmp.f64	d6, d7
 800ba06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba0a:	bf18      	it	ne
 800ba0c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800ba10:	f1bb 0f16 	cmp.w	fp, #22
 800ba14:	d82b      	bhi.n	800ba6e <_dtoa_r+0x1be>
 800ba16:	495e      	ldr	r1, [pc, #376]	; (800bb90 <_dtoa_r+0x2e0>)
 800ba18:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800ba1c:	ed91 7b00 	vldr	d7, [r1]
 800ba20:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ba24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba28:	d501      	bpl.n	800ba2e <_dtoa_r+0x17e>
 800ba2a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ba2e:	2100      	movs	r1, #0
 800ba30:	e01e      	b.n	800ba70 <_dtoa_r+0x1c0>
 800ba32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba34:	4413      	add	r3, r2
 800ba36:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800ba3a:	2920      	cmp	r1, #32
 800ba3c:	bfc1      	itttt	gt
 800ba3e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800ba42:	408c      	lslgt	r4, r1
 800ba44:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800ba48:	fa28 f101 	lsrgt.w	r1, r8, r1
 800ba4c:	bfd6      	itet	le
 800ba4e:	f1c1 0120 	rsble	r1, r1, #32
 800ba52:	4321      	orrgt	r1, r4
 800ba54:	fa08 f101 	lslle.w	r1, r8, r1
 800ba58:	ee07 1a90 	vmov	s15, r1
 800ba5c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ba60:	3b01      	subs	r3, #1
 800ba62:	ee17 1a90 	vmov	r1, s15
 800ba66:	2001      	movs	r0, #1
 800ba68:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ba6c:	e7a7      	b.n	800b9be <_dtoa_r+0x10e>
 800ba6e:	2101      	movs	r1, #1
 800ba70:	1ad2      	subs	r2, r2, r3
 800ba72:	1e53      	subs	r3, r2, #1
 800ba74:	9305      	str	r3, [sp, #20]
 800ba76:	bf45      	ittet	mi
 800ba78:	f1c2 0301 	rsbmi	r3, r2, #1
 800ba7c:	9304      	strmi	r3, [sp, #16]
 800ba7e:	2300      	movpl	r3, #0
 800ba80:	2300      	movmi	r3, #0
 800ba82:	bf4c      	ite	mi
 800ba84:	9305      	strmi	r3, [sp, #20]
 800ba86:	9304      	strpl	r3, [sp, #16]
 800ba88:	f1bb 0f00 	cmp.w	fp, #0
 800ba8c:	910b      	str	r1, [sp, #44]	; 0x2c
 800ba8e:	db18      	blt.n	800bac2 <_dtoa_r+0x212>
 800ba90:	9b05      	ldr	r3, [sp, #20]
 800ba92:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800ba96:	445b      	add	r3, fp
 800ba98:	9305      	str	r3, [sp, #20]
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	9a06      	ldr	r2, [sp, #24]
 800ba9e:	2a09      	cmp	r2, #9
 800baa0:	d848      	bhi.n	800bb34 <_dtoa_r+0x284>
 800baa2:	2a05      	cmp	r2, #5
 800baa4:	bfc4      	itt	gt
 800baa6:	3a04      	subgt	r2, #4
 800baa8:	9206      	strgt	r2, [sp, #24]
 800baaa:	9a06      	ldr	r2, [sp, #24]
 800baac:	f1a2 0202 	sub.w	r2, r2, #2
 800bab0:	bfcc      	ite	gt
 800bab2:	2400      	movgt	r4, #0
 800bab4:	2401      	movle	r4, #1
 800bab6:	2a03      	cmp	r2, #3
 800bab8:	d847      	bhi.n	800bb4a <_dtoa_r+0x29a>
 800baba:	e8df f002 	tbb	[pc, r2]
 800babe:	2d0b      	.short	0x2d0b
 800bac0:	392b      	.short	0x392b
 800bac2:	9b04      	ldr	r3, [sp, #16]
 800bac4:	2200      	movs	r2, #0
 800bac6:	eba3 030b 	sub.w	r3, r3, fp
 800baca:	9304      	str	r3, [sp, #16]
 800bacc:	920a      	str	r2, [sp, #40]	; 0x28
 800bace:	f1cb 0300 	rsb	r3, fp, #0
 800bad2:	e7e3      	b.n	800ba9c <_dtoa_r+0x1ec>
 800bad4:	2200      	movs	r2, #0
 800bad6:	9207      	str	r2, [sp, #28]
 800bad8:	9a08      	ldr	r2, [sp, #32]
 800bada:	2a00      	cmp	r2, #0
 800badc:	dc38      	bgt.n	800bb50 <_dtoa_r+0x2a0>
 800bade:	f04f 0a01 	mov.w	sl, #1
 800bae2:	46d1      	mov	r9, sl
 800bae4:	4652      	mov	r2, sl
 800bae6:	f8cd a020 	str.w	sl, [sp, #32]
 800baea:	69f7      	ldr	r7, [r6, #28]
 800baec:	2100      	movs	r1, #0
 800baee:	2004      	movs	r0, #4
 800baf0:	f100 0c14 	add.w	ip, r0, #20
 800baf4:	4594      	cmp	ip, r2
 800baf6:	d930      	bls.n	800bb5a <_dtoa_r+0x2aa>
 800baf8:	6079      	str	r1, [r7, #4]
 800bafa:	4630      	mov	r0, r6
 800bafc:	930d      	str	r3, [sp, #52]	; 0x34
 800bafe:	f000 fd43 	bl	800c588 <_Balloc>
 800bb02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb04:	9001      	str	r0, [sp, #4]
 800bb06:	4602      	mov	r2, r0
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	d145      	bne.n	800bb98 <_dtoa_r+0x2e8>
 800bb0c:	4b21      	ldr	r3, [pc, #132]	; (800bb94 <_dtoa_r+0x2e4>)
 800bb0e:	f240 11af 	movw	r1, #431	; 0x1af
 800bb12:	e6e5      	b.n	800b8e0 <_dtoa_r+0x30>
 800bb14:	2201      	movs	r2, #1
 800bb16:	e7de      	b.n	800bad6 <_dtoa_r+0x226>
 800bb18:	2200      	movs	r2, #0
 800bb1a:	9207      	str	r2, [sp, #28]
 800bb1c:	9a08      	ldr	r2, [sp, #32]
 800bb1e:	eb0b 0a02 	add.w	sl, fp, r2
 800bb22:	f10a 0901 	add.w	r9, sl, #1
 800bb26:	464a      	mov	r2, r9
 800bb28:	2a01      	cmp	r2, #1
 800bb2a:	bfb8      	it	lt
 800bb2c:	2201      	movlt	r2, #1
 800bb2e:	e7dc      	b.n	800baea <_dtoa_r+0x23a>
 800bb30:	2201      	movs	r2, #1
 800bb32:	e7f2      	b.n	800bb1a <_dtoa_r+0x26a>
 800bb34:	2401      	movs	r4, #1
 800bb36:	2200      	movs	r2, #0
 800bb38:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800bb3c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bb40:	2100      	movs	r1, #0
 800bb42:	46d1      	mov	r9, sl
 800bb44:	2212      	movs	r2, #18
 800bb46:	9108      	str	r1, [sp, #32]
 800bb48:	e7cf      	b.n	800baea <_dtoa_r+0x23a>
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	9207      	str	r2, [sp, #28]
 800bb4e:	e7f5      	b.n	800bb3c <_dtoa_r+0x28c>
 800bb50:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bb54:	46d1      	mov	r9, sl
 800bb56:	4652      	mov	r2, sl
 800bb58:	e7c7      	b.n	800baea <_dtoa_r+0x23a>
 800bb5a:	3101      	adds	r1, #1
 800bb5c:	0040      	lsls	r0, r0, #1
 800bb5e:	e7c7      	b.n	800baf0 <_dtoa_r+0x240>
 800bb60:	636f4361 	.word	0x636f4361
 800bb64:	3fd287a7 	.word	0x3fd287a7
 800bb68:	8b60c8b3 	.word	0x8b60c8b3
 800bb6c:	3fc68a28 	.word	0x3fc68a28
 800bb70:	509f79fb 	.word	0x509f79fb
 800bb74:	3fd34413 	.word	0x3fd34413
 800bb78:	0800d555 	.word	0x0800d555
 800bb7c:	0800d56c 	.word	0x0800d56c
 800bb80:	7ff00000 	.word	0x7ff00000
 800bb84:	0800d551 	.word	0x0800d551
 800bb88:	0800d548 	.word	0x0800d548
 800bb8c:	0800d525 	.word	0x0800d525
 800bb90:	0800d658 	.word	0x0800d658
 800bb94:	0800d5c4 	.word	0x0800d5c4
 800bb98:	69f2      	ldr	r2, [r6, #28]
 800bb9a:	9901      	ldr	r1, [sp, #4]
 800bb9c:	6011      	str	r1, [r2, #0]
 800bb9e:	f1b9 0f0e 	cmp.w	r9, #14
 800bba2:	d86c      	bhi.n	800bc7e <_dtoa_r+0x3ce>
 800bba4:	2c00      	cmp	r4, #0
 800bba6:	d06a      	beq.n	800bc7e <_dtoa_r+0x3ce>
 800bba8:	f1bb 0f00 	cmp.w	fp, #0
 800bbac:	f340 80a0 	ble.w	800bcf0 <_dtoa_r+0x440>
 800bbb0:	4ac1      	ldr	r2, [pc, #772]	; (800beb8 <_dtoa_r+0x608>)
 800bbb2:	f00b 010f 	and.w	r1, fp, #15
 800bbb6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bbba:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bbbe:	ed92 7b00 	vldr	d7, [r2]
 800bbc2:	ea4f 122b 	mov.w	r2, fp, asr #4
 800bbc6:	f000 8087 	beq.w	800bcd8 <_dtoa_r+0x428>
 800bbca:	49bc      	ldr	r1, [pc, #752]	; (800bebc <_dtoa_r+0x60c>)
 800bbcc:	ed91 6b08 	vldr	d6, [r1, #32]
 800bbd0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800bbd4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bbd8:	f002 020f 	and.w	r2, r2, #15
 800bbdc:	2103      	movs	r1, #3
 800bbde:	48b7      	ldr	r0, [pc, #732]	; (800bebc <_dtoa_r+0x60c>)
 800bbe0:	2a00      	cmp	r2, #0
 800bbe2:	d17b      	bne.n	800bcdc <_dtoa_r+0x42c>
 800bbe4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bbe8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bbec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bbf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bbf2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bbf6:	2a00      	cmp	r2, #0
 800bbf8:	f000 80a0 	beq.w	800bd3c <_dtoa_r+0x48c>
 800bbfc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800bc00:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bc04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc08:	f140 8098 	bpl.w	800bd3c <_dtoa_r+0x48c>
 800bc0c:	f1b9 0f00 	cmp.w	r9, #0
 800bc10:	f000 8094 	beq.w	800bd3c <_dtoa_r+0x48c>
 800bc14:	f1ba 0f00 	cmp.w	sl, #0
 800bc18:	dd2f      	ble.n	800bc7a <_dtoa_r+0x3ca>
 800bc1a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800bc1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bc22:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bc26:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800bc2a:	3101      	adds	r1, #1
 800bc2c:	4654      	mov	r4, sl
 800bc2e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bc32:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800bc36:	ee07 1a90 	vmov	s15, r1
 800bc3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bc3e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800bc42:	ee15 7a90 	vmov	r7, s11
 800bc46:	ec51 0b15 	vmov	r0, r1, d5
 800bc4a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800bc4e:	2c00      	cmp	r4, #0
 800bc50:	d177      	bne.n	800bd42 <_dtoa_r+0x492>
 800bc52:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bc56:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bc5a:	ec41 0b17 	vmov	d7, r0, r1
 800bc5e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc66:	f300 826a 	bgt.w	800c13e <_dtoa_r+0x88e>
 800bc6a:	eeb1 7b47 	vneg.f64	d7, d7
 800bc6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bc72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc76:	f100 8260 	bmi.w	800c13a <_dtoa_r+0x88a>
 800bc7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bc7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bc80:	2a00      	cmp	r2, #0
 800bc82:	f2c0 811d 	blt.w	800bec0 <_dtoa_r+0x610>
 800bc86:	f1bb 0f0e 	cmp.w	fp, #14
 800bc8a:	f300 8119 	bgt.w	800bec0 <_dtoa_r+0x610>
 800bc8e:	4b8a      	ldr	r3, [pc, #552]	; (800beb8 <_dtoa_r+0x608>)
 800bc90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bc94:	ed93 6b00 	vldr	d6, [r3]
 800bc98:	9b08      	ldr	r3, [sp, #32]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f280 80b7 	bge.w	800be0e <_dtoa_r+0x55e>
 800bca0:	f1b9 0f00 	cmp.w	r9, #0
 800bca4:	f300 80b3 	bgt.w	800be0e <_dtoa_r+0x55e>
 800bca8:	f040 8246 	bne.w	800c138 <_dtoa_r+0x888>
 800bcac:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bcb0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bcb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bcb8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bcbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcc0:	464c      	mov	r4, r9
 800bcc2:	464f      	mov	r7, r9
 800bcc4:	f280 821c 	bge.w	800c100 <_dtoa_r+0x850>
 800bcc8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bccc:	2331      	movs	r3, #49	; 0x31
 800bcce:	f808 3b01 	strb.w	r3, [r8], #1
 800bcd2:	f10b 0b01 	add.w	fp, fp, #1
 800bcd6:	e218      	b.n	800c10a <_dtoa_r+0x85a>
 800bcd8:	2102      	movs	r1, #2
 800bcda:	e780      	b.n	800bbde <_dtoa_r+0x32e>
 800bcdc:	07d4      	lsls	r4, r2, #31
 800bcde:	d504      	bpl.n	800bcea <_dtoa_r+0x43a>
 800bce0:	ed90 6b00 	vldr	d6, [r0]
 800bce4:	3101      	adds	r1, #1
 800bce6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bcea:	1052      	asrs	r2, r2, #1
 800bcec:	3008      	adds	r0, #8
 800bcee:	e777      	b.n	800bbe0 <_dtoa_r+0x330>
 800bcf0:	d022      	beq.n	800bd38 <_dtoa_r+0x488>
 800bcf2:	f1cb 0200 	rsb	r2, fp, #0
 800bcf6:	4970      	ldr	r1, [pc, #448]	; (800beb8 <_dtoa_r+0x608>)
 800bcf8:	f002 000f 	and.w	r0, r2, #15
 800bcfc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800bd00:	ed91 7b00 	vldr	d7, [r1]
 800bd04:	ee28 7b07 	vmul.f64	d7, d8, d7
 800bd08:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd0c:	486b      	ldr	r0, [pc, #428]	; (800bebc <_dtoa_r+0x60c>)
 800bd0e:	1112      	asrs	r2, r2, #4
 800bd10:	2400      	movs	r4, #0
 800bd12:	2102      	movs	r1, #2
 800bd14:	b92a      	cbnz	r2, 800bd22 <_dtoa_r+0x472>
 800bd16:	2c00      	cmp	r4, #0
 800bd18:	f43f af6a 	beq.w	800bbf0 <_dtoa_r+0x340>
 800bd1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd20:	e766      	b.n	800bbf0 <_dtoa_r+0x340>
 800bd22:	07d7      	lsls	r7, r2, #31
 800bd24:	d505      	bpl.n	800bd32 <_dtoa_r+0x482>
 800bd26:	ed90 6b00 	vldr	d6, [r0]
 800bd2a:	3101      	adds	r1, #1
 800bd2c:	2401      	movs	r4, #1
 800bd2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bd32:	1052      	asrs	r2, r2, #1
 800bd34:	3008      	adds	r0, #8
 800bd36:	e7ed      	b.n	800bd14 <_dtoa_r+0x464>
 800bd38:	2102      	movs	r1, #2
 800bd3a:	e759      	b.n	800bbf0 <_dtoa_r+0x340>
 800bd3c:	465a      	mov	r2, fp
 800bd3e:	464c      	mov	r4, r9
 800bd40:	e775      	b.n	800bc2e <_dtoa_r+0x37e>
 800bd42:	ec41 0b17 	vmov	d7, r0, r1
 800bd46:	495c      	ldr	r1, [pc, #368]	; (800beb8 <_dtoa_r+0x608>)
 800bd48:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800bd4c:	ed11 4b02 	vldr	d4, [r1, #-8]
 800bd50:	9901      	ldr	r1, [sp, #4]
 800bd52:	440c      	add	r4, r1
 800bd54:	9907      	ldr	r1, [sp, #28]
 800bd56:	b351      	cbz	r1, 800bdae <_dtoa_r+0x4fe>
 800bd58:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800bd5c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800bd60:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bd64:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bd68:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bd6c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bd70:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bd74:	ee14 1a90 	vmov	r1, s9
 800bd78:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bd7c:	3130      	adds	r1, #48	; 0x30
 800bd7e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bd82:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bd86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd8a:	f808 1b01 	strb.w	r1, [r8], #1
 800bd8e:	d439      	bmi.n	800be04 <_dtoa_r+0x554>
 800bd90:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bd94:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bd98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd9c:	d472      	bmi.n	800be84 <_dtoa_r+0x5d4>
 800bd9e:	45a0      	cmp	r8, r4
 800bda0:	f43f af6b 	beq.w	800bc7a <_dtoa_r+0x3ca>
 800bda4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bda8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bdac:	e7e0      	b.n	800bd70 <_dtoa_r+0x4c0>
 800bdae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bdb2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bdbc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bdc0:	ee14 1a90 	vmov	r1, s9
 800bdc4:	3130      	adds	r1, #48	; 0x30
 800bdc6:	f808 1b01 	strb.w	r1, [r8], #1
 800bdca:	45a0      	cmp	r8, r4
 800bdcc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bdd0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bdd4:	d118      	bne.n	800be08 <_dtoa_r+0x558>
 800bdd6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800bdda:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bdde:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bde2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bde6:	dc4d      	bgt.n	800be84 <_dtoa_r+0x5d4>
 800bde8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800bdec:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800bdf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdf4:	f57f af41 	bpl.w	800bc7a <_dtoa_r+0x3ca>
 800bdf8:	4680      	mov	r8, r0
 800bdfa:	3801      	subs	r0, #1
 800bdfc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800be00:	2b30      	cmp	r3, #48	; 0x30
 800be02:	d0f9      	beq.n	800bdf8 <_dtoa_r+0x548>
 800be04:	4693      	mov	fp, r2
 800be06:	e02a      	b.n	800be5e <_dtoa_r+0x5ae>
 800be08:	ee26 6b03 	vmul.f64	d6, d6, d3
 800be0c:	e7d6      	b.n	800bdbc <_dtoa_r+0x50c>
 800be0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be12:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800be16:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800be1a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800be1e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800be22:	ee15 3a10 	vmov	r3, s10
 800be26:	3330      	adds	r3, #48	; 0x30
 800be28:	f808 3b01 	strb.w	r3, [r8], #1
 800be2c:	9b01      	ldr	r3, [sp, #4]
 800be2e:	eba8 0303 	sub.w	r3, r8, r3
 800be32:	4599      	cmp	r9, r3
 800be34:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800be38:	eea3 7b46 	vfms.f64	d7, d3, d6
 800be3c:	d133      	bne.n	800bea6 <_dtoa_r+0x5f6>
 800be3e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800be42:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800be46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be4a:	dc1a      	bgt.n	800be82 <_dtoa_r+0x5d2>
 800be4c:	eeb4 7b46 	vcmp.f64	d7, d6
 800be50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be54:	d103      	bne.n	800be5e <_dtoa_r+0x5ae>
 800be56:	ee15 3a10 	vmov	r3, s10
 800be5a:	07d9      	lsls	r1, r3, #31
 800be5c:	d411      	bmi.n	800be82 <_dtoa_r+0x5d2>
 800be5e:	4629      	mov	r1, r5
 800be60:	4630      	mov	r0, r6
 800be62:	f000 fbd1 	bl	800c608 <_Bfree>
 800be66:	2300      	movs	r3, #0
 800be68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be6a:	f888 3000 	strb.w	r3, [r8]
 800be6e:	f10b 0301 	add.w	r3, fp, #1
 800be72:	6013      	str	r3, [r2, #0]
 800be74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800be76:	2b00      	cmp	r3, #0
 800be78:	f43f ad69 	beq.w	800b94e <_dtoa_r+0x9e>
 800be7c:	f8c3 8000 	str.w	r8, [r3]
 800be80:	e565      	b.n	800b94e <_dtoa_r+0x9e>
 800be82:	465a      	mov	r2, fp
 800be84:	4643      	mov	r3, r8
 800be86:	4698      	mov	r8, r3
 800be88:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800be8c:	2939      	cmp	r1, #57	; 0x39
 800be8e:	d106      	bne.n	800be9e <_dtoa_r+0x5ee>
 800be90:	9901      	ldr	r1, [sp, #4]
 800be92:	4299      	cmp	r1, r3
 800be94:	d1f7      	bne.n	800be86 <_dtoa_r+0x5d6>
 800be96:	9801      	ldr	r0, [sp, #4]
 800be98:	2130      	movs	r1, #48	; 0x30
 800be9a:	3201      	adds	r2, #1
 800be9c:	7001      	strb	r1, [r0, #0]
 800be9e:	7819      	ldrb	r1, [r3, #0]
 800bea0:	3101      	adds	r1, #1
 800bea2:	7019      	strb	r1, [r3, #0]
 800bea4:	e7ae      	b.n	800be04 <_dtoa_r+0x554>
 800bea6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800beaa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800beae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beb2:	d1b2      	bne.n	800be1a <_dtoa_r+0x56a>
 800beb4:	e7d3      	b.n	800be5e <_dtoa_r+0x5ae>
 800beb6:	bf00      	nop
 800beb8:	0800d658 	.word	0x0800d658
 800bebc:	0800d630 	.word	0x0800d630
 800bec0:	9907      	ldr	r1, [sp, #28]
 800bec2:	2900      	cmp	r1, #0
 800bec4:	f000 80d0 	beq.w	800c068 <_dtoa_r+0x7b8>
 800bec8:	9906      	ldr	r1, [sp, #24]
 800beca:	2901      	cmp	r1, #1
 800becc:	f300 80b4 	bgt.w	800c038 <_dtoa_r+0x788>
 800bed0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bed2:	2900      	cmp	r1, #0
 800bed4:	f000 80ac 	beq.w	800c030 <_dtoa_r+0x780>
 800bed8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bedc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bee0:	461c      	mov	r4, r3
 800bee2:	9309      	str	r3, [sp, #36]	; 0x24
 800bee4:	9b04      	ldr	r3, [sp, #16]
 800bee6:	4413      	add	r3, r2
 800bee8:	9304      	str	r3, [sp, #16]
 800beea:	9b05      	ldr	r3, [sp, #20]
 800beec:	2101      	movs	r1, #1
 800beee:	4413      	add	r3, r2
 800bef0:	4630      	mov	r0, r6
 800bef2:	9305      	str	r3, [sp, #20]
 800bef4:	f000 fc3e 	bl	800c774 <__i2b>
 800bef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800befa:	4607      	mov	r7, r0
 800befc:	f1b8 0f00 	cmp.w	r8, #0
 800bf00:	d00d      	beq.n	800bf1e <_dtoa_r+0x66e>
 800bf02:	9a05      	ldr	r2, [sp, #20]
 800bf04:	2a00      	cmp	r2, #0
 800bf06:	dd0a      	ble.n	800bf1e <_dtoa_r+0x66e>
 800bf08:	4542      	cmp	r2, r8
 800bf0a:	9904      	ldr	r1, [sp, #16]
 800bf0c:	bfa8      	it	ge
 800bf0e:	4642      	movge	r2, r8
 800bf10:	1a89      	subs	r1, r1, r2
 800bf12:	9104      	str	r1, [sp, #16]
 800bf14:	9905      	ldr	r1, [sp, #20]
 800bf16:	eba8 0802 	sub.w	r8, r8, r2
 800bf1a:	1a8a      	subs	r2, r1, r2
 800bf1c:	9205      	str	r2, [sp, #20]
 800bf1e:	b303      	cbz	r3, 800bf62 <_dtoa_r+0x6b2>
 800bf20:	9a07      	ldr	r2, [sp, #28]
 800bf22:	2a00      	cmp	r2, #0
 800bf24:	f000 80a5 	beq.w	800c072 <_dtoa_r+0x7c2>
 800bf28:	2c00      	cmp	r4, #0
 800bf2a:	dd13      	ble.n	800bf54 <_dtoa_r+0x6a4>
 800bf2c:	4639      	mov	r1, r7
 800bf2e:	4622      	mov	r2, r4
 800bf30:	4630      	mov	r0, r6
 800bf32:	930d      	str	r3, [sp, #52]	; 0x34
 800bf34:	f000 fcde 	bl	800c8f4 <__pow5mult>
 800bf38:	462a      	mov	r2, r5
 800bf3a:	4601      	mov	r1, r0
 800bf3c:	4607      	mov	r7, r0
 800bf3e:	4630      	mov	r0, r6
 800bf40:	f000 fc2e 	bl	800c7a0 <__multiply>
 800bf44:	4629      	mov	r1, r5
 800bf46:	9009      	str	r0, [sp, #36]	; 0x24
 800bf48:	4630      	mov	r0, r6
 800bf4a:	f000 fb5d 	bl	800c608 <_Bfree>
 800bf4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf52:	4615      	mov	r5, r2
 800bf54:	1b1a      	subs	r2, r3, r4
 800bf56:	d004      	beq.n	800bf62 <_dtoa_r+0x6b2>
 800bf58:	4629      	mov	r1, r5
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	f000 fcca 	bl	800c8f4 <__pow5mult>
 800bf60:	4605      	mov	r5, r0
 800bf62:	2101      	movs	r1, #1
 800bf64:	4630      	mov	r0, r6
 800bf66:	f000 fc05 	bl	800c774 <__i2b>
 800bf6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	4604      	mov	r4, r0
 800bf70:	f340 8081 	ble.w	800c076 <_dtoa_r+0x7c6>
 800bf74:	461a      	mov	r2, r3
 800bf76:	4601      	mov	r1, r0
 800bf78:	4630      	mov	r0, r6
 800bf7a:	f000 fcbb 	bl	800c8f4 <__pow5mult>
 800bf7e:	9b06      	ldr	r3, [sp, #24]
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	4604      	mov	r4, r0
 800bf84:	dd7a      	ble.n	800c07c <_dtoa_r+0x7cc>
 800bf86:	2300      	movs	r3, #0
 800bf88:	9309      	str	r3, [sp, #36]	; 0x24
 800bf8a:	6922      	ldr	r2, [r4, #16]
 800bf8c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bf90:	6910      	ldr	r0, [r2, #16]
 800bf92:	f000 fba1 	bl	800c6d8 <__hi0bits>
 800bf96:	f1c0 0020 	rsb	r0, r0, #32
 800bf9a:	9b05      	ldr	r3, [sp, #20]
 800bf9c:	4418      	add	r0, r3
 800bf9e:	f010 001f 	ands.w	r0, r0, #31
 800bfa2:	f000 8093 	beq.w	800c0cc <_dtoa_r+0x81c>
 800bfa6:	f1c0 0220 	rsb	r2, r0, #32
 800bfaa:	2a04      	cmp	r2, #4
 800bfac:	f340 8085 	ble.w	800c0ba <_dtoa_r+0x80a>
 800bfb0:	9b04      	ldr	r3, [sp, #16]
 800bfb2:	f1c0 001c 	rsb	r0, r0, #28
 800bfb6:	4403      	add	r3, r0
 800bfb8:	9304      	str	r3, [sp, #16]
 800bfba:	9b05      	ldr	r3, [sp, #20]
 800bfbc:	4480      	add	r8, r0
 800bfbe:	4403      	add	r3, r0
 800bfc0:	9305      	str	r3, [sp, #20]
 800bfc2:	9b04      	ldr	r3, [sp, #16]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	dd05      	ble.n	800bfd4 <_dtoa_r+0x724>
 800bfc8:	4629      	mov	r1, r5
 800bfca:	461a      	mov	r2, r3
 800bfcc:	4630      	mov	r0, r6
 800bfce:	f000 fceb 	bl	800c9a8 <__lshift>
 800bfd2:	4605      	mov	r5, r0
 800bfd4:	9b05      	ldr	r3, [sp, #20]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	dd05      	ble.n	800bfe6 <_dtoa_r+0x736>
 800bfda:	4621      	mov	r1, r4
 800bfdc:	461a      	mov	r2, r3
 800bfde:	4630      	mov	r0, r6
 800bfe0:	f000 fce2 	bl	800c9a8 <__lshift>
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d071      	beq.n	800c0d0 <_dtoa_r+0x820>
 800bfec:	4621      	mov	r1, r4
 800bfee:	4628      	mov	r0, r5
 800bff0:	f000 fd46 	bl	800ca80 <__mcmp>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	da6b      	bge.n	800c0d0 <_dtoa_r+0x820>
 800bff8:	2300      	movs	r3, #0
 800bffa:	4629      	mov	r1, r5
 800bffc:	220a      	movs	r2, #10
 800bffe:	4630      	mov	r0, r6
 800c000:	f000 fb24 	bl	800c64c <__multadd>
 800c004:	9b07      	ldr	r3, [sp, #28]
 800c006:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c00a:	4605      	mov	r5, r0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f000 8197 	beq.w	800c340 <_dtoa_r+0xa90>
 800c012:	4639      	mov	r1, r7
 800c014:	2300      	movs	r3, #0
 800c016:	220a      	movs	r2, #10
 800c018:	4630      	mov	r0, r6
 800c01a:	f000 fb17 	bl	800c64c <__multadd>
 800c01e:	f1ba 0f00 	cmp.w	sl, #0
 800c022:	4607      	mov	r7, r0
 800c024:	f300 8093 	bgt.w	800c14e <_dtoa_r+0x89e>
 800c028:	9b06      	ldr	r3, [sp, #24]
 800c02a:	2b02      	cmp	r3, #2
 800c02c:	dc57      	bgt.n	800c0de <_dtoa_r+0x82e>
 800c02e:	e08e      	b.n	800c14e <_dtoa_r+0x89e>
 800c030:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c032:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c036:	e751      	b.n	800bedc <_dtoa_r+0x62c>
 800c038:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800c03c:	42a3      	cmp	r3, r4
 800c03e:	bfbf      	itttt	lt
 800c040:	1ae2      	sublt	r2, r4, r3
 800c042:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c044:	189b      	addlt	r3, r3, r2
 800c046:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c048:	bfae      	itee	ge
 800c04a:	1b1c      	subge	r4, r3, r4
 800c04c:	4623      	movlt	r3, r4
 800c04e:	2400      	movlt	r4, #0
 800c050:	f1b9 0f00 	cmp.w	r9, #0
 800c054:	bfb5      	itete	lt
 800c056:	9a04      	ldrlt	r2, [sp, #16]
 800c058:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800c05c:	eba2 0809 	sublt.w	r8, r2, r9
 800c060:	464a      	movge	r2, r9
 800c062:	bfb8      	it	lt
 800c064:	2200      	movlt	r2, #0
 800c066:	e73c      	b.n	800bee2 <_dtoa_r+0x632>
 800c068:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c06c:	9f07      	ldr	r7, [sp, #28]
 800c06e:	461c      	mov	r4, r3
 800c070:	e744      	b.n	800befc <_dtoa_r+0x64c>
 800c072:	461a      	mov	r2, r3
 800c074:	e770      	b.n	800bf58 <_dtoa_r+0x6a8>
 800c076:	9b06      	ldr	r3, [sp, #24]
 800c078:	2b01      	cmp	r3, #1
 800c07a:	dc18      	bgt.n	800c0ae <_dtoa_r+0x7fe>
 800c07c:	9b02      	ldr	r3, [sp, #8]
 800c07e:	b9b3      	cbnz	r3, 800c0ae <_dtoa_r+0x7fe>
 800c080:	9b03      	ldr	r3, [sp, #12]
 800c082:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c086:	b9a2      	cbnz	r2, 800c0b2 <_dtoa_r+0x802>
 800c088:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c08c:	0d12      	lsrs	r2, r2, #20
 800c08e:	0512      	lsls	r2, r2, #20
 800c090:	b18a      	cbz	r2, 800c0b6 <_dtoa_r+0x806>
 800c092:	9b04      	ldr	r3, [sp, #16]
 800c094:	3301      	adds	r3, #1
 800c096:	9304      	str	r3, [sp, #16]
 800c098:	9b05      	ldr	r3, [sp, #20]
 800c09a:	3301      	adds	r3, #1
 800c09c:	9305      	str	r3, [sp, #20]
 800c09e:	2301      	movs	r3, #1
 800c0a0:	9309      	str	r3, [sp, #36]	; 0x24
 800c0a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	f47f af70 	bne.w	800bf8a <_dtoa_r+0x6da>
 800c0aa:	2001      	movs	r0, #1
 800c0ac:	e775      	b.n	800bf9a <_dtoa_r+0x6ea>
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	e7f6      	b.n	800c0a0 <_dtoa_r+0x7f0>
 800c0b2:	9b02      	ldr	r3, [sp, #8]
 800c0b4:	e7f4      	b.n	800c0a0 <_dtoa_r+0x7f0>
 800c0b6:	9209      	str	r2, [sp, #36]	; 0x24
 800c0b8:	e7f3      	b.n	800c0a2 <_dtoa_r+0x7f2>
 800c0ba:	d082      	beq.n	800bfc2 <_dtoa_r+0x712>
 800c0bc:	9b04      	ldr	r3, [sp, #16]
 800c0be:	321c      	adds	r2, #28
 800c0c0:	4413      	add	r3, r2
 800c0c2:	9304      	str	r3, [sp, #16]
 800c0c4:	9b05      	ldr	r3, [sp, #20]
 800c0c6:	4490      	add	r8, r2
 800c0c8:	4413      	add	r3, r2
 800c0ca:	e779      	b.n	800bfc0 <_dtoa_r+0x710>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	e7f5      	b.n	800c0bc <_dtoa_r+0x80c>
 800c0d0:	f1b9 0f00 	cmp.w	r9, #0
 800c0d4:	dc36      	bgt.n	800c144 <_dtoa_r+0x894>
 800c0d6:	9b06      	ldr	r3, [sp, #24]
 800c0d8:	2b02      	cmp	r3, #2
 800c0da:	dd33      	ble.n	800c144 <_dtoa_r+0x894>
 800c0dc:	46ca      	mov	sl, r9
 800c0de:	f1ba 0f00 	cmp.w	sl, #0
 800c0e2:	d10d      	bne.n	800c100 <_dtoa_r+0x850>
 800c0e4:	4621      	mov	r1, r4
 800c0e6:	4653      	mov	r3, sl
 800c0e8:	2205      	movs	r2, #5
 800c0ea:	4630      	mov	r0, r6
 800c0ec:	f000 faae 	bl	800c64c <__multadd>
 800c0f0:	4601      	mov	r1, r0
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	f000 fcc3 	bl	800ca80 <__mcmp>
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	f73f ade4 	bgt.w	800bcc8 <_dtoa_r+0x418>
 800c100:	9b08      	ldr	r3, [sp, #32]
 800c102:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c106:	ea6f 0b03 	mvn.w	fp, r3
 800c10a:	f04f 0900 	mov.w	r9, #0
 800c10e:	4621      	mov	r1, r4
 800c110:	4630      	mov	r0, r6
 800c112:	f000 fa79 	bl	800c608 <_Bfree>
 800c116:	2f00      	cmp	r7, #0
 800c118:	f43f aea1 	beq.w	800be5e <_dtoa_r+0x5ae>
 800c11c:	f1b9 0f00 	cmp.w	r9, #0
 800c120:	d005      	beq.n	800c12e <_dtoa_r+0x87e>
 800c122:	45b9      	cmp	r9, r7
 800c124:	d003      	beq.n	800c12e <_dtoa_r+0x87e>
 800c126:	4649      	mov	r1, r9
 800c128:	4630      	mov	r0, r6
 800c12a:	f000 fa6d 	bl	800c608 <_Bfree>
 800c12e:	4639      	mov	r1, r7
 800c130:	4630      	mov	r0, r6
 800c132:	f000 fa69 	bl	800c608 <_Bfree>
 800c136:	e692      	b.n	800be5e <_dtoa_r+0x5ae>
 800c138:	2400      	movs	r4, #0
 800c13a:	4627      	mov	r7, r4
 800c13c:	e7e0      	b.n	800c100 <_dtoa_r+0x850>
 800c13e:	4693      	mov	fp, r2
 800c140:	4627      	mov	r7, r4
 800c142:	e5c1      	b.n	800bcc8 <_dtoa_r+0x418>
 800c144:	9b07      	ldr	r3, [sp, #28]
 800c146:	46ca      	mov	sl, r9
 800c148:	2b00      	cmp	r3, #0
 800c14a:	f000 8100 	beq.w	800c34e <_dtoa_r+0xa9e>
 800c14e:	f1b8 0f00 	cmp.w	r8, #0
 800c152:	dd05      	ble.n	800c160 <_dtoa_r+0x8b0>
 800c154:	4639      	mov	r1, r7
 800c156:	4642      	mov	r2, r8
 800c158:	4630      	mov	r0, r6
 800c15a:	f000 fc25 	bl	800c9a8 <__lshift>
 800c15e:	4607      	mov	r7, r0
 800c160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c162:	2b00      	cmp	r3, #0
 800c164:	d05d      	beq.n	800c222 <_dtoa_r+0x972>
 800c166:	6879      	ldr	r1, [r7, #4]
 800c168:	4630      	mov	r0, r6
 800c16a:	f000 fa0d 	bl	800c588 <_Balloc>
 800c16e:	4680      	mov	r8, r0
 800c170:	b928      	cbnz	r0, 800c17e <_dtoa_r+0x8ce>
 800c172:	4b82      	ldr	r3, [pc, #520]	; (800c37c <_dtoa_r+0xacc>)
 800c174:	4602      	mov	r2, r0
 800c176:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c17a:	f7ff bbb1 	b.w	800b8e0 <_dtoa_r+0x30>
 800c17e:	693a      	ldr	r2, [r7, #16]
 800c180:	3202      	adds	r2, #2
 800c182:	0092      	lsls	r2, r2, #2
 800c184:	f107 010c 	add.w	r1, r7, #12
 800c188:	300c      	adds	r0, #12
 800c18a:	f001 f833 	bl	800d1f4 <memcpy>
 800c18e:	2201      	movs	r2, #1
 800c190:	4641      	mov	r1, r8
 800c192:	4630      	mov	r0, r6
 800c194:	f000 fc08 	bl	800c9a8 <__lshift>
 800c198:	9b01      	ldr	r3, [sp, #4]
 800c19a:	3301      	adds	r3, #1
 800c19c:	9304      	str	r3, [sp, #16]
 800c19e:	9b01      	ldr	r3, [sp, #4]
 800c1a0:	4453      	add	r3, sl
 800c1a2:	9308      	str	r3, [sp, #32]
 800c1a4:	9b02      	ldr	r3, [sp, #8]
 800c1a6:	f003 0301 	and.w	r3, r3, #1
 800c1aa:	46b9      	mov	r9, r7
 800c1ac:	9307      	str	r3, [sp, #28]
 800c1ae:	4607      	mov	r7, r0
 800c1b0:	9b04      	ldr	r3, [sp, #16]
 800c1b2:	4621      	mov	r1, r4
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	4628      	mov	r0, r5
 800c1b8:	9302      	str	r3, [sp, #8]
 800c1ba:	f7ff faee 	bl	800b79a <quorem>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	3330      	adds	r3, #48	; 0x30
 800c1c2:	9005      	str	r0, [sp, #20]
 800c1c4:	4649      	mov	r1, r9
 800c1c6:	4628      	mov	r0, r5
 800c1c8:	9309      	str	r3, [sp, #36]	; 0x24
 800c1ca:	f000 fc59 	bl	800ca80 <__mcmp>
 800c1ce:	463a      	mov	r2, r7
 800c1d0:	4682      	mov	sl, r0
 800c1d2:	4621      	mov	r1, r4
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	f000 fc6f 	bl	800cab8 <__mdiff>
 800c1da:	68c2      	ldr	r2, [r0, #12]
 800c1dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1de:	4680      	mov	r8, r0
 800c1e0:	bb0a      	cbnz	r2, 800c226 <_dtoa_r+0x976>
 800c1e2:	4601      	mov	r1, r0
 800c1e4:	4628      	mov	r0, r5
 800c1e6:	f000 fc4b 	bl	800ca80 <__mcmp>
 800c1ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	4641      	mov	r1, r8
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800c1f6:	f000 fa07 	bl	800c608 <_Bfree>
 800c1fa:	9b06      	ldr	r3, [sp, #24]
 800c1fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1fe:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c202:	ea43 0102 	orr.w	r1, r3, r2
 800c206:	9b07      	ldr	r3, [sp, #28]
 800c208:	4319      	orrs	r1, r3
 800c20a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c20c:	d10d      	bne.n	800c22a <_dtoa_r+0x97a>
 800c20e:	2b39      	cmp	r3, #57	; 0x39
 800c210:	d029      	beq.n	800c266 <_dtoa_r+0x9b6>
 800c212:	f1ba 0f00 	cmp.w	sl, #0
 800c216:	dd01      	ble.n	800c21c <_dtoa_r+0x96c>
 800c218:	9b05      	ldr	r3, [sp, #20]
 800c21a:	3331      	adds	r3, #49	; 0x31
 800c21c:	9a02      	ldr	r2, [sp, #8]
 800c21e:	7013      	strb	r3, [r2, #0]
 800c220:	e775      	b.n	800c10e <_dtoa_r+0x85e>
 800c222:	4638      	mov	r0, r7
 800c224:	e7b8      	b.n	800c198 <_dtoa_r+0x8e8>
 800c226:	2201      	movs	r2, #1
 800c228:	e7e1      	b.n	800c1ee <_dtoa_r+0x93e>
 800c22a:	f1ba 0f00 	cmp.w	sl, #0
 800c22e:	db06      	blt.n	800c23e <_dtoa_r+0x98e>
 800c230:	9906      	ldr	r1, [sp, #24]
 800c232:	ea41 0a0a 	orr.w	sl, r1, sl
 800c236:	9907      	ldr	r1, [sp, #28]
 800c238:	ea5a 0a01 	orrs.w	sl, sl, r1
 800c23c:	d120      	bne.n	800c280 <_dtoa_r+0x9d0>
 800c23e:	2a00      	cmp	r2, #0
 800c240:	ddec      	ble.n	800c21c <_dtoa_r+0x96c>
 800c242:	4629      	mov	r1, r5
 800c244:	2201      	movs	r2, #1
 800c246:	4630      	mov	r0, r6
 800c248:	9304      	str	r3, [sp, #16]
 800c24a:	f000 fbad 	bl	800c9a8 <__lshift>
 800c24e:	4621      	mov	r1, r4
 800c250:	4605      	mov	r5, r0
 800c252:	f000 fc15 	bl	800ca80 <__mcmp>
 800c256:	2800      	cmp	r0, #0
 800c258:	9b04      	ldr	r3, [sp, #16]
 800c25a:	dc02      	bgt.n	800c262 <_dtoa_r+0x9b2>
 800c25c:	d1de      	bne.n	800c21c <_dtoa_r+0x96c>
 800c25e:	07da      	lsls	r2, r3, #31
 800c260:	d5dc      	bpl.n	800c21c <_dtoa_r+0x96c>
 800c262:	2b39      	cmp	r3, #57	; 0x39
 800c264:	d1d8      	bne.n	800c218 <_dtoa_r+0x968>
 800c266:	9a02      	ldr	r2, [sp, #8]
 800c268:	2339      	movs	r3, #57	; 0x39
 800c26a:	7013      	strb	r3, [r2, #0]
 800c26c:	4643      	mov	r3, r8
 800c26e:	4698      	mov	r8, r3
 800c270:	3b01      	subs	r3, #1
 800c272:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c276:	2a39      	cmp	r2, #57	; 0x39
 800c278:	d051      	beq.n	800c31e <_dtoa_r+0xa6e>
 800c27a:	3201      	adds	r2, #1
 800c27c:	701a      	strb	r2, [r3, #0]
 800c27e:	e746      	b.n	800c10e <_dtoa_r+0x85e>
 800c280:	2a00      	cmp	r2, #0
 800c282:	dd03      	ble.n	800c28c <_dtoa_r+0x9dc>
 800c284:	2b39      	cmp	r3, #57	; 0x39
 800c286:	d0ee      	beq.n	800c266 <_dtoa_r+0x9b6>
 800c288:	3301      	adds	r3, #1
 800c28a:	e7c7      	b.n	800c21c <_dtoa_r+0x96c>
 800c28c:	9a04      	ldr	r2, [sp, #16]
 800c28e:	9908      	ldr	r1, [sp, #32]
 800c290:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c294:	428a      	cmp	r2, r1
 800c296:	d02b      	beq.n	800c2f0 <_dtoa_r+0xa40>
 800c298:	4629      	mov	r1, r5
 800c29a:	2300      	movs	r3, #0
 800c29c:	220a      	movs	r2, #10
 800c29e:	4630      	mov	r0, r6
 800c2a0:	f000 f9d4 	bl	800c64c <__multadd>
 800c2a4:	45b9      	cmp	r9, r7
 800c2a6:	4605      	mov	r5, r0
 800c2a8:	f04f 0300 	mov.w	r3, #0
 800c2ac:	f04f 020a 	mov.w	r2, #10
 800c2b0:	4649      	mov	r1, r9
 800c2b2:	4630      	mov	r0, r6
 800c2b4:	d107      	bne.n	800c2c6 <_dtoa_r+0xa16>
 800c2b6:	f000 f9c9 	bl	800c64c <__multadd>
 800c2ba:	4681      	mov	r9, r0
 800c2bc:	4607      	mov	r7, r0
 800c2be:	9b04      	ldr	r3, [sp, #16]
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	9304      	str	r3, [sp, #16]
 800c2c4:	e774      	b.n	800c1b0 <_dtoa_r+0x900>
 800c2c6:	f000 f9c1 	bl	800c64c <__multadd>
 800c2ca:	4639      	mov	r1, r7
 800c2cc:	4681      	mov	r9, r0
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	220a      	movs	r2, #10
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	f000 f9ba 	bl	800c64c <__multadd>
 800c2d8:	4607      	mov	r7, r0
 800c2da:	e7f0      	b.n	800c2be <_dtoa_r+0xa0e>
 800c2dc:	f1ba 0f00 	cmp.w	sl, #0
 800c2e0:	9a01      	ldr	r2, [sp, #4]
 800c2e2:	bfcc      	ite	gt
 800c2e4:	46d0      	movgt	r8, sl
 800c2e6:	f04f 0801 	movle.w	r8, #1
 800c2ea:	4490      	add	r8, r2
 800c2ec:	f04f 0900 	mov.w	r9, #0
 800c2f0:	4629      	mov	r1, r5
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	4630      	mov	r0, r6
 800c2f6:	9302      	str	r3, [sp, #8]
 800c2f8:	f000 fb56 	bl	800c9a8 <__lshift>
 800c2fc:	4621      	mov	r1, r4
 800c2fe:	4605      	mov	r5, r0
 800c300:	f000 fbbe 	bl	800ca80 <__mcmp>
 800c304:	2800      	cmp	r0, #0
 800c306:	dcb1      	bgt.n	800c26c <_dtoa_r+0x9bc>
 800c308:	d102      	bne.n	800c310 <_dtoa_r+0xa60>
 800c30a:	9b02      	ldr	r3, [sp, #8]
 800c30c:	07db      	lsls	r3, r3, #31
 800c30e:	d4ad      	bmi.n	800c26c <_dtoa_r+0x9bc>
 800c310:	4643      	mov	r3, r8
 800c312:	4698      	mov	r8, r3
 800c314:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c318:	2a30      	cmp	r2, #48	; 0x30
 800c31a:	d0fa      	beq.n	800c312 <_dtoa_r+0xa62>
 800c31c:	e6f7      	b.n	800c10e <_dtoa_r+0x85e>
 800c31e:	9a01      	ldr	r2, [sp, #4]
 800c320:	429a      	cmp	r2, r3
 800c322:	d1a4      	bne.n	800c26e <_dtoa_r+0x9be>
 800c324:	f10b 0b01 	add.w	fp, fp, #1
 800c328:	2331      	movs	r3, #49	; 0x31
 800c32a:	e778      	b.n	800c21e <_dtoa_r+0x96e>
 800c32c:	4b14      	ldr	r3, [pc, #80]	; (800c380 <_dtoa_r+0xad0>)
 800c32e:	f7ff bb2a 	b.w	800b986 <_dtoa_r+0xd6>
 800c332:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c334:	2b00      	cmp	r3, #0
 800c336:	f47f ab05 	bne.w	800b944 <_dtoa_r+0x94>
 800c33a:	4b12      	ldr	r3, [pc, #72]	; (800c384 <_dtoa_r+0xad4>)
 800c33c:	f7ff bb23 	b.w	800b986 <_dtoa_r+0xd6>
 800c340:	f1ba 0f00 	cmp.w	sl, #0
 800c344:	dc03      	bgt.n	800c34e <_dtoa_r+0xa9e>
 800c346:	9b06      	ldr	r3, [sp, #24]
 800c348:	2b02      	cmp	r3, #2
 800c34a:	f73f aec8 	bgt.w	800c0de <_dtoa_r+0x82e>
 800c34e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c352:	4621      	mov	r1, r4
 800c354:	4628      	mov	r0, r5
 800c356:	f7ff fa20 	bl	800b79a <quorem>
 800c35a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c35e:	f808 3b01 	strb.w	r3, [r8], #1
 800c362:	9a01      	ldr	r2, [sp, #4]
 800c364:	eba8 0202 	sub.w	r2, r8, r2
 800c368:	4592      	cmp	sl, r2
 800c36a:	ddb7      	ble.n	800c2dc <_dtoa_r+0xa2c>
 800c36c:	4629      	mov	r1, r5
 800c36e:	2300      	movs	r3, #0
 800c370:	220a      	movs	r2, #10
 800c372:	4630      	mov	r0, r6
 800c374:	f000 f96a 	bl	800c64c <__multadd>
 800c378:	4605      	mov	r5, r0
 800c37a:	e7ea      	b.n	800c352 <_dtoa_r+0xaa2>
 800c37c:	0800d5c4 	.word	0x0800d5c4
 800c380:	0800d524 	.word	0x0800d524
 800c384:	0800d548 	.word	0x0800d548

0800c388 <_free_r>:
 800c388:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c38a:	2900      	cmp	r1, #0
 800c38c:	d044      	beq.n	800c418 <_free_r+0x90>
 800c38e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c392:	9001      	str	r0, [sp, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	f1a1 0404 	sub.w	r4, r1, #4
 800c39a:	bfb8      	it	lt
 800c39c:	18e4      	addlt	r4, r4, r3
 800c39e:	f000 f8e7 	bl	800c570 <__malloc_lock>
 800c3a2:	4a1e      	ldr	r2, [pc, #120]	; (800c41c <_free_r+0x94>)
 800c3a4:	9801      	ldr	r0, [sp, #4]
 800c3a6:	6813      	ldr	r3, [r2, #0]
 800c3a8:	b933      	cbnz	r3, 800c3b8 <_free_r+0x30>
 800c3aa:	6063      	str	r3, [r4, #4]
 800c3ac:	6014      	str	r4, [r2, #0]
 800c3ae:	b003      	add	sp, #12
 800c3b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3b4:	f000 b8e2 	b.w	800c57c <__malloc_unlock>
 800c3b8:	42a3      	cmp	r3, r4
 800c3ba:	d908      	bls.n	800c3ce <_free_r+0x46>
 800c3bc:	6825      	ldr	r5, [r4, #0]
 800c3be:	1961      	adds	r1, r4, r5
 800c3c0:	428b      	cmp	r3, r1
 800c3c2:	bf01      	itttt	eq
 800c3c4:	6819      	ldreq	r1, [r3, #0]
 800c3c6:	685b      	ldreq	r3, [r3, #4]
 800c3c8:	1949      	addeq	r1, r1, r5
 800c3ca:	6021      	streq	r1, [r4, #0]
 800c3cc:	e7ed      	b.n	800c3aa <_free_r+0x22>
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	b10b      	cbz	r3, 800c3d8 <_free_r+0x50>
 800c3d4:	42a3      	cmp	r3, r4
 800c3d6:	d9fa      	bls.n	800c3ce <_free_r+0x46>
 800c3d8:	6811      	ldr	r1, [r2, #0]
 800c3da:	1855      	adds	r5, r2, r1
 800c3dc:	42a5      	cmp	r5, r4
 800c3de:	d10b      	bne.n	800c3f8 <_free_r+0x70>
 800c3e0:	6824      	ldr	r4, [r4, #0]
 800c3e2:	4421      	add	r1, r4
 800c3e4:	1854      	adds	r4, r2, r1
 800c3e6:	42a3      	cmp	r3, r4
 800c3e8:	6011      	str	r1, [r2, #0]
 800c3ea:	d1e0      	bne.n	800c3ae <_free_r+0x26>
 800c3ec:	681c      	ldr	r4, [r3, #0]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	6053      	str	r3, [r2, #4]
 800c3f2:	440c      	add	r4, r1
 800c3f4:	6014      	str	r4, [r2, #0]
 800c3f6:	e7da      	b.n	800c3ae <_free_r+0x26>
 800c3f8:	d902      	bls.n	800c400 <_free_r+0x78>
 800c3fa:	230c      	movs	r3, #12
 800c3fc:	6003      	str	r3, [r0, #0]
 800c3fe:	e7d6      	b.n	800c3ae <_free_r+0x26>
 800c400:	6825      	ldr	r5, [r4, #0]
 800c402:	1961      	adds	r1, r4, r5
 800c404:	428b      	cmp	r3, r1
 800c406:	bf04      	itt	eq
 800c408:	6819      	ldreq	r1, [r3, #0]
 800c40a:	685b      	ldreq	r3, [r3, #4]
 800c40c:	6063      	str	r3, [r4, #4]
 800c40e:	bf04      	itt	eq
 800c410:	1949      	addeq	r1, r1, r5
 800c412:	6021      	streq	r1, [r4, #0]
 800c414:	6054      	str	r4, [r2, #4]
 800c416:	e7ca      	b.n	800c3ae <_free_r+0x26>
 800c418:	b003      	add	sp, #12
 800c41a:	bd30      	pop	{r4, r5, pc}
 800c41c:	24002970 	.word	0x24002970

0800c420 <malloc>:
 800c420:	4b02      	ldr	r3, [pc, #8]	; (800c42c <malloc+0xc>)
 800c422:	4601      	mov	r1, r0
 800c424:	6818      	ldr	r0, [r3, #0]
 800c426:	f000 b823 	b.w	800c470 <_malloc_r>
 800c42a:	bf00      	nop
 800c42c:	24000174 	.word	0x24000174

0800c430 <sbrk_aligned>:
 800c430:	b570      	push	{r4, r5, r6, lr}
 800c432:	4e0e      	ldr	r6, [pc, #56]	; (800c46c <sbrk_aligned+0x3c>)
 800c434:	460c      	mov	r4, r1
 800c436:	6831      	ldr	r1, [r6, #0]
 800c438:	4605      	mov	r5, r0
 800c43a:	b911      	cbnz	r1, 800c442 <sbrk_aligned+0x12>
 800c43c:	f000 feca 	bl	800d1d4 <_sbrk_r>
 800c440:	6030      	str	r0, [r6, #0]
 800c442:	4621      	mov	r1, r4
 800c444:	4628      	mov	r0, r5
 800c446:	f000 fec5 	bl	800d1d4 <_sbrk_r>
 800c44a:	1c43      	adds	r3, r0, #1
 800c44c:	d00a      	beq.n	800c464 <sbrk_aligned+0x34>
 800c44e:	1cc4      	adds	r4, r0, #3
 800c450:	f024 0403 	bic.w	r4, r4, #3
 800c454:	42a0      	cmp	r0, r4
 800c456:	d007      	beq.n	800c468 <sbrk_aligned+0x38>
 800c458:	1a21      	subs	r1, r4, r0
 800c45a:	4628      	mov	r0, r5
 800c45c:	f000 feba 	bl	800d1d4 <_sbrk_r>
 800c460:	3001      	adds	r0, #1
 800c462:	d101      	bne.n	800c468 <sbrk_aligned+0x38>
 800c464:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c468:	4620      	mov	r0, r4
 800c46a:	bd70      	pop	{r4, r5, r6, pc}
 800c46c:	24002974 	.word	0x24002974

0800c470 <_malloc_r>:
 800c470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c474:	1ccd      	adds	r5, r1, #3
 800c476:	f025 0503 	bic.w	r5, r5, #3
 800c47a:	3508      	adds	r5, #8
 800c47c:	2d0c      	cmp	r5, #12
 800c47e:	bf38      	it	cc
 800c480:	250c      	movcc	r5, #12
 800c482:	2d00      	cmp	r5, #0
 800c484:	4607      	mov	r7, r0
 800c486:	db01      	blt.n	800c48c <_malloc_r+0x1c>
 800c488:	42a9      	cmp	r1, r5
 800c48a:	d905      	bls.n	800c498 <_malloc_r+0x28>
 800c48c:	230c      	movs	r3, #12
 800c48e:	603b      	str	r3, [r7, #0]
 800c490:	2600      	movs	r6, #0
 800c492:	4630      	mov	r0, r6
 800c494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c498:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c56c <_malloc_r+0xfc>
 800c49c:	f000 f868 	bl	800c570 <__malloc_lock>
 800c4a0:	f8d8 3000 	ldr.w	r3, [r8]
 800c4a4:	461c      	mov	r4, r3
 800c4a6:	bb5c      	cbnz	r4, 800c500 <_malloc_r+0x90>
 800c4a8:	4629      	mov	r1, r5
 800c4aa:	4638      	mov	r0, r7
 800c4ac:	f7ff ffc0 	bl	800c430 <sbrk_aligned>
 800c4b0:	1c43      	adds	r3, r0, #1
 800c4b2:	4604      	mov	r4, r0
 800c4b4:	d155      	bne.n	800c562 <_malloc_r+0xf2>
 800c4b6:	f8d8 4000 	ldr.w	r4, [r8]
 800c4ba:	4626      	mov	r6, r4
 800c4bc:	2e00      	cmp	r6, #0
 800c4be:	d145      	bne.n	800c54c <_malloc_r+0xdc>
 800c4c0:	2c00      	cmp	r4, #0
 800c4c2:	d048      	beq.n	800c556 <_malloc_r+0xe6>
 800c4c4:	6823      	ldr	r3, [r4, #0]
 800c4c6:	4631      	mov	r1, r6
 800c4c8:	4638      	mov	r0, r7
 800c4ca:	eb04 0903 	add.w	r9, r4, r3
 800c4ce:	f000 fe81 	bl	800d1d4 <_sbrk_r>
 800c4d2:	4581      	cmp	r9, r0
 800c4d4:	d13f      	bne.n	800c556 <_malloc_r+0xe6>
 800c4d6:	6821      	ldr	r1, [r4, #0]
 800c4d8:	1a6d      	subs	r5, r5, r1
 800c4da:	4629      	mov	r1, r5
 800c4dc:	4638      	mov	r0, r7
 800c4de:	f7ff ffa7 	bl	800c430 <sbrk_aligned>
 800c4e2:	3001      	adds	r0, #1
 800c4e4:	d037      	beq.n	800c556 <_malloc_r+0xe6>
 800c4e6:	6823      	ldr	r3, [r4, #0]
 800c4e8:	442b      	add	r3, r5
 800c4ea:	6023      	str	r3, [r4, #0]
 800c4ec:	f8d8 3000 	ldr.w	r3, [r8]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d038      	beq.n	800c566 <_malloc_r+0xf6>
 800c4f4:	685a      	ldr	r2, [r3, #4]
 800c4f6:	42a2      	cmp	r2, r4
 800c4f8:	d12b      	bne.n	800c552 <_malloc_r+0xe2>
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	605a      	str	r2, [r3, #4]
 800c4fe:	e00f      	b.n	800c520 <_malloc_r+0xb0>
 800c500:	6822      	ldr	r2, [r4, #0]
 800c502:	1b52      	subs	r2, r2, r5
 800c504:	d41f      	bmi.n	800c546 <_malloc_r+0xd6>
 800c506:	2a0b      	cmp	r2, #11
 800c508:	d917      	bls.n	800c53a <_malloc_r+0xca>
 800c50a:	1961      	adds	r1, r4, r5
 800c50c:	42a3      	cmp	r3, r4
 800c50e:	6025      	str	r5, [r4, #0]
 800c510:	bf18      	it	ne
 800c512:	6059      	strne	r1, [r3, #4]
 800c514:	6863      	ldr	r3, [r4, #4]
 800c516:	bf08      	it	eq
 800c518:	f8c8 1000 	streq.w	r1, [r8]
 800c51c:	5162      	str	r2, [r4, r5]
 800c51e:	604b      	str	r3, [r1, #4]
 800c520:	4638      	mov	r0, r7
 800c522:	f104 060b 	add.w	r6, r4, #11
 800c526:	f000 f829 	bl	800c57c <__malloc_unlock>
 800c52a:	f026 0607 	bic.w	r6, r6, #7
 800c52e:	1d23      	adds	r3, r4, #4
 800c530:	1af2      	subs	r2, r6, r3
 800c532:	d0ae      	beq.n	800c492 <_malloc_r+0x22>
 800c534:	1b9b      	subs	r3, r3, r6
 800c536:	50a3      	str	r3, [r4, r2]
 800c538:	e7ab      	b.n	800c492 <_malloc_r+0x22>
 800c53a:	42a3      	cmp	r3, r4
 800c53c:	6862      	ldr	r2, [r4, #4]
 800c53e:	d1dd      	bne.n	800c4fc <_malloc_r+0x8c>
 800c540:	f8c8 2000 	str.w	r2, [r8]
 800c544:	e7ec      	b.n	800c520 <_malloc_r+0xb0>
 800c546:	4623      	mov	r3, r4
 800c548:	6864      	ldr	r4, [r4, #4]
 800c54a:	e7ac      	b.n	800c4a6 <_malloc_r+0x36>
 800c54c:	4634      	mov	r4, r6
 800c54e:	6876      	ldr	r6, [r6, #4]
 800c550:	e7b4      	b.n	800c4bc <_malloc_r+0x4c>
 800c552:	4613      	mov	r3, r2
 800c554:	e7cc      	b.n	800c4f0 <_malloc_r+0x80>
 800c556:	230c      	movs	r3, #12
 800c558:	603b      	str	r3, [r7, #0]
 800c55a:	4638      	mov	r0, r7
 800c55c:	f000 f80e 	bl	800c57c <__malloc_unlock>
 800c560:	e797      	b.n	800c492 <_malloc_r+0x22>
 800c562:	6025      	str	r5, [r4, #0]
 800c564:	e7dc      	b.n	800c520 <_malloc_r+0xb0>
 800c566:	605b      	str	r3, [r3, #4]
 800c568:	deff      	udf	#255	; 0xff
 800c56a:	bf00      	nop
 800c56c:	24002970 	.word	0x24002970

0800c570 <__malloc_lock>:
 800c570:	4801      	ldr	r0, [pc, #4]	; (800c578 <__malloc_lock+0x8>)
 800c572:	f7ff b910 	b.w	800b796 <__retarget_lock_acquire_recursive>
 800c576:	bf00      	nop
 800c578:	2400296c 	.word	0x2400296c

0800c57c <__malloc_unlock>:
 800c57c:	4801      	ldr	r0, [pc, #4]	; (800c584 <__malloc_unlock+0x8>)
 800c57e:	f7ff b90b 	b.w	800b798 <__retarget_lock_release_recursive>
 800c582:	bf00      	nop
 800c584:	2400296c 	.word	0x2400296c

0800c588 <_Balloc>:
 800c588:	b570      	push	{r4, r5, r6, lr}
 800c58a:	69c6      	ldr	r6, [r0, #28]
 800c58c:	4604      	mov	r4, r0
 800c58e:	460d      	mov	r5, r1
 800c590:	b976      	cbnz	r6, 800c5b0 <_Balloc+0x28>
 800c592:	2010      	movs	r0, #16
 800c594:	f7ff ff44 	bl	800c420 <malloc>
 800c598:	4602      	mov	r2, r0
 800c59a:	61e0      	str	r0, [r4, #28]
 800c59c:	b920      	cbnz	r0, 800c5a8 <_Balloc+0x20>
 800c59e:	4b18      	ldr	r3, [pc, #96]	; (800c600 <_Balloc+0x78>)
 800c5a0:	4818      	ldr	r0, [pc, #96]	; (800c604 <_Balloc+0x7c>)
 800c5a2:	216b      	movs	r1, #107	; 0x6b
 800c5a4:	f000 fe34 	bl	800d210 <__assert_func>
 800c5a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5ac:	6006      	str	r6, [r0, #0]
 800c5ae:	60c6      	str	r6, [r0, #12]
 800c5b0:	69e6      	ldr	r6, [r4, #28]
 800c5b2:	68f3      	ldr	r3, [r6, #12]
 800c5b4:	b183      	cbz	r3, 800c5d8 <_Balloc+0x50>
 800c5b6:	69e3      	ldr	r3, [r4, #28]
 800c5b8:	68db      	ldr	r3, [r3, #12]
 800c5ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c5be:	b9b8      	cbnz	r0, 800c5f0 <_Balloc+0x68>
 800c5c0:	2101      	movs	r1, #1
 800c5c2:	fa01 f605 	lsl.w	r6, r1, r5
 800c5c6:	1d72      	adds	r2, r6, #5
 800c5c8:	0092      	lsls	r2, r2, #2
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f000 fe3e 	bl	800d24c <_calloc_r>
 800c5d0:	b160      	cbz	r0, 800c5ec <_Balloc+0x64>
 800c5d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c5d6:	e00e      	b.n	800c5f6 <_Balloc+0x6e>
 800c5d8:	2221      	movs	r2, #33	; 0x21
 800c5da:	2104      	movs	r1, #4
 800c5dc:	4620      	mov	r0, r4
 800c5de:	f000 fe35 	bl	800d24c <_calloc_r>
 800c5e2:	69e3      	ldr	r3, [r4, #28]
 800c5e4:	60f0      	str	r0, [r6, #12]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d1e4      	bne.n	800c5b6 <_Balloc+0x2e>
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	bd70      	pop	{r4, r5, r6, pc}
 800c5f0:	6802      	ldr	r2, [r0, #0]
 800c5f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c5fc:	e7f7      	b.n	800c5ee <_Balloc+0x66>
 800c5fe:	bf00      	nop
 800c600:	0800d555 	.word	0x0800d555
 800c604:	0800d5d5 	.word	0x0800d5d5

0800c608 <_Bfree>:
 800c608:	b570      	push	{r4, r5, r6, lr}
 800c60a:	69c6      	ldr	r6, [r0, #28]
 800c60c:	4605      	mov	r5, r0
 800c60e:	460c      	mov	r4, r1
 800c610:	b976      	cbnz	r6, 800c630 <_Bfree+0x28>
 800c612:	2010      	movs	r0, #16
 800c614:	f7ff ff04 	bl	800c420 <malloc>
 800c618:	4602      	mov	r2, r0
 800c61a:	61e8      	str	r0, [r5, #28]
 800c61c:	b920      	cbnz	r0, 800c628 <_Bfree+0x20>
 800c61e:	4b09      	ldr	r3, [pc, #36]	; (800c644 <_Bfree+0x3c>)
 800c620:	4809      	ldr	r0, [pc, #36]	; (800c648 <_Bfree+0x40>)
 800c622:	218f      	movs	r1, #143	; 0x8f
 800c624:	f000 fdf4 	bl	800d210 <__assert_func>
 800c628:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c62c:	6006      	str	r6, [r0, #0]
 800c62e:	60c6      	str	r6, [r0, #12]
 800c630:	b13c      	cbz	r4, 800c642 <_Bfree+0x3a>
 800c632:	69eb      	ldr	r3, [r5, #28]
 800c634:	6862      	ldr	r2, [r4, #4]
 800c636:	68db      	ldr	r3, [r3, #12]
 800c638:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c63c:	6021      	str	r1, [r4, #0]
 800c63e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c642:	bd70      	pop	{r4, r5, r6, pc}
 800c644:	0800d555 	.word	0x0800d555
 800c648:	0800d5d5 	.word	0x0800d5d5

0800c64c <__multadd>:
 800c64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c650:	690d      	ldr	r5, [r1, #16]
 800c652:	4607      	mov	r7, r0
 800c654:	460c      	mov	r4, r1
 800c656:	461e      	mov	r6, r3
 800c658:	f101 0c14 	add.w	ip, r1, #20
 800c65c:	2000      	movs	r0, #0
 800c65e:	f8dc 3000 	ldr.w	r3, [ip]
 800c662:	b299      	uxth	r1, r3
 800c664:	fb02 6101 	mla	r1, r2, r1, r6
 800c668:	0c1e      	lsrs	r6, r3, #16
 800c66a:	0c0b      	lsrs	r3, r1, #16
 800c66c:	fb02 3306 	mla	r3, r2, r6, r3
 800c670:	b289      	uxth	r1, r1
 800c672:	3001      	adds	r0, #1
 800c674:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c678:	4285      	cmp	r5, r0
 800c67a:	f84c 1b04 	str.w	r1, [ip], #4
 800c67e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c682:	dcec      	bgt.n	800c65e <__multadd+0x12>
 800c684:	b30e      	cbz	r6, 800c6ca <__multadd+0x7e>
 800c686:	68a3      	ldr	r3, [r4, #8]
 800c688:	42ab      	cmp	r3, r5
 800c68a:	dc19      	bgt.n	800c6c0 <__multadd+0x74>
 800c68c:	6861      	ldr	r1, [r4, #4]
 800c68e:	4638      	mov	r0, r7
 800c690:	3101      	adds	r1, #1
 800c692:	f7ff ff79 	bl	800c588 <_Balloc>
 800c696:	4680      	mov	r8, r0
 800c698:	b928      	cbnz	r0, 800c6a6 <__multadd+0x5a>
 800c69a:	4602      	mov	r2, r0
 800c69c:	4b0c      	ldr	r3, [pc, #48]	; (800c6d0 <__multadd+0x84>)
 800c69e:	480d      	ldr	r0, [pc, #52]	; (800c6d4 <__multadd+0x88>)
 800c6a0:	21ba      	movs	r1, #186	; 0xba
 800c6a2:	f000 fdb5 	bl	800d210 <__assert_func>
 800c6a6:	6922      	ldr	r2, [r4, #16]
 800c6a8:	3202      	adds	r2, #2
 800c6aa:	f104 010c 	add.w	r1, r4, #12
 800c6ae:	0092      	lsls	r2, r2, #2
 800c6b0:	300c      	adds	r0, #12
 800c6b2:	f000 fd9f 	bl	800d1f4 <memcpy>
 800c6b6:	4621      	mov	r1, r4
 800c6b8:	4638      	mov	r0, r7
 800c6ba:	f7ff ffa5 	bl	800c608 <_Bfree>
 800c6be:	4644      	mov	r4, r8
 800c6c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c6c4:	3501      	adds	r5, #1
 800c6c6:	615e      	str	r6, [r3, #20]
 800c6c8:	6125      	str	r5, [r4, #16]
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6d0:	0800d5c4 	.word	0x0800d5c4
 800c6d4:	0800d5d5 	.word	0x0800d5d5

0800c6d8 <__hi0bits>:
 800c6d8:	0c03      	lsrs	r3, r0, #16
 800c6da:	041b      	lsls	r3, r3, #16
 800c6dc:	b9d3      	cbnz	r3, 800c714 <__hi0bits+0x3c>
 800c6de:	0400      	lsls	r0, r0, #16
 800c6e0:	2310      	movs	r3, #16
 800c6e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c6e6:	bf04      	itt	eq
 800c6e8:	0200      	lsleq	r0, r0, #8
 800c6ea:	3308      	addeq	r3, #8
 800c6ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c6f0:	bf04      	itt	eq
 800c6f2:	0100      	lsleq	r0, r0, #4
 800c6f4:	3304      	addeq	r3, #4
 800c6f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c6fa:	bf04      	itt	eq
 800c6fc:	0080      	lsleq	r0, r0, #2
 800c6fe:	3302      	addeq	r3, #2
 800c700:	2800      	cmp	r0, #0
 800c702:	db05      	blt.n	800c710 <__hi0bits+0x38>
 800c704:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c708:	f103 0301 	add.w	r3, r3, #1
 800c70c:	bf08      	it	eq
 800c70e:	2320      	moveq	r3, #32
 800c710:	4618      	mov	r0, r3
 800c712:	4770      	bx	lr
 800c714:	2300      	movs	r3, #0
 800c716:	e7e4      	b.n	800c6e2 <__hi0bits+0xa>

0800c718 <__lo0bits>:
 800c718:	6803      	ldr	r3, [r0, #0]
 800c71a:	f013 0207 	ands.w	r2, r3, #7
 800c71e:	d00c      	beq.n	800c73a <__lo0bits+0x22>
 800c720:	07d9      	lsls	r1, r3, #31
 800c722:	d422      	bmi.n	800c76a <__lo0bits+0x52>
 800c724:	079a      	lsls	r2, r3, #30
 800c726:	bf49      	itett	mi
 800c728:	085b      	lsrmi	r3, r3, #1
 800c72a:	089b      	lsrpl	r3, r3, #2
 800c72c:	6003      	strmi	r3, [r0, #0]
 800c72e:	2201      	movmi	r2, #1
 800c730:	bf5c      	itt	pl
 800c732:	6003      	strpl	r3, [r0, #0]
 800c734:	2202      	movpl	r2, #2
 800c736:	4610      	mov	r0, r2
 800c738:	4770      	bx	lr
 800c73a:	b299      	uxth	r1, r3
 800c73c:	b909      	cbnz	r1, 800c742 <__lo0bits+0x2a>
 800c73e:	0c1b      	lsrs	r3, r3, #16
 800c740:	2210      	movs	r2, #16
 800c742:	b2d9      	uxtb	r1, r3
 800c744:	b909      	cbnz	r1, 800c74a <__lo0bits+0x32>
 800c746:	3208      	adds	r2, #8
 800c748:	0a1b      	lsrs	r3, r3, #8
 800c74a:	0719      	lsls	r1, r3, #28
 800c74c:	bf04      	itt	eq
 800c74e:	091b      	lsreq	r3, r3, #4
 800c750:	3204      	addeq	r2, #4
 800c752:	0799      	lsls	r1, r3, #30
 800c754:	bf04      	itt	eq
 800c756:	089b      	lsreq	r3, r3, #2
 800c758:	3202      	addeq	r2, #2
 800c75a:	07d9      	lsls	r1, r3, #31
 800c75c:	d403      	bmi.n	800c766 <__lo0bits+0x4e>
 800c75e:	085b      	lsrs	r3, r3, #1
 800c760:	f102 0201 	add.w	r2, r2, #1
 800c764:	d003      	beq.n	800c76e <__lo0bits+0x56>
 800c766:	6003      	str	r3, [r0, #0]
 800c768:	e7e5      	b.n	800c736 <__lo0bits+0x1e>
 800c76a:	2200      	movs	r2, #0
 800c76c:	e7e3      	b.n	800c736 <__lo0bits+0x1e>
 800c76e:	2220      	movs	r2, #32
 800c770:	e7e1      	b.n	800c736 <__lo0bits+0x1e>
	...

0800c774 <__i2b>:
 800c774:	b510      	push	{r4, lr}
 800c776:	460c      	mov	r4, r1
 800c778:	2101      	movs	r1, #1
 800c77a:	f7ff ff05 	bl	800c588 <_Balloc>
 800c77e:	4602      	mov	r2, r0
 800c780:	b928      	cbnz	r0, 800c78e <__i2b+0x1a>
 800c782:	4b05      	ldr	r3, [pc, #20]	; (800c798 <__i2b+0x24>)
 800c784:	4805      	ldr	r0, [pc, #20]	; (800c79c <__i2b+0x28>)
 800c786:	f240 1145 	movw	r1, #325	; 0x145
 800c78a:	f000 fd41 	bl	800d210 <__assert_func>
 800c78e:	2301      	movs	r3, #1
 800c790:	6144      	str	r4, [r0, #20]
 800c792:	6103      	str	r3, [r0, #16]
 800c794:	bd10      	pop	{r4, pc}
 800c796:	bf00      	nop
 800c798:	0800d5c4 	.word	0x0800d5c4
 800c79c:	0800d5d5 	.word	0x0800d5d5

0800c7a0 <__multiply>:
 800c7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a4:	4691      	mov	r9, r2
 800c7a6:	690a      	ldr	r2, [r1, #16]
 800c7a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	bfb8      	it	lt
 800c7b0:	460b      	movlt	r3, r1
 800c7b2:	460c      	mov	r4, r1
 800c7b4:	bfbc      	itt	lt
 800c7b6:	464c      	movlt	r4, r9
 800c7b8:	4699      	movlt	r9, r3
 800c7ba:	6927      	ldr	r7, [r4, #16]
 800c7bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c7c0:	68a3      	ldr	r3, [r4, #8]
 800c7c2:	6861      	ldr	r1, [r4, #4]
 800c7c4:	eb07 060a 	add.w	r6, r7, sl
 800c7c8:	42b3      	cmp	r3, r6
 800c7ca:	b085      	sub	sp, #20
 800c7cc:	bfb8      	it	lt
 800c7ce:	3101      	addlt	r1, #1
 800c7d0:	f7ff feda 	bl	800c588 <_Balloc>
 800c7d4:	b930      	cbnz	r0, 800c7e4 <__multiply+0x44>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	4b44      	ldr	r3, [pc, #272]	; (800c8ec <__multiply+0x14c>)
 800c7da:	4845      	ldr	r0, [pc, #276]	; (800c8f0 <__multiply+0x150>)
 800c7dc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c7e0:	f000 fd16 	bl	800d210 <__assert_func>
 800c7e4:	f100 0514 	add.w	r5, r0, #20
 800c7e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c7ec:	462b      	mov	r3, r5
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	4543      	cmp	r3, r8
 800c7f2:	d321      	bcc.n	800c838 <__multiply+0x98>
 800c7f4:	f104 0314 	add.w	r3, r4, #20
 800c7f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c7fc:	f109 0314 	add.w	r3, r9, #20
 800c800:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c804:	9202      	str	r2, [sp, #8]
 800c806:	1b3a      	subs	r2, r7, r4
 800c808:	3a15      	subs	r2, #21
 800c80a:	f022 0203 	bic.w	r2, r2, #3
 800c80e:	3204      	adds	r2, #4
 800c810:	f104 0115 	add.w	r1, r4, #21
 800c814:	428f      	cmp	r7, r1
 800c816:	bf38      	it	cc
 800c818:	2204      	movcc	r2, #4
 800c81a:	9201      	str	r2, [sp, #4]
 800c81c:	9a02      	ldr	r2, [sp, #8]
 800c81e:	9303      	str	r3, [sp, #12]
 800c820:	429a      	cmp	r2, r3
 800c822:	d80c      	bhi.n	800c83e <__multiply+0x9e>
 800c824:	2e00      	cmp	r6, #0
 800c826:	dd03      	ble.n	800c830 <__multiply+0x90>
 800c828:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d05b      	beq.n	800c8e8 <__multiply+0x148>
 800c830:	6106      	str	r6, [r0, #16]
 800c832:	b005      	add	sp, #20
 800c834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c838:	f843 2b04 	str.w	r2, [r3], #4
 800c83c:	e7d8      	b.n	800c7f0 <__multiply+0x50>
 800c83e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c842:	f1ba 0f00 	cmp.w	sl, #0
 800c846:	d024      	beq.n	800c892 <__multiply+0xf2>
 800c848:	f104 0e14 	add.w	lr, r4, #20
 800c84c:	46a9      	mov	r9, r5
 800c84e:	f04f 0c00 	mov.w	ip, #0
 800c852:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c856:	f8d9 1000 	ldr.w	r1, [r9]
 800c85a:	fa1f fb82 	uxth.w	fp, r2
 800c85e:	b289      	uxth	r1, r1
 800c860:	fb0a 110b 	mla	r1, sl, fp, r1
 800c864:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c868:	f8d9 2000 	ldr.w	r2, [r9]
 800c86c:	4461      	add	r1, ip
 800c86e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c872:	fb0a c20b 	mla	r2, sl, fp, ip
 800c876:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c87a:	b289      	uxth	r1, r1
 800c87c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c880:	4577      	cmp	r7, lr
 800c882:	f849 1b04 	str.w	r1, [r9], #4
 800c886:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c88a:	d8e2      	bhi.n	800c852 <__multiply+0xb2>
 800c88c:	9a01      	ldr	r2, [sp, #4]
 800c88e:	f845 c002 	str.w	ip, [r5, r2]
 800c892:	9a03      	ldr	r2, [sp, #12]
 800c894:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c898:	3304      	adds	r3, #4
 800c89a:	f1b9 0f00 	cmp.w	r9, #0
 800c89e:	d021      	beq.n	800c8e4 <__multiply+0x144>
 800c8a0:	6829      	ldr	r1, [r5, #0]
 800c8a2:	f104 0c14 	add.w	ip, r4, #20
 800c8a6:	46ae      	mov	lr, r5
 800c8a8:	f04f 0a00 	mov.w	sl, #0
 800c8ac:	f8bc b000 	ldrh.w	fp, [ip]
 800c8b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c8b4:	fb09 220b 	mla	r2, r9, fp, r2
 800c8b8:	4452      	add	r2, sl
 800c8ba:	b289      	uxth	r1, r1
 800c8bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c8c0:	f84e 1b04 	str.w	r1, [lr], #4
 800c8c4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c8c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c8cc:	f8be 1000 	ldrh.w	r1, [lr]
 800c8d0:	fb09 110a 	mla	r1, r9, sl, r1
 800c8d4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c8d8:	4567      	cmp	r7, ip
 800c8da:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c8de:	d8e5      	bhi.n	800c8ac <__multiply+0x10c>
 800c8e0:	9a01      	ldr	r2, [sp, #4]
 800c8e2:	50a9      	str	r1, [r5, r2]
 800c8e4:	3504      	adds	r5, #4
 800c8e6:	e799      	b.n	800c81c <__multiply+0x7c>
 800c8e8:	3e01      	subs	r6, #1
 800c8ea:	e79b      	b.n	800c824 <__multiply+0x84>
 800c8ec:	0800d5c4 	.word	0x0800d5c4
 800c8f0:	0800d5d5 	.word	0x0800d5d5

0800c8f4 <__pow5mult>:
 800c8f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8f8:	4615      	mov	r5, r2
 800c8fa:	f012 0203 	ands.w	r2, r2, #3
 800c8fe:	4606      	mov	r6, r0
 800c900:	460f      	mov	r7, r1
 800c902:	d007      	beq.n	800c914 <__pow5mult+0x20>
 800c904:	4c25      	ldr	r4, [pc, #148]	; (800c99c <__pow5mult+0xa8>)
 800c906:	3a01      	subs	r2, #1
 800c908:	2300      	movs	r3, #0
 800c90a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c90e:	f7ff fe9d 	bl	800c64c <__multadd>
 800c912:	4607      	mov	r7, r0
 800c914:	10ad      	asrs	r5, r5, #2
 800c916:	d03d      	beq.n	800c994 <__pow5mult+0xa0>
 800c918:	69f4      	ldr	r4, [r6, #28]
 800c91a:	b97c      	cbnz	r4, 800c93c <__pow5mult+0x48>
 800c91c:	2010      	movs	r0, #16
 800c91e:	f7ff fd7f 	bl	800c420 <malloc>
 800c922:	4602      	mov	r2, r0
 800c924:	61f0      	str	r0, [r6, #28]
 800c926:	b928      	cbnz	r0, 800c934 <__pow5mult+0x40>
 800c928:	4b1d      	ldr	r3, [pc, #116]	; (800c9a0 <__pow5mult+0xac>)
 800c92a:	481e      	ldr	r0, [pc, #120]	; (800c9a4 <__pow5mult+0xb0>)
 800c92c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c930:	f000 fc6e 	bl	800d210 <__assert_func>
 800c934:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c938:	6004      	str	r4, [r0, #0]
 800c93a:	60c4      	str	r4, [r0, #12]
 800c93c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c940:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c944:	b94c      	cbnz	r4, 800c95a <__pow5mult+0x66>
 800c946:	f240 2171 	movw	r1, #625	; 0x271
 800c94a:	4630      	mov	r0, r6
 800c94c:	f7ff ff12 	bl	800c774 <__i2b>
 800c950:	2300      	movs	r3, #0
 800c952:	f8c8 0008 	str.w	r0, [r8, #8]
 800c956:	4604      	mov	r4, r0
 800c958:	6003      	str	r3, [r0, #0]
 800c95a:	f04f 0900 	mov.w	r9, #0
 800c95e:	07eb      	lsls	r3, r5, #31
 800c960:	d50a      	bpl.n	800c978 <__pow5mult+0x84>
 800c962:	4639      	mov	r1, r7
 800c964:	4622      	mov	r2, r4
 800c966:	4630      	mov	r0, r6
 800c968:	f7ff ff1a 	bl	800c7a0 <__multiply>
 800c96c:	4639      	mov	r1, r7
 800c96e:	4680      	mov	r8, r0
 800c970:	4630      	mov	r0, r6
 800c972:	f7ff fe49 	bl	800c608 <_Bfree>
 800c976:	4647      	mov	r7, r8
 800c978:	106d      	asrs	r5, r5, #1
 800c97a:	d00b      	beq.n	800c994 <__pow5mult+0xa0>
 800c97c:	6820      	ldr	r0, [r4, #0]
 800c97e:	b938      	cbnz	r0, 800c990 <__pow5mult+0x9c>
 800c980:	4622      	mov	r2, r4
 800c982:	4621      	mov	r1, r4
 800c984:	4630      	mov	r0, r6
 800c986:	f7ff ff0b 	bl	800c7a0 <__multiply>
 800c98a:	6020      	str	r0, [r4, #0]
 800c98c:	f8c0 9000 	str.w	r9, [r0]
 800c990:	4604      	mov	r4, r0
 800c992:	e7e4      	b.n	800c95e <__pow5mult+0x6a>
 800c994:	4638      	mov	r0, r7
 800c996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c99a:	bf00      	nop
 800c99c:	0800d720 	.word	0x0800d720
 800c9a0:	0800d555 	.word	0x0800d555
 800c9a4:	0800d5d5 	.word	0x0800d5d5

0800c9a8 <__lshift>:
 800c9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9ac:	460c      	mov	r4, r1
 800c9ae:	6849      	ldr	r1, [r1, #4]
 800c9b0:	6923      	ldr	r3, [r4, #16]
 800c9b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c9b6:	68a3      	ldr	r3, [r4, #8]
 800c9b8:	4607      	mov	r7, r0
 800c9ba:	4691      	mov	r9, r2
 800c9bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c9c0:	f108 0601 	add.w	r6, r8, #1
 800c9c4:	42b3      	cmp	r3, r6
 800c9c6:	db0b      	blt.n	800c9e0 <__lshift+0x38>
 800c9c8:	4638      	mov	r0, r7
 800c9ca:	f7ff fddd 	bl	800c588 <_Balloc>
 800c9ce:	4605      	mov	r5, r0
 800c9d0:	b948      	cbnz	r0, 800c9e6 <__lshift+0x3e>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	4b28      	ldr	r3, [pc, #160]	; (800ca78 <__lshift+0xd0>)
 800c9d6:	4829      	ldr	r0, [pc, #164]	; (800ca7c <__lshift+0xd4>)
 800c9d8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c9dc:	f000 fc18 	bl	800d210 <__assert_func>
 800c9e0:	3101      	adds	r1, #1
 800c9e2:	005b      	lsls	r3, r3, #1
 800c9e4:	e7ee      	b.n	800c9c4 <__lshift+0x1c>
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	f100 0114 	add.w	r1, r0, #20
 800c9ec:	f100 0210 	add.w	r2, r0, #16
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	4553      	cmp	r3, sl
 800c9f4:	db33      	blt.n	800ca5e <__lshift+0xb6>
 800c9f6:	6920      	ldr	r0, [r4, #16]
 800c9f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c9fc:	f104 0314 	add.w	r3, r4, #20
 800ca00:	f019 091f 	ands.w	r9, r9, #31
 800ca04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca0c:	d02b      	beq.n	800ca66 <__lshift+0xbe>
 800ca0e:	f1c9 0e20 	rsb	lr, r9, #32
 800ca12:	468a      	mov	sl, r1
 800ca14:	2200      	movs	r2, #0
 800ca16:	6818      	ldr	r0, [r3, #0]
 800ca18:	fa00 f009 	lsl.w	r0, r0, r9
 800ca1c:	4310      	orrs	r0, r2
 800ca1e:	f84a 0b04 	str.w	r0, [sl], #4
 800ca22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca26:	459c      	cmp	ip, r3
 800ca28:	fa22 f20e 	lsr.w	r2, r2, lr
 800ca2c:	d8f3      	bhi.n	800ca16 <__lshift+0x6e>
 800ca2e:	ebac 0304 	sub.w	r3, ip, r4
 800ca32:	3b15      	subs	r3, #21
 800ca34:	f023 0303 	bic.w	r3, r3, #3
 800ca38:	3304      	adds	r3, #4
 800ca3a:	f104 0015 	add.w	r0, r4, #21
 800ca3e:	4584      	cmp	ip, r0
 800ca40:	bf38      	it	cc
 800ca42:	2304      	movcc	r3, #4
 800ca44:	50ca      	str	r2, [r1, r3]
 800ca46:	b10a      	cbz	r2, 800ca4c <__lshift+0xa4>
 800ca48:	f108 0602 	add.w	r6, r8, #2
 800ca4c:	3e01      	subs	r6, #1
 800ca4e:	4638      	mov	r0, r7
 800ca50:	612e      	str	r6, [r5, #16]
 800ca52:	4621      	mov	r1, r4
 800ca54:	f7ff fdd8 	bl	800c608 <_Bfree>
 800ca58:	4628      	mov	r0, r5
 800ca5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca5e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca62:	3301      	adds	r3, #1
 800ca64:	e7c5      	b.n	800c9f2 <__lshift+0x4a>
 800ca66:	3904      	subs	r1, #4
 800ca68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca6c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca70:	459c      	cmp	ip, r3
 800ca72:	d8f9      	bhi.n	800ca68 <__lshift+0xc0>
 800ca74:	e7ea      	b.n	800ca4c <__lshift+0xa4>
 800ca76:	bf00      	nop
 800ca78:	0800d5c4 	.word	0x0800d5c4
 800ca7c:	0800d5d5 	.word	0x0800d5d5

0800ca80 <__mcmp>:
 800ca80:	b530      	push	{r4, r5, lr}
 800ca82:	6902      	ldr	r2, [r0, #16]
 800ca84:	690c      	ldr	r4, [r1, #16]
 800ca86:	1b12      	subs	r2, r2, r4
 800ca88:	d10e      	bne.n	800caa8 <__mcmp+0x28>
 800ca8a:	f100 0314 	add.w	r3, r0, #20
 800ca8e:	3114      	adds	r1, #20
 800ca90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ca94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ca98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ca9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800caa0:	42a5      	cmp	r5, r4
 800caa2:	d003      	beq.n	800caac <__mcmp+0x2c>
 800caa4:	d305      	bcc.n	800cab2 <__mcmp+0x32>
 800caa6:	2201      	movs	r2, #1
 800caa8:	4610      	mov	r0, r2
 800caaa:	bd30      	pop	{r4, r5, pc}
 800caac:	4283      	cmp	r3, r0
 800caae:	d3f3      	bcc.n	800ca98 <__mcmp+0x18>
 800cab0:	e7fa      	b.n	800caa8 <__mcmp+0x28>
 800cab2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cab6:	e7f7      	b.n	800caa8 <__mcmp+0x28>

0800cab8 <__mdiff>:
 800cab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cabc:	460c      	mov	r4, r1
 800cabe:	4606      	mov	r6, r0
 800cac0:	4611      	mov	r1, r2
 800cac2:	4620      	mov	r0, r4
 800cac4:	4690      	mov	r8, r2
 800cac6:	f7ff ffdb 	bl	800ca80 <__mcmp>
 800caca:	1e05      	subs	r5, r0, #0
 800cacc:	d110      	bne.n	800caf0 <__mdiff+0x38>
 800cace:	4629      	mov	r1, r5
 800cad0:	4630      	mov	r0, r6
 800cad2:	f7ff fd59 	bl	800c588 <_Balloc>
 800cad6:	b930      	cbnz	r0, 800cae6 <__mdiff+0x2e>
 800cad8:	4b3a      	ldr	r3, [pc, #232]	; (800cbc4 <__mdiff+0x10c>)
 800cada:	4602      	mov	r2, r0
 800cadc:	f240 2137 	movw	r1, #567	; 0x237
 800cae0:	4839      	ldr	r0, [pc, #228]	; (800cbc8 <__mdiff+0x110>)
 800cae2:	f000 fb95 	bl	800d210 <__assert_func>
 800cae6:	2301      	movs	r3, #1
 800cae8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800caec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caf0:	bfa4      	itt	ge
 800caf2:	4643      	movge	r3, r8
 800caf4:	46a0      	movge	r8, r4
 800caf6:	4630      	mov	r0, r6
 800caf8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cafc:	bfa6      	itte	ge
 800cafe:	461c      	movge	r4, r3
 800cb00:	2500      	movge	r5, #0
 800cb02:	2501      	movlt	r5, #1
 800cb04:	f7ff fd40 	bl	800c588 <_Balloc>
 800cb08:	b920      	cbnz	r0, 800cb14 <__mdiff+0x5c>
 800cb0a:	4b2e      	ldr	r3, [pc, #184]	; (800cbc4 <__mdiff+0x10c>)
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	f240 2145 	movw	r1, #581	; 0x245
 800cb12:	e7e5      	b.n	800cae0 <__mdiff+0x28>
 800cb14:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cb18:	6926      	ldr	r6, [r4, #16]
 800cb1a:	60c5      	str	r5, [r0, #12]
 800cb1c:	f104 0914 	add.w	r9, r4, #20
 800cb20:	f108 0514 	add.w	r5, r8, #20
 800cb24:	f100 0e14 	add.w	lr, r0, #20
 800cb28:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cb2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cb30:	f108 0210 	add.w	r2, r8, #16
 800cb34:	46f2      	mov	sl, lr
 800cb36:	2100      	movs	r1, #0
 800cb38:	f859 3b04 	ldr.w	r3, [r9], #4
 800cb3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cb40:	fa11 f88b 	uxtah	r8, r1, fp
 800cb44:	b299      	uxth	r1, r3
 800cb46:	0c1b      	lsrs	r3, r3, #16
 800cb48:	eba8 0801 	sub.w	r8, r8, r1
 800cb4c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cb50:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cb54:	fa1f f888 	uxth.w	r8, r8
 800cb58:	1419      	asrs	r1, r3, #16
 800cb5a:	454e      	cmp	r6, r9
 800cb5c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cb60:	f84a 3b04 	str.w	r3, [sl], #4
 800cb64:	d8e8      	bhi.n	800cb38 <__mdiff+0x80>
 800cb66:	1b33      	subs	r3, r6, r4
 800cb68:	3b15      	subs	r3, #21
 800cb6a:	f023 0303 	bic.w	r3, r3, #3
 800cb6e:	3304      	adds	r3, #4
 800cb70:	3415      	adds	r4, #21
 800cb72:	42a6      	cmp	r6, r4
 800cb74:	bf38      	it	cc
 800cb76:	2304      	movcc	r3, #4
 800cb78:	441d      	add	r5, r3
 800cb7a:	4473      	add	r3, lr
 800cb7c:	469e      	mov	lr, r3
 800cb7e:	462e      	mov	r6, r5
 800cb80:	4566      	cmp	r6, ip
 800cb82:	d30e      	bcc.n	800cba2 <__mdiff+0xea>
 800cb84:	f10c 0203 	add.w	r2, ip, #3
 800cb88:	1b52      	subs	r2, r2, r5
 800cb8a:	f022 0203 	bic.w	r2, r2, #3
 800cb8e:	3d03      	subs	r5, #3
 800cb90:	45ac      	cmp	ip, r5
 800cb92:	bf38      	it	cc
 800cb94:	2200      	movcc	r2, #0
 800cb96:	4413      	add	r3, r2
 800cb98:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cb9c:	b17a      	cbz	r2, 800cbbe <__mdiff+0x106>
 800cb9e:	6107      	str	r7, [r0, #16]
 800cba0:	e7a4      	b.n	800caec <__mdiff+0x34>
 800cba2:	f856 8b04 	ldr.w	r8, [r6], #4
 800cba6:	fa11 f288 	uxtah	r2, r1, r8
 800cbaa:	1414      	asrs	r4, r2, #16
 800cbac:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cbb0:	b292      	uxth	r2, r2
 800cbb2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cbb6:	f84e 2b04 	str.w	r2, [lr], #4
 800cbba:	1421      	asrs	r1, r4, #16
 800cbbc:	e7e0      	b.n	800cb80 <__mdiff+0xc8>
 800cbbe:	3f01      	subs	r7, #1
 800cbc0:	e7ea      	b.n	800cb98 <__mdiff+0xe0>
 800cbc2:	bf00      	nop
 800cbc4:	0800d5c4 	.word	0x0800d5c4
 800cbc8:	0800d5d5 	.word	0x0800d5d5

0800cbcc <__d2b>:
 800cbcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cbd0:	460f      	mov	r7, r1
 800cbd2:	2101      	movs	r1, #1
 800cbd4:	ec59 8b10 	vmov	r8, r9, d0
 800cbd8:	4616      	mov	r6, r2
 800cbda:	f7ff fcd5 	bl	800c588 <_Balloc>
 800cbde:	4604      	mov	r4, r0
 800cbe0:	b930      	cbnz	r0, 800cbf0 <__d2b+0x24>
 800cbe2:	4602      	mov	r2, r0
 800cbe4:	4b24      	ldr	r3, [pc, #144]	; (800cc78 <__d2b+0xac>)
 800cbe6:	4825      	ldr	r0, [pc, #148]	; (800cc7c <__d2b+0xb0>)
 800cbe8:	f240 310f 	movw	r1, #783	; 0x30f
 800cbec:	f000 fb10 	bl	800d210 <__assert_func>
 800cbf0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cbf4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cbf8:	bb2d      	cbnz	r5, 800cc46 <__d2b+0x7a>
 800cbfa:	9301      	str	r3, [sp, #4]
 800cbfc:	f1b8 0300 	subs.w	r3, r8, #0
 800cc00:	d026      	beq.n	800cc50 <__d2b+0x84>
 800cc02:	4668      	mov	r0, sp
 800cc04:	9300      	str	r3, [sp, #0]
 800cc06:	f7ff fd87 	bl	800c718 <__lo0bits>
 800cc0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cc0e:	b1e8      	cbz	r0, 800cc4c <__d2b+0x80>
 800cc10:	f1c0 0320 	rsb	r3, r0, #32
 800cc14:	fa02 f303 	lsl.w	r3, r2, r3
 800cc18:	430b      	orrs	r3, r1
 800cc1a:	40c2      	lsrs	r2, r0
 800cc1c:	6163      	str	r3, [r4, #20]
 800cc1e:	9201      	str	r2, [sp, #4]
 800cc20:	9b01      	ldr	r3, [sp, #4]
 800cc22:	61a3      	str	r3, [r4, #24]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	bf14      	ite	ne
 800cc28:	2202      	movne	r2, #2
 800cc2a:	2201      	moveq	r2, #1
 800cc2c:	6122      	str	r2, [r4, #16]
 800cc2e:	b1bd      	cbz	r5, 800cc60 <__d2b+0x94>
 800cc30:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cc34:	4405      	add	r5, r0
 800cc36:	603d      	str	r5, [r7, #0]
 800cc38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cc3c:	6030      	str	r0, [r6, #0]
 800cc3e:	4620      	mov	r0, r4
 800cc40:	b003      	add	sp, #12
 800cc42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc4a:	e7d6      	b.n	800cbfa <__d2b+0x2e>
 800cc4c:	6161      	str	r1, [r4, #20]
 800cc4e:	e7e7      	b.n	800cc20 <__d2b+0x54>
 800cc50:	a801      	add	r0, sp, #4
 800cc52:	f7ff fd61 	bl	800c718 <__lo0bits>
 800cc56:	9b01      	ldr	r3, [sp, #4]
 800cc58:	6163      	str	r3, [r4, #20]
 800cc5a:	3020      	adds	r0, #32
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	e7e5      	b.n	800cc2c <__d2b+0x60>
 800cc60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cc68:	6038      	str	r0, [r7, #0]
 800cc6a:	6918      	ldr	r0, [r3, #16]
 800cc6c:	f7ff fd34 	bl	800c6d8 <__hi0bits>
 800cc70:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc74:	e7e2      	b.n	800cc3c <__d2b+0x70>
 800cc76:	bf00      	nop
 800cc78:	0800d5c4 	.word	0x0800d5c4
 800cc7c:	0800d5d5 	.word	0x0800d5d5

0800cc80 <__sfputc_r>:
 800cc80:	6893      	ldr	r3, [r2, #8]
 800cc82:	3b01      	subs	r3, #1
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	b410      	push	{r4}
 800cc88:	6093      	str	r3, [r2, #8]
 800cc8a:	da08      	bge.n	800cc9e <__sfputc_r+0x1e>
 800cc8c:	6994      	ldr	r4, [r2, #24]
 800cc8e:	42a3      	cmp	r3, r4
 800cc90:	db01      	blt.n	800cc96 <__sfputc_r+0x16>
 800cc92:	290a      	cmp	r1, #10
 800cc94:	d103      	bne.n	800cc9e <__sfputc_r+0x1e>
 800cc96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc9a:	f7fe bc69 	b.w	800b570 <__swbuf_r>
 800cc9e:	6813      	ldr	r3, [r2, #0]
 800cca0:	1c58      	adds	r0, r3, #1
 800cca2:	6010      	str	r0, [r2, #0]
 800cca4:	7019      	strb	r1, [r3, #0]
 800cca6:	4608      	mov	r0, r1
 800cca8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccac:	4770      	bx	lr

0800ccae <__sfputs_r>:
 800ccae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccb0:	4606      	mov	r6, r0
 800ccb2:	460f      	mov	r7, r1
 800ccb4:	4614      	mov	r4, r2
 800ccb6:	18d5      	adds	r5, r2, r3
 800ccb8:	42ac      	cmp	r4, r5
 800ccba:	d101      	bne.n	800ccc0 <__sfputs_r+0x12>
 800ccbc:	2000      	movs	r0, #0
 800ccbe:	e007      	b.n	800ccd0 <__sfputs_r+0x22>
 800ccc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccc4:	463a      	mov	r2, r7
 800ccc6:	4630      	mov	r0, r6
 800ccc8:	f7ff ffda 	bl	800cc80 <__sfputc_r>
 800cccc:	1c43      	adds	r3, r0, #1
 800ccce:	d1f3      	bne.n	800ccb8 <__sfputs_r+0xa>
 800ccd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ccd4 <_vfiprintf_r>:
 800ccd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd8:	460d      	mov	r5, r1
 800ccda:	b09d      	sub	sp, #116	; 0x74
 800ccdc:	4614      	mov	r4, r2
 800ccde:	4698      	mov	r8, r3
 800cce0:	4606      	mov	r6, r0
 800cce2:	b118      	cbz	r0, 800ccec <_vfiprintf_r+0x18>
 800cce4:	6a03      	ldr	r3, [r0, #32]
 800cce6:	b90b      	cbnz	r3, 800ccec <_vfiprintf_r+0x18>
 800cce8:	f7fe fb48 	bl	800b37c <__sinit>
 800ccec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccee:	07d9      	lsls	r1, r3, #31
 800ccf0:	d405      	bmi.n	800ccfe <_vfiprintf_r+0x2a>
 800ccf2:	89ab      	ldrh	r3, [r5, #12]
 800ccf4:	059a      	lsls	r2, r3, #22
 800ccf6:	d402      	bmi.n	800ccfe <_vfiprintf_r+0x2a>
 800ccf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccfa:	f7fe fd4c 	bl	800b796 <__retarget_lock_acquire_recursive>
 800ccfe:	89ab      	ldrh	r3, [r5, #12]
 800cd00:	071b      	lsls	r3, r3, #28
 800cd02:	d501      	bpl.n	800cd08 <_vfiprintf_r+0x34>
 800cd04:	692b      	ldr	r3, [r5, #16]
 800cd06:	b99b      	cbnz	r3, 800cd30 <_vfiprintf_r+0x5c>
 800cd08:	4629      	mov	r1, r5
 800cd0a:	4630      	mov	r0, r6
 800cd0c:	f7fe fc6e 	bl	800b5ec <__swsetup_r>
 800cd10:	b170      	cbz	r0, 800cd30 <_vfiprintf_r+0x5c>
 800cd12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd14:	07dc      	lsls	r4, r3, #31
 800cd16:	d504      	bpl.n	800cd22 <_vfiprintf_r+0x4e>
 800cd18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd1c:	b01d      	add	sp, #116	; 0x74
 800cd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd22:	89ab      	ldrh	r3, [r5, #12]
 800cd24:	0598      	lsls	r0, r3, #22
 800cd26:	d4f7      	bmi.n	800cd18 <_vfiprintf_r+0x44>
 800cd28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd2a:	f7fe fd35 	bl	800b798 <__retarget_lock_release_recursive>
 800cd2e:	e7f3      	b.n	800cd18 <_vfiprintf_r+0x44>
 800cd30:	2300      	movs	r3, #0
 800cd32:	9309      	str	r3, [sp, #36]	; 0x24
 800cd34:	2320      	movs	r3, #32
 800cd36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd3e:	2330      	movs	r3, #48	; 0x30
 800cd40:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cef4 <_vfiprintf_r+0x220>
 800cd44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd48:	f04f 0901 	mov.w	r9, #1
 800cd4c:	4623      	mov	r3, r4
 800cd4e:	469a      	mov	sl, r3
 800cd50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd54:	b10a      	cbz	r2, 800cd5a <_vfiprintf_r+0x86>
 800cd56:	2a25      	cmp	r2, #37	; 0x25
 800cd58:	d1f9      	bne.n	800cd4e <_vfiprintf_r+0x7a>
 800cd5a:	ebba 0b04 	subs.w	fp, sl, r4
 800cd5e:	d00b      	beq.n	800cd78 <_vfiprintf_r+0xa4>
 800cd60:	465b      	mov	r3, fp
 800cd62:	4622      	mov	r2, r4
 800cd64:	4629      	mov	r1, r5
 800cd66:	4630      	mov	r0, r6
 800cd68:	f7ff ffa1 	bl	800ccae <__sfputs_r>
 800cd6c:	3001      	adds	r0, #1
 800cd6e:	f000 80a9 	beq.w	800cec4 <_vfiprintf_r+0x1f0>
 800cd72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd74:	445a      	add	r2, fp
 800cd76:	9209      	str	r2, [sp, #36]	; 0x24
 800cd78:	f89a 3000 	ldrb.w	r3, [sl]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	f000 80a1 	beq.w	800cec4 <_vfiprintf_r+0x1f0>
 800cd82:	2300      	movs	r3, #0
 800cd84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd8c:	f10a 0a01 	add.w	sl, sl, #1
 800cd90:	9304      	str	r3, [sp, #16]
 800cd92:	9307      	str	r3, [sp, #28]
 800cd94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd98:	931a      	str	r3, [sp, #104]	; 0x68
 800cd9a:	4654      	mov	r4, sl
 800cd9c:	2205      	movs	r2, #5
 800cd9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cda2:	4854      	ldr	r0, [pc, #336]	; (800cef4 <_vfiprintf_r+0x220>)
 800cda4:	f7f3 faac 	bl	8000300 <memchr>
 800cda8:	9a04      	ldr	r2, [sp, #16]
 800cdaa:	b9d8      	cbnz	r0, 800cde4 <_vfiprintf_r+0x110>
 800cdac:	06d1      	lsls	r1, r2, #27
 800cdae:	bf44      	itt	mi
 800cdb0:	2320      	movmi	r3, #32
 800cdb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdb6:	0713      	lsls	r3, r2, #28
 800cdb8:	bf44      	itt	mi
 800cdba:	232b      	movmi	r3, #43	; 0x2b
 800cdbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdc0:	f89a 3000 	ldrb.w	r3, [sl]
 800cdc4:	2b2a      	cmp	r3, #42	; 0x2a
 800cdc6:	d015      	beq.n	800cdf4 <_vfiprintf_r+0x120>
 800cdc8:	9a07      	ldr	r2, [sp, #28]
 800cdca:	4654      	mov	r4, sl
 800cdcc:	2000      	movs	r0, #0
 800cdce:	f04f 0c0a 	mov.w	ip, #10
 800cdd2:	4621      	mov	r1, r4
 800cdd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdd8:	3b30      	subs	r3, #48	; 0x30
 800cdda:	2b09      	cmp	r3, #9
 800cddc:	d94d      	bls.n	800ce7a <_vfiprintf_r+0x1a6>
 800cdde:	b1b0      	cbz	r0, 800ce0e <_vfiprintf_r+0x13a>
 800cde0:	9207      	str	r2, [sp, #28]
 800cde2:	e014      	b.n	800ce0e <_vfiprintf_r+0x13a>
 800cde4:	eba0 0308 	sub.w	r3, r0, r8
 800cde8:	fa09 f303 	lsl.w	r3, r9, r3
 800cdec:	4313      	orrs	r3, r2
 800cdee:	9304      	str	r3, [sp, #16]
 800cdf0:	46a2      	mov	sl, r4
 800cdf2:	e7d2      	b.n	800cd9a <_vfiprintf_r+0xc6>
 800cdf4:	9b03      	ldr	r3, [sp, #12]
 800cdf6:	1d19      	adds	r1, r3, #4
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	9103      	str	r1, [sp, #12]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	bfbb      	ittet	lt
 800ce00:	425b      	neglt	r3, r3
 800ce02:	f042 0202 	orrlt.w	r2, r2, #2
 800ce06:	9307      	strge	r3, [sp, #28]
 800ce08:	9307      	strlt	r3, [sp, #28]
 800ce0a:	bfb8      	it	lt
 800ce0c:	9204      	strlt	r2, [sp, #16]
 800ce0e:	7823      	ldrb	r3, [r4, #0]
 800ce10:	2b2e      	cmp	r3, #46	; 0x2e
 800ce12:	d10c      	bne.n	800ce2e <_vfiprintf_r+0x15a>
 800ce14:	7863      	ldrb	r3, [r4, #1]
 800ce16:	2b2a      	cmp	r3, #42	; 0x2a
 800ce18:	d134      	bne.n	800ce84 <_vfiprintf_r+0x1b0>
 800ce1a:	9b03      	ldr	r3, [sp, #12]
 800ce1c:	1d1a      	adds	r2, r3, #4
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	9203      	str	r2, [sp, #12]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	bfb8      	it	lt
 800ce26:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ce2a:	3402      	adds	r4, #2
 800ce2c:	9305      	str	r3, [sp, #20]
 800ce2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cf04 <_vfiprintf_r+0x230>
 800ce32:	7821      	ldrb	r1, [r4, #0]
 800ce34:	2203      	movs	r2, #3
 800ce36:	4650      	mov	r0, sl
 800ce38:	f7f3 fa62 	bl	8000300 <memchr>
 800ce3c:	b138      	cbz	r0, 800ce4e <_vfiprintf_r+0x17a>
 800ce3e:	9b04      	ldr	r3, [sp, #16]
 800ce40:	eba0 000a 	sub.w	r0, r0, sl
 800ce44:	2240      	movs	r2, #64	; 0x40
 800ce46:	4082      	lsls	r2, r0
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	3401      	adds	r4, #1
 800ce4c:	9304      	str	r3, [sp, #16]
 800ce4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce52:	4829      	ldr	r0, [pc, #164]	; (800cef8 <_vfiprintf_r+0x224>)
 800ce54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce58:	2206      	movs	r2, #6
 800ce5a:	f7f3 fa51 	bl	8000300 <memchr>
 800ce5e:	2800      	cmp	r0, #0
 800ce60:	d03f      	beq.n	800cee2 <_vfiprintf_r+0x20e>
 800ce62:	4b26      	ldr	r3, [pc, #152]	; (800cefc <_vfiprintf_r+0x228>)
 800ce64:	bb1b      	cbnz	r3, 800ceae <_vfiprintf_r+0x1da>
 800ce66:	9b03      	ldr	r3, [sp, #12]
 800ce68:	3307      	adds	r3, #7
 800ce6a:	f023 0307 	bic.w	r3, r3, #7
 800ce6e:	3308      	adds	r3, #8
 800ce70:	9303      	str	r3, [sp, #12]
 800ce72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce74:	443b      	add	r3, r7
 800ce76:	9309      	str	r3, [sp, #36]	; 0x24
 800ce78:	e768      	b.n	800cd4c <_vfiprintf_r+0x78>
 800ce7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce7e:	460c      	mov	r4, r1
 800ce80:	2001      	movs	r0, #1
 800ce82:	e7a6      	b.n	800cdd2 <_vfiprintf_r+0xfe>
 800ce84:	2300      	movs	r3, #0
 800ce86:	3401      	adds	r4, #1
 800ce88:	9305      	str	r3, [sp, #20]
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	f04f 0c0a 	mov.w	ip, #10
 800ce90:	4620      	mov	r0, r4
 800ce92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce96:	3a30      	subs	r2, #48	; 0x30
 800ce98:	2a09      	cmp	r2, #9
 800ce9a:	d903      	bls.n	800cea4 <_vfiprintf_r+0x1d0>
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d0c6      	beq.n	800ce2e <_vfiprintf_r+0x15a>
 800cea0:	9105      	str	r1, [sp, #20]
 800cea2:	e7c4      	b.n	800ce2e <_vfiprintf_r+0x15a>
 800cea4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cea8:	4604      	mov	r4, r0
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e7f0      	b.n	800ce90 <_vfiprintf_r+0x1bc>
 800ceae:	ab03      	add	r3, sp, #12
 800ceb0:	9300      	str	r3, [sp, #0]
 800ceb2:	462a      	mov	r2, r5
 800ceb4:	4b12      	ldr	r3, [pc, #72]	; (800cf00 <_vfiprintf_r+0x22c>)
 800ceb6:	a904      	add	r1, sp, #16
 800ceb8:	4630      	mov	r0, r6
 800ceba:	f7fd fe29 	bl	800ab10 <_printf_float>
 800cebe:	4607      	mov	r7, r0
 800cec0:	1c78      	adds	r0, r7, #1
 800cec2:	d1d6      	bne.n	800ce72 <_vfiprintf_r+0x19e>
 800cec4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cec6:	07d9      	lsls	r1, r3, #31
 800cec8:	d405      	bmi.n	800ced6 <_vfiprintf_r+0x202>
 800ceca:	89ab      	ldrh	r3, [r5, #12]
 800cecc:	059a      	lsls	r2, r3, #22
 800cece:	d402      	bmi.n	800ced6 <_vfiprintf_r+0x202>
 800ced0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ced2:	f7fe fc61 	bl	800b798 <__retarget_lock_release_recursive>
 800ced6:	89ab      	ldrh	r3, [r5, #12]
 800ced8:	065b      	lsls	r3, r3, #25
 800ceda:	f53f af1d 	bmi.w	800cd18 <_vfiprintf_r+0x44>
 800cede:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cee0:	e71c      	b.n	800cd1c <_vfiprintf_r+0x48>
 800cee2:	ab03      	add	r3, sp, #12
 800cee4:	9300      	str	r3, [sp, #0]
 800cee6:	462a      	mov	r2, r5
 800cee8:	4b05      	ldr	r3, [pc, #20]	; (800cf00 <_vfiprintf_r+0x22c>)
 800ceea:	a904      	add	r1, sp, #16
 800ceec:	4630      	mov	r0, r6
 800ceee:	f7fe f897 	bl	800b020 <_printf_i>
 800cef2:	e7e4      	b.n	800cebe <_vfiprintf_r+0x1ea>
 800cef4:	0800d72c 	.word	0x0800d72c
 800cef8:	0800d736 	.word	0x0800d736
 800cefc:	0800ab11 	.word	0x0800ab11
 800cf00:	0800ccaf 	.word	0x0800ccaf
 800cf04:	0800d732 	.word	0x0800d732

0800cf08 <__sflush_r>:
 800cf08:	898a      	ldrh	r2, [r1, #12]
 800cf0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf0e:	4605      	mov	r5, r0
 800cf10:	0710      	lsls	r0, r2, #28
 800cf12:	460c      	mov	r4, r1
 800cf14:	d458      	bmi.n	800cfc8 <__sflush_r+0xc0>
 800cf16:	684b      	ldr	r3, [r1, #4]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	dc05      	bgt.n	800cf28 <__sflush_r+0x20>
 800cf1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	dc02      	bgt.n	800cf28 <__sflush_r+0x20>
 800cf22:	2000      	movs	r0, #0
 800cf24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf2a:	2e00      	cmp	r6, #0
 800cf2c:	d0f9      	beq.n	800cf22 <__sflush_r+0x1a>
 800cf2e:	2300      	movs	r3, #0
 800cf30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf34:	682f      	ldr	r7, [r5, #0]
 800cf36:	6a21      	ldr	r1, [r4, #32]
 800cf38:	602b      	str	r3, [r5, #0]
 800cf3a:	d032      	beq.n	800cfa2 <__sflush_r+0x9a>
 800cf3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf3e:	89a3      	ldrh	r3, [r4, #12]
 800cf40:	075a      	lsls	r2, r3, #29
 800cf42:	d505      	bpl.n	800cf50 <__sflush_r+0x48>
 800cf44:	6863      	ldr	r3, [r4, #4]
 800cf46:	1ac0      	subs	r0, r0, r3
 800cf48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf4a:	b10b      	cbz	r3, 800cf50 <__sflush_r+0x48>
 800cf4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf4e:	1ac0      	subs	r0, r0, r3
 800cf50:	2300      	movs	r3, #0
 800cf52:	4602      	mov	r2, r0
 800cf54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf56:	6a21      	ldr	r1, [r4, #32]
 800cf58:	4628      	mov	r0, r5
 800cf5a:	47b0      	blx	r6
 800cf5c:	1c43      	adds	r3, r0, #1
 800cf5e:	89a3      	ldrh	r3, [r4, #12]
 800cf60:	d106      	bne.n	800cf70 <__sflush_r+0x68>
 800cf62:	6829      	ldr	r1, [r5, #0]
 800cf64:	291d      	cmp	r1, #29
 800cf66:	d82b      	bhi.n	800cfc0 <__sflush_r+0xb8>
 800cf68:	4a29      	ldr	r2, [pc, #164]	; (800d010 <__sflush_r+0x108>)
 800cf6a:	410a      	asrs	r2, r1
 800cf6c:	07d6      	lsls	r6, r2, #31
 800cf6e:	d427      	bmi.n	800cfc0 <__sflush_r+0xb8>
 800cf70:	2200      	movs	r2, #0
 800cf72:	6062      	str	r2, [r4, #4]
 800cf74:	04d9      	lsls	r1, r3, #19
 800cf76:	6922      	ldr	r2, [r4, #16]
 800cf78:	6022      	str	r2, [r4, #0]
 800cf7a:	d504      	bpl.n	800cf86 <__sflush_r+0x7e>
 800cf7c:	1c42      	adds	r2, r0, #1
 800cf7e:	d101      	bne.n	800cf84 <__sflush_r+0x7c>
 800cf80:	682b      	ldr	r3, [r5, #0]
 800cf82:	b903      	cbnz	r3, 800cf86 <__sflush_r+0x7e>
 800cf84:	6560      	str	r0, [r4, #84]	; 0x54
 800cf86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf88:	602f      	str	r7, [r5, #0]
 800cf8a:	2900      	cmp	r1, #0
 800cf8c:	d0c9      	beq.n	800cf22 <__sflush_r+0x1a>
 800cf8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf92:	4299      	cmp	r1, r3
 800cf94:	d002      	beq.n	800cf9c <__sflush_r+0x94>
 800cf96:	4628      	mov	r0, r5
 800cf98:	f7ff f9f6 	bl	800c388 <_free_r>
 800cf9c:	2000      	movs	r0, #0
 800cf9e:	6360      	str	r0, [r4, #52]	; 0x34
 800cfa0:	e7c0      	b.n	800cf24 <__sflush_r+0x1c>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	47b0      	blx	r6
 800cfa8:	1c41      	adds	r1, r0, #1
 800cfaa:	d1c8      	bne.n	800cf3e <__sflush_r+0x36>
 800cfac:	682b      	ldr	r3, [r5, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d0c5      	beq.n	800cf3e <__sflush_r+0x36>
 800cfb2:	2b1d      	cmp	r3, #29
 800cfb4:	d001      	beq.n	800cfba <__sflush_r+0xb2>
 800cfb6:	2b16      	cmp	r3, #22
 800cfb8:	d101      	bne.n	800cfbe <__sflush_r+0xb6>
 800cfba:	602f      	str	r7, [r5, #0]
 800cfbc:	e7b1      	b.n	800cf22 <__sflush_r+0x1a>
 800cfbe:	89a3      	ldrh	r3, [r4, #12]
 800cfc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfc4:	81a3      	strh	r3, [r4, #12]
 800cfc6:	e7ad      	b.n	800cf24 <__sflush_r+0x1c>
 800cfc8:	690f      	ldr	r7, [r1, #16]
 800cfca:	2f00      	cmp	r7, #0
 800cfcc:	d0a9      	beq.n	800cf22 <__sflush_r+0x1a>
 800cfce:	0793      	lsls	r3, r2, #30
 800cfd0:	680e      	ldr	r6, [r1, #0]
 800cfd2:	bf08      	it	eq
 800cfd4:	694b      	ldreq	r3, [r1, #20]
 800cfd6:	600f      	str	r7, [r1, #0]
 800cfd8:	bf18      	it	ne
 800cfda:	2300      	movne	r3, #0
 800cfdc:	eba6 0807 	sub.w	r8, r6, r7
 800cfe0:	608b      	str	r3, [r1, #8]
 800cfe2:	f1b8 0f00 	cmp.w	r8, #0
 800cfe6:	dd9c      	ble.n	800cf22 <__sflush_r+0x1a>
 800cfe8:	6a21      	ldr	r1, [r4, #32]
 800cfea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cfec:	4643      	mov	r3, r8
 800cfee:	463a      	mov	r2, r7
 800cff0:	4628      	mov	r0, r5
 800cff2:	47b0      	blx	r6
 800cff4:	2800      	cmp	r0, #0
 800cff6:	dc06      	bgt.n	800d006 <__sflush_r+0xfe>
 800cff8:	89a3      	ldrh	r3, [r4, #12]
 800cffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cffe:	81a3      	strh	r3, [r4, #12]
 800d000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d004:	e78e      	b.n	800cf24 <__sflush_r+0x1c>
 800d006:	4407      	add	r7, r0
 800d008:	eba8 0800 	sub.w	r8, r8, r0
 800d00c:	e7e9      	b.n	800cfe2 <__sflush_r+0xda>
 800d00e:	bf00      	nop
 800d010:	dfbffffe 	.word	0xdfbffffe

0800d014 <_fflush_r>:
 800d014:	b538      	push	{r3, r4, r5, lr}
 800d016:	690b      	ldr	r3, [r1, #16]
 800d018:	4605      	mov	r5, r0
 800d01a:	460c      	mov	r4, r1
 800d01c:	b913      	cbnz	r3, 800d024 <_fflush_r+0x10>
 800d01e:	2500      	movs	r5, #0
 800d020:	4628      	mov	r0, r5
 800d022:	bd38      	pop	{r3, r4, r5, pc}
 800d024:	b118      	cbz	r0, 800d02e <_fflush_r+0x1a>
 800d026:	6a03      	ldr	r3, [r0, #32]
 800d028:	b90b      	cbnz	r3, 800d02e <_fflush_r+0x1a>
 800d02a:	f7fe f9a7 	bl	800b37c <__sinit>
 800d02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d0f3      	beq.n	800d01e <_fflush_r+0xa>
 800d036:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d038:	07d0      	lsls	r0, r2, #31
 800d03a:	d404      	bmi.n	800d046 <_fflush_r+0x32>
 800d03c:	0599      	lsls	r1, r3, #22
 800d03e:	d402      	bmi.n	800d046 <_fflush_r+0x32>
 800d040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d042:	f7fe fba8 	bl	800b796 <__retarget_lock_acquire_recursive>
 800d046:	4628      	mov	r0, r5
 800d048:	4621      	mov	r1, r4
 800d04a:	f7ff ff5d 	bl	800cf08 <__sflush_r>
 800d04e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d050:	07da      	lsls	r2, r3, #31
 800d052:	4605      	mov	r5, r0
 800d054:	d4e4      	bmi.n	800d020 <_fflush_r+0xc>
 800d056:	89a3      	ldrh	r3, [r4, #12]
 800d058:	059b      	lsls	r3, r3, #22
 800d05a:	d4e1      	bmi.n	800d020 <_fflush_r+0xc>
 800d05c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d05e:	f7fe fb9b 	bl	800b798 <__retarget_lock_release_recursive>
 800d062:	e7dd      	b.n	800d020 <_fflush_r+0xc>

0800d064 <__swhatbuf_r>:
 800d064:	b570      	push	{r4, r5, r6, lr}
 800d066:	460c      	mov	r4, r1
 800d068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d06c:	2900      	cmp	r1, #0
 800d06e:	b096      	sub	sp, #88	; 0x58
 800d070:	4615      	mov	r5, r2
 800d072:	461e      	mov	r6, r3
 800d074:	da0d      	bge.n	800d092 <__swhatbuf_r+0x2e>
 800d076:	89a3      	ldrh	r3, [r4, #12]
 800d078:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d07c:	f04f 0100 	mov.w	r1, #0
 800d080:	bf0c      	ite	eq
 800d082:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d086:	2340      	movne	r3, #64	; 0x40
 800d088:	2000      	movs	r0, #0
 800d08a:	6031      	str	r1, [r6, #0]
 800d08c:	602b      	str	r3, [r5, #0]
 800d08e:	b016      	add	sp, #88	; 0x58
 800d090:	bd70      	pop	{r4, r5, r6, pc}
 800d092:	466a      	mov	r2, sp
 800d094:	f000 f87c 	bl	800d190 <_fstat_r>
 800d098:	2800      	cmp	r0, #0
 800d09a:	dbec      	blt.n	800d076 <__swhatbuf_r+0x12>
 800d09c:	9901      	ldr	r1, [sp, #4]
 800d09e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d0a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d0a6:	4259      	negs	r1, r3
 800d0a8:	4159      	adcs	r1, r3
 800d0aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0ae:	e7eb      	b.n	800d088 <__swhatbuf_r+0x24>

0800d0b0 <__smakebuf_r>:
 800d0b0:	898b      	ldrh	r3, [r1, #12]
 800d0b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d0b4:	079d      	lsls	r5, r3, #30
 800d0b6:	4606      	mov	r6, r0
 800d0b8:	460c      	mov	r4, r1
 800d0ba:	d507      	bpl.n	800d0cc <__smakebuf_r+0x1c>
 800d0bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d0c0:	6023      	str	r3, [r4, #0]
 800d0c2:	6123      	str	r3, [r4, #16]
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	6163      	str	r3, [r4, #20]
 800d0c8:	b002      	add	sp, #8
 800d0ca:	bd70      	pop	{r4, r5, r6, pc}
 800d0cc:	ab01      	add	r3, sp, #4
 800d0ce:	466a      	mov	r2, sp
 800d0d0:	f7ff ffc8 	bl	800d064 <__swhatbuf_r>
 800d0d4:	9900      	ldr	r1, [sp, #0]
 800d0d6:	4605      	mov	r5, r0
 800d0d8:	4630      	mov	r0, r6
 800d0da:	f7ff f9c9 	bl	800c470 <_malloc_r>
 800d0de:	b948      	cbnz	r0, 800d0f4 <__smakebuf_r+0x44>
 800d0e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0e4:	059a      	lsls	r2, r3, #22
 800d0e6:	d4ef      	bmi.n	800d0c8 <__smakebuf_r+0x18>
 800d0e8:	f023 0303 	bic.w	r3, r3, #3
 800d0ec:	f043 0302 	orr.w	r3, r3, #2
 800d0f0:	81a3      	strh	r3, [r4, #12]
 800d0f2:	e7e3      	b.n	800d0bc <__smakebuf_r+0xc>
 800d0f4:	89a3      	ldrh	r3, [r4, #12]
 800d0f6:	6020      	str	r0, [r4, #0]
 800d0f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0fc:	81a3      	strh	r3, [r4, #12]
 800d0fe:	9b00      	ldr	r3, [sp, #0]
 800d100:	6163      	str	r3, [r4, #20]
 800d102:	9b01      	ldr	r3, [sp, #4]
 800d104:	6120      	str	r0, [r4, #16]
 800d106:	b15b      	cbz	r3, 800d120 <__smakebuf_r+0x70>
 800d108:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d10c:	4630      	mov	r0, r6
 800d10e:	f000 f851 	bl	800d1b4 <_isatty_r>
 800d112:	b128      	cbz	r0, 800d120 <__smakebuf_r+0x70>
 800d114:	89a3      	ldrh	r3, [r4, #12]
 800d116:	f023 0303 	bic.w	r3, r3, #3
 800d11a:	f043 0301 	orr.w	r3, r3, #1
 800d11e:	81a3      	strh	r3, [r4, #12]
 800d120:	89a3      	ldrh	r3, [r4, #12]
 800d122:	431d      	orrs	r5, r3
 800d124:	81a5      	strh	r5, [r4, #12]
 800d126:	e7cf      	b.n	800d0c8 <__smakebuf_r+0x18>

0800d128 <_putc_r>:
 800d128:	b570      	push	{r4, r5, r6, lr}
 800d12a:	460d      	mov	r5, r1
 800d12c:	4614      	mov	r4, r2
 800d12e:	4606      	mov	r6, r0
 800d130:	b118      	cbz	r0, 800d13a <_putc_r+0x12>
 800d132:	6a03      	ldr	r3, [r0, #32]
 800d134:	b90b      	cbnz	r3, 800d13a <_putc_r+0x12>
 800d136:	f7fe f921 	bl	800b37c <__sinit>
 800d13a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d13c:	07d8      	lsls	r0, r3, #31
 800d13e:	d405      	bmi.n	800d14c <_putc_r+0x24>
 800d140:	89a3      	ldrh	r3, [r4, #12]
 800d142:	0599      	lsls	r1, r3, #22
 800d144:	d402      	bmi.n	800d14c <_putc_r+0x24>
 800d146:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d148:	f7fe fb25 	bl	800b796 <__retarget_lock_acquire_recursive>
 800d14c:	68a3      	ldr	r3, [r4, #8]
 800d14e:	3b01      	subs	r3, #1
 800d150:	2b00      	cmp	r3, #0
 800d152:	60a3      	str	r3, [r4, #8]
 800d154:	da05      	bge.n	800d162 <_putc_r+0x3a>
 800d156:	69a2      	ldr	r2, [r4, #24]
 800d158:	4293      	cmp	r3, r2
 800d15a:	db12      	blt.n	800d182 <_putc_r+0x5a>
 800d15c:	b2eb      	uxtb	r3, r5
 800d15e:	2b0a      	cmp	r3, #10
 800d160:	d00f      	beq.n	800d182 <_putc_r+0x5a>
 800d162:	6823      	ldr	r3, [r4, #0]
 800d164:	1c5a      	adds	r2, r3, #1
 800d166:	6022      	str	r2, [r4, #0]
 800d168:	701d      	strb	r5, [r3, #0]
 800d16a:	b2ed      	uxtb	r5, r5
 800d16c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d16e:	07da      	lsls	r2, r3, #31
 800d170:	d405      	bmi.n	800d17e <_putc_r+0x56>
 800d172:	89a3      	ldrh	r3, [r4, #12]
 800d174:	059b      	lsls	r3, r3, #22
 800d176:	d402      	bmi.n	800d17e <_putc_r+0x56>
 800d178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d17a:	f7fe fb0d 	bl	800b798 <__retarget_lock_release_recursive>
 800d17e:	4628      	mov	r0, r5
 800d180:	bd70      	pop	{r4, r5, r6, pc}
 800d182:	4629      	mov	r1, r5
 800d184:	4622      	mov	r2, r4
 800d186:	4630      	mov	r0, r6
 800d188:	f7fe f9f2 	bl	800b570 <__swbuf_r>
 800d18c:	4605      	mov	r5, r0
 800d18e:	e7ed      	b.n	800d16c <_putc_r+0x44>

0800d190 <_fstat_r>:
 800d190:	b538      	push	{r3, r4, r5, lr}
 800d192:	4d07      	ldr	r5, [pc, #28]	; (800d1b0 <_fstat_r+0x20>)
 800d194:	2300      	movs	r3, #0
 800d196:	4604      	mov	r4, r0
 800d198:	4608      	mov	r0, r1
 800d19a:	4611      	mov	r1, r2
 800d19c:	602b      	str	r3, [r5, #0]
 800d19e:	f7f3 feba 	bl	8000f16 <_fstat>
 800d1a2:	1c43      	adds	r3, r0, #1
 800d1a4:	d102      	bne.n	800d1ac <_fstat_r+0x1c>
 800d1a6:	682b      	ldr	r3, [r5, #0]
 800d1a8:	b103      	cbz	r3, 800d1ac <_fstat_r+0x1c>
 800d1aa:	6023      	str	r3, [r4, #0]
 800d1ac:	bd38      	pop	{r3, r4, r5, pc}
 800d1ae:	bf00      	nop
 800d1b0:	24002968 	.word	0x24002968

0800d1b4 <_isatty_r>:
 800d1b4:	b538      	push	{r3, r4, r5, lr}
 800d1b6:	4d06      	ldr	r5, [pc, #24]	; (800d1d0 <_isatty_r+0x1c>)
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	4608      	mov	r0, r1
 800d1be:	602b      	str	r3, [r5, #0]
 800d1c0:	f7f3 feb9 	bl	8000f36 <_isatty>
 800d1c4:	1c43      	adds	r3, r0, #1
 800d1c6:	d102      	bne.n	800d1ce <_isatty_r+0x1a>
 800d1c8:	682b      	ldr	r3, [r5, #0]
 800d1ca:	b103      	cbz	r3, 800d1ce <_isatty_r+0x1a>
 800d1cc:	6023      	str	r3, [r4, #0]
 800d1ce:	bd38      	pop	{r3, r4, r5, pc}
 800d1d0:	24002968 	.word	0x24002968

0800d1d4 <_sbrk_r>:
 800d1d4:	b538      	push	{r3, r4, r5, lr}
 800d1d6:	4d06      	ldr	r5, [pc, #24]	; (800d1f0 <_sbrk_r+0x1c>)
 800d1d8:	2300      	movs	r3, #0
 800d1da:	4604      	mov	r4, r0
 800d1dc:	4608      	mov	r0, r1
 800d1de:	602b      	str	r3, [r5, #0]
 800d1e0:	f7f3 fec2 	bl	8000f68 <_sbrk>
 800d1e4:	1c43      	adds	r3, r0, #1
 800d1e6:	d102      	bne.n	800d1ee <_sbrk_r+0x1a>
 800d1e8:	682b      	ldr	r3, [r5, #0]
 800d1ea:	b103      	cbz	r3, 800d1ee <_sbrk_r+0x1a>
 800d1ec:	6023      	str	r3, [r4, #0]
 800d1ee:	bd38      	pop	{r3, r4, r5, pc}
 800d1f0:	24002968 	.word	0x24002968

0800d1f4 <memcpy>:
 800d1f4:	440a      	add	r2, r1
 800d1f6:	4291      	cmp	r1, r2
 800d1f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d1fc:	d100      	bne.n	800d200 <memcpy+0xc>
 800d1fe:	4770      	bx	lr
 800d200:	b510      	push	{r4, lr}
 800d202:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d206:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d20a:	4291      	cmp	r1, r2
 800d20c:	d1f9      	bne.n	800d202 <memcpy+0xe>
 800d20e:	bd10      	pop	{r4, pc}

0800d210 <__assert_func>:
 800d210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d212:	4614      	mov	r4, r2
 800d214:	461a      	mov	r2, r3
 800d216:	4b09      	ldr	r3, [pc, #36]	; (800d23c <__assert_func+0x2c>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4605      	mov	r5, r0
 800d21c:	68d8      	ldr	r0, [r3, #12]
 800d21e:	b14c      	cbz	r4, 800d234 <__assert_func+0x24>
 800d220:	4b07      	ldr	r3, [pc, #28]	; (800d240 <__assert_func+0x30>)
 800d222:	9100      	str	r1, [sp, #0]
 800d224:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d228:	4906      	ldr	r1, [pc, #24]	; (800d244 <__assert_func+0x34>)
 800d22a:	462b      	mov	r3, r5
 800d22c:	f000 f844 	bl	800d2b8 <fiprintf>
 800d230:	f000 f854 	bl	800d2dc <abort>
 800d234:	4b04      	ldr	r3, [pc, #16]	; (800d248 <__assert_func+0x38>)
 800d236:	461c      	mov	r4, r3
 800d238:	e7f3      	b.n	800d222 <__assert_func+0x12>
 800d23a:	bf00      	nop
 800d23c:	24000174 	.word	0x24000174
 800d240:	0800d747 	.word	0x0800d747
 800d244:	0800d754 	.word	0x0800d754
 800d248:	0800d782 	.word	0x0800d782

0800d24c <_calloc_r>:
 800d24c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d24e:	fba1 2402 	umull	r2, r4, r1, r2
 800d252:	b94c      	cbnz	r4, 800d268 <_calloc_r+0x1c>
 800d254:	4611      	mov	r1, r2
 800d256:	9201      	str	r2, [sp, #4]
 800d258:	f7ff f90a 	bl	800c470 <_malloc_r>
 800d25c:	9a01      	ldr	r2, [sp, #4]
 800d25e:	4605      	mov	r5, r0
 800d260:	b930      	cbnz	r0, 800d270 <_calloc_r+0x24>
 800d262:	4628      	mov	r0, r5
 800d264:	b003      	add	sp, #12
 800d266:	bd30      	pop	{r4, r5, pc}
 800d268:	220c      	movs	r2, #12
 800d26a:	6002      	str	r2, [r0, #0]
 800d26c:	2500      	movs	r5, #0
 800d26e:	e7f8      	b.n	800d262 <_calloc_r+0x16>
 800d270:	4621      	mov	r1, r4
 800d272:	f7fe fa13 	bl	800b69c <memset>
 800d276:	e7f4      	b.n	800d262 <_calloc_r+0x16>

0800d278 <__ascii_mbtowc>:
 800d278:	b082      	sub	sp, #8
 800d27a:	b901      	cbnz	r1, 800d27e <__ascii_mbtowc+0x6>
 800d27c:	a901      	add	r1, sp, #4
 800d27e:	b142      	cbz	r2, 800d292 <__ascii_mbtowc+0x1a>
 800d280:	b14b      	cbz	r3, 800d296 <__ascii_mbtowc+0x1e>
 800d282:	7813      	ldrb	r3, [r2, #0]
 800d284:	600b      	str	r3, [r1, #0]
 800d286:	7812      	ldrb	r2, [r2, #0]
 800d288:	1e10      	subs	r0, r2, #0
 800d28a:	bf18      	it	ne
 800d28c:	2001      	movne	r0, #1
 800d28e:	b002      	add	sp, #8
 800d290:	4770      	bx	lr
 800d292:	4610      	mov	r0, r2
 800d294:	e7fb      	b.n	800d28e <__ascii_mbtowc+0x16>
 800d296:	f06f 0001 	mvn.w	r0, #1
 800d29a:	e7f8      	b.n	800d28e <__ascii_mbtowc+0x16>

0800d29c <__ascii_wctomb>:
 800d29c:	b149      	cbz	r1, 800d2b2 <__ascii_wctomb+0x16>
 800d29e:	2aff      	cmp	r2, #255	; 0xff
 800d2a0:	bf85      	ittet	hi
 800d2a2:	238a      	movhi	r3, #138	; 0x8a
 800d2a4:	6003      	strhi	r3, [r0, #0]
 800d2a6:	700a      	strbls	r2, [r1, #0]
 800d2a8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d2ac:	bf98      	it	ls
 800d2ae:	2001      	movls	r0, #1
 800d2b0:	4770      	bx	lr
 800d2b2:	4608      	mov	r0, r1
 800d2b4:	4770      	bx	lr
	...

0800d2b8 <fiprintf>:
 800d2b8:	b40e      	push	{r1, r2, r3}
 800d2ba:	b503      	push	{r0, r1, lr}
 800d2bc:	4601      	mov	r1, r0
 800d2be:	ab03      	add	r3, sp, #12
 800d2c0:	4805      	ldr	r0, [pc, #20]	; (800d2d8 <fiprintf+0x20>)
 800d2c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2c6:	6800      	ldr	r0, [r0, #0]
 800d2c8:	9301      	str	r3, [sp, #4]
 800d2ca:	f7ff fd03 	bl	800ccd4 <_vfiprintf_r>
 800d2ce:	b002      	add	sp, #8
 800d2d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2d4:	b003      	add	sp, #12
 800d2d6:	4770      	bx	lr
 800d2d8:	24000174 	.word	0x24000174

0800d2dc <abort>:
 800d2dc:	b508      	push	{r3, lr}
 800d2de:	2006      	movs	r0, #6
 800d2e0:	f000 f82c 	bl	800d33c <raise>
 800d2e4:	2001      	movs	r0, #1
 800d2e6:	f7f3 fdc1 	bl	8000e6c <_exit>

0800d2ea <_raise_r>:
 800d2ea:	291f      	cmp	r1, #31
 800d2ec:	b538      	push	{r3, r4, r5, lr}
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	460d      	mov	r5, r1
 800d2f2:	d904      	bls.n	800d2fe <_raise_r+0x14>
 800d2f4:	2316      	movs	r3, #22
 800d2f6:	6003      	str	r3, [r0, #0]
 800d2f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2fc:	bd38      	pop	{r3, r4, r5, pc}
 800d2fe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d300:	b112      	cbz	r2, 800d308 <_raise_r+0x1e>
 800d302:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d306:	b94b      	cbnz	r3, 800d31c <_raise_r+0x32>
 800d308:	4620      	mov	r0, r4
 800d30a:	f000 f831 	bl	800d370 <_getpid_r>
 800d30e:	462a      	mov	r2, r5
 800d310:	4601      	mov	r1, r0
 800d312:	4620      	mov	r0, r4
 800d314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d318:	f000 b818 	b.w	800d34c <_kill_r>
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d00a      	beq.n	800d336 <_raise_r+0x4c>
 800d320:	1c59      	adds	r1, r3, #1
 800d322:	d103      	bne.n	800d32c <_raise_r+0x42>
 800d324:	2316      	movs	r3, #22
 800d326:	6003      	str	r3, [r0, #0]
 800d328:	2001      	movs	r0, #1
 800d32a:	e7e7      	b.n	800d2fc <_raise_r+0x12>
 800d32c:	2400      	movs	r4, #0
 800d32e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d332:	4628      	mov	r0, r5
 800d334:	4798      	blx	r3
 800d336:	2000      	movs	r0, #0
 800d338:	e7e0      	b.n	800d2fc <_raise_r+0x12>
	...

0800d33c <raise>:
 800d33c:	4b02      	ldr	r3, [pc, #8]	; (800d348 <raise+0xc>)
 800d33e:	4601      	mov	r1, r0
 800d340:	6818      	ldr	r0, [r3, #0]
 800d342:	f7ff bfd2 	b.w	800d2ea <_raise_r>
 800d346:	bf00      	nop
 800d348:	24000174 	.word	0x24000174

0800d34c <_kill_r>:
 800d34c:	b538      	push	{r3, r4, r5, lr}
 800d34e:	4d07      	ldr	r5, [pc, #28]	; (800d36c <_kill_r+0x20>)
 800d350:	2300      	movs	r3, #0
 800d352:	4604      	mov	r4, r0
 800d354:	4608      	mov	r0, r1
 800d356:	4611      	mov	r1, r2
 800d358:	602b      	str	r3, [r5, #0]
 800d35a:	f7f3 fd77 	bl	8000e4c <_kill>
 800d35e:	1c43      	adds	r3, r0, #1
 800d360:	d102      	bne.n	800d368 <_kill_r+0x1c>
 800d362:	682b      	ldr	r3, [r5, #0]
 800d364:	b103      	cbz	r3, 800d368 <_kill_r+0x1c>
 800d366:	6023      	str	r3, [r4, #0]
 800d368:	bd38      	pop	{r3, r4, r5, pc}
 800d36a:	bf00      	nop
 800d36c:	24002968 	.word	0x24002968

0800d370 <_getpid_r>:
 800d370:	f7f3 bd64 	b.w	8000e3c <_getpid>

0800d374 <_init>:
 800d374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d376:	bf00      	nop
 800d378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d37a:	bc08      	pop	{r3}
 800d37c:	469e      	mov	lr, r3
 800d37e:	4770      	bx	lr

0800d380 <_fini>:
 800d380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d382:	bf00      	nop
 800d384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d386:	bc08      	pop	{r3}
 800d388:	469e      	mov	lr, r3
 800d38a:	4770      	bx	lr
